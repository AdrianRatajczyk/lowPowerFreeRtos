
out/mg-stm32l_acquisition_supervisor.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__text_start>:
 8000000:	20001308 	.word	0x20001308
 8000004:	08000149 	.word	0x08000149
 8000008:	080004c5 	.word	0x080004c5
 800000c:	080004c5 	.word	0x080004c5
 8000010:	080004c5 	.word	0x080004c5
 8000014:	080004c5 	.word	0x080004c5
 8000018:	080004c5 	.word	0x080004c5
 800001c:	080004c5 	.word	0x080004c5
 8000020:	080004c5 	.word	0x080004c5
 8000024:	080004c5 	.word	0x080004c5
 8000028:	080004c5 	.word	0x080004c5
 800002c:	08001335 	.word	0x08001335
 8000030:	080004c5 	.word	0x080004c5
 8000034:	080004c5 	.word	0x080004c5
 8000038:	080013dd 	.word	0x080013dd
 800003c:	08001419 	.word	0x08001419
 8000040:	080004c5 	.word	0x080004c5
 8000044:	080004c5 	.word	0x080004c5
 8000048:	080004c5 	.word	0x080004c5
 800004c:	080004c5 	.word	0x080004c5
 8000050:	080004c5 	.word	0x080004c5
 8000054:	080004c5 	.word	0x080004c5
 8000058:	080004c5 	.word	0x080004c5
 800005c:	080004c5 	.word	0x080004c5
 8000060:	080004c5 	.word	0x080004c5
 8000064:	080004c5 	.word	0x080004c5
 8000068:	080004c5 	.word	0x080004c5
 800006c:	080004c5 	.word	0x080004c5
 8000070:	080004c5 	.word	0x080004c5
 8000074:	080004c5 	.word	0x080004c5
 8000078:	08002f55 	.word	0x08002f55
 800007c:	080004c5 	.word	0x080004c5
 8000080:	080004c5 	.word	0x080004c5
 8000084:	080004c5 	.word	0x080004c5
 8000088:	080004c5 	.word	0x080004c5
 800008c:	080004c5 	.word	0x080004c5
 8000090:	080004c5 	.word	0x080004c5
 8000094:	080004c5 	.word	0x080004c5
 8000098:	080004c5 	.word	0x080004c5
 800009c:	080004c5 	.word	0x080004c5
 80000a0:	080004c5 	.word	0x080004c5
 80000a4:	080004c5 	.word	0x080004c5
 80000a8:	080004c5 	.word	0x080004c5
 80000ac:	080004c5 	.word	0x080004c5
 80000b0:	080004c5 	.word	0x080004c5
 80000b4:	080004c5 	.word	0x080004c5
 80000b8:	080004c5 	.word	0x080004c5
 80000bc:	080004c5 	.word	0x080004c5
 80000c0:	080004c5 	.word	0x080004c5
 80000c4:	080004c5 	.word	0x080004c5
 80000c8:	080004c5 	.word	0x080004c5
 80000cc:	080004c5 	.word	0x080004c5
 80000d0:	080004c5 	.word	0x080004c5
 80000d4:	08002f91 	.word	0x08002f91
 80000d8:	080004c5 	.word	0x080004c5
 80000dc:	080004c5 	.word	0x080004c5
 80000e0:	080004c5 	.word	0x080004c5
 80000e4:	080004c5 	.word	0x080004c5
 80000e8:	080004c5 	.word	0x080004c5
 80000ec:	08002a0d 	.word	0x08002a0d
 80000f0:	080004c5 	.word	0x080004c5

080000f4 <__do_global_dtors_aux>:
 80000f4:	b510      	push	{r4, lr}
 80000f6:	4c05      	ldr	r4, [pc, #20]	; (800010c <__do_global_dtors_aux+0x18>)
 80000f8:	7823      	ldrb	r3, [r4, #0]
 80000fa:	b933      	cbnz	r3, 800010a <__do_global_dtors_aux+0x16>
 80000fc:	4804      	ldr	r0, [pc, #16]	; (8000110 <__do_global_dtors_aux+0x1c>)
 80000fe:	b110      	cbz	r0, 8000106 <__do_global_dtors_aux+0x12>
 8000100:	4804      	ldr	r0, [pc, #16]	; (8000114 <__do_global_dtors_aux+0x20>)
 8000102:	f3af 8000 	nop.w
 8000106:	2101      	movs	r1, #1
 8000108:	7021      	strb	r1, [r4, #0]
 800010a:	bd10      	pop	{r4, pc}
 800010c:	20000858 	.word	0x20000858
 8000110:	00000000 	.word	0x00000000
 8000114:	080040a4 	.word	0x080040a4

08000118 <frame_dummy>:
 8000118:	b508      	push	{r3, lr}
 800011a:	4b06      	ldr	r3, [pc, #24]	; (8000134 <frame_dummy+0x1c>)
 800011c:	b11b      	cbz	r3, 8000126 <frame_dummy+0xe>
 800011e:	4806      	ldr	r0, [pc, #24]	; (8000138 <frame_dummy+0x20>)
 8000120:	4906      	ldr	r1, [pc, #24]	; (800013c <frame_dummy+0x24>)
 8000122:	f3af 8000 	nop.w
 8000126:	4806      	ldr	r0, [pc, #24]	; (8000140 <frame_dummy+0x28>)
 8000128:	6801      	ldr	r1, [r0, #0]
 800012a:	b111      	cbz	r1, 8000132 <frame_dummy+0x1a>
 800012c:	4b05      	ldr	r3, [pc, #20]	; (8000144 <frame_dummy+0x2c>)
 800012e:	b103      	cbz	r3, 8000132 <frame_dummy+0x1a>
 8000130:	4798      	blx	r3
 8000132:	bd08      	pop	{r3, pc}
 8000134:	00000000 	.word	0x00000000
 8000138:	080040a4 	.word	0x080040a4
 800013c:	2000085c 	.word	0x2000085c
 8000140:	20000858 	.word	0x20000858
 8000144:	00000000 	.word	0x00000000

08000148 <Reset_Handler>:

Reset_Handler:

// Initialize the process stack pointer

	ldr		r0, =__process_stack_end
 8000148:	481b      	ldr	r0, [pc, #108]	; (80001b8 <__default_low_level_init+0x4>)
	msr		PSP, r0
 800014a:	f380 8809 	msr	PSP, r0

// Thread mode uses process stack (PSP) and is privileged

	movs	r0, #CONTROL_ALTERNATE_STACK
 800014e:	2002      	movs	r0, #2
	msr		CONTROL, r0
 8000150:	f380 8814 	msr	CONTROL, r0
	isb
 8000154:	f3bf 8f6f 	isb	sy

// Branch to low_level_init_0() function (.data and .bss are not initialized!)

	ldr		r0, =low_level_init_0
 8000158:	4818      	ldr	r0, [pc, #96]	; (80001bc <__default_low_level_init+0x8>)
	blx		r0
 800015a:	4780      	blx	r0

// Initialize sections from data_array (including .data)

	ldr		r4, =__data_array_start
 800015c:	4c18      	ldr	r4, [pc, #96]	; (80001c0 <__default_low_level_init+0xc>)
	ldr		r5, =__data_array_end
 800015e:	4d19      	ldr	r5, [pc, #100]	; (80001c4 <__default_low_level_init+0x10>)

1:	cmp		r4, r5							// outer loop - addresses from data_array
 8000160:	42ac      	cmp	r4, r5
	ittte	lo
 8000162:	bf3d      	ittte	cc
	ldrlo	r1, [r4], #4					// start of source address
 8000164:	f854 1b04 	ldrcc.w	r1, [r4], #4
	ldrlo	r2, [r4], #4					// start of destination address
 8000168:	f854 2b04 	ldrcc.w	r2, [r4], #4
	ldrlo	r3, [r4], #4					// end of destination address
 800016c:	f854 3b04 	ldrcc.w	r3, [r4], #4
	bhs		3f
 8000170:	e007      	bcs.n	8000182 <Reset_Handler+0x3a>

2:	cmp		r2, r3							// inner loop - section initialization
 8000172:	429a      	cmp	r2, r3
	ittt	lo
 8000174:	bf3e      	ittt	cc
	ldrlo	r0, [r1], #4
 8000176:	f851 0b04 	ldrcc.w	r0, [r1], #4
	strlo	r0, [r2], #4
 800017a:	f842 0b04 	strcc.w	r0, [r2], #4
	blo		2b
 800017e:	e7f8      	bcc.n	8000172 <Reset_Handler+0x2a>

	b		1b								// go back to start
 8000180:	e7ee      	b.n	8000160 <Reset_Handler+0x18>

3:

// Zero-init sections from bss_array (including .bss)

	movs	r0, #0
 8000182:	2000      	movs	r0, #0
	ldr		r3, =__bss_array_start
 8000184:	4b10      	ldr	r3, [pc, #64]	; (80001c8 <__default_low_level_init+0x14>)
	ldr		r4, =__bss_array_end
 8000186:	4c11      	ldr	r4, [pc, #68]	; (80001cc <__default_low_level_init+0x18>)

1:	cmp		r3, r4							// outer loop - addresses from data_array
 8000188:	42a3      	cmp	r3, r4
	itte	lo
 800018a:	bf3a      	itte	cc
	ldrlo	r1, [r3], #4					// start of destination address
 800018c:	f853 1b04 	ldrcc.w	r1, [r3], #4
	ldrlo	r2, [r3], #4					// end of destination address
 8000190:	f853 2b04 	ldrcc.w	r2, [r3], #4
	bhs		3f
 8000194:	e005      	bcs.n	80001a2 <Reset_Handler+0x5a>

2:	cmp		r1, r2							// inner loop - section initialization
 8000196:	4291      	cmp	r1, r2
	itt		lo
 8000198:	bf3c      	itt	cc
	strlo	r0, [r1], #4
 800019a:	f841 0b04 	strcc.w	r0, [r1], #4
	blo		2b
 800019e:	e7fa      	bcc.n	8000196 <Reset_Handler+0x4e>

	b		1b								// go back to start
 80001a0:	e7f2      	b.n	8000188 <Reset_Handler+0x40>
3:

// Call C++ constructors for global and static objects

#ifdef __USES_CXX
	ldr		r0, =__libc_init_array
 80001a2:	480b      	ldr	r0, [pc, #44]	; (80001d0 <__default_low_level_init+0x1c>)
	blx		r0
 80001a4:	4780      	blx	r0
#endif

// Branch to low_level_init_1() function

	ldr		r0, =low_level_init_1
 80001a6:	480b      	ldr	r0, [pc, #44]	; (80001d4 <__default_low_level_init+0x20>)
	blx		r0
 80001a8:	4780      	blx	r0

// Branch to main() with link

	ldr		r0, =main
 80001aa:	480b      	ldr	r0, [pc, #44]	; (80001d8 <__default_low_level_init+0x24>)
	blx		r0
 80001ac:	4780      	blx	r0

// Call C++ destructors for global and static objects

#ifdef __USES_CXX
	ldr		r0, =__libc_fini_array
 80001ae:	480b      	ldr	r0, [pc, #44]	; (80001dc <__default_low_level_init+0x28>)
	blx		r0
 80001b0:	4780      	blx	r0
#endif

// On return - loop till the end of the world

	b		.
 80001b2:	e7fe      	b.n	80001b2 <Reset_Handler+0x6a>

080001b4 <__default_low_level_init>:
.thumb
.thumb_func
.global __default_low_level_init

__default_low_level_init:
	bx		lr
 80001b4:	4770      	bx	lr
 80001b6:	0000      	.short	0x0000
 80001b8:	20001708 	.word	0x20001708
 80001bc:	080001b5 	.word	0x080001b5
 80001c0:	080040a4 	.word	0x080040a4
 80001c4:	080040b0 	.word	0x080040b0
 80001c8:	080040b0 	.word	0x080040b0
 80001cc:	080040b8 	.word	0x080040b8
 80001d0:	08003089 	.word	0x08003089
 80001d4:	080001b5 	.word	0x080001b5
 80001d8:	0800220d 	.word	0x0800220d
 80001dc:	0800305d 	.word	0x0800305d

080001e0 <printchar>:

static void printchar(char **str, int c)
{
	extern int putchar(int c);
	
	if (str) {
 80001e0:	b128      	cbz	r0, 80001ee <printchar+0xe>
		**str = c;
 80001e2:	6802      	ldr	r2, [r0, #0]
 80001e4:	7011      	strb	r1, [r2, #0]
		++(*str);
 80001e6:	6802      	ldr	r2, [r0, #0]
 80001e8:	3201      	adds	r2, #1
 80001ea:	6002      	str	r2, [r0, #0]
	}
	else (void)putchar(c);
}
 80001ec:	4770      	bx	lr
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 80001ee:	4608      	mov	r0, r1
 80001f0:	f002 be0e 	b.w	8002e10 <usartSendCharacter>

080001f4 <prints>:

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 80001f4:	2a00      	cmp	r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80001f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001fa:	4604      	mov	r4, r0
 80001fc:	460d      	mov	r5, r1
 80001fe:	4616      	mov	r6, r2
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000200:	dc04      	bgt.n	800020c <prints+0x18>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8000202:	f04f 0820 	mov.w	r8, #32
 8000206:	e011      	b.n	800022c <prints+0x38>

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000208:	3201      	adds	r2, #1
 800020a:	e000      	b.n	800020e <prints+0x1a>

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 800020c:	2200      	movs	r2, #0
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800020e:	5ca9      	ldrb	r1, [r5, r2]
 8000210:	2900      	cmp	r1, #0
 8000212:	d1f9      	bne.n	8000208 <prints+0x14>
		if (len >= width) width = 0;
 8000214:	42b2      	cmp	r2, r6
		else width -= len;
 8000216:	bfb4      	ite	lt
 8000218:	ebc2 0606 	rsblt	r6, r2, r6

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 800021c:	460e      	movge	r6, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 800021e:	f013 0f02 	tst.w	r3, #2
 8000222:	bf0c      	ite	eq
 8000224:	f04f 0820 	moveq.w	r8, #32
 8000228:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 800022c:	07db      	lsls	r3, r3, #31
 800022e:	d40c      	bmi.n	800024a <prints+0x56>
 8000230:	4637      	mov	r7, r6
 8000232:	e004      	b.n	800023e <prints+0x4a>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
 8000234:	4620      	mov	r0, r4
 8000236:	4641      	mov	r1, r8
 8000238:	f7ff ffd2 	bl	80001e0 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 800023c:	3f01      	subs	r7, #1
 800023e:	2f00      	cmp	r7, #0
 8000240:	dcf8      	bgt.n	8000234 <prints+0x40>
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 8000242:	ea26 77e6 	bic.w	r7, r6, r6, asr #31
 8000246:	1bf6      	subs	r6, r6, r7
 8000248:	e005      	b.n	8000256 <prints+0x62>
{
	register int pc = 0, padchar = ' ';
 800024a:	2700      	movs	r7, #0
 800024c:	e003      	b.n	8000256 <prints+0x62>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
 800024e:	4620      	mov	r0, r4
 8000250:	f7ff ffc6 	bl	80001e0 <printchar>
		++pc;
 8000254:	3701      	adds	r7, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000256:	f815 1b01 	ldrb.w	r1, [r5], #1
 800025a:	2900      	cmp	r1, #0
 800025c:	d1f7      	bne.n	800024e <prints+0x5a>
 800025e:	4635      	mov	r5, r6
 8000260:	e004      	b.n	800026c <prints+0x78>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
 8000262:	4620      	mov	r0, r4
 8000264:	4641      	mov	r1, r8
 8000266:	f7ff ffbb 	bl	80001e0 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 800026a:	3d01      	subs	r5, #1
 800026c:	2d00      	cmp	r5, #0
 800026e:	dcf8      	bgt.n	8000262 <prints+0x6e>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 8000270:	2e00      	cmp	r6, #0
 8000272:	bfac      	ite	ge
 8000274:	19b8      	addge	r0, r7, r6
 8000276:	1c38      	addlt	r0, r7, #0
}
 8000278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800027c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800027c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000280:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000282:	4605      	mov	r5, r0
 8000284:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 8000286:	4608      	mov	r0, r1

	if (i == 0) {
 8000288:	b959      	cbnz	r1, 80002a2 <printi+0x26>
		print_buf[0] = '0';
 800028a:	2330      	movs	r3, #48	; 0x30
 800028c:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
 8000290:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 8000294:	4628      	mov	r0, r5
 8000296:	a901      	add	r1, sp, #4
 8000298:	463a      	mov	r2, r7
 800029a:	4633      	mov	r3, r6
 800029c:	f7ff ffaa 	bl	80001f4 <prints>
 80002a0:	e038      	b.n	8000314 <printi+0x98>
	}

	if (sg && b == 10 && i < 0) {
 80002a2:	b133      	cbz	r3, 80002b2 <printi+0x36>
 80002a4:	2a0a      	cmp	r2, #10
 80002a6:	d106      	bne.n	80002b6 <printi+0x3a>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	da04      	bge.n	80002b6 <printi+0x3a>
		neg = 1;
		u = -i;
 80002ac:	4248      	negs	r0, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 80002ae:	2401      	movs	r4, #1
 80002b0:	e002      	b.n	80002b8 <printi+0x3c>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80002b2:	461c      	mov	r4, r3
 80002b4:	e000      	b.n	80002b8 <printi+0x3c>
 80002b6:	2400      	movs	r4, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 80002b8:	2300      	movs	r3, #0
 80002ba:	a904      	add	r1, sp, #16
 80002bc:	f801 3d01 	strb.w	r3, [r1, #-1]!

	while (u) {
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
 80002c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002c2:	f1a3 0e3a 	sub.w	lr, r3, #58	; 0x3a
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 80002c6:	e00a      	b.n	80002de <printi+0x62>
		t = u % b;
 80002c8:	fbb0 f3f2 	udiv	r3, r0, r2
 80002cc:	fb02 0013 	mls	r0, r2, r3, r0
		if( t >= 10 )
 80002d0:	2809      	cmp	r0, #9
			t += letbase - '0' - 10;
 80002d2:	bfc8      	it	gt
 80002d4:	4470      	addgt	r0, lr
		*--s = t + '0';
 80002d6:	3030      	adds	r0, #48	; 0x30
 80002d8:	f801 0d01 	strb.w	r0, [r1, #-1]!
		u /= b;
 80002dc:	4618      	mov	r0, r3
 80002de:	4688      	mov	r8, r1
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d1f1      	bne.n	80002c8 <printi+0x4c>
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
 80002e4:	b17c      	cbz	r4, 8000306 <printi+0x8a>
		if( width && (pad & PAD_ZERO) ) {
 80002e6:	b147      	cbz	r7, 80002fa <printi+0x7e>
 80002e8:	07b2      	lsls	r2, r6, #30
 80002ea:	d506      	bpl.n	80002fa <printi+0x7e>
			printchar (out, '-');
 80002ec:	4628      	mov	r0, r5
 80002ee:	212d      	movs	r1, #45	; 0x2d
 80002f0:	f7ff ff76 	bl	80001e0 <printchar>
			++pc;
			--width;
 80002f4:	3f01      	subs	r7, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 80002f6:	2401      	movs	r4, #1
			--width;
 80002f8:	e005      	b.n	8000306 <printi+0x8a>
		}
		else {
			*--s = '-';
 80002fa:	232d      	movs	r3, #45	; 0x2d
 80002fc:	f101 38ff 	add.w	r8, r1, #4294967295
 8000300:	f801 3c01 	strb.w	r3, [r1, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000304:	2400      	movs	r4, #0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8000306:	4628      	mov	r0, r5
 8000308:	4641      	mov	r1, r8
 800030a:	463a      	mov	r2, r7
 800030c:	4633      	mov	r3, r6
 800030e:	f7ff ff71 	bl	80001f4 <prints>
 8000312:	1820      	adds	r0, r4, r0
}
 8000314:	b004      	add	sp, #16
 8000316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800031c <print>:

static int print(char **out, const char *format, va_list args )
{
 800031c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000320:	b088      	sub	sp, #32
 8000322:	4606      	mov	r6, r0
 8000324:	460d      	mov	r5, r1
 8000326:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 8000328:	2400      	movs	r4, #0
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
 800032a:	270a      	movs	r7, #10
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 800032c:	e084      	b.n	8000438 <print+0x11c>
		if (*format == '%') {
 800032e:	2b25      	cmp	r3, #37	; 0x25
 8000330:	d17c      	bne.n	800042c <print+0x110>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 8000332:	786b      	ldrb	r3, [r5, #1]
 8000334:	2b00      	cmp	r3, #0
 8000336:	f000 8083 	beq.w	8000440 <print+0x124>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 800033a:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 800033c:	2b25      	cmp	r3, #37	; 0x25
 800033e:	d074      	beq.n	800042a <print+0x10e>
			if (*format == '-') {
 8000340:	2b2d      	cmp	r3, #45	; 0x2d
 8000342:	d102      	bne.n	800034a <print+0x2e>
				++format;
 8000344:	1caa      	adds	r2, r5, #2
				pad = PAD_RIGHT;
 8000346:	2301      	movs	r3, #1
 8000348:	e003      	b.n	8000352 <print+0x36>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	e001      	b.n	8000352 <print+0x36>
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	4611      	mov	r1, r2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8000354:	7808      	ldrb	r0, [r1, #0]
				++format;
				pad |= PAD_ZERO;
 8000356:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8000358:	2830      	cmp	r0, #48	; 0x30
 800035a:	d0f8      	beq.n	800034e <print+0x32>
 800035c:	2200      	movs	r2, #0
 800035e:	e001      	b.n	8000364 <print+0x48>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
 8000360:	fb07 c202 	mla	r2, r7, r2, ip
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000364:	7808      	ldrb	r0, [r1, #0]
				width *= 10;
				width += *format - '0';
 8000366:	460d      	mov	r5, r1
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000368:	f1a0 0c30 	sub.w	ip, r0, #48	; 0x30
 800036c:	fa5f f88c 	uxtb.w	r8, ip
 8000370:	3101      	adds	r1, #1
 8000372:	f1b8 0f09 	cmp.w	r8, #9
 8000376:	d9f3      	bls.n	8000360 <print+0x44>
				width *= 10;
				width += *format - '0';
			}
			if (*format == '*') {
 8000378:	282a      	cmp	r0, #42	; 0x2a
 800037a:	d104      	bne.n	8000386 <print+0x6a>
				++format;
				width = va_arg( args, int );
 800037c:	9a05      	ldr	r2, [sp, #20]
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if (*format == '*') {
				++format;
 800037e:	460d      	mov	r5, r1
				width = va_arg( args, int );
 8000380:	1d11      	adds	r1, r2, #4
 8000382:	6812      	ldr	r2, [r2, #0]
 8000384:	9105      	str	r1, [sp, #20]
			}
			if( *format == 's' ) {
 8000386:	7829      	ldrb	r1, [r5, #0]
 8000388:	2973      	cmp	r1, #115	; 0x73
 800038a:	d109      	bne.n	80003a0 <print+0x84>
				register char *s = (char *)va_arg( args, int );
 800038c:	9905      	ldr	r1, [sp, #20]
 800038e:	1d08      	adds	r0, r1, #4
 8000390:	9005      	str	r0, [sp, #20]
 8000392:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 8000394:	482e      	ldr	r0, [pc, #184]	; (8000450 <print+0x134>)
 8000396:	2900      	cmp	r1, #0
 8000398:	bf08      	it	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	4630      	mov	r0, r6
 800039e:	e041      	b.n	8000424 <print+0x108>
				continue;
			}
			if( *format == 'd' ) {
 80003a0:	2964      	cmp	r1, #100	; 0x64
 80003a2:	d10e      	bne.n	80003c2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80003a4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80003a8:	9905      	ldr	r1, [sp, #20]
 80003aa:	2361      	movs	r3, #97	; 0x61
 80003ac:	9302      	str	r3, [sp, #8]
 80003ae:	1d08      	adds	r0, r1, #4
 80003b0:	6809      	ldr	r1, [r1, #0]
 80003b2:	9005      	str	r0, [sp, #20]
 80003b4:	220a      	movs	r2, #10
 80003b6:	4630      	mov	r0, r6
 80003b8:	2301      	movs	r3, #1
 80003ba:	f7ff ff5f 	bl	800027c <printi>
 80003be:	1824      	adds	r4, r4, r0
				continue;
 80003c0:	e039      	b.n	8000436 <print+0x11a>
			}
			if( *format == 'x' ) {
 80003c2:	2978      	cmp	r1, #120	; 0x78
 80003c4:	d106      	bne.n	80003d4 <print+0xb8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80003c6:	9905      	ldr	r1, [sp, #20]
 80003c8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80003cc:	1d08      	adds	r0, r1, #4
 80003ce:	9005      	str	r0, [sp, #20]
 80003d0:	2361      	movs	r3, #97	; 0x61
 80003d2:	e007      	b.n	80003e4 <print+0xc8>
				continue;
			}
			if( *format == 'X' ) {
 80003d4:	2958      	cmp	r1, #88	; 0x58
 80003d6:	d10a      	bne.n	80003ee <print+0xd2>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80003d8:	9905      	ldr	r1, [sp, #20]
 80003da:	e88d 000c 	stmia.w	sp, {r2, r3}
 80003de:	1d08      	adds	r0, r1, #4
 80003e0:	9005      	str	r0, [sp, #20]
 80003e2:	2341      	movs	r3, #65	; 0x41
 80003e4:	9302      	str	r3, [sp, #8]
 80003e6:	4630      	mov	r0, r6
 80003e8:	6809      	ldr	r1, [r1, #0]
 80003ea:	2210      	movs	r2, #16
 80003ec:	e00b      	b.n	8000406 <print+0xea>
				continue;
			}
			if( *format == 'u' ) {
 80003ee:	2975      	cmp	r1, #117	; 0x75
 80003f0:	d10b      	bne.n	800040a <print+0xee>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80003f2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80003f6:	9905      	ldr	r1, [sp, #20]
 80003f8:	2361      	movs	r3, #97	; 0x61
 80003fa:	9302      	str	r3, [sp, #8]
 80003fc:	1d08      	adds	r0, r1, #4
 80003fe:	6809      	ldr	r1, [r1, #0]
 8000400:	9005      	str	r0, [sp, #20]
 8000402:	220a      	movs	r2, #10
 8000404:	4630      	mov	r0, r6
 8000406:	2300      	movs	r3, #0
 8000408:	e7d7      	b.n	80003ba <print+0x9e>
				continue;
			}
			if( *format == 'c' ) {
 800040a:	2963      	cmp	r1, #99	; 0x63
 800040c:	d113      	bne.n	8000436 <print+0x11a>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800040e:	9905      	ldr	r1, [sp, #20]
 8000410:	1d08      	adds	r0, r1, #4
 8000412:	6809      	ldr	r1, [r1, #0]
 8000414:	9005      	str	r0, [sp, #20]
 8000416:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 800041a:	2100      	movs	r1, #0
 800041c:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
 8000420:	4630      	mov	r0, r6
 8000422:	a907      	add	r1, sp, #28
 8000424:	f7ff fee6 	bl	80001f4 <prints>
 8000428:	e7c9      	b.n	80003be <print+0xa2>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 800042a:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 800042c:	7829      	ldrb	r1, [r5, #0]
 800042e:	4630      	mov	r0, r6
 8000430:	f7ff fed6 	bl	80001e0 <printchar>
			++pc;
 8000434:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8000436:	3501      	adds	r5, #1
 8000438:	782b      	ldrb	r3, [r5, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	f47f af77 	bne.w	800032e <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8000440:	b116      	cbz	r6, 8000448 <print+0x12c>
 8000442:	6833      	ldr	r3, [r6, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
 8000448:	4620      	mov	r0, r4
 800044a:	b008      	add	sp, #32
 800044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000450:	08003d48 	.word	0x08003d48

08000454 <printf>:

int printf(const char *format, ...)
{
 8000454:	b40f      	push	{r0, r1, r2, r3}
 8000456:	b507      	push	{r0, r1, r2, lr}
 8000458:	aa04      	add	r2, sp, #16
 800045a:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
        return print( 0, format, args );
 800045e:	2000      	movs	r0, #0

int printf(const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
 8000460:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
 8000462:	f7ff ff5b 	bl	800031c <print>
}
 8000466:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
 800046a:	b004      	add	sp, #16
 800046c:	4770      	bx	lr

0800046e <sprintf>:

int sprintf(char *out, const char *format, ...)
{
 800046e:	b40e      	push	{r1, r2, r3}
 8000470:	b50f      	push	{r0, r1, r2, r3, lr}
 8000472:	aa05      	add	r2, sp, #20
 8000474:	f852 1b04 	ldr.w	r1, [r2], #4
 8000478:	9001      	str	r0, [sp, #4]
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 800047a:	a801      	add	r0, sp, #4

int sprintf(char *out, const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
 800047c:	9203      	str	r2, [sp, #12]
        return print( &out, format, args );
 800047e:	f7ff ff4d 	bl	800031c <print>
}
 8000482:	b004      	add	sp, #16
 8000484:	f85d eb04 	ldr.w	lr, [sp], #4
 8000488:	b003      	add	sp, #12
 800048a:	4770      	bx	lr

0800048c <vsprintf>:

int vsprintf(char *out, const char *format, va_list args)
{
 800048c:	b507      	push	{r0, r1, r2, lr}
 800048e:	ab02      	add	r3, sp, #8
 8000490:	f843 0d04 	str.w	r0, [r3, #-4]!
		return print(&out, format, args);
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff41 	bl	800031c <print>
}
 800049a:	bd0e      	pop	{r1, r2, r3, pc}

0800049c <_sbrk_r>:
	static char *current_heap_end = &__heap_start;
	char *previous_heap_end;

	(void)r;								// suppress warning

	previous_heap_end = current_heap_end;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <_sbrk_r+0x1c>)

	if (current_heap_end + size > &__heap_end)	// is there enough space on the heap left?
 800049e:	4a07      	ldr	r2, [pc, #28]	; (80004bc <_sbrk_r+0x20>)
	static char *current_heap_end = &__heap_start;
	char *previous_heap_end;

	(void)r;								// suppress warning

	previous_heap_end = current_heap_end;
 80004a0:	6818      	ldr	r0, [r3, #0]

	if (current_heap_end + size > &__heap_end)	// is there enough space on the heap left?
 80004a2:	1841      	adds	r1, r0, r1
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d905      	bls.n	80004b4 <_sbrk_r+0x18>
	{
		errno = ENOMEM;						// not enough memory left
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <_sbrk_r+0x24>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;				// return immediatelly
 80004ae:	f04f 30ff 	mov.w	r0, #4294967295
 80004b2:	4770      	bx	lr
	}

	current_heap_end += size;				// increase data space
 80004b4:	6019      	str	r1, [r3, #0]

	return (caddr_t)previous_heap_end;		// return requested data space
}
 80004b6:	4770      	bx	lr
 80004b8:	20000004 	.word	0x20000004
 80004bc:	20004000 	.word	0x20004000
 80004c0:	20000f00 	.word	0x20000f00

080004c4 <__Default_Handler>:
 * own handler defined.
*/

void __Default_Handler(void) __attribute__ ((interrupt));
void __Default_Handler(void)
{
 80004c4:	4668      	mov	r0, sp
 80004c6:	f020 0107 	bic.w	r1, r0, #7
 80004ca:	468d      	mov	sp, r1
 80004cc:	e7fe      	b.n	80004cc <__Default_Handler+0x8>

080004ce <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80004ce:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004d2:	f04f 32ff 	mov.w	r2, #4294967295
 80004d6:	6082      	str	r2, [r0, #8]
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80004d8:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 80004da:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 80004dc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80004de:	2300      	movs	r3, #0
 80004e0:	6003      	str	r3, [r0, #0]
}
 80004e2:	4770      	bx	lr

080004e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	6103      	str	r3, [r0, #16]
}
 80004e8:	4770      	bx	lr

080004ea <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80004ea:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80004ec:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80004ee:	608b      	str	r3, [r1, #8]
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;

	pxNewListItem->pxNext = pxIndex->pxNext;
 80004f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80004f6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80004f8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80004fa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80004fc:	6803      	ldr	r3, [r0, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	6003      	str	r3, [r0, #0]
}
 8000502:	4770      	bx	lr

08000504 <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8000504:	680a      	ldr	r2, [r1, #0]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8000506:	b510      	push	{r4, lr}
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000508:	1c53      	adds	r3, r2, #1
 800050a:	d101      	bne.n	8000510 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800050c:	6903      	ldr	r3, [r0, #16]
 800050e:	e007      	b.n	8000520 <vListInsert+0x1c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000510:	f100 0308 	add.w	r3, r0, #8
 8000514:	e000      	b.n	8000518 <vListInsert+0x14>
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	685c      	ldr	r4, [r3, #4]
 800051a:	6824      	ldr	r4, [r4, #0]
 800051c:	4294      	cmp	r4, r2
 800051e:	d9fa      	bls.n	8000516 <vListInsert+0x12>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000520:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000522:	6108      	str	r0, [r1, #16]
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8000524:	6091      	str	r1, [r2, #8]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000526:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
 8000528:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 800052a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800052c:	6803      	ldr	r3, [r0, #0]
 800052e:	3301      	adds	r3, #1
 8000530:	6003      	str	r3, [r0, #0]
}
 8000532:	bd10      	pop	{r4, pc}

08000534 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000534:	6843      	ldr	r3, [r0, #4]
 8000536:	6882      	ldr	r2, [r0, #8]
 8000538:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800053a:	6882      	ldr	r2, [r0, #8]
 800053c:	6053      	str	r3, [r2, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 800053e:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000540:	6859      	ldr	r1, [r3, #4]
 8000542:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000544:	bf08      	it	eq
 8000546:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8000548:	2200      	movs	r2, #0
 800054a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	3a01      	subs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	4770      	bx	lr

08000554 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8000554:	b530      	push	{r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000556:	6804      	ldr	r4, [r0, #0]
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8000558:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800055a:	b174      	cbz	r4, 800057a <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 800055c:	68c5      	ldr	r5, [r0, #12]
 800055e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000560:	18ad      	adds	r5, r5, r2
 8000562:	60c5      	str	r5, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8000564:	6840      	ldr	r0, [r0, #4]
 8000566:	4285      	cmp	r5, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8000568:	bf28      	it	cs
 800056a:	60dc      	strcs	r4, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	4608      	mov	r0, r1
 8000570:	4619      	mov	r1, r3
	}
}
 8000572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8000576:	f003 b84d 	b.w	8003614 <memcpy>
 800057a:	bd30      	pop	{r4, r5, pc}

0800057c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 800057c:	b538      	push	{r3, r4, r5, lr}
 800057e:	4604      	mov	r4, r0
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000580:	f104 0524 	add.w	r5, r4, #36	; 0x24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000584:	f000 ff12 	bl	80013ac <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000588:	e00a      	b.n	80005a0 <prvUnlockQueue+0x24>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800058a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800058c:	b15b      	cbz	r3, 80005a6 <prvUnlockQueue+0x2a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800058e:	4628      	mov	r0, r5
 8000590:	f000 fdee 	bl	8001170 <xTaskRemoveFromEventList>
 8000594:	b108      	cbz	r0, 800059a <prvUnlockQueue+0x1e>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8000596:	f000 fe53 	bl	8001240 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 800059a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800059c:	3b01      	subs	r3, #1
 800059e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80005a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	dcf1      	bgt.n	800058a <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80005ac:	f000 ff0a 	bl	80013c4 <vPortExitCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005b0:	f104 0510 	add.w	r5, r4, #16
		pxQueue->xTxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80005b4:	f000 fefa 	bl	80013ac <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80005b8:	e00a      	b.n	80005d0 <prvUnlockQueue+0x54>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005ba:	6923      	ldr	r3, [r4, #16]
 80005bc:	b15b      	cbz	r3, 80005d6 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005be:	4628      	mov	r0, r5
 80005c0:	f000 fdd6 	bl	8001170 <xTaskRemoveFromEventList>
 80005c4:	b108      	cbz	r0, 80005ca <prvUnlockQueue+0x4e>
				{
					vTaskMissedYield();
 80005c6:	f000 fe3b 	bl	8001240 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80005ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005cc:	3b01      	subs	r3, #1
 80005ce:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80005d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dcf1      	bgt.n	80005ba <prvUnlockQueue+0x3e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80005dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80005e0:	f000 bef0 	b.w	80013c4 <vPortExitCritical>

080005e4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 80005e4:	b538      	push	{r3, r4, r5, lr}
 80005e6:	4613      	mov	r3, r2
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 80005e8:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 80005ea:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 80005ec:	b932      	cbnz	r2, 80005fc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80005ee:	6805      	ldr	r5, [r0, #0]
 80005f0:	bb05      	cbnz	r5, 8000634 <prvCopyDataToQueue+0x50>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80005f2:	6840      	ldr	r0, [r0, #4]
 80005f4:	f000 fe64 	bl	80012c0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80005f8:	6065      	str	r5, [r4, #4]
 80005fa:	e01b      	b.n	8000634 <prvCopyDataToQueue+0x50>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 80005fc:	b963      	cbnz	r3, 8000618 <prvCopyDataToQueue+0x34>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80005fe:	6880      	ldr	r0, [r0, #8]
 8000600:	f003 f808 	bl	8003614 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000604:	68a2      	ldr	r2, [r4, #8]
 8000606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000608:	18d3      	adds	r3, r2, r3
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800060a:	6862      	ldr	r2, [r4, #4]
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800060c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800060e:	4293      	cmp	r3, r2
 8000610:	d310      	bcc.n	8000634 <prvCopyDataToQueue+0x50>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	60a3      	str	r3, [r4, #8]
 8000616:	e00d      	b.n	8000634 <prvCopyDataToQueue+0x50>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000618:	68c0      	ldr	r0, [r0, #12]
 800061a:	f002 fffb 	bl	8003614 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 800061e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000620:	68e2      	ldr	r2, [r4, #12]
 8000622:	425b      	negs	r3, r3
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8000624:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8000626:	18d2      	adds	r2, r2, r3
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8000628:	428a      	cmp	r2, r1
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 800062a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 800062c:	d202      	bcs.n	8000634 <prvCopyDataToQueue+0x50>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800062e:	6862      	ldr	r2, [r4, #4]
 8000630:	18d3      	adds	r3, r2, r3
 8000632:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8000634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000636:	3301      	adds	r3, #1
 8000638:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}

0800063c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
 800063c:	b538      	push	{r3, r4, r5, lr}
 800063e:	4604      	mov	r4, r0
 8000640:	460d      	mov	r5, r1
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000642:	f000 feb3 	bl	80013ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800064a:	6c22      	ldr	r2, [r4, #64]	; 0x40
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800064c:	60a3      	str	r3, [r4, #8]
{
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800064e:	fb01 3002 	mla	r0, r1, r2, r3
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8000652:	3901      	subs	r1, #1
 8000654:	fb02 3301 	mla	r3, r2, r1, r3
{
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000658:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 800065a:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800065c:	2000      	movs	r0, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8000662:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000664:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000666:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8000668:	b955      	cbnz	r5, 8000680 <xQueueGenericReset+0x44>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800066a:	6923      	ldr	r3, [r4, #16]
 800066c:	b183      	cbz	r3, 8000690 <xQueueGenericReset+0x54>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800066e:	f104 0010 	add.w	r0, r4, #16
 8000672:	f000 fd7d 	bl	8001170 <xTaskRemoveFromEventList>
 8000676:	2801      	cmp	r0, #1
 8000678:	d10a      	bne.n	8000690 <xQueueGenericReset+0x54>
				{
					portYIELD_WITHIN_API();
 800067a:	f000 fe8f 	bl	800139c <vPortYieldFromISR>
 800067e:	e007      	b.n	8000690 <xQueueGenericReset+0x54>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000680:	f104 0010 	add.w	r0, r4, #16
 8000684:	f7ff ff23 	bl	80004ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
 8000688:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800068c:	f7ff ff1f 	bl	80004ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000690:	f000 fe98 	bl	80013c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000694:	2001      	movs	r0, #1
 8000696:	bd38      	pop	{r3, r4, r5, pc}

08000698 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8000698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800069c:	4604      	mov	r4, r0
 800069e:	460e      	mov	r6, r1
 80006a0:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80006a2:	b1d0      	cbz	r0, 80006da <xQueueGenericCreate+0x42>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80006a4:	2050      	movs	r0, #80	; 0x50
 80006a6:	f000 fec9 	bl	800143c <pvPortMalloc>
 80006aa:	4605      	mov	r5, r0
		if( pxNewQueue != NULL )
 80006ac:	b1b0      	cbz	r0, 80006dc <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 80006ae:	fb04 f006 	mul.w	r0, r4, r6
 80006b2:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 80006b4:	f000 fec2 	bl	800143c <pvPortMalloc>
 80006b8:	4680      	mov	r8, r0
 80006ba:	6028      	str	r0, [r5, #0]
			if( pxNewQueue->pcHead != NULL )
 80006bc:	b140      	cbz	r0, 80006d0 <xQueueGenericCreate+0x38>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 80006be:	63ec      	str	r4, [r5, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 80006c0:	642e      	str	r6, [r5, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 80006c2:	4628      	mov	r0, r5
 80006c4:	2101      	movs	r1, #1
 80006c6:	f7ff ffb9 	bl	800063c <xQueueGenericReset>
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 80006ca:	f885 704d 	strb.w	r7, [r5, #77]	; 0x4d
 80006ce:	e005      	b.n	80006dc <xQueueGenericCreate+0x44>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80006d0:	4628      	mov	r0, r5
 80006d2:	f000 febf 	bl	8001454 <vPortFree>

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80006d6:	4645      	mov	r5, r8
 80006d8:	e000      	b.n	80006dc <xQueueGenericCreate+0x44>
 80006da:	4605      	mov	r5, r0
	}

	configASSERT( xReturn );

	return xReturn;
}
 80006dc:	4628      	mov	r0, r5
 80006de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080006e2 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80006e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80006e6:	f04f 0800 	mov.w	r8, #0

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80006ea:	b085      	sub	sp, #20
 80006ec:	4604      	mov	r4, r0
 80006ee:	460d      	mov	r5, r1
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	461f      	mov	r7, r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80006f4:	4646      	mov	r6, r8
 80006f6:	e001      	b.n	80006fc <xQueueGenericSend+0x1a>
			( void ) xTaskResumeAll();

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80006f8:	f04f 0801 	mov.w	r8, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80006fc:	f000 fe56 	bl	80013ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000700:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000704:	429a      	cmp	r2, r3
 8000706:	d212      	bcs.n	800072e <xQueueGenericSend+0x4c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000708:	4620      	mov	r0, r4
 800070a:	4629      	mov	r1, r5
 800070c:	463a      	mov	r2, r7
 800070e:	f7ff ff69 	bl	80005e4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000714:	b13b      	cbz	r3, 8000726 <xQueueGenericSend+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8000716:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800071a:	f000 fd29 	bl	8001170 <xTaskRemoveFromEventList>
 800071e:	2801      	cmp	r0, #1
 8000720:	d101      	bne.n	8000726 <xQueueGenericSend+0x44>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8000722:	f000 fe3b 	bl	800139c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8000726:	f000 fe4d 	bl	80013c4 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800072a:	2001      	movs	r0, #1
 800072c:	e048      	b.n	80007c0 <xQueueGenericSend+0xde>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800072e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000732:	f1b9 0f00 	cmp.w	r9, #0
 8000736:	d103      	bne.n	8000740 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000738:	f000 fe44 	bl	80013c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800073c:	4648      	mov	r0, r9
 800073e:	e03f      	b.n	80007c0 <xQueueGenericSend+0xde>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000740:	f1b8 0f00 	cmp.w	r8, #0
 8000744:	d102      	bne.n	800074c <xQueueGenericSend+0x6a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000746:	a802      	add	r0, sp, #8
 8000748:	f000 fd44 	bl	80011d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
 800074c:	f000 fe3a 	bl	80013c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000750:	f000 fac8 	bl	8000ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000754:	f000 fe2a 	bl	80013ac <vPortEnterCritical>
 8000758:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800075a:	3301      	adds	r3, #1
 800075c:	bf08      	it	eq
 800075e:	6466      	streq	r6, [r4, #68]	; 0x44
 8000760:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000762:	3301      	adds	r3, #1
 8000764:	bf08      	it	eq
 8000766:	64a6      	streq	r6, [r4, #72]	; 0x48
 8000768:	f000 fe2c 	bl	80013c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800076c:	a802      	add	r0, sp, #8
 800076e:	a901      	add	r1, sp, #4
 8000770:	f000 fd3c 	bl	80011ec <xTaskCheckForTimeOut>
 8000774:	b9f0      	cbnz	r0, 80007b4 <xQueueGenericSend+0xd2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8000776:	f000 fe19 	bl	80013ac <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 800077a:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800077e:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
 8000782:	f000 fe1f 	bl	80013c4 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000786:	45c1      	cmp	r9, r8
 8000788:	d10e      	bne.n	80007a8 <xQueueGenericSend+0xc6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800078a:	f104 0010 	add.w	r0, r4, #16
 800078e:	9901      	ldr	r1, [sp, #4]
 8000790:	f000 fccc 	bl	800112c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000794:	4620      	mov	r0, r4
 8000796:	f7ff fef1 	bl	800057c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800079a:	f000 fb25 	bl	8000de8 <xTaskResumeAll>
 800079e:	2800      	cmp	r0, #0
 80007a0:	d1aa      	bne.n	80006f8 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80007a2:	f000 fdfb 	bl	800139c <vPortYieldFromISR>
 80007a6:	e7a7      	b.n	80006f8 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80007a8:	4620      	mov	r0, r4
 80007aa:	f7ff fee7 	bl	800057c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80007ae:	f000 fb1b 	bl	8000de8 <xTaskResumeAll>
 80007b2:	e7a1      	b.n	80006f8 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80007b4:	4620      	mov	r0, r4
 80007b6:	f7ff fee1 	bl	800057c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80007ba:	f000 fb15 	bl	8000de8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80007be:	2000      	movs	r0, #0
		}
	}
}
 80007c0:	b005      	add	sp, #20
 80007c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080007c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
 80007c6:	b570      	push	{r4, r5, r6, lr}
 80007c8:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80007ca:	2050      	movs	r0, #80	; 0x50
 80007cc:	f000 fe36 	bl	800143c <pvPortMalloc>
 80007d0:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 80007d2:	b1e0      	cbz	r0, 800080e <xQueueCreateMutex+0x48>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 80007d4:	2301      	movs	r3, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80007d6:	2500      	movs	r5, #0

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 80007d8:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
			pxNewQueue->pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80007de:	6385      	str	r5, [r0, #56]	; 0x38
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80007e0:	6045      	str	r5, [r0, #4]
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80007e2:	6443      	str	r3, [r0, #68]	; 0x44
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80007e4:	6005      	str	r5, [r0, #0]
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 80007e6:	6483      	str	r3, [r0, #72]	; 0x48
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 80007e8:	6085      	str	r5, [r0, #8]
			pxNewQueue->pcReadFrom = NULL;
 80007ea:	60c5      	str	r5, [r0, #12]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 80007ec:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 80007ee:	f880 604d 	strb.w	r6, [r0, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80007f2:	f100 0010 	add.w	r0, r0, #16
 80007f6:	f7ff fe6a 	bl	80004ce <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80007fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80007fe:	f7ff fe66 	bl	80004ce <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 8000802:	4620      	mov	r0, r4
 8000804:	4629      	mov	r1, r5
 8000806:	462a      	mov	r2, r5
 8000808:	462b      	mov	r3, r5
 800080a:	f7ff ff6a 	bl	80006e2 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
 800080e:	4620      	mov	r0, r4
 8000810:	bd70      	pop	{r4, r5, r6, pc}

08000812 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8000812:	b538      	push	{r3, r4, r5, lr}
 8000814:	4604      	mov	r4, r0
 8000816:	4615      	mov	r5, r2
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000818:	f04f 0050 	mov.w	r0, #80	; 0x50
 800081c:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000820:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000822:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000824:	4290      	cmp	r0, r2
 8000826:	d215      	bcs.n	8000854 <xQueueGenericSendFromISR+0x42>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000828:	461a      	mov	r2, r3
 800082a:	4620      	mov	r0, r4
 800082c:	f7ff feda 	bl	80005e4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8000830:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000832:	3301      	adds	r3, #1
 8000834:	d10a      	bne.n	800084c <xQueueGenericSendFromISR+0x3a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000838:	b173      	cbz	r3, 8000858 <xQueueGenericSendFromISR+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800083a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800083e:	f000 fc97 	bl	8001170 <xTaskRemoveFromEventList>
 8000842:	2301      	movs	r3, #1
 8000844:	b148      	cbz	r0, 800085a <xQueueGenericSendFromISR+0x48>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 8000846:	b145      	cbz	r5, 800085a <xQueueGenericSendFromISR+0x48>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8000848:	602b      	str	r3, [r5, #0]
 800084a:	e006      	b.n	800085a <xQueueGenericSendFromISR+0x48>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800084c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800084e:	3301      	adds	r3, #1
 8000850:	64a3      	str	r3, [r4, #72]	; 0x48
 8000852:	e001      	b.n	8000858 <xQueueGenericSendFromISR+0x46>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000854:	2300      	movs	r3, #0
 8000856:	e000      	b.n	800085a <xQueueGenericSendFromISR+0x48>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
 8000858:	2301      	movs	r3, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd38      	pop	{r3, r4, r5, pc}

08000866 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8000866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800086a:	f04f 0800 	mov.w	r8, #0
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 800086e:	b085      	sub	sp, #20
 8000870:	4604      	mov	r4, r0
 8000872:	460d      	mov	r5, r1
 8000874:	9201      	str	r2, [sp, #4]
 8000876:	461f      	mov	r7, r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8000878:	4646      	mov	r6, r8
 800087a:	e001      	b.n	8000880 <xQueueGenericReceive+0x1a>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800087c:	f04f 0801 	mov.w	r8, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000880:	f000 fd94 	bl	80013ac <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8000884:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000886:	b323      	cbz	r3, 80008d2 <xQueueGenericReceive+0x6c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000888:	4620      	mov	r0, r4
 800088a:	4629      	mov	r1, r5
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 800088c:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800088e:	f7ff fe61 	bl	8000554 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000892:	b987      	cbnz	r7, 80008b6 <xQueueGenericReceive+0x50>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8000894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000896:	3b01      	subs	r3, #1
 8000898:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	b913      	cbnz	r3, 80008a4 <xQueueGenericReceive+0x3e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 800089e:	f000 fcd5 	bl	800124c <xTaskGetCurrentTaskHandle>
 80008a2:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008a4:	6923      	ldr	r3, [r4, #16]
 80008a6:	b183      	cbz	r3, 80008ca <xQueueGenericReceive+0x64>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80008a8:	f104 0010 	add.w	r0, r4, #16
 80008ac:	f000 fc60 	bl	8001170 <xTaskRemoveFromEventList>
 80008b0:	2801      	cmp	r0, #1
 80008b2:	d10a      	bne.n	80008ca <xQueueGenericReceive+0x64>
 80008b4:	e007      	b.n	80008c6 <xQueueGenericReceive+0x60>
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 80008b8:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008ba:	b133      	cbz	r3, 80008ca <xQueueGenericReceive+0x64>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80008c0:	f000 fc56 	bl	8001170 <xTaskRemoveFromEventList>
 80008c4:	b108      	cbz	r0, 80008ca <xQueueGenericReceive+0x64>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80008c6:	f000 fd69 	bl	800139c <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 80008ca:	f000 fd7b 	bl	80013c4 <vPortExitCritical>
				return pdPASS;
 80008ce:	2001      	movs	r0, #1
 80008d0:	e050      	b.n	8000974 <xQueueGenericReceive+0x10e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80008d2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80008d6:	f1b9 0f00 	cmp.w	r9, #0
 80008da:	d103      	bne.n	80008e4 <xQueueGenericReceive+0x7e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80008dc:	f000 fd72 	bl	80013c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80008e0:	4648      	mov	r0, r9
 80008e2:	e047      	b.n	8000974 <xQueueGenericReceive+0x10e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80008e4:	f1b8 0f00 	cmp.w	r8, #0
 80008e8:	d102      	bne.n	80008f0 <xQueueGenericReceive+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80008ea:	a802      	add	r0, sp, #8
 80008ec:	f000 fc72 	bl	80011d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
 80008f0:	f000 fd68 	bl	80013c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80008f4:	f000 f9f6 	bl	8000ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80008f8:	f000 fd58 	bl	80013ac <vPortEnterCritical>
 80008fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008fe:	3301      	adds	r3, #1
 8000900:	bf08      	it	eq
 8000902:	6466      	streq	r6, [r4, #68]	; 0x44
 8000904:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000906:	3301      	adds	r3, #1
 8000908:	bf08      	it	eq
 800090a:	64a6      	streq	r6, [r4, #72]	; 0x48
 800090c:	f000 fd5a 	bl	80013c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000910:	a802      	add	r0, sp, #8
 8000912:	a901      	add	r1, sp, #4
 8000914:	f000 fc6a 	bl	80011ec <xTaskCheckForTimeOut>
 8000918:	bb30      	cbnz	r0, 8000968 <xQueueGenericReceive+0x102>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 800091a:	f000 fd47 	bl	80013ac <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 800091e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8000922:	f000 fd4f 	bl	80013c4 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000926:	f1b8 0f00 	cmp.w	r8, #0
 800092a:	d117      	bne.n	800095c <xQueueGenericReceive+0xf6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	b933      	cbnz	r3, 800093e <xQueueGenericReceive+0xd8>
					{
						portENTER_CRITICAL();
 8000930:	f000 fd3c 	bl	80013ac <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000934:	6860      	ldr	r0, [r4, #4]
 8000936:	f000 fc8f 	bl	8001258 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 800093a:	f000 fd43 	bl	80013c4 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800093e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000942:	9901      	ldr	r1, [sp, #4]
 8000944:	f000 fbf2 	bl	800112c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff fe17 	bl	800057c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800094e:	f000 fa4b 	bl	8000de8 <xTaskResumeAll>
 8000952:	2800      	cmp	r0, #0
 8000954:	d192      	bne.n	800087c <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8000956:	f000 fd21 	bl	800139c <vPortYieldFromISR>
 800095a:	e78f      	b.n	800087c <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800095c:	4620      	mov	r0, r4
 800095e:	f7ff fe0d 	bl	800057c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000962:	f000 fa41 	bl	8000de8 <xTaskResumeAll>
 8000966:	e789      	b.n	800087c <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000968:	4620      	mov	r0, r4
 800096a:	f7ff fe07 	bl	800057c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800096e:	f000 fa3b 	bl	8000de8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8000972:	2000      	movs	r0, #0
		}
	}
}
 8000974:	b005      	add	sp, #20
 8000976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800097c <prvGenerateRunTimeStatsForTasksInList>:
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime )
	{
 800097c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8000980:	684b      	ldr	r3, [r1, #4]
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime )
	{
 8000982:	4617      	mov	r7, r2
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f101 0208 	add.w	r2, r1, #8
 800098a:	604b      	str	r3, [r1, #4]
 800098c:	4293      	cmp	r3, r2
 800098e:	bf08      	it	eq
 8000990:	685b      	ldreq	r3, [r3, #4]
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime )
	{
 8000992:	4680      	mov	r8, r0
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8000994:	bf08      	it	eq
 8000996:	604b      	streq	r3, [r1, #4]
 8000998:	684b      	ldr	r3, [r1, #4]
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime )
	{
 800099a:	460c      	mov	r4, r1
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800099c:	f8d3 900c 	ldr.w	r9, [r3, #12]
		do
		{
			/* Get next TCB in from the list. */
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80009a0:	f101 0608 	add.w	r6, r1, #8
 80009a4:	6863      	ldr	r3, [r4, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	6063      	str	r3, [r4, #4]
 80009aa:	42b3      	cmp	r3, r6
 80009ac:	bf04      	itt	eq
 80009ae:	6873      	ldreq	r3, [r6, #4]
 80009b0:	6063      	streq	r3, [r4, #4]
 80009b2:	6863      	ldr	r3, [r4, #4]
 80009b4:	68dd      	ldr	r5, [r3, #12]

			/* Divide by zero check. */
			if( ulTotalRunTime > 0UL )
 80009b6:	b307      	cbz	r7, 80009fa <prvGenerateRunTimeStatsForTasksInList+0x7e>
			{
				/* Has the task run at all? */
				if( pxNextTCB->ulRunTimeCounter == 0UL )
 80009b8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80009ba:	b93b      	cbnz	r3, 80009cc <prvGenerateRunTimeStatsForTasksInList+0x50>
				{
					/* The task has used no CPU time at all. */
					sprintf( pcStatsString, ( char * ) "%-*s\t0          \t0%%\r\n", configMAX_TASK_NAME_LEN, pxNextTCB->pcTaskName );
 80009bc:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80009c0:	4910      	ldr	r1, [pc, #64]	; (8000a04 <prvGenerateRunTimeStatsForTasksInList+0x88>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <prvGenerateRunTimeStatsForTasksInList+0x8c>)
 80009c6:	f7ff fd52 	bl	800046e <sprintf>
 80009ca:	e012      	b.n	80009f2 <prvGenerateRunTimeStatsForTasksInList+0x76>
				else
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTime has already been divided by 100. */
					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 80009cc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80009ce:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80009d2:	fbb2 f2f7 	udiv	r2, r2, r7

					if( ulStatsAsPercentage > 0UL )
 80009d6:	b12a      	cbz	r2, 80009e4 <prvGenerateRunTimeStatsForTasksInList+0x68>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%-*s\t%-11u\t%u%%\r\n", configMAX_TASK_NAME_LEN, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80009d8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <prvGenerateRunTimeStatsForTasksInList+0x8c>)
 80009dc:	e88d 0006 	stmia.w	sp, {r1, r2}
 80009e0:	490a      	ldr	r1, [pc, #40]	; (8000a0c <prvGenerateRunTimeStatsForTasksInList+0x90>)
 80009e2:	e003      	b.n	80009ec <prvGenerateRunTimeStatsForTasksInList+0x70>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%-*s\t%-11u\t<1%%\r\n", configMAX_TASK_NAME_LEN, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter );
 80009e4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <prvGenerateRunTimeStatsForTasksInList+0x8c>)
 80009e8:	4909      	ldr	r1, [pc, #36]	; (8000a10 <prvGenerateRunTimeStatsForTasksInList+0x94>)
 80009ea:	9200      	str	r2, [sp, #0]
 80009ec:	220c      	movs	r2, #12
 80009ee:	f7ff fd3e 	bl	800046e <sprintf>
						}
						#endif
					}
				}

				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 80009f2:	4640      	mov	r0, r8
 80009f4:	4904      	ldr	r1, [pc, #16]	; (8000a08 <prvGenerateRunTimeStatsForTasksInList+0x8c>)
 80009f6:	f002 fec7 	bl	8003788 <strcat>
			}

		} while( pxNextTCB != pxFirstTCB );
 80009fa:	454d      	cmp	r5, r9
 80009fc:	d1d2      	bne.n	80009a4 <prvGenerateRunTimeStatsForTasksInList+0x28>
	}
 80009fe:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8000a02:	bf00      	nop
 8000a04:	08003d4f 	.word	0x08003d4f
 8000a08:	20000954 	.word	0x20000954
 8000a0c:	08003d66 	.word	0x08003d66
 8000a10:	08003d78 	.word	0x08003d78

08000a14 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
 8000a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8000a18:	684b      	ldr	r3, [r1, #4]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
 8000a1a:	4617      	mov	r7, r2
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f101 0208 	add.w	r2, r1, #8
 8000a22:	604b      	str	r3, [r1, #4]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	bf08      	it	eq
 8000a28:	685b      	ldreq	r3, [r3, #4]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
 8000a2a:	b085      	sub	sp, #20
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8000a2c:	bf08      	it	eq
 8000a2e:	604b      	streq	r3, [r1, #4]
 8000a30:	684b      	ldr	r3, [r1, #4]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
 8000a32:	4680      	mov	r8, r0
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8000a34:	f8d3 900c 	ldr.w	r9, [r3, #12]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
 8000a38:	460c      	mov	r4, r1

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8000a3a:	f101 0608 	add.w	r6, r1, #8
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	6063      	str	r3, [r4, #4]
 8000a44:	42b3      	cmp	r3, r6
 8000a46:	bf04      	itt	eq
 8000a48:	6873      	ldreq	r3, [r6, #4]
 8000a4a:	6063      	streq	r3, [r4, #4]
 8000a4c:	6863      	ldr	r3, [r4, #4]
 8000a4e:	68dd      	ldr	r5, [r3, #12]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
 8000a50:	2300      	movs	r3, #0
 8000a52:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000a54:	b299      	uxth	r1, r3
 8000a56:	3301      	adds	r3, #1
}
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
 8000a58:	18d0      	adds	r0, r2, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8000a5a:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8000a5e:	28a5      	cmp	r0, #165	; 0xa5
 8000a60:	d0f8      	beq.n	8000a54 <prvListTaskWithinSingleList+0x40>
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%-*s\t%-7c\t%-7u\t%-7u\t%u\r\n", configMAX_TASK_NAME_LEN, pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
 8000a62:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000a64:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000a66:	0889      	lsrs	r1, r1, #2
 8000a68:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8000a6c:	9001      	str	r0, [sp, #4]
 8000a6e:	9102      	str	r1, [sp, #8]
 8000a70:	9203      	str	r2, [sp, #12]
 8000a72:	4907      	ldr	r1, [pc, #28]	; (8000a90 <prvListTaskWithinSingleList+0x7c>)
 8000a74:	220c      	movs	r2, #12
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <prvListTaskWithinSingleList+0x80>)
 8000a78:	9700      	str	r7, [sp, #0]
 8000a7a:	f7ff fcf8 	bl	800046e <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
 8000a7e:	4640      	mov	r0, r8
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <prvListTaskWithinSingleList+0x80>)
 8000a82:	f002 fe81 	bl	8003788 <strcat>

		} while( pxNextTCB != pxFirstTCB );
 8000a86:	454d      	cmp	r5, r9
 8000a88:	d1d9      	bne.n	8000a3e <prvListTaskWithinSingleList+0x2a>
	}
 8000a8a:	b005      	add	sp, #20
 8000a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a90:	08003d8a 	.word	0x08003d8a
 8000a94:	20000888 	.word	0x20000888

08000a98 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <prvAddCurrentTaskToDelayedList+0x3c>)
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8000a9a:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000a9c:	681a      	ldr	r2, [r3, #0]
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8000a9e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000aa0:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <prvAddCurrentTaskToDelayedList+0x40>)
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	4290      	cmp	r0, r2
 8000aa8:	d207      	bcs.n	8000aba <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <prvAddCurrentTaskToDelayedList+0x44>)
 8000aac:	6810      	ldr	r0, [r2, #0]
 8000aae:	6819      	ldr	r1, [r3, #0]
 8000ab0:	3104      	adds	r1, #4
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 8000ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000ab6:	f7ff bd25 	b.w	8000504 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <prvAddCurrentTaskToDelayedList+0x48>)
 8000abc:	6810      	ldr	r0, [r2, #0]
 8000abe:	6819      	ldr	r1, [r3, #0]
 8000ac0:	3104      	adds	r1, #4
 8000ac2:	f7ff fd1f 	bl	8000504 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <prvAddCurrentTaskToDelayedList+0x4c>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8000acc:	bf38      	it	cc
 8000ace:	601c      	strcc	r4, [r3, #0]
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000950 	.word	0x20000950
 8000ad8:	200008bc 	.word	0x200008bc
 8000adc:	20000924 	.word	0x20000924
 8000ae0:	2000093c 	.word	0x2000093c
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aec:	4682      	mov	sl, r0
 8000aee:	af0c      	add	r7, sp, #48	; 0x30
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8000af0:	2050      	movs	r0, #80	; 0x50
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000af2:	460d      	mov	r5, r1
 8000af4:	4614      	mov	r4, r2
 8000af6:	4699      	mov	r9, r3
 8000af8:	e897 0980 	ldmia.w	r7, {r7, r8, fp}
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8000afc:	f000 fc9e 	bl	800143c <pvPortMalloc>
 8000b00:	4606      	mov	r6, r0

	if( pxNewTCB != NULL )
 8000b02:	2800      	cmp	r0, #0
 8000b04:	f000 80a4 	beq.w	8000c50 <xTaskGenericCreate+0x168>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8000b08:	f1bb 0f00 	cmp.w	fp, #0
 8000b0c:	d103      	bne.n	8000b16 <xTaskGenericCreate+0x2e>
 8000b0e:	00a0      	lsls	r0, r4, #2
 8000b10:	f000 fc94 	bl	800143c <pvPortMalloc>
 8000b14:	4683      	mov	fp, r0
 8000b16:	f8c6 b030 	str.w	fp, [r6, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8000b1a:	f1bb 0f00 	cmp.w	fp, #0
 8000b1e:	d103      	bne.n	8000b28 <xTaskGenericCreate+0x40>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8000b20:	4630      	mov	r0, r6
 8000b22:	f000 fc97 	bl	8001454 <vPortFree>
 8000b26:	e093      	b.n	8000c50 <xTaskGenericCreate+0x168>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8000b28:	00a2      	lsls	r2, r4, #2
 8000b2a:	4658      	mov	r0, fp
 8000b2c:	21a5      	movs	r1, #165	; 0xa5
 8000b2e:	f002 fdb3 	bl	8003698 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000b32:	6b33      	ldr	r3, [r6, #48]	; 0x30
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8000b34:	4629      	mov	r1, r5
 8000b36:	220c      	movs	r2, #12
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000b38:	3c01      	subs	r4, #1
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8000b3a:	f106 0034 	add.w	r0, r6, #52	; 0x34
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000b3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8000b42:	2f04      	cmp	r7, #4
 8000b44:	bf34      	ite	cc
 8000b46:	46bb      	movcc	fp, r7
 8000b48:	f04f 0b04 	movcs.w	fp, #4
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8000b4c:	f002 ff22 	bl	8003994 <strncpy>
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000b50:	1d35      	adds	r5, r6, #4
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8000b52:	2300      	movs	r3, #0
 8000b54:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
 8000b58:	f8c6 b02c 	str.w	fp, [r6, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8000b5c:	f8c6 b048 	str.w	fp, [r6, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000b60:	4628      	mov	r0, r5
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	f7ff fcbe 	bl	80004e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8000b68:	f106 0018 	add.w	r0, r6, #24
 8000b6c:	f7ff fcba 	bl	80004e4 <vListInitialiseItem>
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 8000b70:	9b01      	ldr	r3, [sp, #4]
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8000b72:	f1cb 0205 	rsb	r2, fp, #5
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8000b76:	f024 0407 	bic.w	r4, r4, #7
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8000b7a:	61b2      	str	r2, [r6, #24]
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8000b7c:	6136      	str	r6, [r6, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8000b7e:	6276      	str	r6, [r6, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 8000b80:	64f3      	str	r3, [r6, #76]	; 0x4c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b82:	4620      	mov	r0, r4
 8000b84:	4651      	mov	r1, sl
 8000b86:	464a      	mov	r2, r9
 8000b88:	f000 fbc8 	bl	800131c <pxPortInitialiseStack>
 8000b8c:	6030      	str	r0, [r6, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8000b8e:	f1b8 0f00 	cmp.w	r8, #0
 8000b92:	d001      	beq.n	8000b98 <xTaskGenericCreate+0xb0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000b94:	f8c8 6000 	str.w	r6, [r8]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8000b98:	f000 fc08 	bl	80013ac <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <xTaskGenericCreate+0x174>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <xTaskGenericCreate+0x178>)
 8000ba6:	681c      	ldr	r4, [r3, #0]
 8000ba8:	bb34      	cbnz	r4, 8000bf8 <xTaskGenericCreate+0x110>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000baa:	601e      	str	r6, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d12a      	bne.n	8000c08 <xTaskGenericCreate+0x120>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8000bb2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8000c8c <xTaskGenericCreate+0x1a4>
 8000bb6:	f04f 0814 	mov.w	r8, #20
 8000bba:	fb08 9004 	mla	r0, r8, r4, r9

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8000bbe:	3401      	adds	r4, #1
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8000bc0:	f7ff fc85 	bl	80004ce <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8000bc4:	2c05      	cmp	r4, #5
 8000bc6:	d1f8      	bne.n	8000bba <xTaskGenericCreate+0xd2>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8000bc8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8000c90 <xTaskGenericCreate+0x1a8>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8000bcc:	4c25      	ldr	r4, [pc, #148]	; (8000c64 <xTaskGenericCreate+0x17c>)
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8000bce:	4640      	mov	r0, r8
 8000bd0:	f7ff fc7d 	bl	80004ce <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f7ff fc7a 	bl	80004ce <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8000bda:	4823      	ldr	r0, [pc, #140]	; (8000c68 <xTaskGenericCreate+0x180>)
 8000bdc:	f7ff fc77 	bl	80004ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8000be0:	4822      	ldr	r0, [pc, #136]	; (8000c6c <xTaskGenericCreate+0x184>)
 8000be2:	f7ff fc74 	bl	80004ce <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8000be6:	4822      	ldr	r0, [pc, #136]	; (8000c70 <xTaskGenericCreate+0x188>)
 8000be8:	f7ff fc71 	bl	80004ce <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <xTaskGenericCreate+0x18c>)
 8000bee:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <xTaskGenericCreate+0x190>)
 8000bf4:	601c      	str	r4, [r3, #0]
 8000bf6:	e007      	b.n	8000c08 <xTaskGenericCreate+0x120>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000bf8:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <xTaskGenericCreate+0x194>)
 8000bfa:	6812      	ldr	r2, [r2, #0]
 8000bfc:	b922      	cbnz	r2, 8000c08 <xTaskGenericCreate+0x120>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c02:	42ba      	cmp	r2, r7
					{
						pxCurrentTCB = pxNewTCB;
 8000c04:	bf98      	it	ls
 8000c06:	601e      	strls	r6, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <xTaskGenericCreate+0x198>)
 8000c0a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8000c0c:	6811      	ldr	r1, [r2, #0]
 8000c0e:	428b      	cmp	r3, r1
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8000c10:	bf88      	it	hi
 8000c12:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <xTaskGenericCreate+0x19c>)
 8000c16:	6811      	ldr	r1, [r2, #0]
 8000c18:	6431      	str	r1, [r6, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
 8000c1a:	3101      	adds	r1, #1
 8000c1c:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8000c1e:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <xTaskGenericCreate+0x1a0>)
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	428b      	cmp	r3, r1
 8000c24:	bf88      	it	hi
 8000c26:	6013      	strhi	r3, [r2, #0]
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <xTaskGenericCreate+0x1a4>)
 8000c2a:	2014      	movs	r0, #20
 8000c2c:	fb00 2003 	mla	r0, r0, r3, r2
 8000c30:	4629      	mov	r1, r5
 8000c32:	f7ff fc5a 	bl	80004ea <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000c36:	f000 fbc5 	bl	80013c4 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <xTaskGenericCreate+0x194>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b153      	cbz	r3, 8000c56 <xTaskGenericCreate+0x16e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <xTaskGenericCreate+0x178>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	42bb      	cmp	r3, r7
 8000c48:	d205      	bcs.n	8000c56 <xTaskGenericCreate+0x16e>
			{
				portYIELD_WITHIN_API();
 8000c4a:	f000 fba7 	bl	800139c <vPortYieldFromISR>
 8000c4e:	e002      	b.n	8000c56 <xTaskGenericCreate+0x16e>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	e000      	b.n	8000c58 <xTaskGenericCreate+0x170>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
 8000c56:	2001      	movs	r0, #1
			}
		}
	}

	return xReturn;
}
 8000c58:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c5c:	20000940 	.word	0x20000940
 8000c60:	20000950 	.word	0x20000950
 8000c64:	200009b0 	.word	0x200009b0
 8000c68:	20000874 	.word	0x20000874
 8000c6c:	20000928 	.word	0x20000928
 8000c70:	20000988 	.word	0x20000988
 8000c74:	2000093c 	.word	0x2000093c
 8000c78:	20000924 	.word	0x20000924
 8000c7c:	20000944 	.word	0x20000944
 8000c80:	200009d4 	.word	0x200009d4
 8000c84:	200009c4 	.word	0x200009c4
 8000c88:	200008b8 	.word	0x200008b8
 8000c8c:	200008c0 	.word	0x200008c0
 8000c90:	2000099c 	.word	0x2000099c

08000c94 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8000c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8000c96:	2400      	movs	r4, #0
 8000c98:	2240      	movs	r2, #64	; 0x40
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <vTaskStartScheduler+0x40>)
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <vTaskStartScheduler+0x44>)
 8000ca0:	9400      	str	r4, [sp, #0]
 8000ca2:	9401      	str	r4, [sp, #4]
 8000ca4:	9402      	str	r4, [sp, #8]
 8000ca6:	9403      	str	r4, [sp, #12]
 8000ca8:	f7ff ff1e 	bl	8000ae8 <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8000cac:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8000cae:	4603      	mov	r3, r0
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8000cb0:	d10e      	bne.n	8000cd0 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8000cb2:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000cb6:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <vTaskStartScheduler+0x48>)
 8000cbc:	6013      	str	r3, [r2, #0]
		xTickCount = ( portTickType ) 0U;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <vTaskStartScheduler+0x4c>)
 8000cc0:	601c      	str	r4, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8000cc2:	f001 fe79 	bl	80029b8 <configureTimerForRuntimestats>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8000cc6:	b004      	add	sp, #16
 8000cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000ccc:	f000 bb42 	b.w	8001354 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd10      	pop	{r4, pc}
 8000cd4:	08001009 	.word	0x08001009
 8000cd8:	08003da3 	.word	0x08003da3
 8000cdc:	20000944 	.word	0x20000944
 8000ce0:	200008bc 	.word	0x200008bc

08000ce4 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <vTaskSuspendAll+0xc>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	3201      	adds	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200009c8 	.word	0x200009c8

08000cf4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8000cf4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8000cf6:	f000 fb59 	bl	80013ac <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8000cfa:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <xTaskGetTickCount+0x14>)
 8000cfc:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8000cfe:	f000 fb61 	bl	80013c4 <vPortExitCritical>

	return xTicks;
}
 8000d02:	4620      	mov	r0, r4
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	bf00      	nop
 8000d08:	200008bc 	.word	0x200008bc

08000d0c <vTaskIncrementTick>:
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <vTaskIncrementTick+0xb8>)
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8000d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14f      	bne.n	8000db8 <vTaskIncrementTick+0xac>
	{
		++xTickCount;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <vTaskIncrementTick+0xbc>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	3201      	adds	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b9ab      	cbnz	r3, 8000d50 <vTaskIncrementTick+0x44>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <vTaskIncrementTick+0xc0>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8000d26:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <vTaskIncrementTick+0xc4>)
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8000d28:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8000d2a:	6810      	ldr	r0, [r2, #0]
 8000d2c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8000d2e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <vTaskIncrementTick+0xc8>)
 8000d32:	6811      	ldr	r1, [r2, #0]
 8000d34:	3101      	adds	r1, #1
 8000d36:	6011      	str	r1, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	6811      	ldr	r1, [r2, #0]
 8000d3c:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <vTaskIncrementTick+0xcc>)
 8000d3e:	b911      	cbnz	r1, 8000d46 <vTaskIncrementTick+0x3a>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	e003      	b.n	8000d4e <vTaskIncrementTick+0x42>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8000d50:	4e1d      	ldr	r6, [pc, #116]	; (8000dc8 <vTaskIncrementTick+0xbc>)
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <vTaskIncrementTick+0xcc>)
 8000d54:	6832      	ldr	r2, [r6, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d331      	bcc.n	8000dc0 <vTaskIncrementTick+0xb4>
 8000d5c:	4d1b      	ldr	r5, [pc, #108]	; (8000dcc <vTaskIncrementTick+0xc0>)
 8000d5e:	4c1f      	ldr	r4, [pc, #124]	; (8000ddc <vTaskIncrementTick+0xd0>)
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b92b      	cbnz	r3, 8000d72 <vTaskIncrementTick+0x66>
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <vTaskIncrementTick+0xcc>)
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	68df      	ldr	r7, [r3, #12]
 8000d78:	6832      	ldr	r2, [r6, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d203      	bcs.n	8000d88 <vTaskIncrementTick+0x7c>
 8000d80:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <vTaskIncrementTick+0xcc>)
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d88:	f107 0804 	add.w	r8, r7, #4
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	f7ff fbd1 	bl	8000534 <vListRemove>
 8000d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d94:	b11b      	cbz	r3, 8000d9e <vTaskIncrementTick+0x92>
 8000d96:	f107 0018 	add.w	r0, r7, #24
 8000d9a:	f7ff fbcb 	bl	8000534 <vListRemove>
 8000d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	4641      	mov	r1, r8
 8000da4:	4293      	cmp	r3, r2
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <vTaskIncrementTick+0xd4>)
 8000da8:	bf88      	it	hi
 8000daa:	6023      	strhi	r3, [r4, #0]
 8000dac:	2014      	movs	r0, #20
 8000dae:	fb00 2003 	mla	r0, r0, r3, r2
 8000db2:	f7ff fb9a 	bl	80004ea <vListInsertEnd>
 8000db6:	e7d3      	b.n	8000d60 <vTaskIncrementTick+0x54>
	}
	else
	{
		++uxMissedTicks;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <vTaskIncrementTick+0xd8>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	3201      	adds	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dc4:	200009c8 	.word	0x200009c8
 8000dc8:	200008bc 	.word	0x200008bc
 8000dcc:	2000093c 	.word	0x2000093c
 8000dd0:	20000924 	.word	0x20000924
 8000dd4:	200009d0 	.word	0x200009d0
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200008b8 	.word	0x200008b8
 8000de0:	200008c0 	.word	0x200008c0
 8000de4:	200009cc 	.word	0x200009cc

08000de8 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8000de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000dec:	f000 fade 	bl	80013ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <xTaskResumeAll+0xac>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000df8:	681d      	ldr	r5, [r3, #0]
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d142      	bne.n	8000e84 <xTaskResumeAll+0x9c>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <xTaskResumeAll+0xb0>)
 8000e00:	681c      	ldr	r4, [r3, #0]
 8000e02:	b9f4      	cbnz	r4, 8000e42 <xTaskResumeAll+0x5a>
 8000e04:	e041      	b.n	8000e8a <xTaskResumeAll+0xa2>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8000e0a:	f104 0018 	add.w	r0, r4, #24
					vListRemove( &( pxTCB->xGenericListItem ) );
 8000e0e:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
 8000e12:	f7ff fb8f 	bl	8000534 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8000e16:	4648      	mov	r0, r9
 8000e18:	f7ff fb8c 	bl	8000534 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8000e1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e1e:	6832      	ldr	r2, [r6, #0]
 8000e20:	4649      	mov	r1, r9
 8000e22:	4293      	cmp	r3, r2
 8000e24:	bf88      	it	hi
 8000e26:	6033      	strhi	r3, [r6, #0]
 8000e28:	2014      	movs	r0, #20
 8000e2a:	fb00 8003 	mla	r0, r0, r3, r8
 8000e2e:	f7ff fb5c 	bl	80004ea <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <xTaskResumeAll+0xb4>)
 8000e34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	bf28      	it	cs
 8000e3e:	2501      	movcs	r5, #1
 8000e40:	e003      	b.n	8000e4a <xTaskResumeAll+0x62>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000e42:	4f17      	ldr	r7, [pc, #92]	; (8000ea0 <xTaskResumeAll+0xb8>)
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
 8000e44:	4e17      	ldr	r6, [pc, #92]	; (8000ea4 <xTaskResumeAll+0xbc>)
 8000e46:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000eb0 <xTaskResumeAll+0xc8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1da      	bne.n	8000e06 <xTaskResumeAll+0x1e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000e50:	4c15      	ldr	r4, [pc, #84]	; (8000ea8 <xTaskResumeAll+0xc0>)
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	b92b      	cbnz	r3, 8000e62 <xTaskResumeAll+0x7a>
 8000e56:	e008      	b.n	8000e6a <xTaskResumeAll+0x82>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
 8000e58:	f7ff ff58 	bl	8000d0c <vTaskIncrementTick>
						--uxMissedTicks;
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f7      	bne.n	8000e58 <xTaskResumeAll+0x70>
 8000e68:	e005      	b.n	8000e76 <xTaskResumeAll+0x8e>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8000e6a:	2d01      	cmp	r5, #1
 8000e6c:	d003      	beq.n	8000e76 <xTaskResumeAll+0x8e>
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <xTaskResumeAll+0xc4>)
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	2a01      	cmp	r2, #1
 8000e74:	d108      	bne.n	8000e88 <xTaskResumeAll+0xa0>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <xTaskResumeAll+0xc4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8000e7c:	f000 fa8e 	bl	800139c <vPortYieldFromISR>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
 8000e80:	2401      	movs	r4, #1
 8000e82:	e002      	b.n	8000e8a <xTaskResumeAll+0xa2>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8000e84:	2400      	movs	r4, #0
 8000e86:	e000      	b.n	8000e8a <xTaskResumeAll+0xa2>
 8000e88:	461c      	mov	r4, r3
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8000e8a:	f000 fa9b 	bl	80013c4 <vPortExitCritical>

	return xAlreadyYielded;
}
 8000e8e:	4620      	mov	r0, r4
 8000e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e94:	200009c8 	.word	0x200009c8
 8000e98:	20000940 	.word	0x20000940
 8000e9c:	20000950 	.word	0x20000950
 8000ea0:	20000874 	.word	0x20000874
 8000ea4:	200008b8 	.word	0x200008b8
 8000ea8:	200009cc 	.word	0x200009cc
 8000eac:	2000094c 	.word	0x2000094c
 8000eb0:	200008c0 	.word	0x200008c0

08000eb4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
	{
 8000eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb8:	4604      	mov	r4, r0
	unsigned long ulTotalRunTime;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
 8000eba:	f7ff ff13 	bl	8000ce4 <vTaskSuspendAll>
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <vTaskGetRunTimeStats+0x94>)
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 8000ec0:	4620      	mov	r0, r4
		vTaskSuspendAll();
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000ec2:	881d      	ldrh	r5, [r3, #0]
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <vTaskGetRunTimeStats+0x98>)
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 8000ec6:	4922      	ldr	r1, [pc, #136]	; (8000f50 <vTaskGetRunTimeStats+0x9c>)
		vTaskSuspendAll();
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			do
			{
				uxQueue--;

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8000eca:	4f22      	ldr	r7, [pc, #136]	; (8000f54 <vTaskGetRunTimeStats+0xa0>)
		vTaskSuspendAll();
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000ecc:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
			#endif

			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
			ulTotalRunTime /= 100UL;
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	fbb5 f5f3 	udiv	r5, r5, r3
			
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	7023      	strb	r3, [r4, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 8000eda:	f002 fc55 	bl	8003788 <strcat>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <vTaskGetRunTimeStats+0xa4>)

			do
			{
				uxQueue--;

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8000ee0:	f04f 0814 	mov.w	r8, #20
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 8000ee4:	681e      	ldr	r6, [r3, #0]
 8000ee6:	3601      	adds	r6, #1

			do
			{
				uxQueue--;
 8000ee8:	3e01      	subs	r6, #1

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8000eea:	fb08 f306 	mul.w	r3, r8, r6
 8000eee:	18f9      	adds	r1, r7, r3
 8000ef0:	58fb      	ldr	r3, [r7, r3]
 8000ef2:	b11b      	cbz	r3, 8000efc <vTaskGetRunTimeStats+0x48>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTime );
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	462a      	mov	r2, r5
 8000ef8:	f7ff fd40 	bl	800097c <prvGenerateRunTimeStatsForTasksInList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d1f3      	bne.n	8000ee8 <vTaskGetRunTimeStats+0x34>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <vTaskGetRunTimeStats+0xa8>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	b122      	cbz	r2, 8000f12 <vTaskGetRunTimeStats+0x5e>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTime );
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	462a      	mov	r2, r5
 8000f0e:	f7ff fd35 	bl	800097c <prvGenerateRunTimeStatsForTasksInList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <vTaskGetRunTimeStats+0xac>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	b122      	cbz	r2, 8000f24 <vTaskGetRunTimeStats+0x70>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTime );
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	462a      	mov	r2, r5
 8000f20:	f7ff fd2c 	bl	800097c <prvGenerateRunTimeStatsForTasksInList>
			}

			#if ( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 8000f24:	490f      	ldr	r1, [pc, #60]	; (8000f64 <vTaskGetRunTimeStats+0xb0>)
 8000f26:	680b      	ldr	r3, [r1, #0]
 8000f28:	b11b      	cbz	r3, 8000f32 <vTaskGetRunTimeStats+0x7e>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTime );
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	462a      	mov	r2, r5
 8000f2e:	f7ff fd25 	bl	800097c <prvGenerateRunTimeStatsForTasksInList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <vTaskGetRunTimeStats+0xb4>)
 8000f34:	680b      	ldr	r3, [r1, #0]
 8000f36:	b11b      	cbz	r3, 8000f40 <vTaskGetRunTimeStats+0x8c>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime );
 8000f38:	4620      	mov	r0, r4
 8000f3a:	462a      	mov	r2, r5
 8000f3c:	f7ff fd1e 	bl	800097c <prvGenerateRunTimeStatsForTasksInList>
				}
			}
			#endif
		}
		xTaskResumeAll();
	}
 8000f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime );
				}
			}
			#endif
		}
		xTaskResumeAll();
 8000f44:	f7ff bf50 	b.w	8000de8 <xTaskResumeAll>
 8000f48:	20000c24 	.word	0x20000c24
 8000f4c:	40001000 	.word	0x40001000
 8000f50:	08003fa6 	.word	0x08003fa6
 8000f54:	200008c0 	.word	0x200008c0
 8000f58:	200009d4 	.word	0x200009d4
 8000f5c:	2000093c 	.word	0x2000093c
 8000f60:	20000924 	.word	0x20000924
 8000f64:	20000928 	.word	0x20000928
 8000f68:	20000988 	.word	0x20000988

08000f6c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	4604      	mov	r4, r0
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
 8000f70:	f7ff feb8 	bl	8000ce4 <vTaskSuspendAll>
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
 8000f74:	2300      	movs	r3, #0
 8000f76:	7023      	strb	r3, [r4, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 8000f78:	4620      	mov	r0, r4
 8000f7a:	491c      	ldr	r1, [pc, #112]	; (8000fec <vTaskList+0x80>)
 8000f7c:	f002 fc04 	bl	8003788 <strcat>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <vTaskList+0x84>)

			do
			{
				uxQueue--;

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8000f82:	4e1c      	ldr	r6, [pc, #112]	; (8000ff4 <vTaskList+0x88>)
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 8000f84:	681d      	ldr	r5, [r3, #0]

			do
			{
				uxQueue--;

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8000f86:	2714      	movs	r7, #20
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 8000f88:	3501      	adds	r5, #1

			do
			{
				uxQueue--;
 8000f8a:	3d01      	subs	r5, #1

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8000f8c:	fb07 f305 	mul.w	r3, r7, r5
 8000f90:	18f1      	adds	r1, r6, r3
 8000f92:	58f3      	ldr	r3, [r6, r3]
 8000f94:	b11b      	cbz	r3, 8000f9e <vTaskList+0x32>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
 8000f96:	4620      	mov	r0, r4
 8000f98:	2252      	movs	r2, #82	; 0x52
 8000f9a:	f7ff fd3b 	bl	8000a14 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d1f3      	bne.n	8000f8a <vTaskList+0x1e>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <vTaskList+0x8c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	b122      	cbz	r2, 8000fb4 <vTaskList+0x48>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	4620      	mov	r0, r4
 8000fae:	2242      	movs	r2, #66	; 0x42
 8000fb0:	f7ff fd30 	bl	8000a14 <prvListTaskWithinSingleList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <vTaskList+0x90>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	b122      	cbz	r2, 8000fc6 <vTaskList+0x5a>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	2242      	movs	r2, #66	; 0x42
 8000fc2:	f7ff fd27 	bl	8000a14 <prvListTaskWithinSingleList>
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 8000fc6:	490e      	ldr	r1, [pc, #56]	; (8001000 <vTaskList+0x94>)
 8000fc8:	680b      	ldr	r3, [r1, #0]
 8000fca:	b11b      	cbz	r3, 8000fd4 <vTaskList+0x68>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
 8000fcc:	4620      	mov	r0, r4
 8000fce:	2244      	movs	r2, #68	; 0x44
 8000fd0:	f7ff fd20 	bl	8000a14 <prvListTaskWithinSingleList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 8000fd4:	490b      	ldr	r1, [pc, #44]	; (8001004 <vTaskList+0x98>)
 8000fd6:	680b      	ldr	r3, [r1, #0]
 8000fd8:	b11b      	cbz	r3, 8000fe2 <vTaskList+0x76>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
 8000fda:	4620      	mov	r0, r4
 8000fdc:	2253      	movs	r2, #83	; 0x53
 8000fde:	f7ff fd19 	bl	8000a14 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
	}
 8000fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
				}
			}
			#endif
		}
		xTaskResumeAll();
 8000fe6:	f7ff beff 	b.w	8000de8 <xTaskResumeAll>
 8000fea:	bf00      	nop
 8000fec:	08003fa6 	.word	0x08003fa6
 8000ff0:	200009d4 	.word	0x200009d4
 8000ff4:	200008c0 	.word	0x200008c0
 8000ff8:	2000093c 	.word	0x2000093c
 8000ffc:	20000924 	.word	0x20000924
 8001000:	20000928 	.word	0x20000928
 8001004:	20000988 	.word	0x20000988

08001008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800100a:	4c13      	ldr	r4, [pc, #76]	; (8001058 <prvIdleTask+0x50>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800100c:	4f13      	ldr	r7, [pc, #76]	; (800105c <prvIdleTask+0x54>)

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
 800100e:	4e14      	ldr	r6, [pc, #80]	; (8001060 <prvIdleTask+0x58>)
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	b1d3      	cbz	r3, 800104a <prvIdleTask+0x42>
		{
			vTaskSuspendAll();
 8001014:	f7ff fe66 	bl	8000ce4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001018:	683d      	ldr	r5, [r7, #0]
			xTaskResumeAll();
 800101a:	f7ff fee5 	bl	8000de8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800101e:	b1a5      	cbz	r5, 800104a <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001020:	f000 f9c4 	bl	80013ac <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	68dd      	ldr	r5, [r3, #12]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001028:	1d28      	adds	r0, r5, #4
 800102a:	f7ff fa83 	bl	8000534 <vListRemove>
					--uxCurrentNumberOfTasks;
 800102e:	6833      	ldr	r3, [r6, #0]
 8001030:	3b01      	subs	r3, #1
 8001032:	6033      	str	r3, [r6, #0]
					--uxTasksDeleted;
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	3b01      	subs	r3, #1
 8001038:	6023      	str	r3, [r4, #0]
				}
				taskEXIT_CRITICAL();
 800103a:	f000 f9c3 	bl	80013c4 <vPortExitCritical>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 800103e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001040:	f000 fa08 	bl	8001454 <vPortFree>
		vPortFree( pxTCB );
 8001044:	4628      	mov	r0, r5
 8001046:	f000 fa05 	bl	8001454 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <prvIdleTask+0x5c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d9de      	bls.n	8001010 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001052:	f000 f9a3 	bl	800139c <vPortYieldFromISR>
 8001056:	e7db      	b.n	8001010 <prvIdleTask+0x8>
 8001058:	200008b4 	.word	0x200008b4
 800105c:	20000928 	.word	0x20000928
 8001060:	20000940 	.word	0x20000940
 8001064:	200008c0 	.word	0x200008c0

08001068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8001068:	b510      	push	{r4, lr}
 800106a:	4604      	mov	r4, r0
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800106c:	b178      	cbz	r0, 800108e <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
 800106e:	f7ff fe39 	bl	8000ce4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <vTaskDelay+0x30>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <vTaskDelay+0x34>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	3004      	adds	r0, #4
 800107e:	f7ff fa59 	bl	8000534 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fd08 	bl	8000a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001088:	f7ff feae 	bl	8000de8 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800108c:	b918      	cbnz	r0, 8001096 <vTaskDelay+0x2e>
		{
			portYIELD_WITHIN_API();
		}
	}
 800108e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8001092:	f000 b983 	b.w	800139c <vPortYieldFromISR>
 8001096:	bd10      	pop	{r4, pc}
 8001098:	200008bc 	.word	0x200008bc
 800109c:	20000950 	.word	0x20000950

080010a0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <vTaskSwitchContext+0x6c>)

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80010a2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b113      	cbz	r3, 80010ae <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 80010a8:	2201      	movs	r2, #1
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <vTaskSwitchContext+0x70>)
 80010ac:	e02c      	b.n	8001108 <vTaskSwitchContext+0x68>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <vTaskSwitchContext+0x74>)
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <vTaskSwitchContext+0x78>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <vTaskSwitchContext+0x7c>)
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <vTaskSwitchContext+0x80>)
 80010c0:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80010c2:	6818      	ldr	r0, [r3, #0]
				ulTaskSwitchedInTime = ulTempCounter;
 80010c4:	601a      	str	r2, [r3, #0]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 80010c6:	1a20      	subs	r0, r4, r0
 80010c8:	1880      	adds	r0, r0, r2
 80010ca:	64c8      	str	r0, [r1, #76]	; 0x4c
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <vTaskSwitchContext+0x84>)
 80010ce:	4916      	ldr	r1, [pc, #88]	; (8001128 <vTaskSwitchContext+0x88>)
 80010d0:	2214      	movs	r2, #20
 80010d2:	e002      	b.n	80010da <vTaskSwitchContext+0x3a>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	3801      	subs	r0, #1
 80010d8:	6018      	str	r0, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	4350      	muls	r0, r2
 80010de:	5808      	ldr	r0, [r1, r0]
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d0f7      	beq.n	80010d4 <vTaskSwitchContext+0x34>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <vTaskSwitchContext+0x84>)
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <vTaskSwitchContext+0x88>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2114      	movs	r1, #20
 80010ec:	fb01 2303 	mla	r3, r1, r3, r2
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	f103 0108 	add.w	r1, r3, #8
 80010f6:	6852      	ldr	r2, [r2, #4]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	428a      	cmp	r2, r1
 80010fc:	bf04      	itt	eq
 80010fe:	6852      	ldreq	r2, [r2, #4]
 8001100:	605a      	streq	r2, [r3, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <vTaskSwitchContext+0x7c>)
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	bd10      	pop	{r4, pc}
 800110c:	200009c8 	.word	0x200009c8
 8001110:	2000094c 	.word	0x2000094c
 8001114:	20000c24 	.word	0x20000c24
 8001118:	40001000 	.word	0x40001000
 800111c:	20000950 	.word	0x20000950
 8001120:	20000948 	.word	0x20000948
 8001124:	200008b8 	.word	0x200008b8
 8001128:	200008c0 	.word	0x200008c0

0800112c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 800112c:	b538      	push	{r3, r4, r5, lr}
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 800112e:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <vTaskPlaceOnEventList+0x38>)
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8001130:	460d      	mov	r5, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001132:	6821      	ldr	r1, [r4, #0]
 8001134:	3118      	adds	r1, #24
 8001136:	f7ff f9e5 	bl	8000504 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800113a:	6820      	ldr	r0, [r4, #0]
 800113c:	3004      	adds	r0, #4
 800113e:	f7ff f9f9 	bl	8000534 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001142:	1c6b      	adds	r3, r5, #1
 8001144:	d106      	bne.n	8001154 <vTaskPlaceOnEventList+0x28>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001146:	6821      	ldr	r1, [r4, #0]
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <vTaskPlaceOnEventList+0x3c>)
 800114a:	3104      	adds	r1, #4
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 800114c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001150:	f7ff b9cb 	b.w	80004ea <vListInsertEnd>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <vTaskPlaceOnEventList+0x40>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	1828      	adds	r0, r5, r0
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 800115a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800115e:	f7ff bc9b 	b.w	8000a98 <prvAddCurrentTaskToDelayedList>
 8001162:	bf00      	nop
 8001164:	20000950 	.word	0x20000950
 8001168:	20000988 	.word	0x20000988
 800116c:	200008bc 	.word	0x200008bc

08001170 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001170:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001172:	68c3      	ldr	r3, [r0, #12]
 8001174:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001176:	f104 0518 	add.w	r5, r4, #24
 800117a:	4628      	mov	r0, r5
 800117c:	f7ff f9da 	bl	8000534 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <xTaskRemoveFromEventList+0x50>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	b973      	cbnz	r3, 80011a4 <xTaskRemoveFromEventList+0x34>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001186:	1d25      	adds	r5, r4, #4
 8001188:	4628      	mov	r0, r5
 800118a:	f7ff f9d3 	bl	8000534 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <xTaskRemoveFromEventList+0x54>)
 8001190:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001192:	6811      	ldr	r1, [r2, #0]
 8001194:	428b      	cmp	r3, r1
 8001196:	bf88      	it	hi
 8001198:	6013      	strhi	r3, [r2, #0]
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <xTaskRemoveFromEventList+0x58>)
 800119c:	2014      	movs	r0, #20
 800119e:	fb00 2003 	mla	r0, r0, r3, r2
 80011a2:	e000      	b.n	80011a6 <xTaskRemoveFromEventList+0x36>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <xTaskRemoveFromEventList+0x5c>)
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff f99f 	bl	80004ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <xTaskRemoveFromEventList+0x60>)
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80011ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011b0:	681b      	ldr	r3, [r3, #0]
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	4298      	cmp	r0, r3
 80011b6:	bf34      	ite	cc
 80011b8:	2000      	movcc	r0, #0
 80011ba:	2001      	movcs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	bf00      	nop
 80011c0:	200009c8 	.word	0x200009c8
 80011c4:	200008b8 	.word	0x200008b8
 80011c8:	200008c0 	.word	0x200008c0
 80011cc:	20000874 	.word	0x20000874
 80011d0:	20000950 	.word	0x20000950

080011d4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <vTaskSetTimeOutState+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <vTaskSetTimeOutState+0x14>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6043      	str	r3, [r0, #4]
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200009d0 	.word	0x200009d0
 80011e8:	200008bc 	.word	0x200008bc

080011ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	460d      	mov	r5, r1
 80011f0:	4604      	mov	r4, r0
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80011f2:	f000 f8db 	bl	80013ac <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	d016      	beq.n	800122a <xTaskCheckForTimeOut+0x3e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <xTaskCheckForTimeOut+0x4c>)
 80011fe:	6811      	ldr	r1, [r2, #0]
 8001200:	6822      	ldr	r2, [r4, #0]
 8001202:	4291      	cmp	r1, r2
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <xTaskCheckForTimeOut+0x50>)
 8001206:	d003      	beq.n	8001210 <xTaskCheckForTimeOut+0x24>
 8001208:	6810      	ldr	r0, [r2, #0]
 800120a:	6861      	ldr	r1, [r4, #4]
 800120c:	4288      	cmp	r0, r1
 800120e:	d20e      	bcs.n	800122e <xTaskCheckForTimeOut+0x42>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8001210:	6811      	ldr	r1, [r2, #0]
 8001212:	6862      	ldr	r2, [r4, #4]
 8001214:	1a89      	subs	r1, r1, r2
 8001216:	4299      	cmp	r1, r3
 8001218:	d209      	bcs.n	800122e <xTaskCheckForTimeOut+0x42>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <xTaskCheckForTimeOut+0x50>)
			vTaskSetTimeOutState( pxTimeOut );
 800121c:	4620      	mov	r0, r4
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 800121e:	6809      	ldr	r1, [r1, #0]
 8001220:	1a52      	subs	r2, r2, r1
 8001222:	18d3      	adds	r3, r2, r3
 8001224:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001226:	f7ff ffd5 	bl	80011d4 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 800122a:	2400      	movs	r4, #0
 800122c:	e000      	b.n	8001230 <xTaskCheckForTimeOut+0x44>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
 800122e:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
 8001230:	f000 f8c8 	bl	80013c4 <vPortExitCritical>

	return xReturn;
}
 8001234:	4620      	mov	r0, r4
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	200009d0 	.word	0x200009d0
 800123c:	200008bc 	.word	0x200008bc

08001240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
 8001240:	4b01      	ldr	r3, [pc, #4]	; (8001248 <vTaskMissedYield+0x8>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	4770      	bx	lr
 8001248:	2000094c 	.word	0x2000094c

0800124c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <xTaskGetCurrentTaskHandle+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000950 	.word	0x20000950

08001258 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8001258:	b570      	push	{r4, r5, r6, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800125a:	4d16      	ldr	r5, [pc, #88]	; (80012b4 <vTaskPriorityInherit+0x5c>)
 800125c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800125e:	682a      	ldr	r2, [r5, #0]
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8001260:	4604      	mov	r4, r0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001264:	4293      	cmp	r3, r2
 8001266:	d223      	bcs.n	80012b0 <vTaskPriorityInherit+0x58>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8001268:	682a      	ldr	r2, [r5, #0]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800126a:	2114      	movs	r1, #20
		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 800126c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800126e:	f1c2 0205 	rsb	r2, r2, #5
 8001272:	6182      	str	r2, [r0, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001274:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <vTaskPriorityInherit+0x60>)
 8001276:	fb01 2303 	mla	r3, r1, r3, r2
 800127a:	6942      	ldr	r2, [r0, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	d114      	bne.n	80012aa <vTaskPriorityInherit+0x52>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001280:	1d06      	adds	r6, r0, #4
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff f956 	bl	8000534 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001288:	682b      	ldr	r3, [r5, #0]
				prvAddTaskToReadyQueue( pxTCB );
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <vTaskPriorityInherit+0x64>)
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 800128e:	6811      	ldr	r1, [r2, #0]
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001290:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8001292:	428b      	cmp	r3, r1
 8001294:	bf88      	it	hi
 8001296:	6013      	strhi	r3, [r2, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <vTaskPriorityInherit+0x60>)
 800129a:	2014      	movs	r0, #20
 800129c:	fb00 2003 	mla	r0, r0, r3, r2
 80012a0:	4631      	mov	r1, r6
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 80012a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
				prvAddTaskToReadyQueue( pxTCB );
 80012a6:	f7ff b920 	b.w	80004ea <vListInsertEnd>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	62c3      	str	r3, [r0, #44]	; 0x2c
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
 80012b2:	bf00      	nop
 80012b4:	20000950 	.word	0x20000950
 80012b8:	200008c0 	.word	0x200008c0
 80012bc:	200008b8 	.word	0x200008b8

080012c0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	4604      	mov	r4, r0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 80012c4:	b1d0      	cbz	r0, 80012fc <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80012c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80012c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d016      	beq.n	80012fc <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 80012ce:	1d05      	adds	r5, r0, #4
 80012d0:	4628      	mov	r0, r5
 80012d2:	f7ff f92f 	bl	8000534 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80012d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80012d8:	f1c3 0205 	rsb	r2, r3, #5
 80012dc:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <vTaskPriorityDisinherit+0x40>)
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80012e0:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	428b      	cmp	r3, r1
 80012e6:	bf88      	it	hi
 80012e8:	6013      	strhi	r3, [r2, #0]
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <vTaskPriorityDisinherit+0x44>)
 80012ec:	2014      	movs	r0, #20
 80012ee:	fb00 2003 	mla	r0, r0, r3, r2
 80012f2:	4629      	mov	r1, r5
			}
		}
	}
 80012f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
 80012f8:	f7ff b8f7 	b.w	80004ea <vListInsertEnd>
 80012fc:	bd38      	pop	{r3, r4, r5, pc}
 80012fe:	bf00      	nop
 8001300:	200008b8 	.word	0x200008b8
 8001304:	200008c0 	.word	0x200008c0

08001308 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <prvPortStartFirstTask+0x10>)
 800130a:	6800      	ldr	r0, [r0, #0]
 800130c:	6800      	ldr	r0, [r0, #0]
 800130e:	f380 8808 	msr	MSP, r0
 8001312:	b662      	cpsie	i
 8001314:	df00      	svc	0
 8001316:	bf00      	nop
 8001318:	e000ed08 	.word	0xe000ed08

0800131c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800131c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001320:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
 8001324:	2300      	movs	r3, #0
 8001326:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 800132a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
 800132e:	3840      	subs	r0, #64	; 0x40
}
 8001330:	4770      	bx	lr
	...

08001334 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <pxCurrentTCBConst2>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	6808      	ldr	r0, [r1, #0]
 800133a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800133e:	f380 8809 	msr	PSP, r0
 8001342:	f04f 0000 	mov.w	r0, #0
 8001346:	f380 8811 	msr	BASEPRI, r0
 800134a:	f04e 0e0d 	orr.w	lr, lr, #13
 800134e:	4770      	bx	lr

08001350 <pxCurrentTCBConst2>:
 8001350:	20000950 	.word	0x20000950

08001354 <xPortStartScheduler>:
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.  
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <xPortStartScheduler+0x3c>)

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001356:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.  
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001358:	681a      	ldr	r2, [r3, #0]
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800135a:	2400      	movs	r4, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.  
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800135c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001360:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001368:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800136a:	f001 fbd7 	bl	8002b1c <rccGetCoreFrequency>
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb0 f0f3 	udiv	r0, r0, r3
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <xPortStartScheduler+0x40>)
 8001378:	3801      	subs	r0, #1
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800137a:	2207      	movs	r2, #7
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800137c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800137e:	f843 2c04 	str.w	r2, [r3, #-4]
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <xPortStartScheduler+0x44>)
 8001384:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001386:	f7ff ffbf 	bl	8001308 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
}
 800138a:	4620      	mov	r0, r4
 800138c:	bd10      	pop	{r4, pc}
 800138e:	bf00      	nop
 8001390:	e000ed20 	.word	0xe000ed20
 8001394:	e000e014 	.word	0xe000e014
 8001398:	2000000c 	.word	0x2000000c

0800139c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <vPortYieldFromISR+0xc>)
 800139e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed04 	.word	0xe000ed04

080013ac <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 80013ac:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013b0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <vPortEnterCritical+0x14>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	3201      	adds	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <vPortExitCritical+0x14>)
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80013cc:	b91b      	cbnz	r3, 80013d6 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
 80013ce:	f04f 0000 	mov.w	r0, #0
 80013d2:	f380 8811 	msr	BASEPRI, r0
 80013d6:	4770      	bx	lr
 80013d8:	2000000c 	.word	0x2000000c

080013dc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80013dc:	f3ef 8009 	mrs	r0, PSP
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <pxCurrentTCBConst>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013e8:	6010      	str	r0, [r2, #0]
 80013ea:	e92d 4008 	stmdb	sp!, {r3, lr}
 80013ee:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013f2:	f380 8811 	msr	BASEPRI, r0
 80013f6:	f7ff fe53 	bl	80010a0 <vTaskSwitchContext>
 80013fa:	f04f 0000 	mov.w	r0, #0
 80013fe:	f380 8811 	msr	BASEPRI, r0
 8001402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	6808      	ldr	r0, [r1, #0]
 800140a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800140e:	f380 8809 	msr	PSP, r0
 8001412:	4770      	bx	lr

08001414 <pxCurrentTCBConst>:
 8001414:	20000950 	.word	0x20000950

08001418 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001418:	b508      	push	{r3, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <SysTick_Handler+0x20>)
 800141c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001420:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8001422:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001426:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 800142a:	f7ff fc6f 	bl	8000d0c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 800142e:	f04f 0000 	mov.w	r0, #0
 8001432:	f380 8811 	msr	BASEPRI, r0
}
 8001436:	bd08      	pop	{r3, pc}
 8001438:	e000ed04 	.word	0xe000ed04

0800143c <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800143c:	b510      	push	{r4, lr}
 800143e:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
 8001440:	f7ff fc50 	bl	8000ce4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8001444:	4620      	mov	r0, r4
 8001446:	f001 fe43 	bl	80030d0 <malloc>
 800144a:	4604      	mov	r4, r0
	}
	xTaskResumeAll();
 800144c:	f7ff fccc 	bl	8000de8 <xTaskResumeAll>
		}
	}
	#endif
	
	return pvReturn;
}
 8001450:	4620      	mov	r0, r4
 8001452:	bd10      	pop	{r4, pc}

08001454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001454:	b510      	push	{r4, lr}
 8001456:	4604      	mov	r4, r0
	if( pv )
 8001458:	b140      	cbz	r0, 800146c <vPortFree+0x18>
	{
		vTaskSuspendAll();
 800145a:	f7ff fc43 	bl	8000ce4 <vTaskSuspendAll>
		{
			free( pv );
 800145e:	4620      	mov	r0, r4
 8001460:	f001 fe40 	bl	80030e4 <free>
		}
		xTaskResumeAll();
	}
}
 8001464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	{
		vTaskSuspendAll();
		{
			free( pv );
		}
		xTaskResumeAll();
 8001468:	f7ff bcbe 	b.w	8000de8 <xTaskResumeAll>
 800146c:	bd10      	pop	{r4, pc}

0800146e <get_fileinfo>:
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
 800146e:	6903      	ldr	r3, [r0, #16]
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
 8001470:	b530      	push	{r4, r5, lr}
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
 8001472:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
 8001476:	2b00      	cmp	r3, #0
 8001478:	d037      	beq.n	80014ea <get_fileinfo+0x7c>
		dir = dj->dir;
 800147a:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 800147c:	2500      	movs	r5, #0
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
 800147e:	4610      	mov	r0, r2
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 8001480:	5d5c      	ldrb	r4, [r3, r5]
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
 8001482:	4602      	mov	r2, r0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 8001484:	2c20      	cmp	r4, #32
 8001486:	d008      	beq.n	800149a <get_fileinfo+0x2c>
			if (c == NDDE) c = (TCHAR)DDE;
 8001488:	2c05      	cmp	r4, #5
 800148a:	bf08      	it	eq
 800148c:	24e5      	moveq	r4, #229	; 0xe5

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 800148e:	3501      	adds	r5, #1
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8001490:	f800 4b01 	strb.w	r4, [r0], #1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8001494:	2d08      	cmp	r5, #8
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8001496:	4602      	mov	r2, r0

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8001498:	d1f2      	bne.n	8001480 <get_fileinfo+0x12>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
 800149a:	7a1c      	ldrb	r4, [r3, #8]
 800149c:	2c20      	cmp	r4, #32
 800149e:	d00d      	beq.n	80014bc <get_fileinfo+0x4e>
			*p++ = '.';
 80014a0:	222e      	movs	r2, #46	; 0x2e
 80014a2:	f800 2b01 	strb.w	r2, [r0], #1
			for (i = 8; i < 11; i++) {
 80014a6:	2408      	movs	r4, #8
				c = dir[i];
 80014a8:	5d1d      	ldrb	r5, [r3, r4]
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
 80014aa:	4602      	mov	r2, r0
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
 80014ac:	2d20      	cmp	r5, #32
 80014ae:	d005      	beq.n	80014bc <get_fileinfo+0x4e>
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 80014b0:	3401      	adds	r4, #1
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80014b2:	f800 5b01 	strb.w	r5, [r0], #1
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 80014b6:	2c0b      	cmp	r4, #11
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80014b8:	4602      	mov	r2, r0
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 80014ba:	d1f5      	bne.n	80014a8 <get_fileinfo+0x3a>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80014bc:	7ad8      	ldrb	r0, [r3, #11]
 80014be:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 80014c0:	7f98      	ldrb	r0, [r3, #30]
 80014c2:	7fdc      	ldrb	r4, [r3, #31]
 80014c4:	0400      	lsls	r0, r0, #16
 80014c6:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80014ca:	7f1c      	ldrb	r4, [r3, #28]
 80014cc:	4320      	orrs	r0, r4
 80014ce:	7f5c      	ldrb	r4, [r3, #29]
 80014d0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80014d4:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 80014d6:	7e5c      	ldrb	r4, [r3, #25]
 80014d8:	7e18      	ldrb	r0, [r3, #24]
 80014da:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80014de:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 80014e0:	7dd8      	ldrb	r0, [r3, #23]
 80014e2:	7d9b      	ldrb	r3, [r3, #22]
 80014e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80014e8:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
 80014ea:	2300      	movs	r3, #0
 80014ec:	7013      	strb	r3, [r2, #0]
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
 80014ee:	bd30      	pop	{r4, r5, pc}

080014f0 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80014f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD wsect;


	wsect = fs->winsect;
 80014f4:	6b05      	ldr	r5, [r0, #48]	; 0x30
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80014f6:	4604      	mov	r4, r0
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 80014f8:	428d      	cmp	r5, r1
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80014fa:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 80014fc:	d02a      	beq.n	8001554 <move_window+0x64>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80014fe:	7903      	ldrb	r3, [r0, #4]
 8001500:	b1e3      	cbz	r3, 800153c <move_window+0x4c>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8001502:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8001506:	4641      	mov	r1, r8
 8001508:	7840      	ldrb	r0, [r0, #1]
 800150a:	462a      	mov	r2, r5
 800150c:	2301      	movs	r3, #1
 800150e:	f001 f8fd 	bl	800270c <disk_write>
 8001512:	bb10      	cbnz	r0, 800155a <move_window+0x6a>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8001514:	6a22      	ldr	r2, [r4, #32]
 8001516:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8001518:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800151a:	18d3      	adds	r3, r2, r3
 800151c:	429d      	cmp	r5, r3
 800151e:	d20d      	bcs.n	800153c <move_window+0x4c>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8001520:	78e7      	ldrb	r7, [r4, #3]
 8001522:	e009      	b.n	8001538 <move_window+0x48>
					wsect += fs->fsize;
 8001524:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001526:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8001528:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800152a:	4641      	mov	r1, r8
 800152c:	462a      	mov	r2, r5
 800152e:	2301      	movs	r3, #1
 8001530:	f001 f8ec 	bl	800270c <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8001534:	3f01      	subs	r7, #1
 8001536:	b2ff      	uxtb	r7, r7
 8001538:	2f01      	cmp	r7, #1
 800153a:	d8f3      	bhi.n	8001524 <move_window+0x34>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 800153c:	b186      	cbz	r6, 8001560 <move_window+0x70>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800153e:	7860      	ldrb	r0, [r4, #1]
 8001540:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8001544:	4632      	mov	r2, r6
 8001546:	2301      	movs	r3, #1
 8001548:	f001 f89c 	bl	8002684 <disk_read>
 800154c:	b958      	cbnz	r0, 8001566 <move_window+0x76>
				return FR_DISK_ERR;
			fs->winsect = sector;
 800154e:	6326      	str	r6, [r4, #48]	; 0x30
 8001550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	}

	return FR_OK;
 8001554:	2000      	movs	r0, #0
 8001556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
 800155a:	2001      	movs	r0, #1
 800155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
 8001560:	4630      	mov	r0, r6
 8001562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
 8001566:	2001      	movs	r0, #1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
 8001568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800156c <ld_clust.isra.0>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Load/Store start cluster number                  */
/*-----------------------------------------------------------------------*/

static
DWORD ld_clust (
 800156c:	4603      	mov	r3, r0
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 800156e:	7e8a      	ldrb	r2, [r1, #26]
 8001570:	7ec8      	ldrb	r0, [r1, #27]
	if (fs->fs_type == FS_FAT32)
 8001572:	2b03      	cmp	r3, #3
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8001574:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8001578:	d105      	bne.n	8001586 <ld_clust.isra.0+0x1a>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800157a:	7d4a      	ldrb	r2, [r1, #21]
 800157c:	7d0b      	ldrb	r3, [r1, #20]
 800157e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001582:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

	return cl;
}
 8001586:	4770      	bx	lr

08001588 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001588:	b510      	push	{r4, lr}
 800158a:	4604      	mov	r4, r0
 800158c:	460a      	mov	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 800158e:	7840      	ldrb	r0, [r0, #1]
 8001590:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8001594:	2301      	movs	r3, #1
 8001596:	f001 f875 	bl	8002684 <disk_read>
 800159a:	bb80      	cbnz	r0, 80015fe <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 800159c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 80015a0:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 80015a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <check_fs+0x80>)
 80015aa:	b212      	sxth	r2, r2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d128      	bne.n	8001602 <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80015b0:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80015b4:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 80015b8:	0412      	lsls	r2, r2, #16
 80015ba:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80015be:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80015c2:	431a      	orrs	r2, r3
 80015c4:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 80015c8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <check_fs+0x84>)
 80015ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d016      	beq.n	8001604 <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 80015d6:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
 80015da:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 80015de:	0400      	lsls	r0, r0, #16
 80015e0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80015e4:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
 80015e8:	4310      	orrs	r0, r2
 80015ea:	f894 2087 	ldrb.w	r2, [r4, #135]	; 0x87
 80015ee:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80015f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 0;
 80015f6:	1ac0      	subs	r0, r0, r3
 80015f8:	bf18      	it	ne
 80015fa:	2001      	movne	r0, #1
 80015fc:	bd10      	pop	{r4, pc}
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
 80015fe:	2003      	movs	r0, #3
 8001600:	bd10      	pop	{r4, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 8001602:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
 8001604:	bd10      	pop	{r4, pc}
 8001606:	bf00      	nop
 8001608:	ffffaa55 	.word	0xffffaa55
 800160c:	00544146 	.word	0x00544146

08001610 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8001610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001614:	4616      	mov	r6, r2
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8001616:	6802      	ldr	r2, [r0, #0]
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8001618:	460d      	mov	r5, r1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 800161a:	7813      	ldrb	r3, [r2, #0]
 800161c:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 800161e:	2b09      	cmp	r3, #9
 8001620:	d805      	bhi.n	800162e <chk_mounted+0x1e>
 8001622:	7851      	ldrb	r1, [r2, #1]
 8001624:	293a      	cmp	r1, #58	; 0x3a
 8001626:	d102      	bne.n	800162e <chk_mounted+0x1e>
		p += 2; *path = p;				/* Return pointer to the path name */
 8001628:	3202      	adds	r2, #2
 800162a:	6002      	str	r2, [r0, #0]
 800162c:	e000      	b.n	8001630 <chk_mounted+0x20>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
 800162e:	2300      	movs	r3, #0
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 8001630:	2200      	movs	r2, #0
 8001632:	602a      	str	r2, [r5, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 8162 	bne.w	80018fe <chk_mounted+0x2ee>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
 800163a:	4bbd      	ldr	r3, [pc, #756]	; (8001930 <chk_mounted+0x320>)
 800163c:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800163e:	2c00      	cmp	r4, #0
 8001640:	f000 8160 	beq.w	8001904 <chk_mounted+0x2f4>
static
int lock_fs (
	FATFS *fs		/* File system object */
)
{
	return ff_req_grant(fs->sobj);
 8001644:	68e0      	ldr	r0, [r4, #12]
 8001646:	f000 fd1f 	bl	8002088 <ff_req_grant>
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */
 800164a:	2800      	cmp	r0, #0
 800164c:	f000 815d 	beq.w	800190a <chk_mounted+0x2fa>

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 8001650:	602c      	str	r4, [r5, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8001652:	7823      	ldrb	r3, [r4, #0]
 8001654:	b173      	cbz	r3, 8001674 <chk_mounted+0x64>
		stat = disk_status(fs->drv);
 8001656:	7860      	ldrb	r0, [r4, #1]
 8001658:	f001 f808 	bl	800266c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 800165c:	07c3      	lsls	r3, r0, #31
 800165e:	d409      	bmi.n	8001674 <chk_mounted+0x64>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8001660:	2e00      	cmp	r6, #0
 8001662:	f000 8155 	beq.w	8001910 <chk_mounted+0x300>
				return FR_WRITE_PROTECTED;
 8001666:	f010 0f04 	tst.w	r0, #4
 800166a:	bf0c      	ite	eq
 800166c:	2000      	moveq	r0, #0
 800166e:	200a      	movne	r0, #10
 8001670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8001674:	2000      	movs	r0, #0
 8001676:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001678:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800167a:	f000 ff49 	bl	8002510 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800167e:	07c1      	lsls	r1, r0, #31
 8001680:	f100 8149 	bmi.w	8001916 <chk_mounted+0x306>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8001684:	b116      	cbz	r6, 800168c <chk_mounted+0x7c>
 8001686:	0742      	lsls	r2, r0, #29
 8001688:	f100 8148 	bmi.w	800191c <chk_mounted+0x30c>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 800168c:	2100      	movs	r1, #0
 800168e:	4620      	mov	r0, r4
 8001690:	f7ff ff7a 	bl	8001588 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8001694:	2801      	cmp	r0, #1
 8001696:	d117      	bne.n	80016c8 <chk_mounted+0xb8>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
 8001698:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8143 	beq.w	8001928 <chk_mounted+0x318>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 80016a2:	f894 61fc 	ldrb.w	r6, [r4, #508]	; 0x1fc
 80016a6:	f894 31fd 	ldrb.w	r3, [r4, #509]	; 0x1fd
 80016aa:	0436      	lsls	r6, r6, #16
 80016ac:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 80016b0:	f894 31fa 	ldrb.w	r3, [r4, #506]	; 0x1fa
			fmt = check_fs(fs, bsect);		/* Check the partition */
 80016b4:	4620      	mov	r0, r4
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 80016b6:	431e      	orrs	r6, r3
 80016b8:	f894 31fb 	ldrb.w	r3, [r4, #507]	; 0x1fb
 80016bc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
 80016c0:	4631      	mov	r1, r6
 80016c2:	f7ff ff61 	bl	8001588 <check_fs>
 80016c6:	e000      	b.n	80016ca <chk_mounted+0xba>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 80016c8:	2600      	movs	r6, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 80016ca:	2803      	cmp	r0, #3
 80016cc:	f000 8129 	beq.w	8001922 <chk_mounted+0x312>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80016d0:	2800      	cmp	r0, #0
 80016d2:	f040 8129 	bne.w	8001928 <chk_mounted+0x318>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80016d6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80016da:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80016de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e6:	f040 811f 	bne.w	8001928 <chk_mounted+0x318>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80016ea:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 80016ee:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80016f2:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
 80016f6:	d10d      	bne.n	8001714 <chk_mounted+0x104>
 80016f8:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
 80016fc:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 8001700:	0400      	lsls	r0, r0, #16
 8001702:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001706:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800170a:	4318      	orrs	r0, r3
 800170c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8001710:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8001714:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;
 8001718:	6220      	str	r0, [r4, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 800171a:	1e6b      	subs	r3, r5, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b01      	cmp	r3, #1

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8001720:	70e5      	strb	r5, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8001722:	f200 8101 	bhi.w	8001928 <chk_mounted+0x318>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8001726:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800172a:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800172c:	2900      	cmp	r1, #0
 800172e:	f000 80fb 	beq.w	8001928 <chk_mounted+0x318>
 8001732:	1e4b      	subs	r3, r1, #1
 8001734:	420b      	tst	r3, r1
 8001736:	f040 80f7 	bne.w	8001928 <chk_mounted+0x318>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800173a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800173e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8001742:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8001746:	0713      	lsls	r3, r2, #28
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8001748:	8122      	strh	r2, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 800174a:	f040 80ed 	bne.w	8001928 <chk_mounted+0x318>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 800174e:	f894 7048 	ldrb.w	r7, [r4, #72]	; 0x48
 8001752:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8001756:	ea53 2307 	orrs.w	r3, r3, r7, lsl #8
 800175a:	d10d      	bne.n	8001778 <chk_mounted+0x168>
 800175c:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8001760:	f894 7057 	ldrb.w	r7, [r4, #87]	; 0x57
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800176a:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
 800176e:	433b      	orrs	r3, r7
 8001770:	f894 7055 	ldrb.w	r7, [r4, #85]	; 0x55
 8001774:	ea43 2307 	orr.w	r3, r3, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8001778:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
 800177c:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8001780:	ea57 2c0c 	orrs.w	ip, r7, ip, lsl #8
 8001784:	f000 80d0 	beq.w	8001928 <chk_mounted+0x318>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
 8001788:	fb05 f800 	mul.w	r8, r5, r0

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 800178c:	eb0c 1712 	add.w	r7, ip, r2, lsr #4
 8001790:	4447      	add	r7, r8
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001792:	42bb      	cmp	r3, r7
 8001794:	f0c0 80c8 	bcc.w	8001928 <chk_mounted+0x318>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8001798:	1bdb      	subs	r3, r3, r7
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80c2 	beq.w	8001928 <chk_mounted+0x318>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80017a4:	f640 71f5 	movw	r1, #4085	; 0xff5
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d906      	bls.n	80017ba <chk_mounted+0x1aa>
 80017ac:	f64f 75f5 	movw	r5, #65525	; 0xfff5
 80017b0:	42ab      	cmp	r3, r5
 80017b2:	bf8c      	ite	hi
 80017b4:	2503      	movhi	r5, #3
 80017b6:	2502      	movls	r5, #2
 80017b8:	e000      	b.n	80017bc <chk_mounted+0x1ac>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
 80017ba:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80017bc:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
 80017be:	19bf      	adds	r7, r7, r6
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80017c0:	eb06 010c 	add.w	r1, r6, ip
	if (fmt == FS_FAT32) {
 80017c4:	2d03      	cmp	r5, #3
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80017c6:	61e3      	str	r3, [r4, #28]
	fs->database = bsect + sysect;						/* Data start sector */
 80017c8:	62e7      	str	r7, [r4, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80017ca:	6261      	str	r1, [r4, #36]	; 0x24
	if (fmt == FS_FAT32) {
 80017cc:	d113      	bne.n	80017f6 <chk_mounted+0x1e6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	f040 80aa 	bne.w	8001928 <chk_mounted+0x318>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 80017d4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80017d8:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
 80017dc:	0412      	lsls	r2, r2, #16
 80017de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80017e2:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 80017e6:	009b      	lsls	r3, r3, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 80017e8:	430a      	orrs	r2, r1
 80017ea:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
 80017ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017f2:	62a2      	str	r2, [r4, #40]	; 0x28
 80017f4:	e00e      	b.n	8001814 <chk_mounted+0x204>
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	f000 8096 	beq.w	8001928 <chk_mounted+0x318>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80017fc:	4441      	add	r1, r8
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80017fe:	2d02      	cmp	r5, #2
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8001800:	62a1      	str	r1, [r4, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001802:	d101      	bne.n	8001808 <chk_mounted+0x1f8>
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	e005      	b.n	8001814 <chk_mounted+0x204>
 8001808:	2203      	movs	r2, #3
 800180a:	435a      	muls	r2, r3
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 8001814:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001818:	3303      	adds	r3, #3
 800181a:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
 800181e:	f0c0 8091 	bcc.w	8001944 <chk_mounted+0x334>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	6163      	str	r3, [r4, #20]
	fs->last_clust = 0;
 8001828:	2300      	movs	r3, #0

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 800182a:	2d03      	cmp	r5, #3
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->last_clust = 0;
 800182c:	6123      	str	r3, [r4, #16]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 800182e:	d15a      	bne.n	80018e6 <chk_mounted+0x2d6>
	 	fs->fsi_flag = 0;
 8001830:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8001832:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8001836:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 800183a:	7860      	ldrb	r0, [r4, #1]
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 800183c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8001840:	18b2      	adds	r2, r6, r2
 8001842:	61a2      	str	r2, [r4, #24]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001844:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8001848:	2301      	movs	r3, #1
 800184a:	f000 ff1b 	bl	8002684 <disk_read>
 800184e:	2800      	cmp	r0, #0
 8001850:	d149      	bne.n	80018e6 <chk_mounted+0x2d6>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001852:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8001856:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800185a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 800185e:	4b35      	ldr	r3, [pc, #212]	; (8001934 <chk_mounted+0x324>)
 8001860:	b212      	sxth	r2, r2
 8001862:	429a      	cmp	r2, r3
 8001864:	d13f      	bne.n	80018e6 <chk_mounted+0x2d6>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8001866:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800186a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800186e:	0412      	lsls	r2, r2, #16
 8001870:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8001874:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001878:	431a      	orrs	r2, r3
 800187a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800187e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <chk_mounted+0x328>)
 8001884:	429a      	cmp	r2, r3
 8001886:	d12e      	bne.n	80018e6 <chk_mounted+0x2d6>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8001888:	f894 221a 	ldrb.w	r2, [r4, #538]	; 0x21a
 800188c:	f894 321b 	ldrb.w	r3, [r4, #539]	; 0x21b
 8001890:	0412      	lsls	r2, r2, #16
 8001892:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8001896:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 800189a:	431a      	orrs	r2, r3
 800189c:	f894 3219 	ldrb.w	r3, [r4, #537]	; 0x219
 80018a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <chk_mounted+0x32c>)
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d11d      	bne.n	80018e6 <chk_mounted+0x2d6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80018aa:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
 80018ae:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018b8:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 80018bc:	4313      	orrs	r3, r2
 80018be:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
 80018c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018c6:	6123      	str	r3, [r4, #16]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80018c8:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 80018cc:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
 80018d0:	041b      	lsls	r3, r3, #16
 80018d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018d6:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
 80018da:	4313      	orrs	r3, r2
 80018dc:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 80018e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018e4:	6163      	str	r3, [r4, #20]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
 80018e6:	4a16      	ldr	r2, [pc, #88]	; (8001940 <chk_mounted+0x330>)
	fs->winsect = 0;		/* Invalidate sector cache */
 80018e8:	2000      	movs	r0, #0
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
 80018ea:	8813      	ldrh	r3, [r2, #0]
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 80018ec:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80018ee:	3301      	adds	r3, #1
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	8013      	strh	r3, [r2, #0]
 80018f4:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 80018f6:	6320      	str	r0, [r4, #48]	; 0x30
	fs->wflag = 0;
 80018f8:	7120      	strb	r0, [r4, #4]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 80018fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
 80018fe:	200b      	movs	r0, #11
 8001900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001904:	200c      	movs	r0, #12
 8001906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	ENTER_FF(fs);						/* Lock file system */
 800190a:	200f      	movs	r0, #15
 800190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
 8001910:	4630      	mov	r0, r6
 8001912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001916:	2003      	movs	r0, #3
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
 800191c:	200a      	movs	r0, #10
 800191e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8001922:	2001      	movs	r0, #1
 8001924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001928:	200d      	movs	r0, #13
 800192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192e:	bf00      	nop
 8001930:	200009dc 	.word	0x200009dc
 8001934:	ffffaa55 	.word	0xffffaa55
 8001938:	41615252 	.word	0x41615252
 800193c:	61417272 	.word	0x61417272
 8001940:	200009d8 	.word	0x200009d8
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
 8001944:	200d      	movs	r0, #13
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8001946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800194a:	bf00      	nop

0800194c <validate>:
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 800194c:	6803      	ldr	r3, [r0, #0]

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800194e:	b510      	push	{r4, lr}
 8001950:	4604      	mov	r4, r0
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8001952:	b193      	cbz	r3, 800197a <validate+0x2e>
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	b182      	cbz	r2, 800197a <validate+0x2e>
 8001958:	88d9      	ldrh	r1, [r3, #6]
 800195a:	8882      	ldrh	r2, [r0, #4]
 800195c:	4291      	cmp	r1, r2
 800195e:	d10c      	bne.n	800197a <validate+0x2e>
static
int lock_fs (
	FATFS *fs		/* File system object */
)
{
	return ff_req_grant(fs->sobj);
 8001960:	68d8      	ldr	r0, [r3, #12]
 8001962:	f000 fb91 	bl	8002088 <ff_req_grant>

	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */
 8001966:	b150      	cbz	r0, 800197e <validate+0x32>

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	7858      	ldrb	r0, [r3, #1]
 800196c:	f000 fe7e 	bl	800266c <disk_status>
 8001970:	f010 0001 	ands.w	r0, r0, #1
		return FR_NOT_READY;
 8001974:	bf18      	it	ne
 8001976:	2003      	movne	r0, #3
 8001978:	bd10      	pop	{r4, pc}
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
 800197a:	2009      	movs	r0, #9
 800197c:	bd10      	pop	{r4, pc}

	ENTER_FF(fil->fs);		/* Lock file system */
 800197e:	200f      	movs	r0, #15

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
 8001980:	bd10      	pop	{r4, pc}

08001982 <unlock_fs>:
void unlock_fs (
	FATFS *fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
	if (fs &&
 8001982:	b150      	cbz	r0, 800199a <unlock_fs+0x18>
 8001984:	290c      	cmp	r1, #12
 8001986:	d008      	beq.n	800199a <unlock_fs+0x18>
		res != FR_NOT_ENABLED &&
 8001988:	290b      	cmp	r1, #11
 800198a:	d006      	beq.n	800199a <unlock_fs+0x18>
		res != FR_INVALID_DRIVE &&
 800198c:	2909      	cmp	r1, #9
 800198e:	d004      	beq.n	800199a <unlock_fs+0x18>
		res != FR_INVALID_OBJECT &&
 8001990:	290f      	cmp	r1, #15
 8001992:	d002      	beq.n	800199a <unlock_fs+0x18>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8001994:	68c0      	ldr	r0, [r0, #12]
 8001996:	f000 bb84 	b.w	80020a2 <ff_rel_grant>
 800199a:	4770      	bx	lr

0800199c <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800199c:	69c3      	ldr	r3, [r0, #28]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800199e:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 80019a0:	3b02      	subs	r3, #2
 80019a2:	4299      	cmp	r1, r3
 80019a4:	d204      	bcs.n	80019b0 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 80019a6:	7882      	ldrb	r2, [r0, #2]
 80019a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019aa:	fb02 3001 	mla	r0, r2, r1, r3
 80019ae:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 80019b0:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
 80019b2:	4770      	bx	lr

080019b4 <get_fat>:
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 80019b4:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 80019b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 80019bc:	d95b      	bls.n	8001a76 <get_fat+0xc2>
 80019be:	69c3      	ldr	r3, [r0, #28]
 80019c0:	4299      	cmp	r1, r3
 80019c2:	d25a      	bcs.n	8001a7a <get_fat+0xc6>
		return 1;

	switch (fs->fs_type) {
 80019c4:	7803      	ldrb	r3, [r0, #0]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d028      	beq.n	8001a1c <get_fat+0x68>
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d036      	beq.n	8001a3c <get_fat+0x88>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d14e      	bne.n	8001a70 <get_fat+0xbc>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 80019d2:	eb01 0651 	add.w	r6, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80019d6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80019d8:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80019dc:	f7ff fd88 	bl	80014f0 <move_window>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d145      	bne.n	8001a70 <get_fat+0xbc>
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80019e4:	6a61      	ldr	r1, [r4, #36]	; 0x24

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
 80019e6:	05f3      	lsls	r3, r6, #23
 80019e8:	3601      	adds	r6, #1
 80019ea:	eb04 53d3 	add.w	r3, r4, r3, lsr #23
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80019ee:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80019f2:	4620      	mov	r0, r4

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
 80019f4:	f893 7034 	ldrb.w	r7, [r3, #52]	; 0x34
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80019f8:	f7ff fd7a 	bl	80014f0 <move_window>
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d137      	bne.n	8001a70 <get_fat+0xbc>
		wc |= fs->win[bc % SS(fs)] << 8;
 8001a00:	05f6      	lsls	r6, r6, #23
 8001a02:	eb04 54d6 	add.w	r4, r4, r6, lsr #23
 8001a06:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8001a0a:	07ea      	lsls	r2, r5, #31
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
 8001a0c:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8001a10:	d501      	bpl.n	8001a16 <get_fat+0x62>
 8001a12:	0900      	lsrs	r0, r0, #4
 8001a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a16:	0500      	lsls	r0, r0, #20
 8001a18:	0d00      	lsrs	r0, r0, #20
 8001a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8001a1c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001a1e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8001a22:	f7ff fd65 	bl	80014f0 <move_window>
 8001a26:	bb18      	cbnz	r0, 8001a70 <get_fat+0xbc>
		p = &fs->win[clst * 2 % SS(fs)];
 8001a28:	062d      	lsls	r5, r5, #24
		return LD_WORD(p);
 8001a2a:	eb04 54d5 	add.w	r4, r4, r5, lsr #23
 8001a2e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001a32:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001a36:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8001a3c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001a3e:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8001a42:	f7ff fd55 	bl	80014f0 <move_window>
 8001a46:	b998      	cbnz	r0, 8001a70 <get_fat+0xbc>
		p = &fs->win[clst * 4 % SS(fs)];
 8001a48:	066d      	lsls	r5, r5, #25
		return LD_DWORD(p) & 0x0FFFFFFF;
 8001a4a:	eb04 54d5 	add.w	r4, r4, r5, lsr #23
 8001a4e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8001a52:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8001a56:	0400      	lsls	r0, r0, #16
 8001a58:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a5c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001a60:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
 8001a64:	4318      	orrs	r0, r3
 8001a66:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8001a6a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8001a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
 8001a76:	2001      	movs	r0, #1
 8001a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a7a:	2001      	movs	r0, #1
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
 8001a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a7e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 8001a7e:	b570      	push	{r4, r5, r6, lr}
 8001a80:	4604      	mov	r4, r0
 8001a82:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8001a84:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
 8001a86:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8001a88:	2901      	cmp	r1, #1
 8001a8a:	d038      	beq.n	8001afe <dir_sdi+0x80>
 8001a8c:	6803      	ldr	r3, [r0, #0]
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d234      	bcs.n	8001afe <dir_sdi+0x80>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8001a94:	b971      	cbnz	r1, 8001ab4 <dir_sdi+0x36>
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	2a03      	cmp	r2, #3
 8001a9a:	d101      	bne.n	8001aa0 <dir_sdi+0x22>
		clst = dj->fs->dirbase;
 8001a9c:	6a99      	ldr	r1, [r3, #40]	; 0x28

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8001a9e:	b949      	cbnz	r1, 8001ab4 <dir_sdi+0x36>
		dj->clust = clst;
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8001aa4:	891a      	ldrh	r2, [r3, #8]
 8001aa6:	42aa      	cmp	r2, r5
 8001aa8:	d929      	bls.n	8001afe <dir_sdi+0x80>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	eb03 1315 	add.w	r3, r3, r5, lsr #4
 8001ab0:	6123      	str	r3, [r4, #16]
 8001ab2:	e019      	b.n	8001ae8 <dir_sdi+0x6a>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 8001ab4:	789e      	ldrb	r6, [r3, #2]
 8001ab6:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8001ab8:	e00d      	b.n	8001ad6 <dir_sdi+0x58>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8001aba:	6820      	ldr	r0, [r4, #0]
 8001abc:	f7ff ff7a 	bl	80019b4 <get_fat>
 8001ac0:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001ac2:	3001      	adds	r0, #1
 8001ac4:	d019      	beq.n	8001afa <dir_sdi+0x7c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8001ac6:	2901      	cmp	r1, #1
 8001ac8:	d919      	bls.n	8001afe <dir_sdi+0x80>
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4299      	cmp	r1, r3
 8001ad0:	d217      	bcs.n	8001b02 <dir_sdi+0x84>
				return FR_INT_ERR;
			idx -= ic;
 8001ad2:	1bad      	subs	r5, r5, r6
 8001ad4:	b2ad      	uxth	r5, r5
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8001ad6:	42b5      	cmp	r5, r6
 8001ad8:	d2ef      	bcs.n	8001aba <dir_sdi+0x3c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
 8001ada:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8001adc:	6820      	ldr	r0, [r4, #0]
 8001ade:	f7ff ff5d 	bl	800199c <clust2sect>
 8001ae2:	eb00 1015 	add.w	r0, r0, r5, lsr #4
 8001ae6:	6120      	str	r0, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	f005 050f 	and.w	r5, r5, #15
 8001aee:	3334      	adds	r3, #52	; 0x34
 8001af0:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8001af4:	6165      	str	r5, [r4, #20]

	return FR_OK;	/* Seek succeeded */
 8001af6:	2000      	movs	r0, #0
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001afa:	2001      	movs	r0, #1
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
 8001afe:	2002      	movs	r0, #2
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
 8001b02:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
 8001b04:	bd70      	pop	{r4, r5, r6, pc}

08001b06 <put_fat>:
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001b06:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001b10:	d970      	bls.n	8001bf4 <put_fat+0xee>
 8001b12:	69c3      	ldr	r3, [r0, #28]
 8001b14:	4299      	cmp	r1, r3
 8001b16:	d26f      	bcs.n	8001bf8 <put_fat+0xf2>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
 8001b18:	7803      	ldrb	r3, [r0, #0]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d03a      	beq.n	8001b94 <put_fat+0x8e>
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d048      	beq.n	8001bb4 <put_fat+0xae>
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d162      	bne.n	8001bec <put_fat+0xe6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001b26:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001b2a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001b2c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8001b30:	f7ff fcde 	bl	80014f0 <move_window>
			if (res != FR_OK) break;
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d15a      	bne.n	8001bee <put_fat+0xe8>
			p = &fs->win[bc % SS(fs)];
 8001b38:	05fa      	lsls	r2, r7, #23
 8001b3a:	0dd2      	lsrs	r2, r2, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001b3c:	f015 0501 	ands.w	r5, r5, #1
 8001b40:	b2f3      	uxtb	r3, r6
 8001b42:	d007      	beq.n	8001b54 <put_fat+0x4e>
 8001b44:	18a1      	adds	r1, r4, r2
 8001b46:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8001b4a:	f001 010f 	and.w	r1, r1, #15
 8001b4e:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	18a2      	adds	r2, r4, r2
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001b58:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			bc++;
 8001b5c:	3701      	adds	r7, #1
			fs->wflag = 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001b62:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff fcc2 	bl	80014f0 <move_window>
			if (res != FR_OK) break;
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d13e      	bne.n	8001bee <put_fat+0xe8>
			p = &fs->win[bc % SS(fs)];
 8001b70:	05ff      	lsls	r7, r7, #23
 8001b72:	0dff      	lsrs	r7, r7, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001b74:	b115      	cbz	r5, 8001b7c <put_fat+0x76>
 8001b76:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8001b7a:	e007      	b.n	8001b8c <put_fat+0x86>
 8001b7c:	19e3      	adds	r3, r4, r7
 8001b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b82:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8001b86:	f023 030f 	bic.w	r3, r3, #15
 8001b8a:	431e      	orrs	r6, r3
 8001b8c:	19e7      	adds	r7, r4, r7
 8001b8e:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
 8001b92:	e02c      	b.n	8001bee <put_fat+0xe8>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001b94:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001b96:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8001b9a:	f7ff fca9 	bl	80014f0 <move_window>
			if (res != FR_OK) break;
 8001b9e:	bb30      	cbnz	r0, 8001bee <put_fat+0xe8>
			p = &fs->win[clst * 2 % SS(fs)];
 8001ba0:	062d      	lsls	r5, r5, #24
			ST_WORD(p, (WORD)val);
 8001ba2:	eb04 55d5 	add.w	r5, r4, r5, lsr #23
 8001ba6:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
 8001baa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8001bae:	f885 6035 	strb.w	r6, [r5, #53]	; 0x35
 8001bb2:	e01c      	b.n	8001bee <put_fat+0xe8>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001bb4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001bb6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8001bba:	f7ff fc99 	bl	80014f0 <move_window>
			if (res != FR_OK) break;
 8001bbe:	b9b0      	cbnz	r0, 8001bee <put_fat+0xe8>
			p = &fs->win[clst * 4 % SS(fs)];
 8001bc0:	066d      	lsls	r5, r5, #25
			val |= LD_DWORD(p) & 0xF0000000;
 8001bc2:	eb04 55d5 	add.w	r5, r4, r5, lsr #23
 8001bc6:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8001bca:	061b      	lsls	r3, r3, #24
 8001bcc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001bd0:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
 8001bd2:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8001bd6:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
 8001bda:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8001bde:	0c33      	lsrs	r3, r6, #16
 8001be0:	0e36      	lsrs	r6, r6, #24
 8001be2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8001be6:	f885 6037 	strb.w	r6, [r5, #55]	; 0x37
 8001bea:	e000      	b.n	8001bee <put_fat+0xe8>
			break;

		default :
			res = FR_INT_ERR;
 8001bec:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	7123      	strb	r3, [r4, #4]
 8001bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf8:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 8001bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bfc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	4604      	mov	r4, r0
 8001c00:	460e      	mov	r6, r1
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8001c02:	b931      	cbnz	r1, 8001c12 <create_chain+0x16>
		scl = fs->last_clust;			/* Get suggested start point */
 8001c04:	6907      	ldr	r7, [r0, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8001c06:	b16f      	cbz	r7, 8001c24 <create_chain+0x28>
 8001c08:	69c3      	ldr	r3, [r0, #28]
 8001c0a:	429f      	cmp	r7, r3
 8001c0c:	bf28      	it	cs
 8001c0e:	2701      	movcs	r7, #1
 8001c10:	e009      	b.n	8001c26 <create_chain+0x2a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001c12:	f7ff fecf 	bl	80019b4 <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8001c16:	2801      	cmp	r0, #1
 8001c18:	d937      	bls.n	8001c8a <create_chain+0x8e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001c1a:	69e3      	ldr	r3, [r4, #28]
 8001c1c:	4298      	cmp	r0, r3
 8001c1e:	d339      	bcc.n	8001c94 <create_chain+0x98>
 8001c20:	4637      	mov	r7, r6
 8001c22:	e000      	b.n	8001c26 <create_chain+0x2a>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8001c24:	2701      	movs	r7, #1
 8001c26:	463d      	mov	r5, r7
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8001c28:	69e3      	ldr	r3, [r4, #28]
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 8001c2a:	3501      	adds	r5, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	d302      	bcc.n	8001c36 <create_chain+0x3a>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
 8001c30:	2f01      	cmp	r7, #1
 8001c32:	d92c      	bls.n	8001c8e <create_chain+0x92>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
 8001c34:	2502      	movs	r5, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7ff febb 	bl	80019b4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8001c3e:	b130      	cbz	r0, 8001c4e <create_chain+0x52>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8001c40:	1c41      	adds	r1, r0, #1
 8001c42:	d027      	beq.n	8001c94 <create_chain+0x98>
 8001c44:	2801      	cmp	r0, #1
 8001c46:	d025      	beq.n	8001c94 <create_chain+0x98>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8001c48:	42bd      	cmp	r5, r7
 8001c4a:	d1ed      	bne.n	8001c28 <create_chain+0x2c>
 8001c4c:	e01f      	b.n	8001c8e <create_chain+0x92>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001c56:	f7ff ff56 	bl	8001b06 <put_fat>
	if (res == FR_OK && clst != 0) {
 8001c5a:	b980      	cbnz	r0, 8001c7e <create_chain+0x82>
 8001c5c:	b12e      	cbz	r6, 8001c6a <create_chain+0x6e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4631      	mov	r1, r6
 8001c62:	462a      	mov	r2, r5
 8001c64:	f7ff ff4f 	bl	8001b06 <put_fat>
	}
	if (res == FR_OK) {
 8001c68:	b948      	cbnz	r0, 8001c7e <create_chain+0x82>
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
 8001c6a:	6963      	ldr	r3, [r4, #20]
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
 8001c6c:	6125      	str	r5, [r4, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	d00f      	beq.n	8001c92 <create_chain+0x96>
			fs->free_clust--;
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6163      	str	r3, [r4, #20]
			fs->fsi_flag = 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	7163      	strb	r3, [r4, #5]
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8001c7e:	2801      	cmp	r0, #1
 8001c80:	bf14      	ite	ne
 8001c82:	2001      	movne	r0, #1
 8001c84:	f04f 30ff 	moveq.w	r0, #4294967295
 8001c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8001c8e:	2000      	movs	r0, #0
 8001c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
 8001c92:	4628      	mov	r0, r5
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
 8001c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 8001c9a:	88c6      	ldrh	r6, [r0, #6]
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001c9c:	4604      	mov	r4, r0
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 8001c9e:	3601      	adds	r6, #1
 8001ca0:	b2b6      	uxth	r6, r6
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001ca2:	460f      	mov	r7, r1
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8001ca4:	2e00      	cmp	r6, #0
 8001ca6:	d067      	beq.n	8001d78 <dir_next+0xe2>
 8001ca8:	6903      	ldr	r3, [r0, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d064      	beq.n	8001d78 <dir_next+0xe2>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8001cae:	0732      	lsls	r2, r6, #28
 8001cb0:	d157      	bne.n	8001d62 <dir_next+0xcc>
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
 8001cb2:	68c1      	ldr	r1, [r0, #12]
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	6103      	str	r3, [r0, #16]
 8001cb8:	6800      	ldr	r0, [r0, #0]

		if (dj->clust == 0) {	/* Static table */
 8001cba:	b919      	cbnz	r1, 8001cc4 <dir_next+0x2e>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8001cbc:	8903      	ldrh	r3, [r0, #8]
 8001cbe:	42b3      	cmp	r3, r6
 8001cc0:	d95a      	bls.n	8001d78 <dir_next+0xe2>
 8001cc2:	e04e      	b.n	8001d62 <dir_next+0xcc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8001cc4:	7883      	ldrb	r3, [r0, #2]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	ea13 1316 	ands.w	r3, r3, r6, lsr #4
 8001ccc:	d149      	bne.n	8001d62 <dir_next+0xcc>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8001cce:	f7ff fe71 	bl	80019b4 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8001cd2:	2801      	cmp	r0, #1
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8001cd4:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8001cd6:	d955      	bls.n	8001d84 <dir_next+0xee>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	d056      	beq.n	8001d8a <dir_next+0xf4>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	69c3      	ldr	r3, [r0, #28]
 8001ce0:	429d      	cmp	r5, r3
 8001ce2:	d338      	bcc.n	8001d56 <dir_next+0xc0>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8001ce4:	2f00      	cmp	r7, #0
 8001ce6:	d047      	beq.n	8001d78 <dir_next+0xe2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8001ce8:	68e1      	ldr	r1, [r4, #12]
 8001cea:	f7ff ff87 	bl	8001bfc <create_chain>
 8001cee:	4605      	mov	r5, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	d044      	beq.n	8001d7e <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;
 8001cf4:	2801      	cmp	r0, #1
 8001cf6:	d045      	beq.n	8001d84 <dir_next+0xee>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001cf8:	3001      	adds	r0, #1
 8001cfa:	d046      	beq.n	8001d8a <dir_next+0xf4>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f7ff fbf6 	bl	80014f0 <move_window>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d140      	bne.n	8001d8a <dir_next+0xf4>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8001d08:	6822      	ldr	r2, [r4, #0]
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8001d0a:	4603      	mov	r3, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8001d0c:	3234      	adds	r2, #52	; 0x34
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8001d0e:	5413      	strb	r3, [r2, r0]
 8001d10:	3001      	adds	r0, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8001d12:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001d16:	d1fa      	bne.n	8001d0e <dir_next+0x78>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8001d18:	6827      	ldr	r7, [r4, #0]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	f7ff fe3d 	bl	800199c <clust2sect>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
 8001d22:	f04f 0801 	mov.w	r8, #1
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8001d26:	6338      	str	r0, [r7, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001d28:	2700      	movs	r7, #0
 8001d2a:	e00d      	b.n	8001d48 <dir_next+0xb2>
						dj->fs->wflag = 1;
 8001d2c:	f883 8004 	strb.w	r8, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	2100      	movs	r1, #0
 8001d34:	f7ff fbdc 	bl	80014f0 <move_window>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d129      	bne.n	8001d90 <dir_next+0xfa>
						dj->fs->winsect++;
 8001d3c:	6823      	ldr	r3, [r4, #0]
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001d3e:	3701      	adds	r7, #1
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001d42:	b2ff      	uxtb	r7, r7
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 8001d44:	3201      	adds	r2, #1
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	789a      	ldrb	r2, [r3, #2]
 8001d4c:	42ba      	cmp	r2, r7
 8001d4e:	d8ed      	bhi.n	8001d2c <dir_next+0x96>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8001d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d52:	1bd7      	subs	r7, r2, r7
 8001d54:	631f      	str	r7, [r3, #48]	; 0x30
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8001d56:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8001d58:	6820      	ldr	r0, [r4, #0]
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7ff fe1e 	bl	800199c <clust2sect>
 8001d60:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 8001d62:	6823      	ldr	r3, [r4, #0]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
 8001d64:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 8001d66:	3334      	adds	r3, #52	; 0x34
 8001d68:	f006 060f 	and.w	r6, r6, #15
 8001d6c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
 8001d70:	6166      	str	r6, [r4, #20]

	return FR_OK;
 8001d72:	2000      	movs	r0, #0
 8001d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8001d78:	2004      	movs	r0, #4
 8001d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001d7e:	2007      	movs	r0, #7
 8001d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 1) return FR_INT_ERR;
 8001d84:	2002      	movs	r0, #2
 8001d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8001d90:	2001      	movs	r0, #1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
 8001d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001d98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8001d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8001d9c:	780b      	ldrb	r3, [r1, #0]
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8001d9e:	4604      	mov	r4, r0
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8001da0:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8001da2:	460d      	mov	r5, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8001da4:	d001      	beq.n	8001daa <follow_path+0x12>
 8001da6:	2b5c      	cmp	r3, #92	; 0x5c
 8001da8:	d100      	bne.n	8001dac <follow_path+0x14>
		path++;
 8001daa:	3501      	adds	r5, #1
	dj->sclust = 0;						/* Start from the root dir */
 8001dac:	2600      	movs	r6, #0
 8001dae:	60a6      	str	r6, [r4, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8001db0:	782b      	ldrb	r3, [r5, #0]
 8001db2:	2b1f      	cmp	r3, #31
 8001db4:	d806      	bhi.n	8001dc4 <follow_path+0x2c>
		res = dir_sdi(dj, 0);
 8001db6:	4620      	mov	r0, r4
 8001db8:	4631      	mov	r1, r6
 8001dba:	f7ff fe60 	bl	8001a7e <dir_sdi>
		dj->dir = 0;
 8001dbe:	6166      	str	r6, [r4, #20]
 8001dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8001dc4:	2720      	movs	r7, #32
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8001dc6:	782b      	ldrb	r3, [r5, #0]
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
 8001dc8:	462e      	mov	r6, r5
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8001dca:	3501      	adds	r5, #1
 8001dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8001dce:	d0fa      	beq.n	8001dc6 <follow_path+0x2e>
 8001dd0:	2b5c      	cmp	r3, #92	; 0x5c
 8001dd2:	d0f8      	beq.n	8001dc6 <follow_path+0x2e>
	sfn = dj->fn;
 8001dd4:	69a0      	ldr	r0, [r4, #24]
 8001dd6:	2300      	movs	r3, #0
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8001dd8:	54c7      	strb	r7, [r0, r3]
 8001dda:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8001ddc:	2b0b      	cmp	r3, #11
 8001dde:	d1fb      	bne.n	8001dd8 <follow_path+0x40>
 8001de0:	2100      	movs	r1, #0
 8001de2:	460d      	mov	r5, r1
 8001de4:	f04f 0c08 	mov.w	ip, #8
 8001de8:	460a      	mov	r2, r1
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8001dea:	5d73      	ldrb	r3, [r6, r5]
 8001dec:	3501      	adds	r5, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d939      	bls.n	8001e66 <follow_path+0xce>
 8001df2:	2b2f      	cmp	r3, #47	; 0x2f
 8001df4:	d039      	beq.n	8001e6a <follow_path+0xd2>
 8001df6:	2b5c      	cmp	r3, #92	; 0x5c
 8001df8:	d037      	beq.n	8001e6a <follow_path+0xd2>
		if (c == '.' || i >= ni) {
 8001dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8001dfc:	d001      	beq.n	8001e02 <follow_path+0x6a>
 8001dfe:	4561      	cmp	r1, ip
 8001e00:	d30c      	bcc.n	8001e1c <follow_path+0x84>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8001e02:	f1bc 0f08 	cmp.w	ip, #8
 8001e06:	f040 8085 	bne.w	8001f14 <follow_path+0x17c>
 8001e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8001e0c:	f040 8082 	bne.w	8001f14 <follow_path+0x17c>
			i = 8; ni = 11;
			b <<= 2; continue;
 8001e10:	0092      	lsls	r2, r2, #2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 8001e12:	4661      	mov	r1, ip
			b <<= 2; continue;
 8001e14:	b2d2      	uxtb	r2, r2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 8001e16:	f04f 0c0b 	mov.w	ip, #11
 8001e1a:	e7e6      	b.n	8001dea <follow_path+0x52>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
 8001e1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e20:	d178      	bne.n	8001f14 <follow_path+0x17c>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8001e22:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8001f20 <follow_path+0x188>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 8001e26:	f818 9b01 	ldrb.w	r9, [r8], #1
 8001e2a:	f1b9 0f00 	cmp.w	r9, #0
 8001e2e:	d002      	beq.n	8001e36 <follow_path+0x9e>
 8001e30:	4599      	cmp	r9, r3
 8001e32:	d1f8      	bne.n	8001e26 <follow_path+0x8e>
 8001e34:	e06e      	b.n	8001f14 <follow_path+0x17c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
 8001e36:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
 8001e3a:	fa5f f888 	uxtb.w	r8, r8
 8001e3e:	f1b8 0f19 	cmp.w	r8, #25
 8001e42:	d802      	bhi.n	8001e4a <follow_path+0xb2>
				b |= 2;
 8001e44:	f042 0202 	orr.w	r2, r2, #2
 8001e48:	e00a      	b.n	8001e60 <follow_path+0xc8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8001e4a:	f1a3 0861 	sub.w	r8, r3, #97	; 0x61
 8001e4e:	fa5f f888 	uxtb.w	r8, r8
 8001e52:	f1b8 0f19 	cmp.w	r8, #25
 8001e56:	d803      	bhi.n	8001e60 <follow_path+0xc8>
					b |= 1; c -= 0x20;
 8001e58:	3b20      	subs	r3, #32
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	b2db      	uxtb	r3, r3
				}
			}
			sfn[i++] = c;
 8001e60:	5443      	strb	r3, [r0, r1]
 8001e62:	3101      	adds	r1, #1
 8001e64:	e7c1      	b.n	8001dea <follow_path+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001e66:	2304      	movs	r3, #4
 8001e68:	e000      	b.n	8001e6c <follow_path+0xd4>
 8001e6a:	2300      	movs	r3, #0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8001e6c:	2900      	cmp	r1, #0
 8001e6e:	d051      	beq.n	8001f14 <follow_path+0x17c>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 8001e70:	7801      	ldrb	r1, [r0, #0]
 8001e72:	29e5      	cmp	r1, #229	; 0xe5
 8001e74:	d101      	bne.n	8001e7a <follow_path+0xe2>
 8001e76:	2105      	movs	r1, #5
 8001e78:	7001      	strb	r1, [r0, #0]

	if (ni == 8) b <<= 2;
 8001e7a:	f1bc 0f08 	cmp.w	ip, #8
 8001e7e:	d101      	bne.n	8001e84 <follow_path+0xec>
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	b2d2      	uxtb	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001e84:	f002 0103 	and.w	r1, r2, #3
 8001e88:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001e8a:	f002 020c 	and.w	r2, r2, #12

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001e8e:	bf08      	it	eq
 8001e90:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001e94:	2a04      	cmp	r2, #4
 8001e96:	bf08      	it	eq
 8001e98:	f043 0308 	orreq.w	r3, r3, #8

	sfn[NS] = c;		/* Store NT flag, File name is created */
 8001e9c:	72c3      	strb	r3, [r0, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff fdec 	bl	8001a7e <dir_sdi>
	if (res != FR_OK) return res;
 8001ea6:	b9e0      	cbnz	r0, 8001ee2 <follow_path+0x14a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 8001ea8:	6820      	ldr	r0, [r4, #0]
 8001eaa:	6921      	ldr	r1, [r4, #16]
 8001eac:	f7ff fb20 	bl	80014f0 <move_window>
		if (res != FR_OK) break;
 8001eb0:	b9b8      	cbnz	r0, 8001ee2 <follow_path+0x14a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8001eb2:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001eb4:	7813      	ldrb	r3, [r2, #0]
 8001eb6:	b19b      	cbz	r3, 8001ee0 <follow_path+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 8001eb8:	7ad3      	ldrb	r3, [r2, #11]
 8001eba:	0719      	lsls	r1, r3, #28
 8001ebc:	d40b      	bmi.n	8001ed6 <follow_path+0x13e>
 8001ebe:	69a1      	ldr	r1, [r4, #24]
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	e001      	b.n	8001ec8 <follow_path+0x130>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8001ec4:	2b0b      	cmp	r3, #11
 8001ec6:	d00c      	beq.n	8001ee2 <follow_path+0x14a>
 8001ec8:	f812 8003 	ldrb.w	r8, [r2, r3]
 8001ecc:	f811 c003 	ldrb.w	ip, [r1, r3]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	45e0      	cmp	r8, ip
 8001ed4:	d0f6      	beq.n	8001ec4 <follow_path+0x12c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	2100      	movs	r1, #0
 8001eda:	f7ff fedc 	bl	8001c96 <dir_next>
 8001ede:	e7e2      	b.n	8001ea6 <follow_path+0x10e>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001ee0:	2004      	movs	r0, #4
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
 8001ee2:	69a3      	ldr	r3, [r4, #24]
 8001ee4:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8001ee6:	b140      	cbz	r0, 8001efa <follow_path+0x162>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8001ee8:	2804      	cmp	r0, #4
 8001eea:	d117      	bne.n	8001f1c <follow_path+0x184>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8001eec:	f013 0f04 	tst.w	r3, #4
 8001ef0:	bf14      	ite	ne
 8001ef2:	2004      	movne	r0, #4
 8001ef4:	2005      	moveq	r0, #5
 8001ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8001efa:	075b      	lsls	r3, r3, #29
 8001efc:	d40e      	bmi.n	8001f1c <follow_path+0x184>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8001efe:	6961      	ldr	r1, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8001f00:	7acb      	ldrb	r3, [r1, #11]
 8001f02:	06d8      	lsls	r0, r3, #27
 8001f04:	d509      	bpl.n	8001f1a <follow_path+0x182>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
 8001f06:	6823      	ldr	r3, [r4, #0]
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8001f08:	1975      	adds	r5, r6, r5
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8001f0a:	7818      	ldrb	r0, [r3, #0]
 8001f0c:	f7ff fb2e 	bl	800156c <ld_clust.isra.0>
 8001f10:	60a0      	str	r0, [r4, #8]
		}
 8001f12:	e758      	b.n	8001dc6 <follow_path+0x2e>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8001f14:	2006      	movs	r0, #6
 8001f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
 8001f1a:	2005      	movs	r0, #5
			dj->sclust = ld_clust(dj->fs, dir);
		}
	}

	return res;
}
 8001f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f20:	08003da8 	.word	0x08003da8

08001f24 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 8001f24:	b510      	push	{r4, lr}
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8001f26:	2304      	movs	r3, #4
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 8001f28:	4604      	mov	r4, r0
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8001f2a:	e013      	b.n	8001f54 <dir_read+0x30>
		res = move_window(dj->fs, dj->sect);
 8001f2c:	6820      	ldr	r0, [r4, #0]
 8001f2e:	f7ff fadf 	bl	80014f0 <move_window>
		if (res != FR_OK) break;
 8001f32:	b9c8      	cbnz	r0, 8001f68 <dir_read+0x44>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8001f34:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
 8001f36:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001f38:	b1ab      	cbz	r3, 8001f66 <dir_read+0x42>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 8001f3a:	2be5      	cmp	r3, #229	; 0xe5
 8001f3c:	d004      	beq.n	8001f48 <dir_read+0x24>
 8001f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8001f40:	d002      	beq.n	8001f48 <dir_read+0x24>
 8001f42:	7ad3      	ldrb	r3, [r2, #11]
 8001f44:	071b      	lsls	r3, r3, #28
 8001f46:	d50d      	bpl.n	8001f64 <dir_read+0x40>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
 8001f48:	4620      	mov	r0, r4
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f7ff fea3 	bl	8001c96 <dir_next>
 8001f50:	4603      	mov	r3, r0
		if (res != FR_OK) break;
 8001f52:	b948      	cbnz	r0, 8001f68 <dir_read+0x44>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8001f54:	6921      	ldr	r1, [r4, #16]
 8001f56:	2900      	cmp	r1, #0
 8001f58:	d1e8      	bne.n	8001f2c <dir_read+0x8>
 8001f5a:	4618      	mov	r0, r3
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
 8001f5c:	b113      	cbz	r3, 8001f64 <dir_read+0x40>
 8001f5e:	2200      	movs	r2, #0
 8001f60:	6122      	str	r2, [r4, #16]
 8001f62:	4618      	mov	r0, r3

	return res;
}
 8001f64:	bd10      	pop	{r4, pc}
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001f66:	2004      	movs	r0, #4
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8001f68:	4603      	mov	r3, r0
 8001f6a:	e7f8      	b.n	8001f5e <dir_read+0x3a>

08001f6c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	4605      	mov	r5, r0
 8001f70:	460c      	mov	r4, r1
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 8001f72:	b998      	cbnz	r0, 8001f9c <f_mount+0x30>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <f_mount+0x3c>)
 8001f76:	681e      	ldr	r6, [r3, #0]

	if (rfs) {
 8001f78:	b126      	cbz	r6, 8001f84 <f_mount+0x18>
#if _FS_LOCK
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
 8001f7a:	68f0      	ldr	r0, [r6, #12]
 8001f7c:	f000 f882 	bl	8002084 <ff_del_syncobj>
 8001f80:	b170      	cbz	r0, 8001fa0 <f_mount+0x34>
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 8001f82:	7035      	strb	r5, [r6, #0]
	}

	if (fs) {
 8001f84:	b134      	cbz	r4, 8001f94 <f_mount+0x28>
		fs->fs_type = 0;		/* Clear new fs object */
 8001f86:	2000      	movs	r0, #0
 8001f88:	4621      	mov	r1, r4
 8001f8a:	f801 0b0c 	strb.w	r0, [r1], #12
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
 8001f8e:	f000 f86f 	bl	8002070 <ff_cre_syncobj>
 8001f92:	b138      	cbz	r0, 8001fa4 <f_mount+0x38>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <f_mount+0x3c>)

	return FR_OK;
 8001f96:	2000      	movs	r0, #0
		fs->fs_type = 0;		/* Clear new fs object */
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 8001f98:	601c      	str	r4, [r3, #0]

	return FR_OK;
 8001f9a:	bd70      	pop	{r4, r5, r6, pc}
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
 8001f9c:	200b      	movs	r0, #11
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
	if (rfs) {
#if _FS_LOCK
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
 8001fa0:	2002      	movs	r0, #2
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (fs) {
		fs->fs_type = 0;		/* Clear new fs object */
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
 8001fa4:	2002      	movs	r0, #2
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	200009dc 	.word	0x200009dc

08001fac <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d02b      	beq.n	8002010 <f_opendir+0x64>

	res = chk_mounted(&path, &dj->fs, 0);
 8001fb8:	a801      	add	r0, sp, #4
 8001fba:	4621      	mov	r1, r4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f7ff fb27 	bl	8001610 <chk_mounted>
	fs = dj->fs;
 8001fc2:	6826      	ldr	r6, [r4, #0]
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;

	res = chk_mounted(&path, &dj->fs, 0);
 8001fc4:	4605      	mov	r5, r0
	fs = dj->fs;
	if (res == FR_OK) {
 8001fc6:	b9e0      	cbnz	r0, 8002002 <f_opendir+0x56>
		INIT_BUF(*dj);
 8001fc8:	ab03      	add	r3, sp, #12
 8001fca:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 8001fcc:	4620      	mov	r0, r4
 8001fce:	9901      	ldr	r1, [sp, #4]
 8001fd0:	f7ff fee2 	bl	8001d98 <follow_path>
 8001fd4:	4605      	mov	r5, r0
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8001fd6:	b978      	cbnz	r0, 8001ff8 <f_opendir+0x4c>
			if (dj->dir) {						/* It is not the root dir */
 8001fd8:	6961      	ldr	r1, [r4, #20]
 8001fda:	b131      	cbz	r1, 8001fea <f_opendir+0x3e>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 8001fdc:	7acb      	ldrb	r3, [r1, #11]
 8001fde:	06d8      	lsls	r0, r3, #27
 8001fe0:	d50e      	bpl.n	8002000 <f_opendir+0x54>
					dj->sclust = ld_clust(fs, dj->dir);
 8001fe2:	7830      	ldrb	r0, [r6, #0]
 8001fe4:	f7ff fac2 	bl	800156c <ld_clust.isra.0>
 8001fe8:	60a0      	str	r0, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
 8001fea:	88f3      	ldrh	r3, [r6, #6]
				res = dir_sdi(dj, 0);			/* Rewind dir */
 8001fec:	4620      	mov	r0, r4
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
 8001fee:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f7ff fd44 	bl	8001a7e <dir_sdi>
 8001ff6:	4605      	mov	r5, r0
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8001ff8:	2d04      	cmp	r5, #4
 8001ffa:	d001      	beq.n	8002000 <f_opendir+0x54>
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
 8001ffc:	b11d      	cbz	r5, 8002006 <f_opendir+0x5a>
 8001ffe:	e000      	b.n	8002002 <f_opendir+0x56>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8002000:	2505      	movs	r5, #5
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
	} else {
		dj->fs = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	6023      	str	r3, [r4, #0]
	}

	LEAVE_FF(fs, res);
 8002006:	4630      	mov	r0, r6
 8002008:	4629      	mov	r1, r5
 800200a:	f7ff fcba 	bl	8001982 <unlock_fs>
 800200e:	e000      	b.n	8002012 <f_opendir+0x66>
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
 8002010:	2509      	movs	r5, #9
	} else {
		dj->fs = 0;
	}

	LEAVE_FF(fs, res);
}
 8002012:	4628      	mov	r0, r5
 8002014:	b006      	add	sp, #24
 8002016:	bd70      	pop	{r4, r5, r6, pc}

08002018 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 8002018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800201a:	4604      	mov	r4, r0
 800201c:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj);						/* Check validity of the object */
 800201e:	f7ff fc95 	bl	800194c <validate>
 8002022:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8002024:	b9e8      	cbnz	r0, 8002062 <f_readdir+0x4a>
		if (!fno) {
 8002026:	b926      	cbnz	r6, 8002032 <f_readdir+0x1a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7ff fd27 	bl	8001a7e <dir_sdi>
 8002030:	e016      	b.n	8002060 <f_readdir+0x48>
		} else {
			INIT_BUF(*dj);
 8002032:	ab01      	add	r3, sp, #4
 8002034:	61a3      	str	r3, [r4, #24]
			res = dir_read(dj);				/* Read an directory item */
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff ff74 	bl	8001f24 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
 800203c:	2804      	cmp	r0, #4
 800203e:	d101      	bne.n	8002044 <f_readdir+0x2c>
				dj->sect = 0;
 8002040:	6125      	str	r5, [r4, #16]
 8002042:	e000      	b.n	8002046 <f_readdir+0x2e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8002044:	b960      	cbnz	r0, 8002060 <f_readdir+0x48>
				get_fileinfo(dj, fno);		/* Get the object information */
 8002046:	4620      	mov	r0, r4
 8002048:	4631      	mov	r1, r6
 800204a:	f7ff fa10 	bl	800146e <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
 800204e:	2100      	movs	r1, #0
 8002050:	4620      	mov	r0, r4
 8002052:	f7ff fe20 	bl	8001c96 <dir_next>
				if (res == FR_NO_FILE) {
 8002056:	2804      	cmp	r0, #4
 8002058:	d102      	bne.n	8002060 <f_readdir+0x48>
					dj->sect = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	6123      	str	r3, [r4, #16]
 800205e:	e000      	b.n	8002062 <f_readdir+0x4a>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) {
 8002060:	4605      	mov	r5, r0
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
 8002062:	6820      	ldr	r0, [r4, #0]
 8002064:	4629      	mov	r1, r5
 8002066:	f7ff fc8c 	bl	8001982 <unlock_fs>
}
 800206a:	4628      	mov	r0, r5
 800206c:	b004      	add	sp, #16
 800206e:	bd70      	pop	{r4, r5, r6, pc}

08002070 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8002070:	b510      	push	{r4, lr}
//	ret = 1;					/* The initial value of the semaphore must be 1. */

//	*sobj = OSMutexCreate(0, &err);			/* uC/OS-II */
//	ret = (err == OS_NO_ERR);

	*sobj = xSemaphoreCreateMutex();		/* FreeRTOS */
 8002072:	2001      	movs	r0, #1

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8002074:	460c      	mov	r4, r1
//	ret = 1;					/* The initial value of the semaphore must be 1. */

//	*sobj = OSMutexCreate(0, &err);			/* uC/OS-II */
//	ret = (err == OS_NO_ERR);

	*sobj = xSemaphoreCreateMutex();		/* FreeRTOS */
 8002076:	f7fe fba6 	bl	80007c6 <xQueueCreateMutex>
 800207a:	6020      	str	r0, [r4, #0]
	ret = (*sobj != NULL);
 800207c:	3000      	adds	r0, #0
 800207e:	bf18      	it	ne
 8002080:	2001      	movne	r0, #1

	return ret;
}
 8002082:	bd10      	pop	{r4, pc}

08002084 <ff_del_syncobj>:
//	ret = (err == OS_NO_ERR);

	ret = 1;					/* FreeRTOS (nothing to do) */

	return ret;
}
 8002084:	2001      	movs	r0, #1
 8002086:	4770      	bx	lr

08002088 <ff_req_grant>:
//	ret = (wai_sem(sobj) == E_OK);	/* uITRON */

//	OSMutexPend(sobj, _FS_TIMEOUT, &err));			/* uC/OS-II */
//	ret = (err == OS_NO_ERR);

	ret = (xSemaphoreTake(sobj, _FS_TIMEOUT) == pdTRUE);	/* FreeRTOS */
 8002088:	2100      	movs	r1, #0
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800208a:	b508      	push	{r3, lr}
//	ret = (wai_sem(sobj) == E_OK);	/* uITRON */

//	OSMutexPend(sobj, _FS_TIMEOUT, &err));			/* uC/OS-II */
//	ret = (err == OS_NO_ERR);

	ret = (xSemaphoreTake(sobj, _FS_TIMEOUT) == pdTRUE);	/* FreeRTOS */
 800208c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002090:	460b      	mov	r3, r1
 8002092:	f7fe fbe8 	bl	8000866 <xQueueGenericReceive>
 8002096:	f1a0 0301 	sub.w	r3, r0, #1
 800209a:	4258      	negs	r0, r3
 800209c:	eb40 0003 	adc.w	r0, r0, r3

	return ret;
}
 80020a0:	bd08      	pop	{r3, pc}

080020a2 <ff_rel_grant>:

//	sig_sem(sobj);			/* uITRON */

//	OSMutexPost(sobj);		/* uC/OS-II */

	xSemaphoreGive(sobj);	/* FreeRTOS */
 80020a2:	2100      	movs	r1, #0
 80020a4:	460a      	mov	r2, r1
 80020a6:	460b      	mov	r3, r1
 80020a8:	f7fe bb1b 	b.w	80006e2 <xQueueGenericSend>

080020ac <_tasklistHandler(char const**, unsigned long, char*, unsigned int)>:
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _tasklistHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer, size_t output_buffer_length)
{
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static const char header[] = "Task\t\tState\tPri.\tStack\t##\r\n------------------------------------------";

	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	char *buffer = (char*)pvPortMalloc(1024);
 80020ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _tasklistHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer, size_t output_buffer_length)
{
 80020b2:	4614      	mov	r4, r2
 80020b4:	461f      	mov	r7, r3
	static const char header[] = "Task\t\tState\tPri.\tStack\t##\r\n------------------------------------------";

	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	char *buffer = (char*)pvPortMalloc(1024);
 80020b6:	f7ff f9c1 	bl	800143c <pvPortMalloc>
 80020ba:	4605      	mov	r5, r0

	if (buffer == NULL)
 80020bc:	b1d8      	cbz	r0, 80020f6 <_tasklistHandler(char const**, unsigned long, char*, unsigned int)+0x4a>
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

	vTaskList((signed char*)buffer);
 80020be:	f7fe ff55 	bl	8000f6c <vTaskList>

	size_t length = strlen(buffer);
 80020c2:	4628      	mov	r0, r5
 80020c4:	f001 fbe4 	bl	8003890 <strlen>

	enum Error error = ERROR_NONE;

	if ((length + sizeof (header)) < output_buffer_length)
 80020c8:	f100 0346 	add.w	r3, r0, #70	; 0x46
 80020cc:	42bb      	cmp	r3, r7
	if (buffer == NULL)
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

	vTaskList((signed char*)buffer);

	size_t length = strlen(buffer);
 80020ce:	4606      	mov	r6, r0

	enum Error error = ERROR_NONE;

	if ((length + sizeof (header)) < output_buffer_length)
 80020d0:	d20c      	bcs.n	80020ec <_tasklistHandler(char const**, unsigned long, char*, unsigned int)+0x40>
	{
		memcpy(output_buffer, header, sizeof(header) - 1);
 80020d2:	4620      	mov	r0, r4
 80020d4:	4909      	ldr	r1, [pc, #36]	; (80020fc <_tasklistHandler(char const**, unsigned long, char*, unsigned int)+0x50>)
 80020d6:	2245      	movs	r2, #69	; 0x45
 80020d8:	f001 fa9c 	bl	8003614 <memcpy>
		memcpy(output_buffer + sizeof(header) - 1, buffer, length + 1);
 80020dc:	f104 0045 	add.w	r0, r4, #69	; 0x45
 80020e0:	1c72      	adds	r2, r6, #1
 80020e2:	4629      	mov	r1, r5
 80020e4:	f001 fa96 	bl	8003614 <memcpy>
		error = ERROR_NONE;
 80020e8:	2400      	movs	r4, #0
 80020ea:	e000      	b.n	80020ee <_tasklistHandler(char const**, unsigned long, char*, unsigned int)+0x42>
	}
	else
		error = ERROR_BUFFER_OVERFLOW;
 80020ec:	2419      	movs	r4, #25

	vPortFree(buffer);
 80020ee:	4628      	mov	r0, r5
 80020f0:	f7ff f9b0 	bl	8001454 <vPortFree>

	return error;
 80020f4:	e000      	b.n	80020f8 <_tasklistHandler(char const**, unsigned long, char*, unsigned int)+0x4c>
	(void)arguments_count;					// suppress warning

	char *buffer = (char*)pvPortMalloc(1024);

	if (buffer == NULL)
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020f6:	24fe      	movs	r4, #254	; 0xfe
	else
		error = ERROR_BUFFER_OVERFLOW;

	vPortFree(buffer);

	return error;
 80020f8:	b260      	sxtb	r0, r4
}
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020fc:	08003f36 	.word	0x08003f36

08002100 <_runtimestatsHandler(char const**, unsigned long, char*, unsigned int)>:
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _runtimestatsHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer, size_t output_buffer_length)
{
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static const char header[] = "Task\t\tAbs Time\t% Time\r\n--------------------------------------";

	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	char *buffer = (char*)pvPortMalloc(1024);
 8002102:	f44f 6080 	mov.w	r0, #1024	; 0x400
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _runtimestatsHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer, size_t output_buffer_length)
{
 8002106:	4614      	mov	r4, r2
 8002108:	461f      	mov	r7, r3
	static const char header[] = "Task\t\tAbs Time\t% Time\r\n--------------------------------------";

	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	char *buffer = (char*)pvPortMalloc(1024);
 800210a:	f7ff f997 	bl	800143c <pvPortMalloc>
 800210e:	4605      	mov	r5, r0

	if (buffer == NULL)
 8002110:	b1d8      	cbz	r0, 800214a <_runtimestatsHandler(char const**, unsigned long, char*, unsigned int)+0x4a>
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

	vTaskGetRunTimeStats((signed char*)buffer);
 8002112:	f7fe fecf 	bl	8000eb4 <vTaskGetRunTimeStats>

	size_t length = strlen(buffer);
 8002116:	4628      	mov	r0, r5
 8002118:	f001 fbba 	bl	8003890 <strlen>

	enum Error error = ERROR_NONE;

	if ((length + sizeof (header)) < output_buffer_length)
 800211c:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 8002120:	42bb      	cmp	r3, r7
	if (buffer == NULL)
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

	vTaskGetRunTimeStats((signed char*)buffer);

	size_t length = strlen(buffer);
 8002122:	4606      	mov	r6, r0

	enum Error error = ERROR_NONE;

	if ((length + sizeof (header)) < output_buffer_length)
 8002124:	d20c      	bcs.n	8002140 <_runtimestatsHandler(char const**, unsigned long, char*, unsigned int)+0x40>
	{
		memcpy(output_buffer, header, sizeof(header) - 1);
 8002126:	4620      	mov	r0, r4
 8002128:	4909      	ldr	r1, [pc, #36]	; (8002150 <_runtimestatsHandler(char const**, unsigned long, char*, unsigned int)+0x50>)
 800212a:	223d      	movs	r2, #61	; 0x3d
 800212c:	f001 fa72 	bl	8003614 <memcpy>
		memcpy(output_buffer + sizeof(header) - 1, buffer, length + 1);
 8002130:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8002134:	1c72      	adds	r2, r6, #1
 8002136:	4629      	mov	r1, r5
 8002138:	f001 fa6c 	bl	8003614 <memcpy>
		error = ERROR_NONE;
 800213c:	2400      	movs	r4, #0
 800213e:	e000      	b.n	8002142 <_runtimestatsHandler(char const**, unsigned long, char*, unsigned int)+0x42>
	}
	else
		error = ERROR_BUFFER_OVERFLOW;
 8002140:	2419      	movs	r4, #25

	vPortFree(buffer);
 8002142:	4628      	mov	r0, r5
 8002144:	f7ff f986 	bl	8001454 <vPortFree>

	return error;
 8002148:	e000      	b.n	800214c <_runtimestatsHandler(char const**, unsigned long, char*, unsigned int)+0x4c>
	(void)arguments_count;					// suppress warning

	char *buffer = (char*)pvPortMalloc(1024);

	if (buffer == NULL)
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800214a:	24fe      	movs	r4, #254	; 0xfe
	else
		error = ERROR_BUFFER_OVERFLOW;

	vPortFree(buffer);

	return error;
 800214c:	b260      	sxtb	r0, r4
}
 800214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002150:	08003db7 	.word	0x08003db7

08002154 <_dirHandler(char const**, unsigned long, char*, unsigned int)>:
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _dirHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer, size_t output_buffer_length)
{
 8002154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002158:	b08e      	sub	sp, #56	; 0x38
	static const char *root_path = "/";
	const char *path;

	if (arguments_count > 1)				// was argument passed to command?
 800215a:	2901      	cmp	r1, #1
	else
		path = root_path;					// no - use root path

	DIR dir;

	FRESULT fresult = f_opendir(&dir, path);
 800215c:	ae01      	add	r6, sp, #4
{
	static const char *root_path = "/";
	const char *path;

	if (arguments_count > 1)				// was argument passed to command?
		path = arguments_array[1];			// yes - use it as a path
 800215e:	bf8c      	ite	hi
 8002160:	6841      	ldrhi	r1, [r0, #4]
	else
		path = root_path;					// no - use root path
 8002162:	491c      	ldrls	r1, [pc, #112]	; (80021d4 <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x80>)

	DIR dir;

	FRESULT fresult = f_opendir(&dir, path);
 8002164:	4630      	mov	r0, r6
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _dirHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer, size_t output_buffer_length)
{
 8002166:	4614      	mov	r4, r2
 8002168:	461d      	mov	r5, r3
	else
		path = root_path;					// no - use root path

	DIR dir;

	FRESULT fresult = f_opendir(&dir, path);
 800216a:	f7ff ff1f 	bl	8001fac <f_opendir>
 * \return fresult converted to enum Error
 */

static inline enum Error errorConvert_FRESULT(FRESULT fresult)
{
	return (enum Error)(fresult + ERROR_FatFS_FR_OK);
 800216e:	fa5f f880 	uxtb.w	r8, r0
	enum Error error = errorConvert_FRESULT(fresult);

	if (error != ERROR_NONE)
 8002172:	f1b8 0f00 	cmp.w	r8, #0
 8002176:	d019      	beq.n	80021ac <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x58>
 8002178:	e027      	b.n	80021ca <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x76>
		error = errorConvert_FRESULT(fresult);

		if (error != ERROR_NONE)
			return error;

		size_t length = strlen(filinfo.fname);
 800217a:	4630      	mov	r0, r6
 800217c:	f001 fb88 	bl	8003890 <strlen>

		if (length == 0)					// end of directory?
 8002180:	b318      	cbz	r0, 80021ca <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x76>
			return error;

		 length += 2 + 1;					// include size of newline (2) and size of optional directory marker '/' (1)
 8002182:	3003      	adds	r0, #3

		if (length > output_buffer_length - 1)	// will it fit into buffer (leave space for '\0')?
 8002184:	1e6b      	subs	r3, r5, #1
 8002186:	4298      	cmp	r0, r3
 8002188:	d81d      	bhi.n	80021c6 <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x72>
			return ERROR_BUFFER_OVERFLOW;

		output_buffer_length -= length;
 800218a:	1a2d      	subs	r5, r5, r0

		output_buffer = stpcpy(output_buffer, filinfo.fname);
 800218c:	4631      	mov	r1, r6
 800218e:	4620      	mov	r0, r4
 8002190:	f001 face 	bl	8003730 <stpcpy>

		if (filinfo.fattrib & AM_DIR)		// is this a directory?
 8002194:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8002198:	06db      	lsls	r3, r3, #27
 800219a:	d502      	bpl.n	80021a2 <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x4e>
			output_buffer = stpcpy(output_buffer, "/");	// append trailing slash to indicate that
 800219c:	490d      	ldr	r1, [pc, #52]	; (80021d4 <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x80>)
 800219e:	f001 fac7 	bl	8003730 <stpcpy>

		output_buffer = stpcpy(output_buffer, "\r\n");
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x84>)
 80021a4:	f001 fac4 	bl	8003730 <stpcpy>
 80021a8:	4604      	mov	r4, r0
 80021aa:	e002      	b.n	80021b2 <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x5e>

	FILINFO filinfo;

	while (error == ERROR_NONE)
	{
		fresult = f_readdir(&dir, &filinfo);
 80021ac:	4637      	mov	r7, r6
		error = errorConvert_FRESULT(fresult);

		if (error != ERROR_NONE)
			return error;

		size_t length = strlen(filinfo.fname);
 80021ae:	f10d 0629 	add.w	r6, sp, #41	; 0x29

	FILINFO filinfo;

	while (error == ERROR_NONE)
	{
		fresult = f_readdir(&dir, &filinfo);
 80021b2:	4638      	mov	r0, r7
 80021b4:	a908      	add	r1, sp, #32
 80021b6:	f7ff ff2f 	bl	8002018 <f_readdir>
 80021ba:	fa5f f880 	uxtb.w	r8, r0
		error = errorConvert_FRESULT(fresult);

		if (error != ERROR_NONE)
 80021be:	f1b8 0f00 	cmp.w	r8, #0
 80021c2:	d0da      	beq.n	800217a <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x26>
 80021c4:	e001      	b.n	80021ca <_dirHandler(char const**, unsigned long, char*, unsigned int)+0x76>
			return error;

		 length += 2 + 1;					// include size of newline (2) and size of optional directory marker '/' (1)

		if (length > output_buffer_length - 1)	// will it fit into buffer (leave space for '\0')?
			return ERROR_BUFFER_OVERFLOW;
 80021c6:	f04f 0819 	mov.w	r8, #25
	while (error == ERROR_NONE)
	{
		fresult = f_readdir(&dir, &filinfo);
		error = errorConvert_FRESULT(fresult);

		if (error != ERROR_NONE)
 80021ca:	fa4f f088 	sxtb.w	r0, r8

		output_buffer = stpcpy(output_buffer, "\r\n");
	}

	return error;
}
 80021ce:	b00e      	add	sp, #56	; 0x38
 80021d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d4:	08003e08 	.word	0x08003e08
 80021d8:	08003fa6 	.word	0x08003fa6

080021dc <_heartbeatTask(void*)>:
 *
 * This is a main task in this device
 */

static void _heartbeatTask(void *parameters)
{
 80021dc:	b513      	push	{r0, r1, r4, lr}

	Error error = ERROR_NONE;

	uint8_t readData = 0, buffer, *arrayFromSensor, sizeOfArray=0, counter;

	xLastHeartBeat = xTaskGetTickCount();
 80021de:	f7fe fd89 	bl	8000cf4 <xTaskGetTickCount>

	/*  Step 1 we send a POWER_UP command to Slaves, then we gave they 2 sec. to prepare themselves
	 * to make measurements, then they should send a MODULE_READY command if everything go right
	 * if not while loop will wait longer, if modules are ready we send they START_MEASUR cmd.
	 */
	buffer = POWER_UP;
 80021e2:	ac02      	add	r4, sp, #8
 80021e4:	2367      	movs	r3, #103	; 0x67
 80021e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
    i2cWrite(adresMSP, &buffer, 1);
 80021ea:	4621      	mov	r1, r4
 80021ec:	2201      	movs	r2, #1
 80021ee:	2048      	movs	r0, #72	; 0x48
 80021f0:	f000 fc5a 	bl	8002aa8 <i2cWrite(unsigned char, unsigned char const*, unsigned int)>

    vTaskDelay(100/portTICK_RATE_MS);
 80021f4:	2064      	movs	r0, #100	; 0x64
 80021f6:	f7fe ff37 	bl	8001068 <vTaskDelay>

	buffer = ARE_YOU_READY;
 80021fa:	2365      	movs	r3, #101	; 0x65
    i2cWrite(adresMSP, &buffer, 1);
 80021fc:	2048      	movs	r0, #72	; 0x48
 80021fe:	4621      	mov	r1, r4
 8002200:	2201      	movs	r2, #1
	buffer = POWER_UP;
    i2cWrite(adresMSP, &buffer, 1);

    vTaskDelay(100/portTICK_RATE_MS);

	buffer = ARE_YOU_READY;
 8002202:	f88d 3007 	strb.w	r3, [sp, #7]
    i2cWrite(adresMSP, &buffer, 1);
 8002206:	f000 fc4f 	bl	8002aa8 <i2cWrite(unsigned char, unsigned char const*, unsigned int)>
 800220a:	e7fe      	b.n	800220a <_heartbeatTask(void*)+0x2e>

0800220c <main>:
uint8_t danaZMSP = 0x30;
uint8_t * pointer = (uint8_t*)pvPortMalloc(129*sizeof(uint8_t));


int main(void)
{
 800220c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	RCC_APB1ENR_PWREN_bb = 1;
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <main+0xa8>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
	PWR->CR = (PWR->CR & (~PWR_CR_VOS)) | PWR_CR_VOS_0;	// set VCORE voltage range 1 (1.8V)
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <main+0xac>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800221c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002220:	601a      	str	r2, [r3, #0]
	while((PWR->CSR & PWR_CSR_VOSF) != 0);	// wait for regulator ready
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	06d2      	lsls	r2, r2, #27
 8002226:	d4fc      	bmi.n	8002222 <main+0x16>

	RCC_CR_HSION_bb = 1;					// enable HSI oscillator
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <main+0xb0>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
	while (RCC_CR_HSIRDY_bb == 0);
 800222e:	3304      	adds	r3, #4
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2a00      	cmp	r2, #0
 8002234:	d0fc      	beq.n	8002230 <main+0x24>

	rccStartPll(RCC_PLL_INPUT_HSI, HSI_VALUE, FREQUENCY);
 8002236:	4922      	ldr	r1, [pc, #136]	; (80022c0 <main+0xb4>)
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <main+0xb8>)
 800223a:	2000      	movs	r0, #0
 800223c:	f000 fc74 	bl	8002b28 <rccStartPll(rccPllInput, unsigned long, unsigned long)>

	gpioInitialize();
 8002240:	f000 fb72 	bl	8002928 <gpioInitialize()>

	i2cInitialize();
 8002244:	f000 fbf8 	bl	8002a38 <i2cInitialize()>

	enum Error error = usartInitialize();
 8002248:	f000 fd5e 	bl	8002d08 <usartInitialize()>
//	pointer = i2cRead(adresMSP, pointer, 1);
//	usartSendString("1 Znak z MSP", 1000);
//	usartSendString((char*)pointer, 199);


	FRESULT fresult = f_mount(0, &_fileSystem);	// try mounting the filesystem on SD card
 800224c:	2000      	movs	r0, #0
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <main+0xbc>)
 8002250:	f7ff fe8c 	bl	8001f6c <f_mount>
 8002254:	4604      	mov	r4, r0
	ASSERT("f_mount()", fresult == FR_OK);
 8002256:	b130      	cbz	r0, 8002266 <main+0x5a>
 8002258:	481c      	ldr	r0, [pc, #112]	; (80022cc <main+0xc0>)
 800225a:	491d      	ldr	r1, [pc, #116]	; (80022d0 <main+0xc4>)
 800225c:	2279      	movs	r2, #121	; 0x79
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <main+0xc8>)
 8002260:	f7fe f8f8 	bl	8000454 <printf>
 8002264:	e7fe      	b.n	8002264 <main+0x58>
 * the file error.h
 */

static enum Error _initializeHeartbeatTask(void)
{
	gpioConfigurePin(LED_GPIO, LED_pin, GPIO_OUT_PP_2MHz);
 8002266:	2107      	movs	r1, #7
 8002268:	481b      	ldr	r0, [pc, #108]	; (80022d8 <main+0xcc>)
 800226a:	f240 1201 	movw	r2, #257	; 0x101
 800226e:	f000 fb63 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>

	portBASE_TYPE ret = xTaskCreate(_heartbeatTask, (signed char*)"heartbeat", HEARTBEAT_STACK_SIZE, NULL,
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	4819      	ldr	r0, [pc, #100]	; (80022dc <main+0xd0>)
 8002276:	491a      	ldr	r1, [pc, #104]	; (80022e0 <main+0xd4>)
 8002278:	4623      	mov	r3, r4
 800227a:	9400      	str	r4, [sp, #0]
 800227c:	9401      	str	r4, [sp, #4]
 800227e:	9402      	str	r4, [sp, #8]
 8002280:	9403      	str	r4, [sp, #12]
 8002282:	f7fe fc31 	bl	8000ae8 <xTaskGenericCreate>

	FRESULT fresult = f_mount(0, &_fileSystem);	// try mounting the filesystem on SD card
	ASSERT("f_mount()", fresult == FR_OK);

	error = _initializeHeartbeatTask();
	ASSERT("_initializeHeartbeatTask()", error == ERROR_NONE);
 8002286:	3801      	subs	r0, #1
 8002288:	f010 0fff 	tst.w	r0, #255	; 0xff
 800228c:	d006      	beq.n	800229c <main+0x90>
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <main+0xc0>)
 8002290:	4914      	ldr	r1, [pc, #80]	; (80022e4 <main+0xd8>)
 8002292:	227c      	movs	r2, #124	; 0x7c
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <main+0xc8>)
 8002296:	f7fe f8dd 	bl	8000454 <printf>
 800229a:	e7fe      	b.n	800229a <main+0x8e>

	commandRegister(&_dirCommandDefinition);
 800229c:	4812      	ldr	r0, [pc, #72]	; (80022e8 <main+0xdc>)
 800229e:	f000 fb21 	bl	80028e4 <commandRegister(CommandDefinition const*)>
	commandRegister(&_runtimestatsCommandDefinition);
 80022a2:	4812      	ldr	r0, [pc, #72]	; (80022ec <main+0xe0>)
 80022a4:	f000 fb1e 	bl	80028e4 <commandRegister(CommandDefinition const*)>
	commandRegister(&_tasklistCommandDefinition);
 80022a8:	4811      	ldr	r0, [pc, #68]	; (80022f0 <main+0xe4>)
 80022aa:	f000 fb1b 	bl	80028e4 <commandRegister(CommandDefinition const*)>

	vTaskStartScheduler();
 80022ae:	f7fe fcf1 	bl	8000c94 <vTaskStartScheduler>
 80022b2:	e7fe      	b.n	80022b2 <main+0xa6>
 80022b4:	424704f0 	.word	0x424704f0
 80022b8:	40007000 	.word	0x40007000
 80022bc:	42470000 	.word	0x42470000
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	01e84800 	.word	0x01e84800
 80022c8:	200009e4 	.word	0x200009e4
 80022cc:	08003e0a 	.word	0x08003e0a
 80022d0:	08003e32 	.word	0x08003e32
 80022d4:	08003e3c 	.word	0x08003e3c
 80022d8:	40020400 	.word	0x40020400
 80022dc:	080021dd 	.word	0x080021dd
 80022e0:	08003e45 	.word	0x08003e45
 80022e4:	08003e4f 	.word	0x08003e4f
 80022e8:	08003df8 	.word	0x08003df8
 80022ec:	08003f8c 	.word	0x08003f8c
 80022f0:	08003f7c 	.word	0x08003f7c

080022f4 <_GLOBAL__sub_I_danaZMSP>:
		error = ERROR_BUFFER_OVERFLOW;

	vPortFree(buffer);

	return error;
}
 80022f4:	b508      	push	{r3, lr}
 * Main code block
 */
const unsigned char dana[] = {0x50};
const uint8_t adresMSP = 0x48;
uint8_t danaZMSP = 0x30;
uint8_t * pointer = (uint8_t*)pvPortMalloc(129*sizeof(uint8_t));
 80022f6:	2081      	movs	r0, #129	; 0x81
 80022f8:	f7ff f8a0 	bl	800143c <pvPortMalloc>
 80022fc:	4b01      	ldr	r3, [pc, #4]	; (8002304 <_GLOBAL__sub_I_danaZMSP+0x10>)
 80022fe:	6018      	str	r0, [r3, #0]
		error = ERROR_BUFFER_OVERFLOW;

	vPortFree(buffer);

	return error;
}
 8002300:	bd08      	pop	{r3, pc}
 8002302:	bf00      	nop
 8002304:	200009e0 	.word	0x200009e0

08002308 <operator new(unsigned int)>:
 * \return pointer to allocated memory or NULL if allocation failed
 */

void* operator new(size_t size) throw()
{
	return pvPortMalloc(size);
 8002308:	f7ff b898 	b.w	800143c <pvPortMalloc>

0800230c <operator delete(void*)>:
 * \param [in] ptr is the pointer to memory segment that should be freed
 */

void operator delete(void* ptr) throw ()
{
	if (ptr)
 800230c:	b108      	cbz	r0, 8002312 <operator delete(void*)+0x6>
		vPortFree(ptr);
 800230e:	f7ff b8a1 	b.w	8001454 <vPortFree>
 8002312:	4770      	bx	lr

08002314 <prvDeselectCard()>:
	return cDummy;
}
/*-----------------------------------------------------------*/

static void prvDeselectCard( void )
{
 8002314:	b507      	push	{r0, r1, r2, lr}
	uint8_t cDummy;

	SD_CS_bb = SD_CS_DEASSERTED;
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <prvDeselectCard()+0x14>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
	spiRead(&cDummy, sizeof(cDummy));
 800231c:	2000      	movs	r0, #0
 800231e:	f10d 0107 	add.w	r1, sp, #7
 8002322:	f000 fca1 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
}
 8002326:	bd0e      	pop	{r1, r2, r3, pc}
 8002328:	424102b0 	.word	0x424102b0

0800232c <prvWaitForCardReady()>:
	return cResult;
}
/*-----------------------------------------------------------*/

static BYTE prvWaitForCardReady (void)
{
 800232c:	b573      	push	{r0, r1, r4, r5, r6, lr}
portTickType xTimeOnEntering;
const portTickType xMaxTimeToWait_ms = 1000 / portTICK_RATE_MS;
BYTE cDummy;

	xTimeOnEntering = xTaskGetTickCount();
 800232e:	f7fe fce1 	bl	8000cf4 <xTaskGetTickCount>

	spiRead(&cDummy, sizeof(cDummy));
 8002332:	f10d 0407 	add.w	r4, sp, #7
{
portTickType xTimeOnEntering;
const portTickType xMaxTimeToWait_ms = 1000 / portTICK_RATE_MS;
BYTE cDummy;

	xTimeOnEntering = xTaskGetTickCount();
 8002336:	4606      	mov	r6, r0

	spiRead(&cDummy, sizeof(cDummy));
 8002338:	4621      	mov	r1, r4
 800233a:	2000      	movs	r0, #0
 800233c:	2201      	movs	r2, #1
 800233e:	f000 fc93 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
	do
 8002342:	f240 35e7 	movw	r5, #999	; 0x3e7
	{
		spiRead(&cDummy, sizeof(cDummy));
 8002346:	2000      	movs	r0, #0
 8002348:	2201      	movs	r2, #1
 800234a:	4621      	mov	r1, r4
 800234c:	f000 fc8c 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
BYTE cDummy;

	xTimeOnEntering = xTaskGetTickCount();

	spiRead(&cDummy, sizeof(cDummy));
	do
 8002350:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002354:	2bff      	cmp	r3, #255	; 0xff
 8002356:	d004      	beq.n	8002362 <prvWaitForCardReady()+0x36>
	{
		spiRead(&cDummy, sizeof(cDummy));
	}
	while( ( cDummy != 0xFF ) && ( ( xTaskGetTickCount() - xTimeOnEntering ) < xMaxTimeToWait_ms ) );
 8002358:	f7fe fccc 	bl	8000cf4 <xTaskGetTickCount>
BYTE cDummy;

	xTimeOnEntering = xTaskGetTickCount();

	spiRead(&cDummy, sizeof(cDummy));
	do
 800235c:	1b80      	subs	r0, r0, r6
 800235e:	42a8      	cmp	r0, r5
 8002360:	d9f1      	bls.n	8002346 <prvWaitForCardReady()+0x1a>
	{
		spiRead(&cDummy, sizeof(cDummy));
	}
	while( ( cDummy != 0xFF ) && ( ( xTaskGetTickCount() - xTimeOnEntering ) < xMaxTimeToWait_ms ) );

	return cDummy;
 8002362:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002366:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08002368 <prvSendCommand(unsigned char, unsigned long)>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static BYTE prvSendCommand( BYTE cCommand,	DWORD xArgument	)
{
 8002368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800236a:	460d      	mov	r5, r1
BYTE cResult = 0, n;
 800236c:	2100      	movs	r1, #0
BYTE cCommandString[ mmcCOMMAND_LENGTH_BYTES ];

	if( ( cCommand & 0x80 ) != 0 )
 800236e:	0603      	lsls	r3, r0, #24
	return xReturn;
}
/*-----------------------------------------------------------*/

static BYTE prvSendCommand( BYTE cCommand,	DWORD xArgument	)
{
 8002370:	4604      	mov	r4, r0
BYTE cResult = 0, n;
 8002372:	f88d 1007 	strb.w	r1, [sp, #7]
BYTE cCommandString[ mmcCOMMAND_LENGTH_BYTES ];

	if( ( cCommand & 0x80 ) != 0 )
 8002376:	d506      	bpl.n	8002386 <prvSendCommand(unsigned char, unsigned long)+0x1e>
	{
		/* ACMD<n> is the command sequence of mmcCMD55_LEADING_COMMAND_OF_ACMD-CMD<n> */
		cCommand &= 0x7F;
 8002378:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		cResult = prvSendCommand( mmcCMD55_LEADING_COMMAND_OF_ACMD, 0 );
 800237c:	2077      	movs	r0, #119	; 0x77
 800237e:	f7ff fff3 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 8002382:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if( cResult <= 1 )
 8002386:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d846      	bhi.n	800241c <prvSendCommand(unsigned char, unsigned long)+0xb4>
	{
		cResult = 0xff;
 800238e:	23ff      	movs	r3, #255	; 0xff
 8002390:	f88d 3007 	strb.w	r3, [sp, #7]

		/* Select the card and wait for ready */
		prvDeselectCard();
 8002394:	f7ff ffbe 	bl	8002314 <prvDeselectCard()>

static bool prvSelectCard( void )
{
bool xReturn = true;

	SD_CS_bb = SD_CS_ASSERTED;
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <prvSendCommand(unsigned char, unsigned long)+0xbc>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
	if( prvWaitForCardReady() != 0xFF )
 800239e:	f7ff ffc5 	bl	800232c <prvWaitForCardReady()>
 80023a2:	28ff      	cmp	r0, #255	; 0xff
 80023a4:	d002      	beq.n	80023ac <prvSendCommand(unsigned char, unsigned long)+0x44>
	{
		prvDeselectCard();
 80023a6:	f7ff ffb5 	bl	8002314 <prvDeselectCard()>
 80023aa:	e037      	b.n	800241c <prvSendCommand(unsigned char, unsigned long)+0xb4>
		prvDeselectCard();
		if( prvSelectCard() == true )
		{
			/* Send command packet */
			cCommandString[ 0 ] = cCommand;
			cCommandString[ 1 ] = ( BYTE ) ( ( xArgument >> 24UL ) & 0xffUL );
 80023ac:	0e2b      	lsrs	r3, r5, #24
 80023ae:	f88d 3001 	strb.w	r3, [sp, #1]
			cCommandString[ 2 ] = ( BYTE ) ( ( xArgument >> 16UL ) & 0xffUL );
 80023b2:	0c2b      	lsrs	r3, r5, #16
 80023b4:	f88d 3002 	strb.w	r3, [sp, #2]
			cCommandString[ 3 ] = ( BYTE ) ( ( xArgument >> 8UL ) & 0xffUL );
 80023b8:	0a2b      	lsrs	r3, r5, #8
			cCommandString[ 4 ] = ( BYTE ) ( xArgument & 0xffUL );

			if( cCommand == mmcCMD0_SOFTWARE_RESET )
 80023ba:	2c40      	cmp	r4, #64	; 0x40
		/* Select the card and wait for ready */
		prvDeselectCard();
		if( prvSelectCard() == true )
		{
			/* Send command packet */
			cCommandString[ 0 ] = cCommand;
 80023bc:	f88d 4000 	strb.w	r4, [sp]
			cCommandString[ 1 ] = ( BYTE ) ( ( xArgument >> 24UL ) & 0xffUL );
			cCommandString[ 2 ] = ( BYTE ) ( ( xArgument >> 16UL ) & 0xffUL );
			cCommandString[ 3 ] = ( BYTE ) ( ( xArgument >> 8UL ) & 0xffUL );
 80023c0:	f88d 3003 	strb.w	r3, [sp, #3]
			cCommandString[ 4 ] = ( BYTE ) ( xArgument & 0xffUL );
 80023c4:	f88d 5004 	strb.w	r5, [sp, #4]

			if( cCommand == mmcCMD0_SOFTWARE_RESET )
 80023c8:	d101      	bne.n	80023ce <prvSendCommand(unsigned char, unsigned long)+0x66>
			{
				/* Valid CRC for mmcCMD0_SOFTWARE_RESET(0) */
				cCommandString[ 5 ] = 0x95;
 80023ca:	2395      	movs	r3, #149	; 0x95
 80023cc:	e004      	b.n	80023d8 <prvSendCommand(unsigned char, unsigned long)+0x70>
			}
			else if( cCommand == mmcCMD8_CHECK_VOLTAGE_RANGE )
 80023ce:	2c48      	cmp	r4, #72	; 0x48
 80023d0:	d101      	bne.n	80023d6 <prvSendCommand(unsigned char, unsigned long)+0x6e>
			{
				/* Valid CRC for mmcCMD8_CHECK_VOLTAGE_RANGE(0x1AA) */
				cCommandString[ 5 ] = 0x87;
 80023d2:	2387      	movs	r3, #135	; 0x87
 80023d4:	e000      	b.n	80023d8 <prvSendCommand(unsigned char, unsigned long)+0x70>
			}
			else
			{
				/* Dummy CRC and stop. */
				cCommandString[ 5 ] = 0x01;
 80023d6:	2301      	movs	r3, #1
			}

			if (spiWrite(cCommandString, mmcCOMMAND_LENGTH_BYTES) == mmcCOMMAND_LENGTH_BYTES)
 80023d8:	2100      	movs	r1, #0
 80023da:	2206      	movs	r2, #6
 80023dc:	4668      	mov	r0, sp
				cCommandString[ 5 ] = 0x87;
			}
			else
			{
				/* Dummy CRC and stop. */
				cCommandString[ 5 ] = 0x01;
 80023de:	f88d 3005 	strb.w	r3, [sp, #5]
			}

			if (spiWrite(cCommandString, mmcCOMMAND_LENGTH_BYTES) == mmcCOMMAND_LENGTH_BYTES)
 80023e2:	f000 fc41 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
 80023e6:	2806      	cmp	r0, #6
 80023e8:	d118      	bne.n	800241c <prvSendCommand(unsigned char, unsigned long)+0xb4>
			{
				/* Receive command response */
				if( cCommand == mmcCMD12_STOP )
 80023ea:	2c4c      	cmp	r4, #76	; 0x4c
 80023ec:	d105      	bne.n	80023fa <prvSendCommand(unsigned char, unsigned long)+0x92>
				{
					/* Skip a stuff byte when stop reading */
					spiRead(&cResult, sizeof(cResult));
 80023ee:	2000      	movs	r0, #0
 80023f0:	f10d 0107 	add.w	r1, sp, #7
 80023f4:	2201      	movs	r2, #1
 80023f6:	f000 fc37 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
	return xReturn;
}
/*-----------------------------------------------------------*/

static BYTE prvSendCommand( BYTE cCommand,	DWORD xArgument	)
{
 80023fa:	240a      	movs	r4, #10
				}

				/* Wait for a valid response. */
				for( n = 0; n < 10; n++ )
				{
					if(spiRead(&cResult, sizeof(cResult)) == sizeof(cResult))
 80023fc:	2000      	movs	r0, #0
 80023fe:	2201      	movs	r2, #1
 8002400:	f10d 0107 	add.w	r1, sp, #7
 8002404:	f000 fc30 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
 8002408:	2801      	cmp	r0, #1
 800240a:	d103      	bne.n	8002414 <prvSendCommand(unsigned char, unsigned long)+0xac>
					{
						if( ( cResult & 0x80 ) == 0 )
 800240c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da03      	bge.n	800241c <prvSendCommand(unsigned char, unsigned long)+0xb4>
 8002414:	3c01      	subs	r4, #1
 8002416:	b2e4      	uxtb	r4, r4
					/* Skip a stuff byte when stop reading */
					spiRead(&cResult, sizeof(cResult));
				}

				/* Wait for a valid response. */
				for( n = 0; n < 10; n++ )
 8002418:	2c00      	cmp	r4, #0
 800241a:	d1ef      	bne.n	80023fc <prvSendCommand(unsigned char, unsigned long)+0x94>
				}
			}
		}
	}

	return cResult;
 800241c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002420:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002422:	bf00      	nop
 8002424:	424102b0 	.word	0x424102b0

08002428 <prvWriteDataBlock(unsigned char const*, unsigned char)>:
}
/*-----------------------------------------------------------*/

#if _READONLY == 0
static bool prvWriteDataBlock( const BYTE *pcBuffer, BYTE cToken )
{
 8002428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/* Two dummy CRC bytes, and one space to receive the response. */
const BYTE cCRCDummy[ 2 ] = { 0xff, 0xff };
 800242a:	2202      	movs	r2, #2
}
/*-----------------------------------------------------------*/

#if _READONLY == 0
static bool prvWriteDataBlock( const BYTE *pcBuffer, BYTE cToken )
{
 800242c:	f88d 1007 	strb.w	r1, [sp, #7]
/* Two dummy CRC bytes, and one space to receive the response. */
const BYTE cCRCDummy[ 2 ] = { 0xff, 0xff };
volatile bool bReturn = false;
 8002430:	2400      	movs	r4, #0

#if _READONLY == 0
static bool prvWriteDataBlock( const BYTE *pcBuffer, BYTE cToken )
{
/* Two dummy CRC bytes, and one space to receive the response. */
const BYTE cCRCDummy[ 2 ] = { 0xff, 0xff };
 8002432:	491f      	ldr	r1, [pc, #124]	; (80024b0 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x88>)
}
/*-----------------------------------------------------------*/

#if _READONLY == 0
static bool prvWriteDataBlock( const BYTE *pcBuffer, BYTE cToken )
{
 8002434:	4606      	mov	r6, r0
/* Two dummy CRC bytes, and one space to receive the response. */
const BYTE cCRCDummy[ 2 ] = { 0xff, 0xff };
 8002436:	a803      	add	r0, sp, #12
 8002438:	f001 f8ec 	bl	8003614 <memcpy>
volatile bool bReturn = false;
 800243c:	f88d 400f 	strb.w	r4, [sp, #15]

	if( prvWaitForCardReady() == 0xff )
 8002440:	f7ff ff74 	bl	800232c <prvWaitForCardReady()>
 8002444:	28ff      	cmp	r0, #255	; 0xff
 8002446:	d12f      	bne.n	80024a8 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x80>
		/* Transmit the token. */
		if( spiWrite(&cToken, sizeof( cToken ) ) == 1 )
 8002448:	2201      	movs	r2, #1
 800244a:	f10d 0007 	add.w	r0, sp, #7
 800244e:	4621      	mov	r1, r4
 8002450:	f000 fc0a 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
 8002454:	2801      	cmp	r0, #1
 8002456:	4605      	mov	r5, r0
 8002458:	d126      	bne.n	80024a8 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x80>
		{
			if( cToken != 0xFD )
 800245a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800245e:	2bfd      	cmp	r3, #253	; 0xfd
 8002460:	d020      	beq.n	80024a4 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x7c>
			{
				/* Write the data block. */
				if( spiWrite(pcBuffer, mmcDATA_BLOCK_SIZE ) == mmcDATA_BLOCK_SIZE )
 8002462:	4630      	mov	r0, r6
 8002464:	4621      	mov	r1, r4
 8002466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246a:	f000 fbfd 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
 800246e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002472:	d119      	bne.n	80024a8 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x80>
					/* Write the CRC. */
					if( spiWrite(cCRCDummy, sizeof( cCRCDummy ) ) == sizeof( cCRCDummy ) )
 8002474:	2202      	movs	r2, #2
 8002476:	a803      	add	r0, sp, #12
 8002478:	4621      	mov	r1, r4
 800247a:	f000 fbf5 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
 800247e:	2802      	cmp	r0, #2
 8002480:	d112      	bne.n	80024a8 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x80>
						/* Receive response. */
						if(spiRead(&cToken, sizeof(cToken)) == sizeof(cToken))
 8002482:	4620      	mov	r0, r4
 8002484:	f10d 0107 	add.w	r1, sp, #7
 8002488:	462a      	mov	r2, r5
 800248a:	f000 fbed 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
 800248e:	2801      	cmp	r0, #1
 8002490:	d10a      	bne.n	80024a8 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x80>
							if( ( cToken & 0x1f ) == 0x05 )
 8002492:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2b05      	cmp	r3, #5
 800249c:	d104      	bne.n	80024a8 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x80>
								bReturn = true;
 800249e:	f88d 000f 	strb.w	r0, [sp, #15]
 80024a2:	e001      	b.n	80024a8 <prvWriteDataBlock(unsigned char const*, unsigned char)+0x80>
			}
			else
				bReturn = true;
 80024a4:	f88d 000f 	strb.w	r0, [sp, #15]
		}

	configASSERT( bReturn );
	return bReturn;
 80024a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 80024ac:	b004      	add	sp, #16
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
 80024b0:	08003f9c 	.word	0x08003f9c

080024b4 <_ZL19prvReceiveDataBlockPhj.constprop.1>:

	return xReturn;
}
/*-----------------------------------------------------------*/

static bool prvReceiveDataBlock( BYTE *pcBuffer, UINT xBytesToRead )
 80024b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
bool xReturn = false;
portTickType xTimeOnEntering;
BYTE pcToken[ 2 ] = { 0x00, 0x00 };
 80024b6:	2300      	movs	r3, #0

	return xReturn;
}
/*-----------------------------------------------------------*/

static bool prvReceiveDataBlock( BYTE *pcBuffer, UINT xBytesToRead )
 80024b8:	4604      	mov	r4, r0
{
bool xReturn = false;
portTickType xTimeOnEntering;
BYTE pcToken[ 2 ] = { 0x00, 0x00 };
 80024ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80024be:	f88d 3005 	strb.w	r3, [sp, #5]
const portTickType xMaxTimeToWait_ms = 200 / portTICK_RATE_MS;

	xTimeOnEntering = xTaskGetTickCount();
 80024c2:	f7fe fc17 	bl	8000cf4 <xTaskGetTickCount>
 80024c6:	4605      	mov	r5, r0

	/* Wait with timeout for a valid byte. */
	do
	{
		spiRead(pcToken, sizeof(*pcToken));
 80024c8:	2000      	movs	r0, #0
 80024ca:	2201      	movs	r2, #1
 80024cc:	a901      	add	r1, sp, #4
 80024ce:	f000 fbcb 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
const portTickType xMaxTimeToWait_ms = 200 / portTICK_RATE_MS;

	xTimeOnEntering = xTaskGetTickCount();

	/* Wait with timeout for a valid byte. */
	do
 80024d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	d104      	bne.n	80024e4 <_ZL19prvReceiveDataBlockPhj.constprop.1+0x30>
	{
		spiRead(pcToken, sizeof(*pcToken));
	} while( ( *pcToken == 0xff ) && ( ( xTaskGetTickCount() - xTimeOnEntering ) < xMaxTimeToWait_ms ) );
 80024da:	f7fe fc0b 	bl	8000cf4 <xTaskGetTickCount>
const portTickType xMaxTimeToWait_ms = 200 / portTICK_RATE_MS;

	xTimeOnEntering = xTaskGetTickCount();

	/* Wait with timeout for a valid byte. */
	do
 80024de:	1b40      	subs	r0, r0, r5
 80024e0:	28c7      	cmp	r0, #199	; 0xc7
 80024e2:	d9f1      	bls.n	80024c8 <_ZL19prvReceiveDataBlockPhj.constprop.1+0x14>
	{
		spiRead(pcToken, sizeof(*pcToken));
	} while( ( *pcToken == 0xff ) && ( ( xTaskGetTickCount() - xTimeOnEntering ) < xMaxTimeToWait_ms ) );

	/* Was the byte as expected? */
	if( *pcToken == 0xfe )
 80024e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
	{
		/* Receive the data block. */
		if(spiRead(pcBuffer, xBytesToRead) == xBytesToRead )
 80024e8:	2000      	movs	r0, #0
	{
		spiRead(pcToken, sizeof(*pcToken));
	} while( ( *pcToken == 0xff ) && ( ( xTaskGetTickCount() - xTimeOnEntering ) < xMaxTimeToWait_ms ) );

	/* Was the byte as expected? */
	if( *pcToken == 0xfe )
 80024ea:	2bfe      	cmp	r3, #254	; 0xfe
 80024ec:	d10e      	bne.n	800250c <_ZL19prvReceiveDataBlockPhj.constprop.1+0x58>
	{
		/* Receive the data block. */
		if(spiRead(pcBuffer, xBytesToRead) == xBytesToRead )
 80024ee:	4621      	mov	r1, r4
 80024f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f4:	f000 fbb8 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
 80024f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
		{
			/* Read and discard the CRC. */
			spiRead(pcToken, sizeof(pcToken));
 80024fc:	f04f 0000 	mov.w	r0, #0

	/* Was the byte as expected? */
	if( *pcToken == 0xfe )
	{
		/* Receive the data block. */
		if(spiRead(pcBuffer, xBytesToRead) == xBytesToRead )
 8002500:	d104      	bne.n	800250c <_ZL19prvReceiveDataBlockPhj.constprop.1+0x58>
		{
			/* Read and discard the CRC. */
			spiRead(pcToken, sizeof(pcToken));
 8002502:	a901      	add	r1, sp, #4
 8002504:	2202      	movs	r2, #2
 8002506:	f000 fbaf 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>
			xReturn = true;
 800250a:	2001      	movs	r0, #1
		}
	}

	return xReturn;
}
 800250c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

08002510 <disk_initialize>:

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize ( BYTE cDriveNumber )
{
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
portTickType xTimeAtStart;
const portTickType xTimeOut = 1000UL / portTICK_RATE_MS;

	static bool initialized = false;

	if (initialized == false)
 8002512:	4d4f      	ldr	r5, [pc, #316]	; (8002650 <disk_initialize+0x140>)

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize ( BYTE cDriveNumber )
{
 8002514:	b085      	sub	sp, #20
portTickType xTimeAtStart;
const portTickType xTimeOut = 1000UL / portTICK_RATE_MS;

	static bool initialized = false;

	if (initialized == false)
 8002516:	782b      	ldrb	r3, [r5, #0]

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize ( BYTE cDriveNumber )
{
 8002518:	4604      	mov	r4, r0
portTickType xTimeAtStart;
const portTickType xTimeOut = 1000UL / portTICK_RATE_MS;

	static bool initialized = false;

	if (initialized == false)
 800251a:	b95b      	cbnz	r3, 8002534 <disk_initialize+0x24>
	{
		gpioConfigurePin(SD_CS_GPIO, SD_CS_PIN, GPIO_OUT_PP_2MHz);
 800251c:	484d      	ldr	r0, [pc, #308]	; (8002654 <disk_initialize+0x144>)
 800251e:	210c      	movs	r1, #12
 8002520:	f240 1201 	movw	r2, #257	; 0x101
 8002524:	f000 fa08 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
		SD_CS_bb = SD_CS_DEASSERTED;
 8002528:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <disk_initialize+0x148>)
 800252a:	2601      	movs	r6, #1
 800252c:	601e      	str	r6, [r3, #0]

		spiInitialize();
 800252e:	f000 fb5f 	bl	8002bf0 <spiInitialize()>

		initialized = true;
 8002532:	702e      	strb	r6, [r5, #0]
	}

	if( cDriveNumber != 0 )
 8002534:	2c00      	cmp	r4, #0
 8002536:	d178      	bne.n	800262a <disk_initialize+0x11a>
	{
		/* This driver only supports a single drive. */
		xReturn = STA_NOINIT;
	}
	else if( ( xDiskStatus & STA_NOINIT ) != 0U )
 8002538:	4b48      	ldr	r3, [pc, #288]	; (800265c <disk_initialize+0x14c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	07da      	lsls	r2, r3, #31
 800253e:	d576      	bpl.n	800262e <disk_initialize+0x11e>
	{
		/* Always start with the slow SPI clock. */
		spiSetBaudRate(mmcSD_INTERFACE_SLOW_CLOCK);
 8002540:	4847      	ldr	r0, [pc, #284]	; (8002660 <disk_initialize+0x150>)
 8002542:	f000 fb77 	bl	8002c34 <spiSetBaudRate(unsigned long)>

		/* Wait the obligatory 80 clocks. */
		spiRead(ucBuffer, mmc80_CLOCKS_IN_BYTES);
 8002546:	220a      	movs	r2, #10
 8002548:	a901      	add	r1, sp, #4
 800254a:	4620      	mov	r0, r4
 800254c:	f000 fb8c 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>

		cCardType = 0;
		if( prvSendCommand( mmcCMD0_SOFTWARE_RESET, 0 ) == 1 )
 8002550:	2040      	movs	r0, #64	; 0x40
 8002552:	4621      	mov	r1, r4
 8002554:	f7ff ff08 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 8002558:	2801      	cmp	r0, #1
 800255a:	d156      	bne.n	800260a <disk_initialize+0xfa>
		{
			/* Enter Idle state.  Initialization timeout of 1000 msec */
			xTimeAtStart = xTaskGetTickCount();
 800255c:	f7fe fbca 	bl	8000cf4 <xTaskGetTickCount>

			if( prvSendCommand( mmcCMD8_CHECK_VOLTAGE_RANGE, 0x1AA ) == 1 )
 8002560:	f44f 71d5 	mov.w	r1, #426	; 0x1aa

		cCardType = 0;
		if( prvSendCommand( mmcCMD0_SOFTWARE_RESET, 0 ) == 1 )
		{
			/* Enter Idle state.  Initialization timeout of 1000 msec */
			xTimeAtStart = xTaskGetTickCount();
 8002564:	4605      	mov	r5, r0

			if( prvSendCommand( mmcCMD8_CHECK_VOLTAGE_RANGE, 0x1AA ) == 1 )
 8002566:	2048      	movs	r0, #72	; 0x48
 8002568:	f7ff fefe 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 800256c:	2801      	cmp	r0, #1
 800256e:	d12c      	bne.n	80025ca <disk_initialize+0xba>
			{
				/* SDHC */
				/* Get trailing return value of R7 resp */
				spiRead(ucBuffer, mmcOCR_LENGTH);
 8002570:	2204      	movs	r2, #4
 8002572:	4620      	mov	r0, r4
 8002574:	a901      	add	r1, sp, #4
 8002576:	f000 fb77 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>

				if( ( ucBuffer[ 2 ] == 0x01 ) && ( ucBuffer[ 3 ] == 0xAA ) )
 800257a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d143      	bne.n	800260a <disk_initialize+0xfa>
 8002582:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002586:	2baa      	cmp	r3, #170	; 0xaa
 8002588:	d13f      	bne.n	800260a <disk_initialize+0xfa>
				{
					/* The card can work at vdd range of 2.7-3.6V */

					/* Wait for leaving idle state (mmcACMD41_START_INIT_SDC
					with HCS bit) */
					while( ( ( xTaskGetTickCount() - xTimeAtStart ) < xTimeOut ) && ( prvSendCommand( mmcACMD41_START_INIT_SDC, 1UL << 30 ) != 0 ) )
 800258a:	f240 34e7 	movw	r4, #999	; 0x3e7
 800258e:	f7fe fbb1 	bl	8000cf4 <xTaskGetTickCount>
 8002592:	1b40      	subs	r0, r0, r5
 8002594:	42a0      	cmp	r0, r4
 8002596:	d84d      	bhi.n	8002634 <disk_initialize+0x124>
 8002598:	20e9      	movs	r0, #233	; 0xe9
 800259a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800259e:	f7ff fee3 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d1f3      	bne.n	800258e <disk_initialize+0x7e>
 80025a6:	e045      	b.n	8002634 <disk_initialize+0x124>
					{
						/* Nothing to do here. */
					}

					if( ( ( xTaskGetTickCount() - xTimeAtStart ) < xTimeOut ) && ( prvSendCommand( mmcCMD58_READ_OCR, 0 ) == 0 ) )
 80025a8:	207a      	movs	r0, #122	; 0x7a
 80025aa:	2100      	movs	r1, #0
 80025ac:	f7ff fedc 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 80025b0:	bb50      	cbnz	r0, 8002608 <disk_initialize+0xf8>
					{
						/* Check CCS bit in the OCR */
						spiRead(ucBuffer, mmcOCR_LENGTH);
 80025b2:	2204      	movs	r2, #4
 80025b4:	a901      	add	r1, sp, #4
 80025b6:	f000 fb57 	bl	8002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>

						/* SDv2 */
						if( ( ucBuffer[ 0 ] & 0x40 ) != 0 )
 80025ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
						{
							cCardType = CT_SD2 | CT_BLOCK;
 80025be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025c2:	bf0c      	ite	eq
 80025c4:	2404      	moveq	r4, #4
 80025c6:	240c      	movne	r4, #12
 80025c8:	e01f      	b.n	800260a <disk_initialize+0xfa>
				}
			}
			else
			{
				/* SDSC or MMC */
				if( prvSendCommand( mmcACMD41_START_INIT_SDC, 0 ) <= 1 )
 80025ca:	20e9      	movs	r0, #233	; 0xe9
 80025cc:	4621      	mov	r1, r4
 80025ce:	f7ff fecb 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
				{
					/* SDv1 */
					cCardType = CT_SD1;
 80025d2:	2801      	cmp	r0, #1
 80025d4:	bf8c      	ite	hi
 80025d6:	2401      	movhi	r4, #1
 80025d8:	2402      	movls	r4, #2
 80025da:	bf8c      	ite	hi
 80025dc:	2741      	movhi	r7, #65	; 0x41
 80025de:	27e9      	movls	r7, #233	; 0xe9
					/* MMCv3 */
					cCardType = CT_MMC;
					cCommand = mmcCMD1_START_INITIALISE_MMC;
				}

				while( ( ( xTaskGetTickCount() - xTimeAtStart ) < xTimeOut ) && ( prvSendCommand( cCommand, 0 ) != 0 ) )
 80025e0:	f240 36e7 	movw	r6, #999	; 0x3e7
 80025e4:	f7fe fb86 	bl	8000cf4 <xTaskGetTickCount>
 80025e8:	1b40      	subs	r0, r0, r5
 80025ea:	42b0      	cmp	r0, r6
 80025ec:	d829      	bhi.n	8002642 <disk_initialize+0x132>
 80025ee:	4638      	mov	r0, r7
 80025f0:	2100      	movs	r1, #0
 80025f2:	f7ff feb9 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d1f4      	bne.n	80025e4 <disk_initialize+0xd4>
 80025fa:	e022      	b.n	8002642 <disk_initialize+0x132>
				{
					/* Wait for leaving idle state */
				}

				if( ( ( xTaskGetTickCount() - xTimeAtStart ) >= xTimeOut ) || ( prvSendCommand( mmcCMD16_CHANGE_RW_BLOCK_SIZE, mmcSECTOR_SIZE ) != 0 ) )
 80025fc:	2050      	movs	r0, #80	; 0x50
 80025fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002602:	f7ff feb1 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 8002606:	b100      	cbz	r0, 800260a <disk_initialize+0xfa>
				{
					/* Set R/W block length to mmcSECTOR_SIZE */
					cCardType = 0;
 8002608:	2400      	movs	r4, #0
				}
			}
		}

		ucInsertedCardType = cCardType;
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <disk_initialize+0x154>)
 800260c:	701c      	strb	r4, [r3, #0]
		prvDeselectCard();
 800260e:	f7ff fe81 	bl	8002314 <prvDeselectCard()>

		if( cCardType != 0 )
 8002612:	b13c      	cbz	r4, 8002624 <disk_initialize+0x114>
		{
			/* Initialization succeeded.  Clear STA_NOINIT */
			xDiskStatus &= ~STA_NOINIT;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <disk_initialize+0x14c>)
			spiSetBaudRate(mmcSD_INTERFACE_FAST_CLOCK);
 8002616:	4814      	ldr	r0, [pc, #80]	; (8002668 <disk_initialize+0x158>)
		prvDeselectCard();

		if( cCardType != 0 )
		{
			/* Initialization succeeded.  Clear STA_NOINIT */
			xDiskStatus &= ~STA_NOINIT;
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800261e:	701a      	strb	r2, [r3, #0]
			spiSetBaudRate(mmcSD_INTERFACE_FAST_CLOCK);
 8002620:	f000 fb08 	bl	8002c34 <spiSetBaudRate(unsigned long)>
		}

		xReturn = xDiskStatus;
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <disk_initialize+0x14c>)
 8002626:	7818      	ldrb	r0, [r3, #0]
 8002628:	e002      	b.n	8002630 <disk_initialize+0x120>
	}

	if( cDriveNumber != 0 )
	{
		/* This driver only supports a single drive. */
		xReturn = STA_NOINIT;
 800262a:	2001      	movs	r0, #1
 800262c:	e000      	b.n	8002630 <disk_initialize+0x120>
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize ( BYTE cDriveNumber )
{
BYTE cCommand, cCardType;
DSTATUS xReturn = 0;
 800262e:	4620      	mov	r0, r4

		xReturn = xDiskStatus;
	}

	return xReturn;
}
 8002630:	b005      	add	sp, #20
 8002632:	bdf0      	pop	{r4, r5, r6, r7, pc}
					while( ( ( xTaskGetTickCount() - xTimeAtStart ) < xTimeOut ) && ( prvSendCommand( mmcACMD41_START_INIT_SDC, 1UL << 30 ) != 0 ) )
					{
						/* Nothing to do here. */
					}

					if( ( ( xTaskGetTickCount() - xTimeAtStart ) < xTimeOut ) && ( prvSendCommand( mmcCMD58_READ_OCR, 0 ) == 0 ) )
 8002634:	f7fe fb5e 	bl	8000cf4 <xTaskGetTickCount>
 8002638:	1b45      	subs	r5, r0, r5
 800263a:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800263e:	d2e3      	bcs.n	8002608 <disk_initialize+0xf8>
 8002640:	e7b2      	b.n	80025a8 <disk_initialize+0x98>
				while( ( ( xTaskGetTickCount() - xTimeAtStart ) < xTimeOut ) && ( prvSendCommand( cCommand, 0 ) != 0 ) )
				{
					/* Wait for leaving idle state */
				}

				if( ( ( xTaskGetTickCount() - xTimeAtStart ) >= xTimeOut ) || ( prvSendCommand( mmcCMD16_CHANGE_RW_BLOCK_SIZE, mmcSECTOR_SIZE ) != 0 ) )
 8002642:	f7fe fb57 	bl	8000cf4 <xTaskGetTickCount>
 8002646:	1b45      	subs	r5, r0, r5
 8002648:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800264c:	d2dc      	bcs.n	8002608 <disk_initialize+0xf8>
 800264e:	e7d5      	b.n	80025fc <disk_initialize+0xec>
 8002650:	20000c18 	.word	0x20000c18
 8002654:	40020800 	.word	0x40020800
 8002658:	424102b0 	.word	0x424102b0
 800265c:	20000010 	.word	0x20000010
 8002660:	000186a0 	.word	0x000186a0
 8002664:	20000c19 	.word	0x20000c19
 8002668:	00989680 	.word	0x00989680

0800266c <disk_status>:

static portBASE_TYPE prvIsDiskInserted( void )
{
	portBASE_TYPE xReturn;

	xDiskStatus &= ~STA_NODISK;
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <disk_status+0x14>)
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8002674:	701a      	strb	r2, [r3, #0]
DSTATUS xReturn;

	/* This call will update xDiskStatus. */
	prvIsDiskInserted();

	if( cDriveNumber != 0 )
 8002676:	b908      	cbnz	r0, 800267c <disk_status+0x10>
	{
		xReturn = STA_NOINIT;
	}
	else
	{
		xReturn = xDiskStatus;
 8002678:	7818      	ldrb	r0, [r3, #0]
 800267a:	4770      	bx	lr
	/* This call will update xDiskStatus. */
	prvIsDiskInserted();

	if( cDriveNumber != 0 )
	{
		xReturn = STA_NOINIT;
 800267c:	2001      	movs	r0, #1
	{
		xReturn = xDiskStatus;
	}

	return xReturn;
}
 800267e:	4770      	bx	lr
 8002680:	20000010 	.word	0x20000010

08002684 <disk_read>:
			BYTE	cDriveNumber,	/* Physical drive nmuber (0) */
			BYTE	*pcBuffer,		/* Pointer to the data buffer to store read data */
			DWORD	ulSector, 		/* Start ulSector number (LBA) */
			BYTE	xCount			/* Sector xCount (1..255) */
		)
{
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	460c      	mov	r4, r1
 8002688:	461d      	mov	r5, r3
 800268a:	4611      	mov	r1, r2
DRESULT xReturn;

	if( ( cDriveNumber != 0 ) || ( xCount == 0 ) )
 800268c:	2800      	cmp	r0, #0
 800268e:	d134      	bne.n	80026fa <disk_read+0x76>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d032      	beq.n	80026fa <disk_read+0x76>
	{
		xReturn = RES_PARERR;
	}
	else if( ( ( xDiskStatus & STA_NOINIT ) != 0 ) || ( prvIsDiskInserted() != pdTRUE ) )
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <disk_read+0x80>)
 8002696:	781a      	ldrb	r2, [r3, #0]
 8002698:	07d2      	lsls	r2, r2, #31
 800269a:	d430      	bmi.n	80026fe <disk_read+0x7a>

static portBASE_TYPE prvIsDiskInserted( void )
{
	portBASE_TYPE xReturn;

	xDiskStatus &= ~STA_NODISK;
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80026a2:	701a      	strb	r2, [r3, #0]
	{
		xReturn = RES_NOTRDY;
	}
	else
	{
		if( ( ucInsertedCardType & CT_BLOCK ) == 0U )
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <disk_read+0x84>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	0718      	lsls	r0, r3, #28
		{
			/* Convert to byte address if needed */
			ulSector *= mmcSECTOR_SIZE;
 80026aa:	bf58      	it	pl
 80026ac:	0249      	lslpl	r1, r1, #9
		}

		if( xCount == 1 )
 80026ae:	2d01      	cmp	r5, #1
 80026b0:	d10b      	bne.n	80026ca <disk_read+0x46>
		{
			/* Single block read */
			if( prvSendCommand( mmcCMD17_READ_SINGLE_BLOCK, ulSector ) == 0 )
 80026b2:	2051      	movs	r0, #81	; 0x51
 80026b4:	f7ff fe58 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 80026b8:	b9c8      	cbnz	r0, 80026ee <disk_read+0x6a>
			{
				if( prvReceiveDataBlock( pcBuffer, mmcSECTOR_SIZE ) == true )
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff fefa 	bl	80024b4 <_ZL19prvReceiveDataBlockPhj.constprop.1>
				{
					xCount = 0;
 80026c0:	f1d0 0501 	rsbs	r5, r0, #1
 80026c4:	bf38      	it	cc
 80026c6:	2500      	movcc	r5, #0
 80026c8:	e011      	b.n	80026ee <disk_read+0x6a>
			}
		}
		else
		{
			/* Multiple block read */
			if( prvSendCommand( mmcCMD18_READ_MULTI_BLOCK, ulSector ) == 0 )
 80026ca:	2052      	movs	r0, #82	; 0x52
 80026cc:	f7ff fe4c 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 80026d0:	b968      	cbnz	r0, 80026ee <disk_read+0x6a>
			{
				do
				{
					if( prvReceiveDataBlock( pcBuffer, mmcSECTOR_SIZE ) == false )
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff feee 	bl	80024b4 <_ZL19prvReceiveDataBlockPhj.constprop.1>
 80026d8:	b128      	cbz	r0, 80026e6 <disk_read+0x62>
		else
		{
			/* Multiple block read */
			if( prvSendCommand( mmcCMD18_READ_MULTI_BLOCK, ulSector ) == 0 )
			{
				do
 80026da:	3d01      	subs	r5, #1
 80026dc:	b2ed      	uxtb	r5, r5
					if( prvReceiveDataBlock( pcBuffer, mmcSECTOR_SIZE ) == false )
					{
						break;
					}

					pcBuffer += mmcSECTOR_SIZE;
 80026de:	f504 7400 	add.w	r4, r4, #512	; 0x200
		else
		{
			/* Multiple block read */
			if( prvSendCommand( mmcCMD18_READ_MULTI_BLOCK, ulSector ) == 0 )
			{
				do
 80026e2:	2d00      	cmp	r5, #0
 80026e4:	d1f5      	bne.n	80026d2 <disk_read+0x4e>
					}

					pcBuffer += mmcSECTOR_SIZE;
				} while( --xCount );

				prvSendCommand( mmcCMD12_STOP, 0 );
 80026e6:	204c      	movs	r0, #76	; 0x4c
 80026e8:	2100      	movs	r1, #0
 80026ea:	f7ff fe3d 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
			}
		}

		prvDeselectCard();
 80026ee:	f7ff fe11 	bl	8002314 <prvDeselectCard()>
{
DRESULT xReturn;

	if( ( cDriveNumber != 0 ) || ( xCount == 0 ) )
	{
		xReturn = RES_PARERR;
 80026f2:	1c28      	adds	r0, r5, #0
 80026f4:	bf18      	it	ne
 80026f6:	2001      	movne	r0, #1
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
 80026fa:	2004      	movs	r0, #4
 80026fc:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if( ( ( xDiskStatus & STA_NOINIT ) != 0 ) || ( prvIsDiskInserted() != pdTRUE ) )
	{
		xReturn = RES_NOTRDY;
 80026fe:	2003      	movs	r0, #3
			xReturn = RES_OK;
		}
	}

	return xReturn;
}
 8002700:	bd38      	pop	{r3, r4, r5, pc}
 8002702:	bf00      	nop
 8002704:	20000010 	.word	0x20000010
 8002708:	20000c19 	.word	0x20000c19

0800270c <disk_write>:
			BYTE		cDriveNumber,	/* Physical drive nmuber (0) */
			const BYTE	*pcBuffer,		/* Pointer to the data to be written */
			DWORD		ulSector, 		/* Start ulSector number (LBA) */
			BYTE		xCount			/* Sector xCount (1..255) */
		)
{
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	460c      	mov	r4, r1
 8002710:	4615      	mov	r5, r2
 8002712:	461e      	mov	r6, r3
DRESULT xReturn;

	if( ( cDriveNumber != 0 ) || ( xCount == 0 ) )
 8002714:	2800      	cmp	r0, #0
 8002716:	d145      	bne.n	80027a4 <disk_write+0x98>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d043      	beq.n	80027a4 <disk_write+0x98>
	{
		xReturn = RES_PARERR;
	}
	else if( ( ( xDiskStatus & STA_NOINIT ) != 0 ) || ( prvIsDiskInserted() != pdTRUE ) )
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <disk_write+0xa4>)
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	07d2      	lsls	r2, r2, #31
 8002722:	d441      	bmi.n	80027a8 <disk_write+0x9c>

static portBASE_TYPE prvIsDiskInserted( void )
{
	portBASE_TYPE xReturn;

	xDiskStatus &= ~STA_NODISK;
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800272a:	701a      	strb	r2, [r3, #0]
	}
	else if( ( ( xDiskStatus & STA_NOINIT ) != 0 ) || ( prvIsDiskInserted() != pdTRUE ) )
	{
		xReturn = RES_NOTRDY;
	}
	else if( ( xDiskStatus & STA_PROTECT ) != 0 )
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	0758      	lsls	r0, r3, #29
 8002730:	d43c      	bmi.n	80027ac <disk_write+0xa0>
	{
		xReturn = RES_WRPRT;
	}
	else
	{
		if( ( ucInsertedCardType & CT_BLOCK ) == 0 )
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <disk_write+0xa8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	0719      	lsls	r1, r3, #28
		{
			/* Convert to byte address if needed */
			ulSector *= mmcSECTOR_SIZE;
 8002738:	bf58      	it	pl
 800273a:	026d      	lslpl	r5, r5, #9
		}

		if( xCount == 1 )
 800273c:	2e01      	cmp	r6, #1
 800273e:	d10d      	bne.n	800275c <disk_write+0x50>
		{
			/* Single block write */
			if( prvSendCommand( mmcCMD24_WRITE_SINGLE_BLOCK, ulSector ) == 0 )
 8002740:	2058      	movs	r0, #88	; 0x58
 8002742:	4629      	mov	r1, r5
 8002744:	f7ff fe10 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 8002748:	bb30      	cbnz	r0, 8002798 <disk_write+0x8c>
			{
				if( prvWriteDataBlock( pcBuffer, 0xFE ) == true )
 800274a:	21fe      	movs	r1, #254	; 0xfe
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff fe6b 	bl	8002428 <prvWriteDataBlock(unsigned char const*, unsigned char)>
				{
					xCount = 0;
 8002752:	f1d0 0601 	rsbs	r6, r0, #1
 8002756:	bf38      	it	cc
 8002758:	2600      	movcc	r6, #0
 800275a:	e01d      	b.n	8002798 <disk_write+0x8c>
			}
		}
		else
		{
			/* Multiple block write */
			if( ucInsertedCardType & CT_SDC )
 800275c:	f013 0f06 	tst.w	r3, #6
 8002760:	d003      	beq.n	800276a <disk_write+0x5e>
			{
				prvSendCommand( mmcACMD23_SET_ERASE_COUNT, xCount );
 8002762:	20d7      	movs	r0, #215	; 0xd7
 8002764:	4631      	mov	r1, r6
 8002766:	f7ff fdff 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
			}

			if( prvSendCommand( mmcCMD25_WRITE_MULTI_BLOCK, ulSector ) == 0 )
 800276a:	2059      	movs	r0, #89	; 0x59
 800276c:	4629      	mov	r1, r5
 800276e:	f7ff fdfb 	bl	8002368 <prvSendCommand(unsigned char, unsigned long)>
 8002772:	b988      	cbnz	r0, 8002798 <disk_write+0x8c>
			{
				do
				{
					if( prvWriteDataBlock( pcBuffer, 0xFC ) != true )
 8002774:	4620      	mov	r0, r4
 8002776:	21fc      	movs	r1, #252	; 0xfc
 8002778:	f7ff fe56 	bl	8002428 <prvWriteDataBlock(unsigned char const*, unsigned char)>
 800277c:	b128      	cbz	r0, 800278a <disk_write+0x7e>
				prvSendCommand( mmcACMD23_SET_ERASE_COUNT, xCount );
			}

			if( prvSendCommand( mmcCMD25_WRITE_MULTI_BLOCK, ulSector ) == 0 )
			{
				do
 800277e:	3e01      	subs	r6, #1
 8002780:	b2f6      	uxtb	r6, r6
					if( prvWriteDataBlock( pcBuffer, 0xFC ) != true )
					{
						break;
					}

					pcBuffer += mmcSECTOR_SIZE;
 8002782:	f504 7400 	add.w	r4, r4, #512	; 0x200
				prvSendCommand( mmcACMD23_SET_ERASE_COUNT, xCount );
			}

			if( prvSendCommand( mmcCMD25_WRITE_MULTI_BLOCK, ulSector ) == 0 )
			{
				do
 8002786:	2e00      	cmp	r6, #0
 8002788:	d1f4      	bne.n	8002774 <disk_write+0x68>

					pcBuffer += mmcSECTOR_SIZE;

				} while( --xCount );

				if( prvWriteDataBlock( NULL, 0xFD ) != true )
 800278a:	2000      	movs	r0, #0
 800278c:	21fd      	movs	r1, #253	; 0xfd
 800278e:	f7ff fe4b 	bl	8002428 <prvWriteDataBlock(unsigned char const*, unsigned char)>
				{
					/* STOP_TRAN token */
					xCount = 1;
 8002792:	2800      	cmp	r0, #0
 8002794:	bf08      	it	eq
 8002796:	2601      	moveq	r6, #1
				}
			}
		}

		prvDeselectCard();
 8002798:	f7ff fdbc 	bl	8002314 <prvDeselectCard()>
{
DRESULT xReturn;

	if( ( cDriveNumber != 0 ) || ( xCount == 0 ) )
	{
		xReturn = RES_PARERR;
 800279c:	1c30      	adds	r0, r6, #0
 800279e:	bf18      	it	ne
 80027a0:	2001      	movne	r0, #1
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	2004      	movs	r0, #4
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if( ( ( xDiskStatus & STA_NOINIT ) != 0 ) || ( prvIsDiskInserted() != pdTRUE ) )
	{
		xReturn = RES_NOTRDY;
 80027a8:	2003      	movs	r0, #3
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if( ( xDiskStatus & STA_PROTECT ) != 0 )
	{
		xReturn = RES_WRPRT;
 80027ac:	2002      	movs	r0, #2
			xReturn = RES_OK;
		}
	}

	return xReturn;
}
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	20000010 	.word	0x20000010
 80027b4:	20000c19 	.word	0x20000c19

080027b8 <_helpHandler(char const**, unsigned long, char*, unsigned int)>:
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _helpHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer,
		size_t output_buffer_length)
{
 80027b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027bc:	4614      	mov	r4, r2
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin()
      { return iterator(this->_M_impl._M_node._M_next); }
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x44>)

	for (const CommandDefinition *definition : _commands)
	{
		size_t string_length = strlen(definition->help_string);

		if ((output_buffer_length - 1) < string_length)	// will the help string fit into buffer?
 80027c0:	1e5f      	subs	r7, r3, #1
 80027c2:	6815      	ldr	r5, [r2, #0]
		size_t output_buffer_length)
{
	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	for (const CommandDefinition *definition : _commands)
 80027c4:	4690      	mov	r8, r2
 80027c6:	e00f      	b.n	80027e8 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x30>
	{
		size_t string_length = strlen(definition->help_string);
 80027c8:	68ab      	ldr	r3, [r5, #8]
 80027ca:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80027ce:	4648      	mov	r0, r9
 80027d0:	f001 f85e 	bl	8003890 <strlen>

		if ((output_buffer_length - 1) < string_length)	// will the help string fit into buffer?
 80027d4:	4287      	cmp	r7, r0
	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	for (const CommandDefinition *definition : _commands)
	{
		size_t string_length = strlen(definition->help_string);
 80027d6:	4606      	mov	r6, r0

		if ((output_buffer_length - 1) < string_length)	// will the help string fit into buffer?
 80027d8:	d30b      	bcc.n	80027f2 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x3a>
			return ERROR_BUFFER_OVERFLOW;

		memcpy(output_buffer, definition->help_string, string_length);
 80027da:	4620      	mov	r0, r4
 80027dc:	4649      	mov	r1, r9
 80027de:	4632      	mov	r2, r6
 80027e0:	f000 ff18 	bl	8003614 <memcpy>
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++()
      {
	_M_node = _M_node->_M_next;
 80027e4:	682d      	ldr	r5, [r5, #0]
		output_buffer += string_length;
 80027e6:	19a4      	adds	r4, r4, r6
		size_t output_buffer_length)
{
	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	for (const CommandDefinition *definition : _commands)
 80027e8:	4545      	cmp	r5, r8
 80027ea:	d1ed      	bne.n	80027c8 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x10>

		memcpy(output_buffer, definition->help_string, string_length);
		output_buffer += string_length;
	}

	*output_buffer = '\0';					// add trailing '\0' to the end of output
 80027ec:	2000      	movs	r0, #0
 80027ee:	7020      	strb	r0, [r4, #0]

	return ERROR_NONE;
 80027f0:	e000      	b.n	80027f4 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x3c>
	for (const CommandDefinition *definition : _commands)
	{
		size_t string_length = strlen(definition->help_string);

		if ((output_buffer_length - 1) < string_length)	// will the help string fit into buffer?
			return ERROR_BUFFER_OVERFLOW;
 80027f2:	2019      	movs	r0, #25
		output_buffer += string_length;
	}

	*output_buffer = '\0';					// add trailing '\0' to the end of output

	return ERROR_NONE;
 80027f4:	b240      	sxtb	r0, r0
}
 80027f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027fa:	bf00      	nop
 80027fc:	20000c1c 	.word	0x20000c1c

08002800 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::~list()>:
   *  we start at the tail and move forward by one.  When this member
   *  iterator's next/previous pointers refer to itself, the %list is
   *  %empty. 
  */
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4604      	mov	r4, r0
    void
    _List_base<_Tp, _Alloc>::
    _M_clear()
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
 8002804:	6800      	ldr	r0, [r0, #0]
 8002806:	e003      	b.n	8002810 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::~list()+0x10>
      while (__cur != &this->_M_impl._M_node)
	{
	  _Node* __tmp = __cur;
	  __cur = static_cast<_Node*>(__cur->_M_next);
 8002808:	6805      	ldr	r5, [r0, #0]
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 800280a:	f7ff fd7f 	bl	800230c <operator delete(void*)>
 800280e:	4628      	mov	r0, r5
    _List_base<_Tp, _Alloc>::
    _M_clear()
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
      while (__cur != &this->_M_impl._M_node)
 8002810:	42a0      	cmp	r0, r4
 8002812:	d1f9      	bne.n	8002808 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::~list()+0x8>
 8002814:	bd38      	pop	{r3, r4, r5, pc}
	...

08002818 <commandProcessInput(char*, char*, unsigned int)>:
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

enum Error commandProcessInput(char *input, char *output_buffer, size_t output_buffer_length)
{
 8002818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*output_buffer = '\0';
 800281c:	2300      	movs	r3, #0
 800281e:	700b      	strb	r3, [r1, #0]
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin()
      { return iterator(this->_M_impl._M_node._M_next); }
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <commandProcessInput(char*, char*, unsigned int)+0xa0>)
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

enum Error commandProcessInput(char *input, char *output_buffer, size_t output_buffer_length)
{
 8002822:	b085      	sub	sp, #20
 8002824:	4682      	mov	sl, r0
 8002826:	460f      	mov	r7, r1
 8002828:	4693      	mov	fp, r2
 800282a:	681c      	ldr	r4, [r3, #0]
	*output_buffer = '\0';

	enum Error error = ERROR_COMMAND_NOT_FOUND;

	for (const CommandDefinition* definition : _commands)
 800282c:	4698      	mov	r8, r3
 800282e:	e03a      	b.n	80028a6 <commandProcessInput(char*, char*, unsigned int)+0x8e>
 8002830:	68a6      	ldr	r6, [r4, #8]
	{
		size_t command_length = strlen(definition->command);
 8002832:	6835      	ldr	r5, [r6, #0]
 8002834:	4628      	mov	r0, r5
 8002836:	f001 f82b 	bl	8003890 <strlen>

		if (strncmp(definition->command, input, command_length) == 0)	// was the input matched to command?
 800283a:	4651      	mov	r1, sl

	enum Error error = ERROR_COMMAND_NOT_FOUND;

	for (const CommandDefinition* definition : _commands)
	{
		size_t command_length = strlen(definition->command);
 800283c:	4602      	mov	r2, r0

		if (strncmp(definition->command, input, command_length) == 0)	// was the input matched to command?
 800283e:	4628      	mov	r0, r5
 8002840:	f001 f856 	bl	80038f0 <strncmp>
 8002844:	4605      	mov	r5, r0
 8002846:	2800      	cmp	r0, #0
 8002848:	d12c      	bne.n	80028a4 <commandProcessInput(char*, char*, unsigned int)+0x8c>
		{
			// always make space for command name - first entry
			uint32_t arguments_count_max = definition->arguments_count_max + 1;
 800284a:	6873      	ldr	r3, [r6, #4]
 800284c:	f103 0901 	add.w	r9, r3, #1

			const char **arguments_array = (const char**)pvPortMalloc(sizeof (char*) * arguments_count_max);
 8002850:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8002854:	f7fe fdf2 	bl	800143c <pvPortMalloc>
 8002858:	4604      	mov	r4, r0

			if (arguments_array == NULL)
 800285a:	2800      	cmp	r0, #0
 800285c:	d027      	beq.n	80028ae <commandProcessInput(char*, char*, unsigned int)+0x96>
 800285e:	4680      	mov	r8, r0
 8002860:	4650      	mov	r0, sl

				if (argument == NULL)		// valid argument?
					break;					// no - no more arguments available, so break...

				if (strlen(argument) > COMMAND_ARGUMENT_LENGTH)	// should this argument be trimmed?
					argument[COMMAND_ARGUMENT_LENGTH] = '\0';
 8002862:	46aa      	mov	sl, r5
 8002864:	e011      	b.n	800288a <commandProcessInput(char*, char*, unsigned int)+0x72>
			char *source = input;
			char *lasts;

			while (arguments_count < arguments_count_max)
			{
				char *argument = strtok_r(source, " \t\r\n", &lasts);
 8002866:	4915      	ldr	r1, [pc, #84]	; (80028bc <commandProcessInput(char*, char*, unsigned int)+0xa4>)
 8002868:	aa03      	add	r2, sp, #12
 800286a:	f001 f8f7 	bl	8003a5c <strtok_r>
 800286e:	4603      	mov	r3, r0

				if (argument == NULL)		// valid argument?
 8002870:	b168      	cbz	r0, 800288e <commandProcessInput(char*, char*, unsigned int)+0x76>
					break;					// no - no more arguments available, so break...

				if (strlen(argument) > COMMAND_ARGUMENT_LENGTH)	// should this argument be trimmed?
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	f001 f80c 	bl	8003890 <strlen>
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	2820      	cmp	r0, #32
					argument[COMMAND_ARGUMENT_LENGTH] = '\0';
 800287c:	bf88      	it	hi
 800287e:	f883 a020 	strbhi.w	sl, [r3, #32]

				arguments_array[arguments_count] = argument;
 8002882:	f848 3b04 	str.w	r3, [r8], #4

				arguments_count++;
 8002886:	3501      	adds	r5, #1
				source = NULL;
 8002888:	2000      	movs	r0, #0

			uint32_t arguments_count = 0;
			char *source = input;
			char *lasts;

			while (arguments_count < arguments_count_max)
 800288a:	454d      	cmp	r5, r9
 800288c:	d3eb      	bcc.n	8002866 <commandProcessInput(char*, char*, unsigned int)+0x4e>
				arguments_count++;
				source = NULL;
			}

			// execute callback function
			error = (*definition->callback)(arguments_array, arguments_count, output_buffer, output_buffer_length);
 800288e:	4629      	mov	r1, r5
 8002890:	68b6      	ldr	r6, [r6, #8]
 8002892:	4620      	mov	r0, r4
 8002894:	463a      	mov	r2, r7
 8002896:	465b      	mov	r3, fp
 8002898:	47b0      	blx	r6
 800289a:	4605      	mov	r5, r0

			vPortFree(arguments_array);
 800289c:	4620      	mov	r0, r4
 800289e:	f7fe fdd9 	bl	8001454 <vPortFree>
 80028a2:	e005      	b.n	80028b0 <commandProcessInput(char*, char*, unsigned int)+0x98>
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++()
      {
	_M_node = _M_node->_M_next;
 80028a4:	6824      	ldr	r4, [r4, #0]
{
	*output_buffer = '\0';

	enum Error error = ERROR_COMMAND_NOT_FOUND;

	for (const CommandDefinition* definition : _commands)
 80028a6:	4544      	cmp	r4, r8
 80028a8:	d1c2      	bne.n	8002830 <commandProcessInput(char*, char*, unsigned int)+0x18>

enum Error commandProcessInput(char *input, char *output_buffer, size_t output_buffer_length)
{
	*output_buffer = '\0';

	enum Error error = ERROR_COMMAND_NOT_FOUND;
 80028aa:	2518      	movs	r5, #24
 80028ac:	e000      	b.n	80028b0 <commandProcessInput(char*, char*, unsigned int)+0x98>
			uint32_t arguments_count_max = definition->arguments_count_max + 1;

			const char **arguments_array = (const char**)pvPortMalloc(sizeof (char*) * arguments_count_max);

			if (arguments_array == NULL)
				return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028ae:	25fe      	movs	r5, #254	; 0xfe
{
	*output_buffer = '\0';

	enum Error error = ERROR_COMMAND_NOT_FOUND;

	for (const CommandDefinition* definition : _commands)
 80028b0:	b268      	sxtb	r0, r5
			break;
		}
	}

	return error;
}
 80028b2:	b005      	add	sp, #20
 80028b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028b8:	20000c1c 	.word	0x20000c1c
 80028bc:	08003fa4 	.word	0x08003fa4

080028c0 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::push_back(CommandDefinition const* const&)>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80028c4:	200c      	movs	r0, #12
 80028c6:	460d      	mov	r5, r1
 80028c8:	f7ff fd1e 	bl	8002308 <operator new(unsigned int)>

#ifdef __GXX_EXPERIMENTAL_CXX0X__
      template<typename... _Args>
        void
        construct(pointer __p, _Args&&... __args)
	{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }
 80028cc:	b120      	cbz	r0, 80028d8 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::push_back(CommandDefinition const* const&)+0x18>
      _Tp _M_data;

#ifdef __GXX_EXPERIMENTAL_CXX0X__
      template<typename... _Args>
        _List_node(_Args&&... __args)
	: __detail::_List_node_base(), _M_data(std::forward<_Args>(__args)...) 
 80028ce:	2300      	movs	r3, #0
 80028d0:	6003      	str	r3, [r0, #0]
 80028d2:	6043      	str	r3, [r0, #4]
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	6083      	str	r3, [r0, #8]
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 80028d8:	4621      	mov	r1, r4
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }
 80028da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 80028de:	f000 bb9f 	b.w	8003020 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
	...

080028e4 <commandRegister(CommandDefinition const*)>:
 * be in flash or available through entire program, as only the pointer is
 * copied
 */

void commandRegister(const struct CommandDefinition *definition)
{
 80028e4:	b507      	push	{r0, r1, r2, lr}
 80028e6:	a902      	add	r1, sp, #8
 80028e8:	f841 0d04 	str.w	r0, [r1, #-4]!
	_commands.push_back(definition);
 80028ec:	4801      	ldr	r0, [pc, #4]	; (80028f4 <commandRegister(CommandDefinition const*)+0x10>)
 80028ee:	f7ff ffe7 	bl	80028c0 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::push_back(CommandDefinition const* const&)>
}
 80028f2:	bd0e      	pop	{r1, r2, r3, pc}
 80028f4:	20000c1c 	.word	0x20000c1c

080028f8 <_GLOBAL__sub_I__commands>:
	}

	*output_buffer = '\0';					// add trailing '\0' to the end of output

	return ERROR_NONE;
}
 80028f8:	b510      	push	{r4, lr}
      _M_clear();

      void
      _M_init()
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 80028fa:	4c07      	ldr	r4, [pc, #28]	; (8002918 <_GLOBAL__sub_I__commands+0x20>)
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
			       __false_type)
        {
	  for (; __first != __last; ++__first)
	    push_back(*__first);
 80028fc:	4907      	ldr	r1, [pc, #28]	; (800291c <_GLOBAL__sub_I__commands+0x24>)
 80028fe:	4620      	mov	r0, r4
      _M_clear();

      void
      _M_init()
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 8002900:	6024      	str	r4, [r4, #0]
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 8002902:	6064      	str	r4, [r4, #4]
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
			       __false_type)
        {
	  for (; __first != __last; ++__first)
	    push_back(*__first);
 8002904:	f7ff ffdc 	bl	80028c0 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::push_back(CommandDefinition const* const&)>
		0,									// maximum number of arguments
		_helpHandler,						// callback function
		"help: lists all available commands\r\n",	// string displayed by help function
};

std::list<const CommandDefinition*> _commands = {&_helpCommandDefinition};
 8002908:	4905      	ldr	r1, [pc, #20]	; (8002920 <_GLOBAL__sub_I__commands+0x28>)
 800290a:	4a06      	ldr	r2, [pc, #24]	; (8002924 <_GLOBAL__sub_I__commands+0x2c>)
 800290c:	4620      	mov	r0, r4
	}

	*output_buffer = '\0';					// add trailing '\0' to the end of output

	return ERROR_NONE;
}
 800290e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		0,									// maximum number of arguments
		_helpHandler,						// callback function
		"help: lists all available commands\r\n",	// string displayed by help function
};

std::list<const CommandDefinition*> _commands = {&_helpCommandDefinition};
 8002912:	f000 bb8d 	b.w	8003030 <__aeabi_atexit>
 8002916:	bf00      	nop
 8002918:	20000c1c 	.word	0x20000c1c
 800291c:	08003fa0 	.word	0x08003fa0
 8002920:	08002801 	.word	0x08002801
 8002924:	20000000 	.word	0x20000000

08002928 <gpioInitialize()>:
 */

void gpioInitialize(void)
{
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN |
			RCC_AHBENR_GPIOEEN | RCC_AHBENR_GPIOFEN | RCC_AHBENR_GPIOGEN | RCC_AHBENR_GPIOHEN;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <gpioInitialize()+0xc>)
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8002930:	61da      	str	r2, [r3, #28]
}
 8002932:	4770      	bx	lr
 8002934:	40023800 	.word	0x40023800

08002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>:
void gpioConfigurePin(GPIO_TypeDef *port, enum GpioPin pin, enum GpioConfiguration configuration)
{
	uint32_t moder, otyper, ospeedr, pupdr, afr, afrx;

	moder = port->MODER;				// localize
	moder &= ~(GPIO_MODER_mask << (pin * 2));	// clear current setting
 8002938:	004b      	lsls	r3, r1, #1
 * GPIO_[AF0; AF15]_{PP, OD}_{400kHz, 2MHz, 10MHz, 40MHz},
 * GPIO_[AF0; AF15]_{PP, OD}_{400kHz, 2MHz, 10MHz, 40MHz}_{PULL_UP, PULL_DOWN}, GPIO_ANALOG}
 */

void gpioConfigurePin(GPIO_TypeDef *port, enum GpioPin pin, enum GpioConfiguration configuration)
{
 800293a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t moder, otyper, ospeedr, pupdr, afr, afrx;

	moder = port->MODER;				// localize
	moder &= ~(GPIO_MODER_mask << (pin * 2));	// clear current setting
 800293c:	2403      	movs	r4, #3
 800293e:	409c      	lsls	r4, r3
	moder |= (GPIO_GET_MODER(configuration) << (pin * 2));	// apply new setting
 8002940:	f002 050f 	and.w	r5, r2, #15
 8002944:	409d      	lsls	r5, r3

void gpioConfigurePin(GPIO_TypeDef *port, enum GpioPin pin, enum GpioConfiguration configuration)
{
	uint32_t moder, otyper, ospeedr, pupdr, afr, afrx;

	moder = port->MODER;				// localize
 8002946:	6806      	ldr	r6, [r0, #0]
	moder &= ~(GPIO_MODER_mask << (pin * 2));	// clear current setting
 8002948:	43e4      	mvns	r4, r4
 800294a:	4026      	ands	r6, r4
	moder |= (GPIO_GET_MODER(configuration) << (pin * 2));	// apply new setting
 800294c:	4335      	orrs	r5, r6
	port->MODER = moder;				// save back
 800294e:	6005      	str	r5, [r0, #0]

	otyper = port->OTYPER;				// localize
	otyper &= ~(GPIO_OTYPER_mask << pin);	// clear current setting
 8002950:	2501      	movs	r5, #1
 8002952:	fa15 f601 	lsls.w	r6, r5, r1
	moder = port->MODER;				// localize
	moder &= ~(GPIO_MODER_mask << (pin * 2));	// clear current setting
	moder |= (GPIO_GET_MODER(configuration) << (pin * 2));	// apply new setting
	port->MODER = moder;				// save back

	otyper = port->OTYPER;				// localize
 8002956:	8887      	ldrh	r7, [r0, #4]
 8002958:	b2bf      	uxth	r7, r7
	otyper &= ~(GPIO_OTYPER_mask << pin);	// clear current setting
 800295a:	ea27 0706 	bic.w	r7, r7, r6
	otyper |= (GPIO_GET_OTYPER(configuration) << pin);	// apply new setting
 800295e:	f3c2 1603 	ubfx	r6, r2, #4, #4
 8002962:	408e      	lsls	r6, r1
 8002964:	433e      	orrs	r6, r7
	port->OTYPER = otyper;				// save back
 8002966:	b2b6      	uxth	r6, r6
 8002968:	8086      	strh	r6, [r0, #4]

	ospeedr = port->OSPEEDR;			// localize
	ospeedr &= ~(GPIO_OSPEEDR_mask << (pin * 2));	// clear current setting
	ospeedr |= (GPIO_GET_OSPEEDR(configuration) << (pin * 2));	// apply new setting
 800296a:	f3c2 2603 	ubfx	r6, r2, #8, #4
 800296e:	409e      	lsls	r6, r3
	otyper = port->OTYPER;				// localize
	otyper &= ~(GPIO_OTYPER_mask << pin);	// clear current setting
	otyper |= (GPIO_GET_OTYPER(configuration) << pin);	// apply new setting
	port->OTYPER = otyper;				// save back

	ospeedr = port->OSPEEDR;			// localize
 8002970:	6887      	ldr	r7, [r0, #8]
	ospeedr &= ~(GPIO_OSPEEDR_mask << (pin * 2));	// clear current setting
 8002972:	4027      	ands	r7, r4
	ospeedr |= (GPIO_GET_OSPEEDR(configuration) << (pin * 2));	// apply new setting
 8002974:	433e      	orrs	r6, r7
	port->OSPEEDR = ospeedr;			// save back
 8002976:	6086      	str	r6, [r0, #8]

	pupdr = port->PUPDR;				// localize
 8002978:	68c6      	ldr	r6, [r0, #12]
	pupdr &= ~(GPIO_PUPDR_mask << (pin * 2));	// clear current setting
 800297a:	4034      	ands	r4, r6
	pupdr |= (GPIO_GET_PUPDR(configuration) << (pin * 2));	// apply new setting
 800297c:	f3c2 3603 	ubfx	r6, r2, #12, #4
 8002980:	fa16 f303 	lsls.w	r3, r6, r3
	port->PUPDR = pupdr;				// save back

	if (pin < 8)							// determine which AFR register should be used
 8002984:	2907      	cmp	r1, #7
	ospeedr |= (GPIO_GET_OSPEEDR(configuration) << (pin * 2));	// apply new setting
	port->OSPEEDR = ospeedr;			// save back

	pupdr = port->PUPDR;				// localize
	pupdr &= ~(GPIO_PUPDR_mask << (pin * 2));	// clear current setting
	pupdr |= (GPIO_GET_PUPDR(configuration) << (pin * 2));	// apply new setting
 8002986:	ea43 0304 	orr.w	r3, r3, r4
	port->PUPDR = pupdr;				// save back
 800298a:	60c3      	str	r3, [r0, #12]

	if (pin < 8)							// determine which AFR register should be used
 800298c:	d903      	bls.n	8002996 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)+0x5e>
		afrx = 0;							// AFRL - pins [0; 7]
	else
	{
		afrx = 1;							// AFRH - pins [8; 15]
		pin = (enum GpioPin)(((uint32_t)pin) - 8);	// trim pin number
 800298e:	3908      	subs	r1, #8
 8002990:	b2c9      	uxtb	r1, r1

	if (pin < 8)							// determine which AFR register should be used
		afrx = 0;							// AFRL - pins [0; 7]
	else
	{
		afrx = 1;							// AFRH - pins [8; 15]
 8002992:	462b      	mov	r3, r5
 8002994:	e000      	b.n	8002998 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)+0x60>
	pupdr &= ~(GPIO_PUPDR_mask << (pin * 2));	// clear current setting
	pupdr |= (GPIO_GET_PUPDR(configuration) << (pin * 2));	// apply new setting
	port->PUPDR = pupdr;				// save back

	if (pin < 8)							// determine which AFR register should be used
		afrx = 0;							// AFRL - pins [0; 7]
 8002996:	2300      	movs	r3, #0
		afrx = 1;							// AFRH - pins [8; 15]
		pin = (enum GpioPin)(((uint32_t)pin) - 8);	// trim pin number
	}

	afr = port->AFR[afrx];				// localize
	afr &= ~(GPIO_AFRx_mask << (pin * 4));	// clear current setting
 8002998:	0089      	lsls	r1, r1, #2
 800299a:	240f      	movs	r4, #15
 800299c:	408c      	lsls	r4, r1
	afr |= (GPIO_GET_AFR(configuration) << (pin * 4));	// apply new setting
 800299e:	f3c2 4203 	ubfx	r2, r2, #16, #4
 80029a2:	fa12 f101 	lsls.w	r1, r2, r1
	{
		afrx = 1;							// AFRH - pins [8; 15]
		pin = (enum GpioPin)(((uint32_t)pin) - 8);	// trim pin number
	}

	afr = port->AFR[afrx];				// localize
 80029a6:	3308      	adds	r3, #8
 80029a8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
	afr &= ~(GPIO_AFRx_mask << (pin * 4));	// clear current setting
 80029ac:	ea25 0404 	bic.w	r4, r5, r4
	afr |= (GPIO_GET_AFR(configuration) << (pin * 4));	// apply new setting
 80029b0:	4321      	orrs	r1, r4
	port->AFR[afrx] = afr;				// save back
 80029b2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b8 <configureTimerForRuntimestats>:
 *
 * Configures TIM6 for runtime stats.
 */

void configureTimerForRuntimestats(void)
{
 80029b8:	b538      	push	{r3, r4, r5, lr}
	RCC_APB1ENR_TIM6EN_bb = 1;				// enable timer
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <configureTimerForRuntimestats+0x44>)
 80029bc:	2501      	movs	r5, #1
 80029be:	601d      	str	r5, [r3, #0]

	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <configureTimerForRuntimestats+0x48>)

	TIM6->CNT = 0;							// clear the timer
 80029c2:	4c10      	ldr	r4, [pc, #64]	; (8002a04 <configureTimerForRuntimestats+0x4c>)

void configureTimerForRuntimestats(void)
{
	RCC_APB1ENR_TIM6EN_bb = 1;				// enable timer

	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	f042 0210 	orr.w	r2, r2, #16
 80029ca:	609a      	str	r2, [r3, #8]

	TIM6->CNT = 0;							// clear the timer
 80029cc:	2300      	movs	r3, #0
 80029ce:	6263      	str	r3, [r4, #36]	; 0x24
	TIM6->PSC = (rccGetCoreFrequency() / 10000) - 1;	// 100us resolution
 80029d0:	f000 f8a4 	bl	8002b1c <rccGetCoreFrequency>
 80029d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80029d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80029dc:	3801      	subs	r0, #1
	TIM6->ARR = 0xFFFF;						// max autoreload
 80029de:	f64f 73ff 	movw	r3, #65535	; 0xffff
	RCC_APB1ENR_TIM6EN_bb = 1;				// enable timer

	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;

	TIM6->CNT = 0;							// clear the timer
	TIM6->PSC = (rccGetCoreFrequency() / 10000) - 1;	// 100us resolution
 80029e2:	b280      	uxth	r0, r0
 80029e4:	8520      	strh	r0, [r4, #40]	; 0x28
	TIM6->ARR = 0xFFFF;						// max autoreload
 80029e6:	62e3      	str	r3, [r4, #44]	; 0x2c
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <configureTimerForRuntimestats+0x50>)
 80029ea:	22a0      	movs	r2, #160	; 0xa0
	TIM6->DIER = TIM_DIER_UIE;				// enable update interrupt
 80029ec:	81a5      	strh	r5, [r4, #12]
	TIM6->CR1 = TIM_CR1_CEN;				// enable ARR buffering, enable timer
 80029ee:	8025      	strh	r5, [r4, #0]
 80029f0:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80029f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f8:	605a      	str	r2, [r3, #4]

	NVIC_SetPriority(TIM6_IRQn, TIM6_IRQ_PRIORITY);
	NVIC_EnableIRQ(TIM6_IRQn);
}
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	42470490 	.word	0x42470490
 8002a00:	e0042000 	.word	0xe0042000
 8002a04:	40001000 	.word	0x40001000
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <TIM6_IRQHandler>:
 */

extern "C" void TIM6_IRQHandler(void) __attribute__ ((interrupt));
void TIM6_IRQHandler(void)
{
	tim6OverflowCount++;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <TIM6_IRQHandler+0x24>)
 * TIM6_IRQHandler
 */

extern "C" void TIM6_IRQHandler(void) __attribute__ ((interrupt));
void TIM6_IRQHandler(void)
{
 8002a0e:	4668      	mov	r0, sp
	tim6OverflowCount++;
 8002a10:	881a      	ldrh	r2, [r3, #0]
 * TIM6_IRQHandler
 */

extern "C" void TIM6_IRQHandler(void) __attribute__ ((interrupt));
void TIM6_IRQHandler(void)
{
 8002a12:	f020 0107 	bic.w	r1, r0, #7
	tim6OverflowCount++;
 8002a16:	3201      	adds	r2, #1
 8002a18:	b292      	uxth	r2, r2
 * TIM6_IRQHandler
 */

extern "C" void TIM6_IRQHandler(void) __attribute__ ((interrupt));
void TIM6_IRQHandler(void)
{
 8002a1a:	468d      	mov	sp, r1
 8002a1c:	b501      	push	{r0, lr}
	tim6OverflowCount++;
 8002a1e:	801a      	strh	r2, [r3, #0]

	TIM6->SR = 0;							// clear UIF which is only bit in this register
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <TIM6_IRQHandler+0x28>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	821a      	strh	r2, [r3, #16]
}
 8002a26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8002a2a:	4685      	mov	sp, r0
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000c24 	.word	0x20000c24
 8002a34:	40001000 	.word	0x40001000

08002a38 <i2cInitialize()>:
 *
 * Configures I/Os of I2C, enable clock for I2C module and configures it.
 */

void i2cInitialize(void)
{
 8002a38:	b538      	push	{r3, r4, r5, lr}
	gpioConfigurePin(I2Cx_SCL_GPIO, I2Cx_SCL_PIN, I2Cx_SCL_CONFIGURATION);
 8002a3a:	4c13      	ldr	r4, [pc, #76]	; (8002a88 <i2cInitialize()+0x50>)
 8002a3c:	4d13      	ldr	r5, [pc, #76]	; (8002a8c <i2cInitialize()+0x54>)
 8002a3e:	4622      	mov	r2, r4
 8002a40:	4628      	mov	r0, r5
 8002a42:	2108      	movs	r1, #8
 8002a44:	f7ff ff78 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(I2Cx_SDA_GPIO, I2Cx_SDA_PIN, I2Cx_SDA_CONFIGURATION);
 8002a48:	4622      	mov	r2, r4
 8002a4a:	2109      	movs	r1, #9
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	f7ff ff73 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>

	RCC_APBxENR_I2CxEN_bb = 1;				// enable clock for I2C module
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <i2cInitialize()+0x58>)
 8002a54:	2401      	movs	r4, #1
 8002a56:	601c      	str	r4, [r3, #0]

	uint32_t frequency = rccGetCoreFrequency();
 8002a58:	f000 f860 	bl	8002b1c <rccGetCoreFrequency>

	I2Cx_CR1_SWRST_bb(I2Cx) = 1;			// force software reset of I2C peripheral
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <i2cInitialize()+0x5c>)
	I2Cx_CR1_SWRST_bb(I2Cx) = 0;
 8002a5e:	2200      	movs	r2, #0

	RCC_APBxENR_I2CxEN_bb = 1;				// enable clock for I2C module

	uint32_t frequency = rccGetCoreFrequency();

	I2Cx_CR1_SWRST_bb(I2Cx) = 1;			// force software reset of I2C peripheral
 8002a60:	601c      	str	r4, [r3, #0]
	I2Cx_CR1_SWRST_bb(I2Cx) = 0;
 8002a62:	601a      	str	r2, [r3, #0]

	I2Cx->TRISE = frequency / 1000000 + 1;	// limit slope (standard mode)
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <i2cInitialize()+0x60>)
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <i2cInitialize()+0x64>)
 8002a68:	fbb0 f2f2 	udiv	r2, r0, r2
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	1911      	adds	r1, r2, r4
 8002a70:	b289      	uxth	r1, r1
 8002a72:	8419      	strh	r1, [r3, #32]
	I2Cx->CCR = frequency / I2C_FREQUENCY / 2;	// setup clock
 8002a74:	490a      	ldr	r1, [pc, #40]	; (8002aa0 <i2cInitialize()+0x68>)
 8002a76:	fbb0 f0f1 	udiv	r0, r0, r1
 8002a7a:	b280      	uxth	r0, r0
 8002a7c:	8398      	strh	r0, [r3, #28]
	I2Cx->CR2 = (frequency / 1000000) << I2C_CR2_FREQ_bit;	// config I2C module's frequency
 8002a7e:	809a      	strh	r2, [r3, #4]
	I2Cx_CR1_PE_bb(I2Cx) = 1;				// enable peripheral
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <i2cInitialize()+0x6c>)
 8002a82:	601c      	str	r4, [r3, #0]
}
 8002a84:	bd38      	pop	{r3, r4, r5, pc}
 8002a86:	bf00      	nop
 8002a88:	00040312 	.word	0x00040312
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	424704d4 	.word	0x424704d4
 8002a94:	420a803c 	.word	0x420a803c
 8002a98:	000f4240 	.word	0x000f4240
 8002a9c:	40005400 	.word	0x40005400
 8002aa0:	00030d40 	.word	0x00030d40
 8002aa4:	420a8000 	.word	0x420a8000

08002aa8 <i2cWrite(unsigned char, unsigned char const*, unsigned int)>:
 * \param [in] length is the length of the data block
 */

void i2cWrite(uint8_t address, const uint8_t *data, size_t length)
{
	I2Cx_CR1_START_bb(I2Cx) = 1;			// request a start
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x5c>)
 * \param [in] data points to data block that will be sent
 * \param [in] length is the length of the data block
 */

void i2cWrite(uint8_t address, const uint8_t *data, size_t length)
{
 8002aaa:	b530      	push	{r4, r5, lr}
	I2Cx_CR1_START_bb(I2Cx) = 1;			// request a start
 8002aac:	2401      	movs	r4, #1
 8002aae:	601c      	str	r4, [r3, #0]
	while (I2Cx_SR1_SB_bb(I2Cx) == 0);		// wait for start to finish
 8002ab0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002ab4:	681c      	ldr	r4, [r3, #0]
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	d0fc      	beq.n	8002ab4 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0xc>
	I2Cx->SR1;								// read of SR1 clears the flag
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x60>)
	address = address << 1;
 8002abc:	0040      	lsls	r0, r0, #1
	I2Cx->DR = (address & ~1);				// transfer address (LSB cleared - write)
 8002abe:	f000 00fe 	and.w	r0, r0, #254	; 0xfe

void i2cWrite(uint8_t address, const uint8_t *data, size_t length)
{
	I2Cx_CR1_START_bb(I2Cx) = 1;			// request a start
	while (I2Cx_SR1_SB_bb(I2Cx) == 0);		// wait for start to finish
	I2Cx->SR1;								// read of SR1 clears the flag
 8002ac2:	8a9c      	ldrh	r4, [r3, #20]
	address = address << 1;
	I2Cx->DR = (address & ~1);				// transfer address (LSB cleared - write)
 8002ac4:	8218      	strh	r0, [r3, #16]
	while (I2Cx_SR1_ADDR_bb(I2Cx) == 0);	// wait for address transfer
 8002ac6:	4811      	ldr	r0, [pc, #68]	; (8002b0c <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x64>)
 8002ac8:	6804      	ldr	r4, [r0, #0]
 8002aca:	2c00      	cmp	r4, #0
 8002acc:	d0fc      	beq.n	8002ac8 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x20>
	I2Cx->SR1;								// clear the flag
 8002ace:	8a98      	ldrh	r0, [r3, #20]
	I2Cx->SR2;

	while (length--)
	{
		while (I2Cx_SR1_TxE_bb(I2Cx) == 0);	// wait for DR empty
 8002ad0:	4c0f      	ldr	r4, [pc, #60]	; (8002b10 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x68>)
	I2Cx->SR1;								// read of SR1 clears the flag
	address = address << 1;
	I2Cx->DR = (address & ~1);				// transfer address (LSB cleared - write)
	while (I2Cx_SR1_ADDR_bb(I2Cx) == 0);	// wait for address transfer
	I2Cx->SR1;								// clear the flag
	I2Cx->SR2;
 8002ad2:	8b1b      	ldrh	r3, [r3, #24]

	while (length--)
	{
		while (I2Cx_SR1_TxE_bb(I2Cx) == 0);	// wait for DR empty
		I2Cx->DR = *data++;
 8002ad4:	480c      	ldr	r0, [pc, #48]	; (8002b08 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x60>)
	I2Cx->DR = (address & ~1);				// transfer address (LSB cleared - write)
	while (I2Cx_SR1_ADDR_bb(I2Cx) == 0);	// wait for address transfer
	I2Cx->SR1;								// clear the flag
	I2Cx->SR2;

	while (length--)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e005      	b.n	8002ae6 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x3e>
	{
		while (I2Cx_SR1_TxE_bb(I2Cx) == 0);	// wait for DR empty
 8002ada:	6825      	ldr	r5, [r4, #0]
 8002adc:	2d00      	cmp	r5, #0
 8002ade:	d0fc      	beq.n	8002ada <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x32>
		I2Cx->DR = *data++;
 8002ae0:	5ccd      	ldrb	r5, [r1, r3]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	8205      	strh	r5, [r0, #16]
	I2Cx->DR = (address & ~1);				// transfer address (LSB cleared - write)
	while (I2Cx_SR1_ADDR_bb(I2Cx) == 0);	// wait for address transfer
	I2Cx->SR1;								// clear the flag
	I2Cx->SR2;

	while (length--)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d1f7      	bne.n	8002ada <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x32>
	{
		while (I2Cx_SR1_TxE_bb(I2Cx) == 0);	// wait for DR empty
		I2Cx->DR = *data++;
	}

	while (I2Cx_SR1_TxE_bb(I2Cx) == 0 || I2Cx_SR1_BTF_bb(I2Cx) == 1);	// wait for bus not-busy
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x68>)
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x6c>)
 8002aee:	6811      	ldr	r1, [r2, #0]
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d0fc      	beq.n	8002aee <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x46>
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	2901      	cmp	r1, #1
 8002af8:	d0f9      	beq.n	8002aee <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x46>
	I2Cx_CR1_STOP_bb(I2Cx) = 1;				// request a stop
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <i2cWrite(unsigned char, unsigned char const*, unsigned int)+0x70>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
}
 8002b00:	bd30      	pop	{r4, r5, pc}
 8002b02:	bf00      	nop
 8002b04:	420a8020 	.word	0x420a8020
 8002b08:	40005400 	.word	0x40005400
 8002b0c:	420a8284 	.word	0x420a8284
 8002b10:	420a829c 	.word	0x420a829c
 8002b14:	420a8288 	.word	0x420a8288
 8002b18:	420a8024 	.word	0x420a8024

08002b1c <rccGetCoreFrequency>:
 * \return current core frequency in Hz
 */

uint32_t rccGetCoreFrequency(void)
{
	return _coreFrequency;
 8002b1c:	4b01      	ldr	r3, [pc, #4]	; (8002b24 <rccGetCoreFrequency+0x8>)
 8002b1e:	6818      	ldr	r0, [r3, #0]
}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000014 	.word	0x20000014

08002b28 <rccStartPll(rccPllInput, unsigned long, unsigned long)>:
 *
 * \return real frequency that was set
 */

uint32_t rccStartPll(enum rccPllInput pll_input, uint32_t input_frequency, uint32_t output_frequency)
{
 8002b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	#error "Invalid value of DEVICE_VCORE_mV!"
#endif

	static const uint8_t muls[] = {3, 4, 6, 8, 12, 16, 24, 32, 48};	// allowed values of PLL multiplier
	uint32_t mul_i;
	uint32_t best_frequency = 0, best_mul_i = 0, best_div = 0;
 8002b2c:	2400      	movs	r4, #0

	for (mul_i = 0; mul_i < sizeof (muls) / sizeof (muls[0]); mul_i++)	// loop through all multipliers
	{
		uint32_t pllvco = input_frequency * muls[mul_i];
 8002b2e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002be8 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xc0>

		if (pllvco > pllvco_max)			// internal PLL frequency out of valid range?
 8002b32:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8002bec <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xc4>
	#error "Invalid value of DEVICE_VCORE_mV!"
#endif

	static const uint8_t muls[] = {3, 4, 6, 8, 12, 16, 24, 32, 48};	// allowed values of PLL multiplier
	uint32_t mul_i;
	uint32_t best_frequency = 0, best_mul_i = 0, best_div = 0;
 8002b36:	46a4      	mov	ip, r4
 8002b38:	4623      	mov	r3, r4

	for (mul_i = 0; mul_i < sizeof (muls) / sizeof (muls[0]); mul_i++)	// loop through all multipliers
 8002b3a:	4625      	mov	r5, r4
	{
		uint32_t pllvco = input_frequency * muls[mul_i];
 8002b3c:	f815 800a 	ldrb.w	r8, [r5, sl]
 8002b40:	fb01 f808 	mul.w	r8, r1, r8

		if (pllvco > pllvco_max)			// internal PLL frequency out of valid range?
 8002b44:	45c8      	cmp	r8, r9
 8002b46:	d810      	bhi.n	8002b6a <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x42>
 8002b48:	2602      	movs	r6, #2

		uint32_t div;

		for (div = 2; div <= 4; div++)		// loop through all dividers
		{
			uint32_t frequency = pllvco / div;
 8002b4a:	fbb8 f7f6 	udiv	r7, r8, r6

			if (frequency > output_frequency)	// resulting frequency too high?
 8002b4e:	4297      	cmp	r7, r2
 8002b50:	d806      	bhi.n	8002b60 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x38>
				continue;

			if (frequency > best_frequency)	// is this configuration better than previously found?
 8002b52:	429f      	cmp	r7, r3
 8002b54:	d904      	bls.n	8002b60 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x38>
			{
				best_frequency = frequency;	// yes - store values
				best_mul_i = mul_i;
				best_div = div;

				if (best_frequency == output_frequency)	// is this a perfect match?
 8002b56:	4297      	cmp	r7, r2
 8002b58:	4634      	mov	r4, r6
 8002b5a:	46ac      	mov	ip, r5
 8002b5c:	d009      	beq.n	8002b72 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x4a>
 8002b5e:	463b      	mov	r3, r7
		if (pllvco > pllvco_max)			// internal PLL frequency out of valid range?
			continue;

		uint32_t div;

		for (div = 2; div <= 4; div++)		// loop through all dividers
 8002b60:	3601      	adds	r6, #1
 8002b62:	2e05      	cmp	r6, #5
 8002b64:	d1f1      	bne.n	8002b4a <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x22>
				if (best_frequency == output_frequency)	// is this a perfect match?
					break;
			}
		}

		if (best_frequency == output_frequency)	// is this a perfect match?
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x4c>

	static const uint8_t muls[] = {3, 4, 6, 8, 12, 16, 24, 32, 48};	// allowed values of PLL multiplier
	uint32_t mul_i;
	uint32_t best_frequency = 0, best_mul_i = 0, best_div = 0;

	for (mul_i = 0; mul_i < sizeof (muls) / sizeof (muls[0]); mul_i++)	// loop through all multipliers
 8002b6a:	3501      	adds	r5, #1
 8002b6c:	2d09      	cmp	r5, #9
 8002b6e:	d1e5      	bne.n	8002b3c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x14>
 8002b70:	e000      	b.n	8002b74 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x4c>

		uint32_t div;

		for (div = 2; div <= 4; div++)		// loop through all dividers
		{
			uint32_t frequency = pllvco / div;
 8002b72:	4613      	mov	r3, r2
	if (frequency > 16000000)
		wait_states = 1;
	else
		wait_states = 0;

    FLASH->ACR |= FLASH_ACR_ACC64;
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xac>)
    FLASH->ACR = (FLASH->ACR & (~FLASH_ACR_LATENCY)) | FLASH_ACR_PRFTEN | wait_states;
 8002b76:	4d18      	ldr	r5, [pc, #96]	; (8002bd8 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xb0>)
	if (frequency > 16000000)
		wait_states = 1;
	else
		wait_states = 0;

    FLASH->ACR |= FLASH_ACR_ACC64;
 8002b78:	6811      	ldr	r1, [r2, #0]
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8002b7a:	0400      	lsls	r0, r0, #16
	if (frequency > 16000000)
		wait_states = 1;
	else
		wait_states = 0;

    FLASH->ACR |= FLASH_ACR_ACC64;
 8002b7c:	f041 0104 	orr.w	r1, r1, #4
 8002b80:	6011      	str	r1, [r2, #0]
    FLASH->ACR = (FLASH->ACR & (~FLASH_ACR_LATENCY)) | FLASH_ACR_PRFTEN | wait_states;
 8002b82:	6811      	ldr	r1, [r2, #0]
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8002b84:	ea40 4c8c 	orr.w	ip, r0, ip, lsl #18
		wait_states = 1;
	else
		wait_states = 0;

    FLASH->ACR |= FLASH_ACR_ACC64;
    FLASH->ACR = (FLASH->ACR & (~FLASH_ACR_LATENCY)) | FLASH_ACR_PRFTEN | wait_states;
 8002b88:	f021 0103 	bic.w	r1, r1, #3
 8002b8c:	f041 0102 	orr.w	r1, r1, #2
 8002b90:	42ab      	cmp	r3, r5
 8002b92:	bf88      	it	hi
 8002b94:	f041 0101 	orrhi.w	r1, r1, #1
 8002b98:	6011      	str	r1, [r2, #0]
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8002b9a:	3c01      	subs	r4, #1

	RCC_CR_PLLON_bb = 1;					// enable PLL and wait for stabilization
 8002b9c:	490f      	ldr	r1, [pc, #60]	; (8002bdc <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xb4>)
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8002b9e:	ea4c 5484 	orr.w	r4, ip, r4, lsl #22
 8002ba2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400

	RCC_CR_PLLON_bb = 1;					// enable PLL and wait for stabilization
 8002ba6:	2001      	movs	r0, #1
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8002ba8:	6094      	str	r4, [r2, #8]

	RCC_CR_PLLON_bb = 1;					// enable PLL and wait for stabilization
 8002baa:	6008      	str	r0, [r1, #0]
	while (RCC_CR_PLLRDY_bb == 0);
 8002bac:	3104      	adds	r1, #4
 8002bae:	6808      	ldr	r0, [r1, #0]
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d0fc      	beq.n	8002bae <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x86>

	RCC->CFGR |= RCC_CFGR_SW_PLL;			// change SYSCLK to PLL
 8002bb4:	6891      	ldr	r1, [r2, #8]
 8002bb6:	f041 0103 	orr.w	r1, r1, #3
 8002bba:	6091      	str	r1, [r2, #8]
	while (((RCC->CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// wait for switch
 8002bbc:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xb8>)
 8002bbe:	6891      	ldr	r1, [r2, #8]
 8002bc0:	f001 010c 	and.w	r1, r1, #12
 8002bc4:	290c      	cmp	r1, #12
 8002bc6:	d1fa      	bne.n	8002bbe <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x96>

	_coreFrequency = best_frequency;
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xbc>)

	return best_frequency;
}
 8002bca:	4618      	mov	r0, r3
	while (RCC_CR_PLLRDY_bb == 0);

	RCC->CFGR |= RCC_CFGR_SW_PLL;			// change SYSCLK to PLL
	while (((RCC->CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// wait for switch

	_coreFrequency = best_frequency;
 8002bcc:	6013      	str	r3, [r2, #0]

	return best_frequency;
}
 8002bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	42470060 	.word	0x42470060
 8002be0:	40023800 	.word	0x40023800
 8002be4:	20000014 	.word	0x20000014
 8002be8:	08003fe4 	.word	0x08003fe4
 8002bec:	05b8d800 	.word	0x05b8d800

08002bf0 <spiInitialize()>:
 *
 * Initializes SPI. SPI clock is set to max value, it should be changed later with spiSetBaudRate().
 */

void spiInitialize(void)
{
 8002bf0:	b538      	push	{r3, r4, r5, lr}
	gpioConfigurePin(SPIx_MISO_GPIO, SPIx_MISO_PIN, SPIx_MISO_CONFIGURATION);
 8002bf2:	4d0c      	ldr	r5, [pc, #48]	; (8002c24 <spiInitialize()+0x34>)
 8002bf4:	4c0c      	ldr	r4, [pc, #48]	; (8002c28 <spiInitialize()+0x38>)
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	210b      	movs	r1, #11
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	f7ff fe9c 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(SPIx_MOSI_GPIO, SPIx_MOSI_PIN, SPIx_MOSI_CONFIGURATION);
 8002c00:	4628      	mov	r0, r5
 8002c02:	210c      	movs	r1, #12
 8002c04:	4622      	mov	r2, r4
 8002c06:	f7ff fe97 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(SPIx_SCK_GPIO, SPIx_SCK_PIN, SPIx_SCK_CONFIGURATION);
 8002c0a:	4622      	mov	r2, r4
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	2105      	movs	r1, #5
 8002c10:	f7ff fe92 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>

	RCC_APBxENR_SPIxEN_bb = 1;
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <spiInitialize()+0x3c>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

	SPIx->CR1 = SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE | SPI_CR1_MSTR;	// software slave management, enable SPI, master mode
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <spiInitialize()+0x40>)
 8002c1c:	f44f 7251 	mov.w	r2, #836	; 0x344
 8002c20:	801a      	strh	r2, [r3, #0]
}
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
 8002c24:	40020000 	.word	0x40020000
 8002c28:	00051302 	.word	0x00051302
 8002c2c:	42470430 	.word	0x42470430
 8002c30:	40013000 	.word	0x40013000

08002c34 <spiSetBaudRate(unsigned long)>:
 *
 * \return real achieved baudrate
 */

uint32_t spiSetBaudRate(uint32_t baud_rate)
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4604      	mov	r4, r0
	uint32_t real_baud_rate = rccGetCoreFrequency() / 2;	// max baud rate is f_PCLK / 2
 8002c38:	f7ff ff70 	bl	8002b1c <rccGetCoreFrequency>
	uint32_t br = 0;
 8002c3c:	2300      	movs	r3, #0
 * \return real achieved baudrate
 */

uint32_t spiSetBaudRate(uint32_t baud_rate)
{
	uint32_t real_baud_rate = rccGetCoreFrequency() / 2;	// max baud rate is f_PCLK / 2
 8002c3e:	0840      	lsrs	r0, r0, #1
	uint32_t br = 0;

	while (real_baud_rate > baud_rate && br < 7)	// max br value is 7, so enter the loop only if br is lower
 8002c40:	42a0      	cmp	r0, r4
 8002c42:	d904      	bls.n	8002c4e <spiSetBaudRate(unsigned long)+0x1a>
 8002c44:	2b07      	cmp	r3, #7
 8002c46:	d002      	beq.n	8002c4e <spiSetBaudRate(unsigned long)+0x1a>
	{
		real_baud_rate /= 2;
 8002c48:	0840      	lsrs	r0, r0, #1
		br++;
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	e7f8      	b.n	8002c40 <spiSetBaudRate(unsigned long)+0xc>
	}

	SPIx->CR1 = (SPIx->CR1 & ~SPI_CR1_BR) | (br << SPI_CR1_BR_bit);
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <spiSetBaudRate(unsigned long)+0x30>)
 8002c50:	8811      	ldrh	r1, [r2, #0]
 8002c52:	b289      	uxth	r1, r1
 8002c54:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8002c58:	ea41 03c3 	orr.w	r3, r1, r3, lsl #3
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	8013      	strh	r3, [r2, #0]

	return real_baud_rate;
}
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	bf00      	nop
 8002c64:	40013000 	.word	0x40013000

08002c68 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)>:
 *
 * \return transfer length in bytes, should be equal to parameter length
 */

size_t spiTransfer(const uint8_t *tx, uint8_t *rx, size_t length)
{
 8002c68:	4603      	mov	r3, r0

	while(length--)
	{
		if (tx != nullptr)					// should data be transfered?
			tx_byte = *tx++;				// yes - get another byte
		SPIx->DR = tx_byte;					// send data
 8002c6a:	480e      	ldr	r0, [pc, #56]	; (8002ca4 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)+0x3c>)
 *
 * \return transfer length in bytes, should be equal to parameter length
 */

size_t spiTransfer(const uint8_t *tx, uint8_t *rx, size_t length)
{
 8002c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t rx_length = 0;
	uint8_t tx_byte = 0xFF;

	while(length--)
 8002c6e:	4614      	mov	r4, r2
 */

size_t spiTransfer(const uint8_t *tx, uint8_t *rx, size_t length)
{
	size_t rx_length = 0;
	uint8_t tx_byte = 0xFF;
 8002c70:	25ff      	movs	r5, #255	; 0xff
 8002c72:	4607      	mov	r7, r0
	while(length--)
	{
		if (tx != nullptr)					// should data be transfered?
			tx_byte = *tx++;				// yes - get another byte
		SPIx->DR = tx_byte;					// send data
		while (!SPIx_SR_RXNE_bb(SPIx));		// wait for transfer end
 8002c74:	4e0c      	ldr	r6, [pc, #48]	; (8002ca8 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)+0x40>)
size_t spiTransfer(const uint8_t *tx, uint8_t *rx, size_t length)
{
	size_t rx_length = 0;
	uint8_t tx_byte = 0xFF;

	while(length--)
 8002c76:	e010      	b.n	8002c9a <spiTransfer(unsigned char const*, unsigned char*, unsigned int)+0x32>
	{
		if (tx != nullptr)					// should data be transfered?
 8002c78:	b10b      	cbz	r3, 8002c7e <spiTransfer(unsigned char const*, unsigned char*, unsigned int)+0x16>
			tx_byte = *tx++;				// yes - get another byte
 8002c7a:	f813 5b01 	ldrb.w	r5, [r3], #1
		SPIx->DR = tx_byte;					// send data
 8002c7e:	8185      	strh	r5, [r0, #12]
		while (!SPIx_SR_RXNE_bb(SPIx));		// wait for transfer end
 8002c80:	f8d6 c000 	ldr.w	ip, [r6]
 8002c84:	f1bc 0f00 	cmp.w	ip, #0
 8002c88:	d0fa      	beq.n	8002c80 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)+0x18>
		uint8_t rx_byte = SPIx->DR;			// receive data
 8002c8a:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8002c8e:	fa1f fc8c 	uxth.w	ip, ip
		if (rx != nullptr)					// should data be received?
 8002c92:	b109      	cbz	r1, 8002c98 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)+0x30>
	{
		if (tx != nullptr)					// should data be transfered?
			tx_byte = *tx++;				// yes - get another byte
		SPIx->DR = tx_byte;					// send data
		while (!SPIx_SR_RXNE_bb(SPIx));		// wait for transfer end
		uint8_t rx_byte = SPIx->DR;			// receive data
 8002c94:	f801 cb01 	strb.w	ip, [r1], #1
		if (rx != nullptr)					// should data be received?
			*rx++ = rx_byte;				// yes - store received byte
 8002c98:	3c01      	subs	r4, #1
size_t spiTransfer(const uint8_t *tx, uint8_t *rx, size_t length)
{
	size_t rx_length = 0;
	uint8_t tx_byte = 0xFF;

	while(length--)
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d1ec      	bne.n	8002c78 <spiTransfer(unsigned char const*, unsigned char*, unsigned int)+0x10>
			*rx++ = rx_byte;				// yes - store received byte
		rx_length++;						// increment counter
	}

	return rx_length;
}
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40013000 	.word	0x40013000
 8002ca8:	42260100 	.word	0x42260100

08002cac <_txTask(void*)>:
 *
 * USART TX task - handles output.
 */

static void _txTask(void *parameters)
{
 8002cac:	b573      	push	{r0, r1, r4, r5, r6, lr}

	while (1)
	{
		struct _TxMessage message;

		xQueueReceive(_txQueue, &message, portMAX_DELAY);	// get data to send
 8002cae:	4e11      	ldr	r6, [pc, #68]	; (8002cf4 <_txTask(void*)+0x48>)

		xSemaphoreTake(_dmaTxSemaphore, portMAX_DELAY);	// wait for DMA to be free
 8002cb0:	4d11      	ldr	r5, [pc, #68]	; (8002cf8 <_txTask(void*)+0x4c>)
 * USART TX task - handles output.
 */

static void _txTask(void *parameters)
{
	char *previous_string = NULL;
 8002cb2:	2400      	movs	r4, #0

	while (1)
	{
		struct _TxMessage message;

		xQueueReceive(_txQueue, &message, portMAX_DELAY);	// get data to send
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4669      	mov	r1, sp
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	6830      	ldr	r0, [r6, #0]
 8002cbe:	f7fd fdd2 	bl	8000866 <xQueueGenericReceive>

		xSemaphoreTake(_dmaTxSemaphore, portMAX_DELAY);	// wait for DMA to be free
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	6828      	ldr	r0, [r5, #0]
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	f7fd fdcb 	bl	8000866 <xQueueGenericReceive>

		if (previous_string >= __ram_start)	// was the previously used string in RAM?
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <_txTask(void*)+0x50>)
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	d302      	bcc.n	8002cdc <_txTask(void*)+0x30>
			vPortFree(previous_string);		// yes - free the temporary buffer
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f7fe fbbc 	bl	8001454 <vPortFree>

		USARTx_DMAx_TX_CH->CCR = 0;				// disable channel
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <_txTask(void*)+0x54>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
		USARTx_DMAx_TX_CH->CMAR = (uint32_t)message.string;	// source
 8002ce2:	9c01      	ldr	r4, [sp, #4]
		USARTx_DMAx_TX_CH->CPAR = (uint32_t)&USARTx->DR;	// destination
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <_txTask(void*)+0x58>)

		if (previous_string >= __ram_start)	// was the previously used string in RAM?
			vPortFree(previous_string);		// yes - free the temporary buffer

		USARTx_DMAx_TX_CH->CCR = 0;				// disable channel
		USARTx_DMAx_TX_CH->CMAR = (uint32_t)message.string;	// source
 8002ce6:	60dc      	str	r4, [r3, #12]
		USARTx_DMAx_TX_CH->CPAR = (uint32_t)&USARTx->DR;	// destination
 8002ce8:	609a      	str	r2, [r3, #8]
		USARTx_DMAx_TX_CH->CNDTR = message.length;	// length
 8002cea:	9a00      	ldr	r2, [sp, #0]
 8002cec:	605a      	str	r2, [r3, #4]
		// low priority, 8-bit source and destination, memory increment mode, memory to peripheral, transfer complete
		// interrupt enable, enable channel
		USARTx_DMAx_TX_CH->CCR = DMA_CCR_PL_LOW | DMA_CCR_MSIZE_8 | DMA_CCR_PSIZE_8 | DMA_CCR_MINC | DMA_CCR_DIR |
				DMA_CCR_TCIE | DMA_CCR_EN;
 8002cee:	2293      	movs	r2, #147	; 0x93
 8002cf0:	601a      	str	r2, [r3, #0]
{
	char *previous_string = NULL;

	(void)parameters;						// suppress warning

	while (1)
 8002cf2:	e7df      	b.n	8002cb4 <_txTask(void*)+0x8>
 8002cf4:	20000e44 	.word	0x20000e44
 8002cf8:	20000ec8 	.word	0x20000ec8
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	40026044 	.word	0x40026044
 8002d04:	40013804 	.word	0x40013804

08002d08 <usartInitialize()>:
 * tasks were successfully created and added to a ready list, otherwise an error
 * code defined in the file error.h
 */

enum Error usartInitialize(void)
{
 8002d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	gpioConfigurePin(USARTx_TX_GPIO, USARTx_TX_PIN, USARTx_TX_CONFIGURATION);
 8002d0a:	4834      	ldr	r0, [pc, #208]	; (8002ddc <usartInitialize()+0xd4>)
 8002d0c:	2109      	movs	r1, #9
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <usartInitialize()+0xd8>)
 8002d10:	f7ff fe12 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(USARTx_RX_GPIO, USARTx_RX_PIN, USARTx_RX_CONFIGURATION);
 8002d14:	210a      	movs	r1, #10
 8002d16:	4a32      	ldr	r2, [pc, #200]	; (8002de0 <usartInitialize()+0xd8>)
 8002d18:	4830      	ldr	r0, [pc, #192]	; (8002ddc <usartInitialize()+0xd4>)
 8002d1a:	f7ff fe0d 	bl	8002938 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>

	RCC_APBxENR_USARTxEN_bb = 1;			// enable USART in RCC
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <usartInitialize()+0xdc>)
 8002d20:	2401      	movs	r4, #1
 8002d22:	601c      	str	r4, [r3, #0]

	USARTx->BRR = (rccGetCoreFrequency() + USARTx_BAUDRATE / 2) / USARTx_BAUDRATE;	// calculate baudrate (with rounding)
 8002d24:	f7ff fefa 	bl	8002b1c <rccGetCoreFrequency>
 8002d28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d2c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d30:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <usartInitialize()+0xe0>)
 8002d36:	b280      	uxth	r0, r0
	// enable peripheral, transmitter and receiver, enable RXNE interrupt
	USARTx->CR1 = USART_CR1_UE | USART_CR1_RXNEIE | USART_CR1_TE | USART_CR1_RE;
 8002d38:	f242 022c 	movw	r2, #8236	; 0x202c
	gpioConfigurePin(USARTx_TX_GPIO, USARTx_TX_PIN, USARTx_TX_CONFIGURATION);
	gpioConfigurePin(USARTx_RX_GPIO, USARTx_RX_PIN, USARTx_RX_CONFIGURATION);

	RCC_APBxENR_USARTxEN_bb = 1;			// enable USART in RCC

	USARTx->BRR = (rccGetCoreFrequency() + USARTx_BAUDRATE / 2) / USARTx_BAUDRATE;	// calculate baudrate (with rounding)
 8002d3c:	8118      	strh	r0, [r3, #8]
	// enable peripheral, transmitter and receiver, enable RXNE interrupt
	USARTx->CR1 = USART_CR1_UE | USART_CR1_RXNEIE | USART_CR1_TE | USART_CR1_RE;
 8002d3e:	819a      	strh	r2, [r3, #12]
	USARTx->CR3 = USART_CR3_DMAT;
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	829a      	strh	r2, [r3, #20]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <usartInitialize()+0xe4>)
 8002d46:	22a0      	movs	r2, #160	; 0xa0

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002d48:	2120      	movs	r1, #32
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002d4a:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002d4e:	6059      	str	r1, [r3, #4]

	NVIC_SetPriority(USARTx_IRQn, USARTx_IRQ_PRIORITY);	// set USART priority
	NVIC_EnableIRQ(USARTx_IRQn);				// enable USART IRQ

	RCC_AHBENR_DMAxEN_bb = 1;				// enable DMA
 8002d50:	4927      	ldr	r1, [pc, #156]	; (8002df0 <usartInitialize()+0xe8>)

	NVIC_SetPriority(USARTx_DMAx_TX_CH_IRQn, USARTx_DMAx_TX_CH_IRQ_PRIORITY);	// set DMA IRQ priority
	NVIC_EnableIRQ(USARTx_DMAx_TX_CH_IRQn);	// enable IRQ

	vSemaphoreCreateBinary(_dmaTxSemaphore);
 8002d52:	4620      	mov	r0, r4
	USARTx->CR3 = USART_CR3_DMAT;

	NVIC_SetPriority(USARTx_IRQn, USARTx_IRQ_PRIORITY);	// set USART priority
	NVIC_EnableIRQ(USARTx_IRQn);				// enable USART IRQ

	RCC_AHBENR_DMAxEN_bb = 1;				// enable DMA
 8002d54:	600c      	str	r4, [r1, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002d56:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d5e:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USARTx_DMAx_TX_CH_IRQn, USARTx_DMAx_TX_CH_IRQ_PRIORITY);	// set DMA IRQ priority
	NVIC_EnableIRQ(USARTx_DMAx_TX_CH_IRQn);	// enable IRQ

	vSemaphoreCreateBinary(_dmaTxSemaphore);
 8002d60:	2100      	movs	r1, #0
 8002d62:	2203      	movs	r2, #3
 8002d64:	f7fd fc98 	bl	8000698 <xQueueGenericCreate>
 8002d68:	4c22      	ldr	r4, [pc, #136]	; (8002df4 <usartInitialize()+0xec>)
 8002d6a:	6020      	str	r0, [r4, #0]
 8002d6c:	b120      	cbz	r0, 8002d78 <usartInitialize()+0x70>
 8002d6e:	2100      	movs	r1, #0
 8002d70:	460a      	mov	r2, r1
 8002d72:	460b      	mov	r3, r1
 8002d74:	f7fd fcb5 	bl	80006e2 <xQueueGenericSend>

	if (_dmaTxSemaphore == NULL)			// semaphore not created?
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	b353      	cbz	r3, 8002dd2 <usartInitialize()+0xca>
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;	// return with error

	_txQueue = xQueueCreate(USARTx_TX_QUEUE_LENGTH, sizeof (struct _TxMessage));
 8002d7c:	2010      	movs	r0, #16
 8002d7e:	2108      	movs	r1, #8
 8002d80:	2200      	movs	r2, #0
 8002d82:	f7fd fc89 	bl	8000698 <xQueueGenericCreate>
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <usartInitialize()+0xf0>)
 8002d88:	6018      	str	r0, [r3, #0]

	if (_txQueue == NULL)					// queue not created?
 8002d8a:	b310      	cbz	r0, 8002dd2 <usartInitialize()+0xca>
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;	// return with error

	_rxQueue = xQueueCreate(USARTx_RX_QUEUE_LENGTH, sizeof (struct _RxMessage));
 8002d8c:	2010      	movs	r0, #16
 8002d8e:	2118      	movs	r1, #24
 8002d90:	2200      	movs	r2, #0
 8002d92:	f7fd fc81 	bl	8000698 <xQueueGenericCreate>
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <usartInitialize()+0xf4>)
 8002d98:	6018      	str	r0, [r3, #0]

	if (_rxQueue == NULL)					// queue not created?
 8002d9a:	b1d0      	cbz	r0, 8002dd2 <usartInitialize()+0xca>
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;	// return with error

	portBASE_TYPE ret = xTaskCreate(_txTask, (signed char*)"USART TX", USART_TX_STACK_SIZE, NULL,
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2401      	movs	r4, #1
 8002da0:	4817      	ldr	r0, [pc, #92]	; (8002e00 <usartInitialize()+0xf8>)
 8002da2:	4918      	ldr	r1, [pc, #96]	; (8002e04 <usartInitialize()+0xfc>)
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	9303      	str	r3, [sp, #12]
 8002dac:	9400      	str	r4, [sp, #0]
 8002dae:	f7fd fe9b 	bl	8000ae8 <xTaskGenericCreate>
 * \return ret converted to enum Error
 */

static inline enum Error errorConvert_portBASE_TYPE(portBASE_TYPE ret)
{
	return (enum Error)(ret - pdPASS + (int32_t)ERROR_FreeRTOS_pdPASS);
 8002db2:	1e43      	subs	r3, r0, #1
 8002db4:	b2db      	uxtb	r3, r3
			USART_TX_TASK_PRIORITY, NULL);

	enum Error error = errorConvert_portBASE_TYPE(ret);

	if (error != ERROR_NONE)
 8002db6:	b96b      	cbnz	r3, 8002dd4 <usartInitialize()+0xcc>
		return error;

	ret = xTaskCreate(_rxTask, (signed char*)"USART RX", USART_RX_STACK_SIZE, NULL, USART_RX_TASK_PRIORITY,
			NULL);
 8002db8:	4813      	ldr	r0, [pc, #76]	; (8002e08 <usartInitialize()+0x100>)
 8002dba:	4914      	ldr	r1, [pc, #80]	; (8002e0c <usartInitialize()+0x104>)
 8002dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	9302      	str	r3, [sp, #8]
 8002dc4:	9303      	str	r3, [sp, #12]
 8002dc6:	9400      	str	r4, [sp, #0]
 8002dc8:	f7fd fe8e 	bl	8000ae8 <xTaskGenericCreate>
 8002dcc:	1e43      	subs	r3, r0, #1
 8002dce:	b2db      	uxtb	r3, r3

	error = errorConvert_portBASE_TYPE(ret);

	return error;
 8002dd0:	e000      	b.n	8002dd4 <usartInitialize()+0xcc>
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;	// return with error

	_rxQueue = xQueueCreate(USARTx_RX_QUEUE_LENGTH, sizeof (struct _RxMessage));

	if (_rxQueue == NULL)					// queue not created?
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;	// return with error
 8002dd2:	23fe      	movs	r3, #254	; 0xfe
	ret = xTaskCreate(_rxTask, (signed char*)"USART RX", USART_RX_STACK_SIZE, NULL, USART_RX_TASK_PRIORITY,
			NULL);

	error = errorConvert_portBASE_TYPE(ret);

	return error;
 8002dd4:	b258      	sxtb	r0, r3
}
 8002dd6:	b004      	add	sp, #16
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	00071302 	.word	0x00071302
 8002de4:	42470438 	.word	0x42470438
 8002de8:	40013800 	.word	0x40013800
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	424703e0 	.word	0x424703e0
 8002df4:	20000ec8 	.word	0x20000ec8
 8002df8:	20000e44 	.word	0x20000e44
 8002dfc:	20000e28 	.word	0x20000e28
 8002e00:	08002cad 	.word	0x08002cad
 8002e04:	08003fed 	.word	0x08003fed
 8002e08:	08002ec5 	.word	0x08002ec5
 8002e0c:	08003ff6 	.word	0x08003ff6

08002e10 <usartSendCharacter>:
 * \param [in] c is the character that will be printed
 */

void usartSendCharacter(char c)
{
	while (!(USARTx_SR_TXE_bb(USARTx)));
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <usartSendCharacter+0x10>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2a00      	cmp	r2, #0
 8002e16:	d0fc      	beq.n	8002e12 <usartSendCharacter+0x2>
	USARTx->DR = c;
 8002e18:	4b02      	ldr	r3, [pc, #8]	; (8002e24 <usartSendCharacter+0x14>)
 8002e1a:	8098      	strh	r0, [r3, #4]
}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	4227001c 	.word	0x4227001c
 8002e24:	40013800 	.word	0x40013800

08002e28 <usartSendString(char const*, unsigned long)>:
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

enum Error usartSendString(const char *string, portTickType ticks_to_wait)
{
 8002e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	460c      	mov	r4, r1
	struct _TxMessage message;

	message.length = strlen(string);
 8002e2e:	f000 fd2f 	bl	8003890 <strlen>
 8002e32:	9000      	str	r0, [sp, #0]

	if (message.length == 0)
 8002e34:	b1e8      	cbz	r0, 8002e72 <usartSendString(char const*, unsigned long)+0x4a>
		return ERROR_NONE;

	if (string >= __ram_start)				// is the string in RAM?
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <usartSendString(char const*, unsigned long)+0x54>)
 8002e38:	429d      	cmp	r5, r3
 8002e3a:	d308      	bcc.n	8002e4e <usartSendString(char const*, unsigned long)+0x26>
	{
		message.string = (char*)pvPortMalloc(message.length);
 8002e3c:	f7fe fafe 	bl	800143c <pvPortMalloc>
 8002e40:	9001      	str	r0, [sp, #4]
		if (message.string == NULL)
 8002e42:	b1c0      	cbz	r0, 8002e76 <usartSendString(char const*, unsigned long)+0x4e>
			return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

		memcpy(message.string, string, message.length);
 8002e44:	4629      	mov	r1, r5
 8002e46:	9a00      	ldr	r2, [sp, #0]
 8002e48:	f000 fbe4 	bl	8003614 <memcpy>
 8002e4c:	e000      	b.n	8002e50 <usartSendString(char const*, unsigned long)+0x28>
	}
	else
		message.string = (char*)string;			// no, string in ROM - just use the address
 8002e4e:	9501      	str	r5, [sp, #4]

	portBASE_TYPE ret = xQueueSend(_txQueue, &message, ticks_to_wait);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <usartSendString(char const*, unsigned long)+0x58>)
 8002e52:	4622      	mov	r2, r4
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	4669      	mov	r1, sp
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f7fd fc42 	bl	80006e2 <xQueueGenericSend>
 8002e5e:	1e44      	subs	r4, r0, #1
 8002e60:	b2e4      	uxtb	r4, r4

	enum Error error = errorConvert_portBASE_TYPE(ret);

	if (error != ERROR_NONE)
 8002e62:	b14c      	cbz	r4, 8002e78 <usartSendString(char const*, unsigned long)+0x50>
		if (message.string >= __ram_start)				// is the string in RAM?
 8002e64:	9801      	ldr	r0, [sp, #4]
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <usartSendString(char const*, unsigned long)+0x54>)
 8002e68:	4298      	cmp	r0, r3
 8002e6a:	d305      	bcc.n	8002e78 <usartSendString(char const*, unsigned long)+0x50>
			vPortFree(message.string);
 8002e6c:	f7fe faf2 	bl	8001454 <vPortFree>
 8002e70:	e002      	b.n	8002e78 <usartSendString(char const*, unsigned long)+0x50>
	struct _TxMessage message;

	message.length = strlen(string);

	if (message.length == 0)
		return ERROR_NONE;
 8002e72:	4604      	mov	r4, r0
 8002e74:	e000      	b.n	8002e78 <usartSendString(char const*, unsigned long)+0x50>

	if (string >= __ram_start)				// is the string in RAM?
	{
		message.string = (char*)pvPortMalloc(message.length);
		if (message.string == NULL)
			return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e76:	24fe      	movs	r4, #254	; 0xfe

	enum Error error = errorConvert_portBASE_TYPE(ret);

	if (error != ERROR_NONE)
		if (message.string >= __ram_start)				// is the string in RAM?
			vPortFree(message.string);
 8002e78:	b260      	sxtb	r0, r4

	return error;
}
 8002e7a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000e44 	.word	0x20000e44

08002e84 <usartPrintf(unsigned long, char const*, ...)>:
 *
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

enum Error usartPrintf(portTickType ticks_to_wait, const char *format, ...)
{
 8002e84:	b40e      	push	{r1, r2, r3}
 8002e86:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
 8002e88:	9e07      	ldr	r6, [sp, #28]
 8002e8a:	4605      	mov	r5, r0
	char *buffer = (char*)pvPortMalloc(strlen(format) * 2);
 8002e8c:	4630      	mov	r0, r6
 8002e8e:	f000 fcff 	bl	8003890 <strlen>
 8002e92:	0040      	lsls	r0, r0, #1
 8002e94:	f7fe fad2 	bl	800143c <pvPortMalloc>
 8002e98:	4604      	mov	r4, r0

	if (buffer == NULL)
 8002e9a:	b168      	cbz	r0, 8002eb8 <usartPrintf(unsigned long, char const*, ...)+0x34>
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

	va_list args;

	va_start(args, format);
 8002e9c:	aa08      	add	r2, sp, #32

	vsprintf(buffer, format, args);
 8002e9e:	4631      	mov	r1, r6
	if (buffer == NULL)
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

	va_list args;

	va_start(args, format);
 8002ea0:	9201      	str	r2, [sp, #4]

	vsprintf(buffer, format, args);
 8002ea2:	f7fd faf3 	bl	800048c <vsprintf>

	enum Error error = usartSendString(buffer, ticks_to_wait);
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7ff ffbd 	bl	8002e28 <usartSendString(char const*, unsigned long)>
 8002eae:	4605      	mov	r5, r0

	vPortFree(buffer);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7fe facf 	bl	8001454 <vPortFree>

	return error;
 8002eb6:	e000      	b.n	8002eba <usartPrintf(unsigned long, char const*, ...)+0x36>
enum Error usartPrintf(portTickType ticks_to_wait, const char *format, ...)
{
	char *buffer = (char*)pvPortMalloc(strlen(format) * 2);

	if (buffer == NULL)
		return ERROR_FreeRTOS_errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eb8:	25fe      	movs	r5, #254	; 0xfe

	enum Error error = usartSendString(buffer, ticks_to_wait);

	vPortFree(buffer);

	return error;
 8002eba:	b268      	sxtb	r0, r5
}
 8002ebc:	e8bd 407e 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, lr}
 8002ec0:	b003      	add	sp, #12
 8002ec2:	4770      	bx	lr

08002ec4 <_rxTask(void*)>:
 *
 * USART RX task - handles input.
 */

static void _rxTask(void *parameters)
{
 8002ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t input_length = 0;
 8002ec8:	2400      	movs	r4, #0
 *
 * USART RX task - handles input.
 */

static void _rxTask(void *parameters)
{
 8002eca:	b086      	sub	sp, #24
			usartSendString("ERROR: input is longer than buffer length! (" __FILE__ ":" STRINGIZE(__LINE__) ")\r\n", 0);
			input_length = 0;
			continue;
		}

		memcpy(&_inputBuffer[input_length], message.string, message.length);
 8002ecc:	eb0d 0304 	add.w	r3, sp, r4

	while (1)
	{
		struct _RxMessage message;

		xQueueReceive(_rxQueue, &message, portMAX_DELAY);
 8002ed0:	4e1b      	ldr	r6, [pc, #108]	; (8002f40 <_rxTask(void*)+0x7c>)
			usartSendString("ERROR: input is longer than buffer length! (" __FILE__ ":" STRINGIZE(__LINE__) ")\r\n", 0);
			input_length = 0;
			continue;
		}

		memcpy(&_inputBuffer[input_length], message.string, message.length);
 8002ed2:	1d5d      	adds	r5, r3, #5
 8002ed4:	e000      	b.n	8002ed8 <_rxTask(void*)+0x14>
			if (error == ERROR_NONE)		// input processed successfully?
				usartSendString(_outputBuffer, 0);
			else							// input processing error
				usartPrintf(0, "ERROR: command handler execution failed with code %d! (" __FILE__ ":" STRINGIZE(__LINE__) ")\r\n", error);

			input_length = 0;				// reset sequence
 8002ed6:	463c      	mov	r4, r7

	while (1)
	{
		struct _RxMessage message;

		xQueueReceive(_rxQueue, &message, portMAX_DELAY);
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	2300      	movs	r3, #0
 8002ede:	6830      	ldr	r0, [r6, #0]
 8002ee0:	4669      	mov	r1, sp
 8002ee2:	f7fd fcc0 	bl	8000866 <xQueueGenericReceive>

		if ((_INPUT_BUFFER_SIZE - 1) < (message.length + input_length))	// does input fit into buffer?
 8002ee6:	9a00      	ldr	r2, [sp, #0]
 8002ee8:	18a7      	adds	r7, r4, r2
 8002eea:	2f7f      	cmp	r7, #127	; 0x7f
 8002eec:	d905      	bls.n	8002efa <_rxTask(void*)+0x36>
		{									// no - reset sequence
			usartSendString("ERROR: input is longer than buffer length! (" __FILE__ ":" STRINGIZE(__LINE__) ")\r\n", 0);
 8002eee:	4815      	ldr	r0, [pc, #84]	; (8002f44 <_rxTask(void*)+0x80>)
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f7ff ff99 	bl	8002e28 <usartSendString(char const*, unsigned long)>
			input_length = 0;
 8002ef6:	2700      	movs	r7, #0
			continue;
 8002ef8:	e7ed      	b.n	8002ed6 <_rxTask(void*)+0x12>
		}

		memcpy(&_inputBuffer[input_length], message.string, message.length);
 8002efa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002f50 <_rxTask(void*)+0x8c>
 8002efe:	4629      	mov	r1, r5
 8002f00:	eb08 0004 	add.w	r0, r8, r4
 8002f04:	f000 fb86 	bl	8003614 <memcpy>
		input_length += message.length;

		if (message.status == RX_STATUS_HAD_CR_LF)	// is the message complete (terminated with "\r\n" sequence)?
 8002f08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d1e2      	bne.n	8002ed6 <_rxTask(void*)+0x12>
		{									// yes - start processing
			_inputBuffer[input_length] = '\0';	// terminate input string
 8002f10:	2400      	movs	r4, #0

			enum Error error = commandProcessInput(_inputBuffer, _outputBuffer, _OUTPUT_BUFFER_SIZE);	// process input
 8002f12:	4640      	mov	r0, r8
 8002f14:	490c      	ldr	r1, [pc, #48]	; (8002f48 <_rxTask(void*)+0x84>)
 8002f16:	f44f 7200 	mov.w	r2, #512	; 0x200
		memcpy(&_inputBuffer[input_length], message.string, message.length);
		input_length += message.length;

		if (message.status == RX_STATUS_HAD_CR_LF)	// is the message complete (terminated with "\r\n" sequence)?
		{									// yes - start processing
			_inputBuffer[input_length] = '\0';	// terminate input string
 8002f1a:	f808 4007 	strb.w	r4, [r8, r7]

			enum Error error = commandProcessInput(_inputBuffer, _outputBuffer, _OUTPUT_BUFFER_SIZE);	// process input
 8002f1e:	f7ff fc7b 	bl	8002818 <commandProcessInput(char*, char*, unsigned int)>
 8002f22:	4607      	mov	r7, r0

			if (error == ERROR_NONE)		// input processed successfully?
 8002f24:	b920      	cbnz	r0, 8002f30 <_rxTask(void*)+0x6c>
				usartSendString(_outputBuffer, 0);
 8002f26:	4639      	mov	r1, r7
 8002f28:	4807      	ldr	r0, [pc, #28]	; (8002f48 <_rxTask(void*)+0x84>)
 8002f2a:	f7ff ff7d 	bl	8002e28 <usartSendString(char const*, unsigned long)>
 8002f2e:	e7d2      	b.n	8002ed6 <_rxTask(void*)+0x12>
			else							// input processing error
				usartPrintf(0, "ERROR: command handler execution failed with code %d! (" __FILE__ ":" STRINGIZE(__LINE__) ")\r\n", error);
 8002f30:	463a      	mov	r2, r7
 8002f32:	4620      	mov	r0, r4
 8002f34:	4905      	ldr	r1, [pc, #20]	; (8002f4c <_rxTask(void*)+0x88>)
 8002f36:	f7ff ffa5 	bl	8002e84 <usartPrintf(unsigned long, char const*, ...)>

			input_length = 0;				// reset sequence
 8002f3a:	4627      	mov	r7, r4
 8002f3c:	e7cb      	b.n	8002ed6 <_rxTask(void*)+0x12>
 8002f3e:	bf00      	nop
 8002f40:	20000e28 	.word	0x20000e28
 8002f44:	08003fff 	.word	0x08003fff
 8002f48:	20000c26 	.word	0x20000c26
 8002f4c:	08004048 	.word	0x08004048
 8002f50:	20000e48 	.word	0x20000e48

08002f54 <DMA1_Channel4_IRQHandler>:
 * DMA channel interrupt handler
 */

extern "C" void USARTx_DMAx_TX_CH_IRQHandler(void) __attribute__ ((interrupt));
void USARTx_DMAx_TX_CH_IRQHandler(void)
{
 8002f54:	4668      	mov	r0, sp
 8002f56:	f020 0107 	bic.w	r1, r0, #7
 8002f5a:	468d      	mov	sp, r1
 8002f5c:	b501      	push	{r0, lr}
	signed portBASE_TYPE higher_priority_task_woken;

	xSemaphoreGiveFromISR(_dmaTxSemaphore, &higher_priority_task_woken);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <DMA1_Channel4_IRQHandler+0x34>)
 * DMA channel interrupt handler
 */

extern "C" void USARTx_DMAx_TX_CH_IRQHandler(void) __attribute__ ((interrupt));
void USARTx_DMAx_TX_CH_IRQHandler(void)
{
 8002f60:	b082      	sub	sp, #8
	signed portBASE_TYPE higher_priority_task_woken;

	xSemaphoreGiveFromISR(_dmaTxSemaphore, &higher_priority_task_woken);
 8002f62:	2100      	movs	r1, #0
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	aa01      	add	r2, sp, #4
 8002f68:	460b      	mov	r3, r1
 8002f6a:	f7fd fc52 	bl	8000812 <xQueueGenericSendFromISR>

	USARTx_DMAx_TX_IFCR_CTCIFx_bb = 1;			// clear interrupt flag
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <DMA1_Channel4_IRQHandler+0x38>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

	portEND_SWITCHING_ISR(higher_priority_task_woken);
 8002f74:	9b01      	ldr	r3, [sp, #4]
 8002f76:	b10b      	cbz	r3, 8002f7c <DMA1_Channel4_IRQHandler+0x28>
 8002f78:	f7fe fa10 	bl	800139c <vPortYieldFromISR>
}
 8002f7c:	b002      	add	sp, #8
 8002f7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8002f82:	4685      	mov	sp, r0
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000ec8 	.word	0x20000ec8
 8002f8c:	424c00b4 	.word	0x424c00b4

08002f90 <USART1_IRQHandler>:
 * USART interrupt handler
 */

extern "C" void USARTx_IRQHandler(void) __attribute((interrupt));
void USARTx_IRQHandler(void)
{
 8002f90:	4668      	mov	r0, sp
 8002f92:	f020 0107 	bic.w	r1, r0, #7
 8002f96:	468d      	mov	sp, r1
 8002f98:	b571      	push	{r0, r4, r5, r6, lr}
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
	{
		char c = USARTx->DR;
		message.string[message.length++] = c;	// get char to buffer
 8002f9a:	4c1d      	ldr	r4, [pc, #116]	; (8003010 <USART1_IRQHandler+0x80>)
 * USART interrupt handler
 */

extern "C" void USARTx_IRQHandler(void) __attribute((interrupt));
void USARTx_IRQHandler(void)
{
 8002f9c:	b083      	sub	sp, #12
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9301      	str	r3, [sp, #4]
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
 8002fa2:	4e1c      	ldr	r6, [pc, #112]	; (8003014 <USART1_IRQHandler+0x84>)
 8002fa4:	4625      	mov	r5, r4
 8002fa6:	e027      	b.n	8002ff8 <USART1_IRQHandler+0x68>
	{
		char c = USARTx->DR;
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <USART1_IRQHandler+0x88>)
		message.string[message.length++] = c;	// get char to buffer
 8002faa:	6822      	ldr	r2, [r4, #0]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
	{
		char c = USARTx->DR;
 8002fac:	889b      	ldrh	r3, [r3, #4]
		message.string[message.length++] = c;	// get char to buffer
 8002fae:	18a1      	adds	r1, r4, r2
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
	{
		char c = USARTx->DR;
 8002fb0:	b2db      	uxtb	r3, r3
		message.string[message.length++] = c;	// get char to buffer
 8002fb2:	714b      	strb	r3, [r1, #5]

		// check for "\r\n" sequence in the string
		if ((message.status == RX_STATUS_HAD_CR) && (c == '\n'))
 8002fb4:	7921      	ldrb	r1, [r4, #4]
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
	{
		char c = USARTx->DR;
		message.string[message.length++] = c;	// get char to buffer
 8002fb6:	3201      	adds	r2, #1

		// check for "\r\n" sequence in the string
		if ((message.status == RX_STATUS_HAD_CR) && (c == '\n'))
 8002fb8:	2901      	cmp	r1, #1
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
	{
		char c = USARTx->DR;
		message.string[message.length++] = c;	// get char to buffer
 8002fba:	6022      	str	r2, [r4, #0]

		// check for "\r\n" sequence in the string
		if ((message.status == RX_STATUS_HAD_CR) && (c == '\n'))
 8002fbc:	d104      	bne.n	8002fc8 <USART1_IRQHandler+0x38>
 8002fbe:	2b0a      	cmp	r3, #10
 8002fc0:	d102      	bne.n	8002fc8 <USART1_IRQHandler+0x38>
			message.status = RX_STATUS_HAD_CR_LF;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	7123      	strb	r3, [r4, #4]
 8002fc6:	e005      	b.n	8002fd4 <USART1_IRQHandler+0x44>
		else if (c == '\r')
 8002fc8:	2b0d      	cmp	r3, #13
 8002fca:	d101      	bne.n	8002fd0 <USART1_IRQHandler+0x40>
			message.status = RX_STATUS_HAD_CR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <USART1_IRQHandler+0x42>
		else
			message.status = RX_STATUS_HAD_NONE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	712b      	strb	r3, [r5, #4]

		// transfer block only if out of space or "\r\n" sequence was found
		if ((message.length >= USARTx_RX_QUEUE_BUFFER_LENGTH) || (message.status == RX_STATUS_HAD_CR_LF))
 8002fd4:	2a0f      	cmp	r2, #15
 8002fd6:	d802      	bhi.n	8002fde <USART1_IRQHandler+0x4e>
 8002fd8:	792b      	ldrb	r3, [r5, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d10c      	bne.n	8002ff8 <USART1_IRQHandler+0x68>
		{
			xQueueSendFromISR(_rxQueue, &message, &higher_priority_task_woken);
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <USART1_IRQHandler+0x8c>)
 8002fe0:	aa01      	add	r2, sp, #4
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	490a      	ldr	r1, [pc, #40]	; (8003010 <USART1_IRQHandler+0x80>)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f7fd fc13 	bl	8000812 <xQueueGenericSendFromISR>

			message.length = 0;

			if (message.status == RX_STATUS_HAD_CR_LF)
 8002fec:	7922      	ldrb	r2, [r4, #4]
		// transfer block only if out of space or "\r\n" sequence was found
		if ((message.length >= USARTx_RX_QUEUE_BUFFER_LENGTH) || (message.status == RX_STATUS_HAD_CR_LF))
		{
			xQueueSendFromISR(_rxQueue, &message, &higher_priority_task_woken);

			message.length = 0;
 8002fee:	2300      	movs	r3, #0

			if (message.status == RX_STATUS_HAD_CR_LF)
 8002ff0:	2a02      	cmp	r2, #2
		// transfer block only if out of space or "\r\n" sequence was found
		if ((message.length >= USARTx_RX_QUEUE_BUFFER_LENGTH) || (message.status == RX_STATUS_HAD_CR_LF))
		{
			xQueueSendFromISR(_rxQueue, &message, &higher_priority_task_woken);

			message.length = 0;
 8002ff2:	6023      	str	r3, [r4, #0]

			if (message.status == RX_STATUS_HAD_CR_LF)
				message.status = RX_STATUS_HAD_NONE;
 8002ff4:	bf08      	it	eq
 8002ff6:	7123      	strbeq	r3, [r4, #4]
void USARTx_IRQHandler(void)
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
 8002ff8:	6833      	ldr	r3, [r6, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1d4      	bne.n	8002fa8 <USART1_IRQHandler+0x18>
			if (message.status == RX_STATUS_HAD_CR_LF)
				message.status = RX_STATUS_HAD_NONE;
		}
	}

	portEND_SWITCHING_ISR(higher_priority_task_woken);
 8002ffe:	9b01      	ldr	r3, [sp, #4]
 8003000:	b10b      	cbz	r3, 8003006 <USART1_IRQHandler+0x76>
 8003002:	f7fe f9cb 	bl	800139c <vPortYieldFromISR>
}
 8003006:	b003      	add	sp, #12
 8003008:	e8bd 4071 	ldmia.w	sp!, {r0, r4, r5, r6, lr}
 800300c:	4685      	mov	sp, r0
 800300e:	4770      	bx	lr
 8003010:	20000e2c 	.word	0x20000e2c
 8003014:	42270014 	.word	0x42270014
 8003018:	40013800 	.word	0x40013800
 800301c:	20000e28 	.word	0x20000e28

08003020 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>:
 8003020:	684a      	ldr	r2, [r1, #4]
 8003022:	6001      	str	r1, [r0, #0]
 8003024:	6042      	str	r2, [r0, #4]
 8003026:	684b      	ldr	r3, [r1, #4]
 8003028:	6048      	str	r0, [r1, #4]
 800302a:	6018      	str	r0, [r3, #0]
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <__aeabi_atexit>:
 8003030:	4603      	mov	r3, r0
 8003032:	4608      	mov	r0, r1
 8003034:	4619      	mov	r1, r3
 8003036:	f000 b807 	b.w	8003048 <__cxa_atexit>
 800303a:	bf00      	nop

0800303c <atexit>:
 800303c:	4601      	mov	r1, r0
 800303e:	2000      	movs	r0, #0
 8003040:	4602      	mov	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	f000 bd0c 	b.w	8003a60 <__register_exitproc>

08003048 <__cxa_atexit>:
 8003048:	b410      	push	{r4}
 800304a:	460c      	mov	r4, r1
 800304c:	4613      	mov	r3, r2
 800304e:	4601      	mov	r1, r0
 8003050:	4622      	mov	r2, r4
 8003052:	2002      	movs	r0, #2
 8003054:	bc10      	pop	{r4}
 8003056:	f000 bd03 	b.w	8003a60 <__register_exitproc>
 800305a:	bf00      	nop

0800305c <__libc_fini_array>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4d08      	ldr	r5, [pc, #32]	; (8003080 <__libc_fini_array+0x24>)
 8003060:	4c08      	ldr	r4, [pc, #32]	; (8003084 <__libc_fini_array+0x28>)
 8003062:	1b64      	subs	r4, r4, r5
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	d006      	beq.n	8003076 <__libc_fini_array+0x1a>
 8003068:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800306c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003070:	4798      	blx	r3
 8003072:	3c01      	subs	r4, #1
 8003074:	d1fa      	bne.n	800306c <__libc_fini_array+0x10>
 8003076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307a:	f001 b82b 	b.w	80040d4 <_fini>
 800307e:	bf00      	nop
 8003080:	080040e0 	.word	0x080040e0
 8003084:	080040e4 	.word	0x080040e4

08003088 <__libc_init_array>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4d0d      	ldr	r5, [pc, #52]	; (80030c0 <__libc_init_array+0x38>)
 800308c:	4e0d      	ldr	r6, [pc, #52]	; (80030c4 <__libc_init_array+0x3c>)
 800308e:	1b76      	subs	r6, r6, r5
 8003090:	10b6      	asrs	r6, r6, #2
 8003092:	d006      	beq.n	80030a2 <__libc_init_array+0x1a>
 8003094:	2400      	movs	r4, #0
 8003096:	f855 3b04 	ldr.w	r3, [r5], #4
 800309a:	3401      	adds	r4, #1
 800309c:	4798      	blx	r3
 800309e:	42a6      	cmp	r6, r4
 80030a0:	d1f9      	bne.n	8003096 <__libc_init_array+0xe>
 80030a2:	4d09      	ldr	r5, [pc, #36]	; (80030c8 <__libc_init_array+0x40>)
 80030a4:	4e09      	ldr	r6, [pc, #36]	; (80030cc <__libc_init_array+0x44>)
 80030a6:	f001 f807 	bl	80040b8 <_init>
 80030aa:	1b76      	subs	r6, r6, r5
 80030ac:	10b6      	asrs	r6, r6, #2
 80030ae:	d006      	beq.n	80030be <__libc_init_array+0x36>
 80030b0:	2400      	movs	r4, #0
 80030b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b6:	3401      	adds	r4, #1
 80030b8:	4798      	blx	r3
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d1f9      	bne.n	80030b2 <__libc_init_array+0x2a>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	080040c4 	.word	0x080040c4
 80030c4:	080040c4 	.word	0x080040c4
 80030c8:	080040c4 	.word	0x080040c4
 80030cc:	080040d4 	.word	0x080040d4

080030d0 <malloc>:
 80030d0:	f240 0318 	movw	r3, #24
 80030d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4601      	mov	r1, r0
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 b80b 	b.w	80030f8 <_malloc_r>
 80030e2:	bf00      	nop

080030e4 <free>:
 80030e4:	f240 0318 	movw	r3, #24
 80030e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4601      	mov	r1, r0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 bd63 	b.w	8003bbc <_free_r>
 80030f6:	bf00      	nop

080030f8 <_malloc_r>:
 80030f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030fc:	f101 040b 	add.w	r4, r1, #11
 8003100:	2c16      	cmp	r4, #22
 8003102:	4605      	mov	r5, r0
 8003104:	d926      	bls.n	8003154 <_malloc_r+0x5c>
 8003106:	f034 0407 	bics.w	r4, r4, #7
 800310a:	d426      	bmi.n	800315a <_malloc_r+0x62>
 800310c:	42a1      	cmp	r1, r4
 800310e:	d824      	bhi.n	800315a <_malloc_r+0x62>
 8003110:	4628      	mov	r0, r5
 8003112:	f000 fb09 	bl	8003728 <__malloc_lock>
 8003116:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800311a:	d224      	bcs.n	8003166 <_malloc_r+0x6e>
 800311c:	4eb2      	ldr	r6, [pc, #712]	; (80033e8 <_malloc_r+0x2f0>)
 800311e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8003122:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8003126:	68df      	ldr	r7, [r3, #12]
 8003128:	429f      	cmp	r7, r3
 800312a:	f000 81d2 	beq.w	80034d2 <_malloc_r+0x3da>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	6858      	ldr	r0, [r3, #4]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	f040 0001 	orr.w	r0, r0, #1
 8003140:	6058      	str	r0, [r3, #4]
 8003142:	60ca      	str	r2, [r1, #12]
 8003144:	6091      	str	r1, [r2, #8]
 8003146:	4628      	mov	r0, r5
 8003148:	f000 faf0 	bl	800372c <__malloc_unlock>
 800314c:	3708      	adds	r7, #8
 800314e:	4638      	mov	r0, r7
 8003150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003154:	2410      	movs	r4, #16
 8003156:	42a1      	cmp	r1, r4
 8003158:	d9da      	bls.n	8003110 <_malloc_r+0x18>
 800315a:	230c      	movs	r3, #12
 800315c:	2700      	movs	r7, #0
 800315e:	602b      	str	r3, [r5, #0]
 8003160:	4638      	mov	r0, r7
 8003162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003166:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 800316a:	f000 8087 	beq.w	800327c <_malloc_r+0x184>
 800316e:	f1be 0f04 	cmp.w	lr, #4
 8003172:	f200 814c 	bhi.w	800340e <_malloc_r+0x316>
 8003176:	ea4f 1e94 	mov.w	lr, r4, lsr #6
 800317a:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
 800317e:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8003182:	4e99      	ldr	r6, [pc, #612]	; (80033e8 <_malloc_r+0x2f0>)
 8003184:	1871      	adds	r1, r6, r1
 8003186:	68cf      	ldr	r7, [r1, #12]
 8003188:	42b9      	cmp	r1, r7
 800318a:	d105      	bne.n	8003198 <_malloc_r+0xa0>
 800318c:	e00c      	b.n	80031a8 <_malloc_r+0xb0>
 800318e:	2b00      	cmp	r3, #0
 8003190:	da79      	bge.n	8003286 <_malloc_r+0x18e>
 8003192:	68ff      	ldr	r7, [r7, #12]
 8003194:	42b9      	cmp	r1, r7
 8003196:	d007      	beq.n	80031a8 <_malloc_r+0xb0>
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	f022 0203 	bic.w	r2, r2, #3
 800319e:	1b13      	subs	r3, r2, r4
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	ddf4      	ble.n	800318e <_malloc_r+0x96>
 80031a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80031a8:	f10e 0e01 	add.w	lr, lr, #1
 80031ac:	4a8e      	ldr	r2, [pc, #568]	; (80033e8 <_malloc_r+0x2f0>)
 80031ae:	6937      	ldr	r7, [r6, #16]
 80031b0:	f102 0c08 	add.w	ip, r2, #8
 80031b4:	4567      	cmp	r7, ip
 80031b6:	f000 816a 	beq.w	800348e <_malloc_r+0x396>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f023 0303 	bic.w	r3, r3, #3
 80031c0:	1b19      	subs	r1, r3, r4
 80031c2:	290f      	cmp	r1, #15
 80031c4:	f300 8150 	bgt.w	8003468 <_malloc_r+0x370>
 80031c8:	2900      	cmp	r1, #0
 80031ca:	f8c2 c014 	str.w	ip, [r2, #20]
 80031ce:	f8c2 c010 	str.w	ip, [r2, #16]
 80031d2:	da68      	bge.n	80032a6 <_malloc_r+0x1ae>
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d8:	f080 8127 	bcs.w	800342a <_malloc_r+0x332>
 80031dc:	08db      	lsrs	r3, r3, #3
 80031de:	1099      	asrs	r1, r3, #2
 80031e0:	f04f 0801 	mov.w	r8, #1
 80031e4:	fa08 f801 	lsl.w	r8, r8, r1
 80031e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80031ec:	6851      	ldr	r1, [r2, #4]
 80031ee:	6898      	ldr	r0, [r3, #8]
 80031f0:	ea48 0101 	orr.w	r1, r8, r1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	60b8      	str	r0, [r7, #8]
 80031f8:	6051      	str	r1, [r2, #4]
 80031fa:	609f      	str	r7, [r3, #8]
 80031fc:	60c7      	str	r7, [r0, #12]
 80031fe:	2001      	movs	r0, #1
 8003200:	ea4f 03ae 	mov.w	r3, lr, asr #2
 8003204:	4098      	lsls	r0, r3
 8003206:	4288      	cmp	r0, r1
 8003208:	d859      	bhi.n	80032be <_malloc_r+0x1c6>
 800320a:	4201      	tst	r1, r0
 800320c:	d106      	bne.n	800321c <_malloc_r+0x124>
 800320e:	f02e 0e03 	bic.w	lr, lr, #3
 8003212:	0040      	lsls	r0, r0, #1
 8003214:	4201      	tst	r1, r0
 8003216:	f10e 0e04 	add.w	lr, lr, #4
 800321a:	d0fa      	beq.n	8003212 <_malloc_r+0x11a>
 800321c:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8003220:	464f      	mov	r7, r9
 8003222:	46f0      	mov	r8, lr
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	429f      	cmp	r7, r3
 8003228:	d107      	bne.n	800323a <_malloc_r+0x142>
 800322a:	e132      	b.n	8003492 <_malloc_r+0x39a>
 800322c:	2a00      	cmp	r2, #0
 800322e:	f280 8159 	bge.w	80034e4 <_malloc_r+0x3ec>
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	429f      	cmp	r7, r3
 8003236:	f000 812c 	beq.w	8003492 <_malloc_r+0x39a>
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	f021 0103 	bic.w	r1, r1, #3
 8003240:	1b0a      	subs	r2, r1, r4
 8003242:	2a0f      	cmp	r2, #15
 8003244:	ddf2      	ble.n	800322c <_malloc_r+0x134>
 8003246:	461f      	mov	r7, r3
 8003248:	68d8      	ldr	r0, [r3, #12]
 800324a:	f857 ef08 	ldr.w	lr, [r7, #8]!
 800324e:	1919      	adds	r1, r3, r4
 8003250:	f042 0801 	orr.w	r8, r2, #1
 8003254:	f044 0401 	orr.w	r4, r4, #1
 8003258:	f8ce 000c 	str.w	r0, [lr, #12]
 800325c:	f8c0 e008 	str.w	lr, [r0, #8]
 8003260:	605c      	str	r4, [r3, #4]
 8003262:	6171      	str	r1, [r6, #20]
 8003264:	6131      	str	r1, [r6, #16]
 8003266:	f8c1 c00c 	str.w	ip, [r1, #12]
 800326a:	f8c1 c008 	str.w	ip, [r1, #8]
 800326e:	f8c1 8004 	str.w	r8, [r1, #4]
 8003272:	508a      	str	r2, [r1, r2]
 8003274:	4628      	mov	r0, r5
 8003276:	f000 fa59 	bl	800372c <__malloc_unlock>
 800327a:	e768      	b.n	800314e <_malloc_r+0x56>
 800327c:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8003280:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8003284:	e77d      	b.n	8003182 <_malloc_r+0x8a>
 8003286:	18ba      	adds	r2, r7, r2
 8003288:	6850      	ldr	r0, [r2, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	f040 0001 	orr.w	r0, r0, #1
 8003292:	6050      	str	r0, [r2, #4]
 8003294:	60cb      	str	r3, [r1, #12]
 8003296:	4628      	mov	r0, r5
 8003298:	6099      	str	r1, [r3, #8]
 800329a:	3708      	adds	r7, #8
 800329c:	f000 fa46 	bl	800372c <__malloc_unlock>
 80032a0:	4638      	mov	r0, r7
 80032a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	4628      	mov	r0, r5
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	3708      	adds	r7, #8
 80032b4:	f000 fa3a 	bl	800372c <__malloc_unlock>
 80032b8:	4638      	mov	r0, r7
 80032ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032be:	68b7      	ldr	r7, [r6, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f023 0903 	bic.w	r9, r3, #3
 80032c6:	454c      	cmp	r4, r9
 80032c8:	d804      	bhi.n	80032d4 <_malloc_r+0x1dc>
 80032ca:	ebc4 0209 	rsb	r2, r4, r9
 80032ce:	2a0f      	cmp	r2, #15
 80032d0:	f300 808e 	bgt.w	80033f0 <_malloc_r+0x2f8>
 80032d4:	f8df a114 	ldr.w	sl, [pc, #276]	; 80033ec <_malloc_r+0x2f4>
 80032d8:	f8d6 2408 	ldr.w	r2, [r6, #1032]	; 0x408
 80032dc:	f8da 3000 	ldr.w	r3, [sl]
 80032e0:	3201      	adds	r2, #1
 80032e2:	4423      	add	r3, r4
 80032e4:	f000 8147 	beq.w	8003576 <_malloc_r+0x47e>
 80032e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ec:	330f      	adds	r3, #15
 80032ee:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 80032f2:	f023 0b1f 	bic.w	fp, r3, #31
 80032f6:	4628      	mov	r0, r5
 80032f8:	4659      	mov	r1, fp
 80032fa:	f7fd f8cf 	bl	800049c <_sbrk_r>
 80032fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003302:	4680      	mov	r8, r0
 8003304:	f000 8140 	beq.w	8003588 <_malloc_r+0x490>
 8003308:	eb07 0209 	add.w	r2, r7, r9
 800330c:	4282      	cmp	r2, r0
 800330e:	f200 8101 	bhi.w	8003514 <_malloc_r+0x41c>
 8003312:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003316:	4542      	cmp	r2, r8
 8003318:	445b      	add	r3, fp
 800331a:	f8ca 3004 	str.w	r3, [sl, #4]
 800331e:	f000 8138 	beq.w	8003592 <_malloc_r+0x49a>
 8003322:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8003326:	3101      	adds	r1, #1
 8003328:	f000 8144 	beq.w	80035b4 <_malloc_r+0x4bc>
 800332c:	ebc2 0208 	rsb	r2, r2, r8
 8003330:	189b      	adds	r3, r3, r2
 8003332:	f8ca 3004 	str.w	r3, [sl, #4]
 8003336:	f018 0307 	ands.w	r3, r8, #7
 800333a:	f000 80fe 	beq.w	800353a <_malloc_r+0x442>
 800333e:	f1c3 0208 	rsb	r2, r3, #8
 8003342:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003346:	4490      	add	r8, r2
 8003348:	f103 0208 	add.w	r2, r3, #8
 800334c:	eb08 030b 	add.w	r3, r8, fp
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	0d1b      	lsrs	r3, r3, #20
 8003354:	ebc3 0b02 	rsb	fp, r3, r2
 8003358:	4628      	mov	r0, r5
 800335a:	4659      	mov	r1, fp
 800335c:	f7fd f89e 	bl	800049c <_sbrk_r>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	f000 8133 	beq.w	80035cc <_malloc_r+0x4d4>
 8003366:	ebc8 0200 	rsb	r2, r8, r0
 800336a:	445a      	add	r2, fp
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003374:	42b7      	cmp	r7, r6
 8003376:	445b      	add	r3, fp
 8003378:	f8c6 8008 	str.w	r8, [r6, #8]
 800337c:	f8ca 3004 	str.w	r3, [sl, #4]
 8003380:	f8c8 2004 	str.w	r2, [r8, #4]
 8003384:	d015      	beq.n	80033b2 <_malloc_r+0x2ba>
 8003386:	f1b9 0f0f 	cmp.w	r9, #15
 800338a:	f240 80e3 	bls.w	8003554 <_malloc_r+0x45c>
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	f1a9 020c 	sub.w	r2, r9, #12
 8003394:	f022 0207 	bic.w	r2, r2, #7
 8003398:	f001 0e01 	and.w	lr, r1, #1
 800339c:	2005      	movs	r0, #5
 800339e:	18b9      	adds	r1, r7, r2
 80033a0:	ea42 0e0e 	orr.w	lr, r2, lr
 80033a4:	2a0f      	cmp	r2, #15
 80033a6:	f8c7 e004 	str.w	lr, [r7, #4]
 80033aa:	6048      	str	r0, [r1, #4]
 80033ac:	6088      	str	r0, [r1, #8]
 80033ae:	f200 8105 	bhi.w	80035bc <_malloc_r+0x4c4>
 80033b2:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80033b6:	68b7      	ldr	r7, [r6, #8]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bf84      	itt	hi
 80033bc:	4a0b      	ldrhi	r2, [pc, #44]	; (80033ec <_malloc_r+0x2f4>)
 80033be:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 80033c0:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf84      	itt	hi
 80033c8:	4a08      	ldrhi	r2, [pc, #32]	; (80033ec <_malloc_r+0x2f4>)
 80033ca:	6313      	strhi	r3, [r2, #48]	; 0x30
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	f022 0203 	bic.w	r2, r2, #3
 80033d2:	4294      	cmp	r4, r2
 80033d4:	d802      	bhi.n	80033dc <_malloc_r+0x2e4>
 80033d6:	1b12      	subs	r2, r2, r4
 80033d8:	2a0f      	cmp	r2, #15
 80033da:	dc09      	bgt.n	80033f0 <_malloc_r+0x2f8>
 80033dc:	4628      	mov	r0, r5
 80033de:	f000 f9a5 	bl	800372c <__malloc_unlock>
 80033e2:	2700      	movs	r7, #0
 80033e4:	e6b3      	b.n	800314e <_malloc_r+0x56>
 80033e6:	bf00      	nop
 80033e8:	20000448 	.word	0x20000448
 80033ec:	20000ecc 	.word	0x20000ecc
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	f044 0401 	orr.w	r4, r4, #1
 80033fa:	607c      	str	r4, [r7, #4]
 80033fc:	4628      	mov	r0, r5
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	3708      	adds	r7, #8
 8003402:	60b3      	str	r3, [r6, #8]
 8003404:	f000 f992 	bl	800372c <__malloc_unlock>
 8003408:	4638      	mov	r0, r7
 800340a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340e:	f1be 0f14 	cmp.w	lr, #20
 8003412:	d976      	bls.n	8003502 <_malloc_r+0x40a>
 8003414:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8003418:	f200 8085 	bhi.w	8003526 <_malloc_r+0x42e>
 800341c:	ea4f 3e14 	mov.w	lr, r4, lsr #12
 8003420:	f10e 0e6e 	add.w	lr, lr, #110	; 0x6e
 8003424:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8003428:	e6ab      	b.n	8003182 <_malloc_r+0x8a>
 800342a:	0a5a      	lsrs	r2, r3, #9
 800342c:	2a04      	cmp	r2, #4
 800342e:	d96d      	bls.n	800350c <_malloc_r+0x414>
 8003430:	2a14      	cmp	r2, #20
 8003432:	f200 80a3 	bhi.w	800357c <_malloc_r+0x484>
 8003436:	f102 015b 	add.w	r1, r2, #91	; 0x5b
 800343a:	00c8      	lsls	r0, r1, #3
 800343c:	1830      	adds	r0, r6, r0
 800343e:	6882      	ldr	r2, [r0, #8]
 8003440:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800360c <_malloc_r+0x514>
 8003444:	4282      	cmp	r2, r0
 8003446:	d103      	bne.n	8003450 <_malloc_r+0x358>
 8003448:	e07a      	b.n	8003540 <_malloc_r+0x448>
 800344a:	6892      	ldr	r2, [r2, #8]
 800344c:	4290      	cmp	r0, r2
 800344e:	d004      	beq.n	800345a <_malloc_r+0x362>
 8003450:	6851      	ldr	r1, [r2, #4]
 8003452:	f021 0103 	bic.w	r1, r1, #3
 8003456:	428b      	cmp	r3, r1
 8003458:	d3f7      	bcc.n	800344a <_malloc_r+0x352>
 800345a:	68d3      	ldr	r3, [r2, #12]
 800345c:	6871      	ldr	r1, [r6, #4]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	60ba      	str	r2, [r7, #8]
 8003462:	60d7      	str	r7, [r2, #12]
 8003464:	609f      	str	r7, [r3, #8]
 8003466:	e6ca      	b.n	80031fe <_malloc_r+0x106>
 8003468:	193b      	adds	r3, r7, r4
 800346a:	f041 0001 	orr.w	r0, r1, #1
 800346e:	f044 0401 	orr.w	r4, r4, #1
 8003472:	607c      	str	r4, [r7, #4]
 8003474:	6153      	str	r3, [r2, #20]
 8003476:	6113      	str	r3, [r2, #16]
 8003478:	6058      	str	r0, [r3, #4]
 800347a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800347e:	f8c3 c008 	str.w	ip, [r3, #8]
 8003482:	5059      	str	r1, [r3, r1]
 8003484:	4628      	mov	r0, r5
 8003486:	f000 f951 	bl	800372c <__malloc_unlock>
 800348a:	3708      	adds	r7, #8
 800348c:	e65f      	b.n	800314e <_malloc_r+0x56>
 800348e:	6851      	ldr	r1, [r2, #4]
 8003490:	e6b5      	b.n	80031fe <_malloc_r+0x106>
 8003492:	f108 0801 	add.w	r8, r8, #1
 8003496:	3708      	adds	r7, #8
 8003498:	f018 0f03 	tst.w	r8, #3
 800349c:	f47f aec2 	bne.w	8003224 <_malloc_r+0x12c>
 80034a0:	464b      	mov	r3, r9
 80034a2:	f01e 0f03 	tst.w	lr, #3
 80034a6:	f1a3 0208 	sub.w	r2, r3, #8
 80034aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80034ae:	f000 80a0 	beq.w	80035f2 <_malloc_r+0x4fa>
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d0f4      	beq.n	80034a2 <_malloc_r+0x3aa>
 80034b8:	6873      	ldr	r3, [r6, #4]
 80034ba:	0040      	lsls	r0, r0, #1
 80034bc:	4298      	cmp	r0, r3
 80034be:	f63f aefe 	bhi.w	80032be <_malloc_r+0x1c6>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	f43f aefb 	beq.w	80032be <_malloc_r+0x1c6>
 80034c8:	4218      	tst	r0, r3
 80034ca:	f000 8097 	beq.w	80035fc <_malloc_r+0x504>
 80034ce:	46c6      	mov	lr, r8
 80034d0:	e6a4      	b.n	800321c <_malloc_r+0x124>
 80034d2:	f107 0308 	add.w	r3, r7, #8
 80034d6:	697f      	ldr	r7, [r7, #20]
 80034d8:	42bb      	cmp	r3, r7
 80034da:	f47f ae28 	bne.w	800312e <_malloc_r+0x36>
 80034de:	f10e 0e02 	add.w	lr, lr, #2
 80034e2:	e663      	b.n	80031ac <_malloc_r+0xb4>
 80034e4:	1859      	adds	r1, r3, r1
 80034e6:	6848      	ldr	r0, [r1, #4]
 80034e8:	461f      	mov	r7, r3
 80034ea:	f857 2f08 	ldr.w	r2, [r7, #8]!
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f040 0001 	orr.w	r0, r0, #1
 80034f4:	6048      	str	r0, [r1, #4]
 80034f6:	60d3      	str	r3, [r2, #12]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	4628      	mov	r0, r5
 80034fc:	f000 f916 	bl	800372c <__malloc_unlock>
 8003500:	e625      	b.n	800314e <_malloc_r+0x56>
 8003502:	f10e 0e5b 	add.w	lr, lr, #91	; 0x5b
 8003506:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 800350a:	e63a      	b.n	8003182 <_malloc_r+0x8a>
 800350c:	0999      	lsrs	r1, r3, #6
 800350e:	3138      	adds	r1, #56	; 0x38
 8003510:	00c8      	lsls	r0, r1, #3
 8003512:	e793      	b.n	800343c <_malloc_r+0x344>
 8003514:	42b7      	cmp	r7, r6
 8003516:	f43f aefc 	beq.w	8003312 <_malloc_r+0x21a>
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <_malloc_r+0x514>)
 800351c:	689f      	ldr	r7, [r3, #8]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	f022 0203 	bic.w	r2, r2, #3
 8003524:	e755      	b.n	80033d2 <_malloc_r+0x2da>
 8003526:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 800352a:	d819      	bhi.n	8003560 <_malloc_r+0x468>
 800352c:	ea4f 3ed4 	mov.w	lr, r4, lsr #15
 8003530:	f10e 0e77 	add.w	lr, lr, #119	; 0x77
 8003534:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8003538:	e623      	b.n	8003182 <_malloc_r+0x8a>
 800353a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800353e:	e705      	b.n	800334c <_malloc_r+0x254>
 8003540:	1089      	asrs	r1, r1, #2
 8003542:	2001      	movs	r0, #1
 8003544:	4088      	lsls	r0, r1
 8003546:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	4301      	orrs	r1, r0
 800354e:	f8c8 1004 	str.w	r1, [r8, #4]
 8003552:	e784      	b.n	800345e <_malloc_r+0x366>
 8003554:	2301      	movs	r3, #1
 8003556:	f8c8 3004 	str.w	r3, [r8, #4]
 800355a:	4647      	mov	r7, r8
 800355c:	2200      	movs	r2, #0
 800355e:	e738      	b.n	80033d2 <_malloc_r+0x2da>
 8003560:	f240 5354 	movw	r3, #1364	; 0x554
 8003564:	459e      	cmp	lr, r3
 8003566:	d820      	bhi.n	80035aa <_malloc_r+0x4b2>
 8003568:	ea4f 4e94 	mov.w	lr, r4, lsr #18
 800356c:	f10e 0e7c 	add.w	lr, lr, #124	; 0x7c
 8003570:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8003574:	e605      	b.n	8003182 <_malloc_r+0x8a>
 8003576:	f103 0b10 	add.w	fp, r3, #16
 800357a:	e6bc      	b.n	80032f6 <_malloc_r+0x1fe>
 800357c:	2a54      	cmp	r2, #84	; 0x54
 800357e:	d829      	bhi.n	80035d4 <_malloc_r+0x4dc>
 8003580:	0b19      	lsrs	r1, r3, #12
 8003582:	316e      	adds	r1, #110	; 0x6e
 8003584:	00c8      	lsls	r0, r1, #3
 8003586:	e759      	b.n	800343c <_malloc_r+0x344>
 8003588:	68b7      	ldr	r7, [r6, #8]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	f022 0203 	bic.w	r2, r2, #3
 8003590:	e71f      	b.n	80033d2 <_malloc_r+0x2da>
 8003592:	0511      	lsls	r1, r2, #20
 8003594:	0d09      	lsrs	r1, r1, #20
 8003596:	2900      	cmp	r1, #0
 8003598:	f47f aec3 	bne.w	8003322 <_malloc_r+0x22a>
 800359c:	68b2      	ldr	r2, [r6, #8]
 800359e:	eb0b 0109 	add.w	r1, fp, r9
 80035a2:	f041 0101 	orr.w	r1, r1, #1
 80035a6:	6051      	str	r1, [r2, #4]
 80035a8:	e703      	b.n	80033b2 <_malloc_r+0x2ba>
 80035aa:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80035ae:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 80035b2:	e5e6      	b.n	8003182 <_malloc_r+0x8a>
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <_malloc_r+0x514>)
 80035b6:	f8c3 8408 	str.w	r8, [r3, #1032]	; 0x408
 80035ba:	e6bc      	b.n	8003336 <_malloc_r+0x23e>
 80035bc:	f107 0108 	add.w	r1, r7, #8
 80035c0:	4628      	mov	r0, r5
 80035c2:	f000 fafb 	bl	8003bbc <_free_r>
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <_malloc_r+0x518>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	e6f2      	b.n	80033b2 <_malloc_r+0x2ba>
 80035cc:	2201      	movs	r2, #1
 80035ce:	f04f 0b00 	mov.w	fp, #0
 80035d2:	e6cd      	b.n	8003370 <_malloc_r+0x278>
 80035d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80035d8:	d803      	bhi.n	80035e2 <_malloc_r+0x4ea>
 80035da:	0bd9      	lsrs	r1, r3, #15
 80035dc:	3177      	adds	r1, #119	; 0x77
 80035de:	00c8      	lsls	r0, r1, #3
 80035e0:	e72c      	b.n	800343c <_malloc_r+0x344>
 80035e2:	f240 5154 	movw	r1, #1364	; 0x554
 80035e6:	428a      	cmp	r2, r1
 80035e8:	d80c      	bhi.n	8003604 <_malloc_r+0x50c>
 80035ea:	0c99      	lsrs	r1, r3, #18
 80035ec:	317c      	adds	r1, #124	; 0x7c
 80035ee:	00c8      	lsls	r0, r1, #3
 80035f0:	e724      	b.n	800343c <_malloc_r+0x344>
 80035f2:	6873      	ldr	r3, [r6, #4]
 80035f4:	ea23 0300 	bic.w	r3, r3, r0
 80035f8:	6073      	str	r3, [r6, #4]
 80035fa:	e75e      	b.n	80034ba <_malloc_r+0x3c2>
 80035fc:	0040      	lsls	r0, r0, #1
 80035fe:	f108 0804 	add.w	r8, r8, #4
 8003602:	e761      	b.n	80034c8 <_malloc_r+0x3d0>
 8003604:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8003608:	217e      	movs	r1, #126	; 0x7e
 800360a:	e717      	b.n	800343c <_malloc_r+0x344>
 800360c:	20000448 	.word	0x20000448
 8003610:	20000ecc 	.word	0x20000ecc

08003614 <memcpy>:
 8003614:	2a0f      	cmp	r2, #15
 8003616:	b4f0      	push	{r4, r5, r6, r7}
 8003618:	d93a      	bls.n	8003690 <memcpy+0x7c>
 800361a:	ea41 0300 	orr.w	r3, r1, r0
 800361e:	079b      	lsls	r3, r3, #30
 8003620:	d138      	bne.n	8003694 <memcpy+0x80>
 8003622:	460c      	mov	r4, r1
 8003624:	4603      	mov	r3, r0
 8003626:	4615      	mov	r5, r2
 8003628:	6826      	ldr	r6, [r4, #0]
 800362a:	3d10      	subs	r5, #16
 800362c:	601e      	str	r6, [r3, #0]
 800362e:	6866      	ldr	r6, [r4, #4]
 8003630:	605e      	str	r6, [r3, #4]
 8003632:	68a6      	ldr	r6, [r4, #8]
 8003634:	609e      	str	r6, [r3, #8]
 8003636:	68e6      	ldr	r6, [r4, #12]
 8003638:	3410      	adds	r4, #16
 800363a:	60de      	str	r6, [r3, #12]
 800363c:	3310      	adds	r3, #16
 800363e:	2d0f      	cmp	r5, #15
 8003640:	d8f2      	bhi.n	8003628 <memcpy+0x14>
 8003642:	f1a2 0410 	sub.w	r4, r2, #16
 8003646:	f024 040f 	bic.w	r4, r4, #15
 800364a:	f002 020f 	and.w	r2, r2, #15
 800364e:	3410      	adds	r4, #16
 8003650:	2a03      	cmp	r2, #3
 8003652:	eb00 0304 	add.w	r3, r0, r4
 8003656:	4421      	add	r1, r4
 8003658:	d911      	bls.n	800367e <memcpy+0x6a>
 800365a:	460e      	mov	r6, r1
 800365c:	461d      	mov	r5, r3
 800365e:	4614      	mov	r4, r2
 8003660:	f856 7b04 	ldr.w	r7, [r6], #4
 8003664:	3c04      	subs	r4, #4
 8003666:	2c03      	cmp	r4, #3
 8003668:	f845 7b04 	str.w	r7, [r5], #4
 800366c:	d8f8      	bhi.n	8003660 <memcpy+0x4c>
 800366e:	1f14      	subs	r4, r2, #4
 8003670:	f024 0403 	bic.w	r4, r4, #3
 8003674:	3404      	adds	r4, #4
 8003676:	f002 0203 	and.w	r2, r2, #3
 800367a:	1909      	adds	r1, r1, r4
 800367c:	191b      	adds	r3, r3, r4
 800367e:	b12a      	cbz	r2, 800368c <memcpy+0x78>
 8003680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003684:	3a01      	subs	r2, #1
 8003686:	f803 4b01 	strb.w	r4, [r3], #1
 800368a:	d1f9      	bne.n	8003680 <memcpy+0x6c>
 800368c:	bcf0      	pop	{r4, r5, r6, r7}
 800368e:	4770      	bx	lr
 8003690:	4603      	mov	r3, r0
 8003692:	e7f4      	b.n	800367e <memcpy+0x6a>
 8003694:	4603      	mov	r3, r0
 8003696:	e7f3      	b.n	8003680 <memcpy+0x6c>

08003698 <memset>:
 8003698:	f010 0f03 	tst.w	r0, #3
 800369c:	b470      	push	{r4, r5, r6}
 800369e:	4603      	mov	r3, r0
 80036a0:	d03f      	beq.n	8003722 <memset+0x8a>
 80036a2:	2a00      	cmp	r2, #0
 80036a4:	d03b      	beq.n	800371e <memset+0x86>
 80036a6:	b2cd      	uxtb	r5, r1
 80036a8:	e001      	b.n	80036ae <memset+0x16>
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	d037      	beq.n	800371e <memset+0x86>
 80036ae:	f803 5b01 	strb.w	r5, [r3], #1
 80036b2:	3a01      	subs	r2, #1
 80036b4:	f013 0f03 	tst.w	r3, #3
 80036b8:	461c      	mov	r4, r3
 80036ba:	d1f6      	bne.n	80036aa <memset+0x12>
 80036bc:	2a03      	cmp	r2, #3
 80036be:	d928      	bls.n	8003712 <memset+0x7a>
 80036c0:	b2cd      	uxtb	r5, r1
 80036c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80036c6:	2a0f      	cmp	r2, #15
 80036c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80036cc:	d913      	bls.n	80036f6 <memset+0x5e>
 80036ce:	4623      	mov	r3, r4
 80036d0:	4616      	mov	r6, r2
 80036d2:	3e10      	subs	r6, #16
 80036d4:	601d      	str	r5, [r3, #0]
 80036d6:	605d      	str	r5, [r3, #4]
 80036d8:	609d      	str	r5, [r3, #8]
 80036da:	60dd      	str	r5, [r3, #12]
 80036dc:	3310      	adds	r3, #16
 80036de:	2e0f      	cmp	r6, #15
 80036e0:	d8f7      	bhi.n	80036d2 <memset+0x3a>
 80036e2:	f1a2 0310 	sub.w	r3, r2, #16
 80036e6:	f023 030f 	bic.w	r3, r3, #15
 80036ea:	f002 020f 	and.w	r2, r2, #15
 80036ee:	3310      	adds	r3, #16
 80036f0:	2a03      	cmp	r2, #3
 80036f2:	441c      	add	r4, r3
 80036f4:	d90d      	bls.n	8003712 <memset+0x7a>
 80036f6:	4626      	mov	r6, r4
 80036f8:	4613      	mov	r3, r2
 80036fa:	3b04      	subs	r3, #4
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	f846 5b04 	str.w	r5, [r6], #4
 8003702:	d8fa      	bhi.n	80036fa <memset+0x62>
 8003704:	1f13      	subs	r3, r2, #4
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	3304      	adds	r3, #4
 800370c:	f002 0203 	and.w	r2, r2, #3
 8003710:	18e4      	adds	r4, r4, r3
 8003712:	b122      	cbz	r2, 800371e <memset+0x86>
 8003714:	b2c9      	uxtb	r1, r1
 8003716:	3a01      	subs	r2, #1
 8003718:	f804 1b01 	strb.w	r1, [r4], #1
 800371c:	d1fb      	bne.n	8003716 <memset+0x7e>
 800371e:	bc70      	pop	{r4, r5, r6}
 8003720:	4770      	bx	lr
 8003722:	4604      	mov	r4, r0
 8003724:	e7ca      	b.n	80036bc <memset+0x24>
 8003726:	bf00      	nop

08003728 <__malloc_lock>:
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <__malloc_unlock>:
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <stpcpy>:
 8003730:	ea41 0300 	orr.w	r3, r1, r0
 8003734:	079b      	lsls	r3, r3, #30
 8003736:	b410      	push	{r4}
 8003738:	4602      	mov	r2, r0
 800373a:	d11c      	bne.n	8003776 <stpcpy+0x46>
 800373c:	680b      	ldr	r3, [r1, #0]
 800373e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8003742:	ea24 0403 	bic.w	r4, r4, r3
 8003746:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800374a:	d114      	bne.n	8003776 <stpcpy+0x46>
 800374c:	4608      	mov	r0, r1
 800374e:	f842 3b04 	str.w	r3, [r2], #4
 8003752:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8003756:	3104      	adds	r1, #4
 8003758:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800375c:	ea24 0403 	bic.w	r4, r4, r3
 8003760:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8003764:	d0f3      	beq.n	800374e <stpcpy+0x1e>
 8003766:	4610      	mov	r0, r2
 8003768:	f811 2b01 	ldrb.w	r2, [r1], #1
 800376c:	4603      	mov	r3, r0
 800376e:	f803 2b01 	strb.w	r2, [r3], #1
 8003772:	b13a      	cbz	r2, 8003784 <stpcpy+0x54>
 8003774:	4618      	mov	r0, r3
 8003776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800377a:	4603      	mov	r3, r0
 800377c:	f803 2b01 	strb.w	r2, [r3], #1
 8003780:	2a00      	cmp	r2, #0
 8003782:	d1f7      	bne.n	8003774 <stpcpy+0x44>
 8003784:	bc10      	pop	{r4}
 8003786:	4770      	bx	lr

08003788 <strcat>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	0783      	lsls	r3, r0, #30
 800378c:	4604      	mov	r4, r0
 800378e:	d113      	bne.n	80037b8 <strcat+0x30>
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8003796:	ea22 0303 	bic.w	r3, r2, r3
 800379a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800379e:	d10b      	bne.n	80037b8 <strcat+0x30>
 80037a0:	4602      	mov	r2, r0
 80037a2:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80037a6:	3004      	adds	r0, #4
 80037a8:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80037ac:	ea25 0303 	bic.w	r3, r5, r3
 80037b0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80037b4:	d0f5      	beq.n	80037a2 <strcat+0x1a>
 80037b6:	e000      	b.n	80037ba <strcat+0x32>
 80037b8:	4620      	mov	r0, r4
 80037ba:	7803      	ldrb	r3, [r0, #0]
 80037bc:	b12b      	cbz	r3, 80037ca <strcat+0x42>
 80037be:	4603      	mov	r3, r0
 80037c0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80037c4:	3001      	adds	r0, #1
 80037c6:	2a00      	cmp	r2, #0
 80037c8:	d1fa      	bne.n	80037c0 <strcat+0x38>
 80037ca:	f000 f803 	bl	80037d4 <strcpy>
 80037ce:	4620      	mov	r0, r4
 80037d0:	bd38      	pop	{r3, r4, r5, pc}
 80037d2:	bf00      	nop

080037d4 <strcpy>:
 80037d4:	ea80 0201 	eor.w	r2, r0, r1
 80037d8:	4684      	mov	ip, r0
 80037da:	f012 0f03 	tst.w	r2, #3
 80037de:	d14f      	bne.n	8003880 <strcpy+0xac>
 80037e0:	f011 0f03 	tst.w	r1, #3
 80037e4:	d132      	bne.n	800384c <strcpy+0x78>
 80037e6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80037ea:	f011 0f04 	tst.w	r1, #4
 80037ee:	f851 3b04 	ldr.w	r3, [r1], #4
 80037f2:	d00b      	beq.n	800380c <strcpy+0x38>
 80037f4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80037f8:	439a      	bics	r2, r3
 80037fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80037fe:	bf04      	itt	eq
 8003800:	f84c 3b04 	streq.w	r3, [ip], #4
 8003804:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003808:	d116      	bne.n	8003838 <strcpy+0x64>
 800380a:	bf00      	nop
 800380c:	f851 4b04 	ldr.w	r4, [r1], #4
 8003810:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8003814:	439a      	bics	r2, r3
 8003816:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800381a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800381e:	d10b      	bne.n	8003838 <strcpy+0x64>
 8003820:	f84c 3b04 	str.w	r3, [ip], #4
 8003824:	43a2      	bics	r2, r4
 8003826:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800382a:	bf04      	itt	eq
 800382c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003830:	f84c 4b04 	streq.w	r4, [ip], #4
 8003834:	d0ea      	beq.n	800380c <strcpy+0x38>
 8003836:	4623      	mov	r3, r4
 8003838:	f80c 3b01 	strb.w	r3, [ip], #1
 800383c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003840:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003844:	d1f8      	bne.n	8003838 <strcpy+0x64>
 8003846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	f011 0f01 	tst.w	r1, #1
 8003850:	d006      	beq.n	8003860 <strcpy+0x8c>
 8003852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003856:	f80c 2b01 	strb.w	r2, [ip], #1
 800385a:	2a00      	cmp	r2, #0
 800385c:	bf08      	it	eq
 800385e:	4770      	bxeq	lr
 8003860:	f011 0f02 	tst.w	r1, #2
 8003864:	d0bf      	beq.n	80037e6 <strcpy+0x12>
 8003866:	f831 2b02 	ldrh.w	r2, [r1], #2
 800386a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800386e:	bf16      	itet	ne
 8003870:	f82c 2b02 	strhne.w	r2, [ip], #2
 8003874:	f88c 2000 	strbeq.w	r2, [ip]
 8003878:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800387c:	d1b3      	bne.n	80037e6 <strcpy+0x12>
 800387e:	4770      	bx	lr
 8003880:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003884:	f80c 2b01 	strb.w	r2, [ip], #1
 8003888:	2a00      	cmp	r2, #0
 800388a:	d1f9      	bne.n	8003880 <strcpy+0xac>
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <strlen>:
 8003890:	f020 0103 	bic.w	r1, r0, #3
 8003894:	f010 0003 	ands.w	r0, r0, #3
 8003898:	f1c0 0000 	rsb	r0, r0, #0
 800389c:	f851 3b04 	ldr.w	r3, [r1], #4
 80038a0:	f100 0c04 	add.w	ip, r0, #4
 80038a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80038a8:	f06f 0200 	mvn.w	r2, #0
 80038ac:	bf1c      	itt	ne
 80038ae:	fa22 f20c 	lsrne.w	r2, r2, ip
 80038b2:	4313      	orrne	r3, r2
 80038b4:	f04f 0c01 	mov.w	ip, #1
 80038b8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80038bc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80038c0:	eba3 020c 	sub.w	r2, r3, ip
 80038c4:	ea22 0203 	bic.w	r2, r2, r3
 80038c8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80038cc:	bf04      	itt	eq
 80038ce:	f851 3b04 	ldreq.w	r3, [r1], #4
 80038d2:	3004      	addeq	r0, #4
 80038d4:	d0f4      	beq.n	80038c0 <strlen+0x30>
 80038d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80038da:	bf1f      	itttt	ne
 80038dc:	3001      	addne	r0, #1
 80038de:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80038e2:	3001      	addne	r0, #1
 80038e4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80038e8:	bf18      	it	ne
 80038ea:	3001      	addne	r0, #1
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop

080038f0 <strncmp>:
 80038f0:	b4f0      	push	{r4, r5, r6, r7}
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d044      	beq.n	8003980 <strncmp+0x90>
 80038f6:	ea41 0300 	orr.w	r3, r1, r0
 80038fa:	f013 0303 	ands.w	r3, r3, #3
 80038fe:	d12b      	bne.n	8003958 <strncmp+0x68>
 8003900:	2a03      	cmp	r2, #3
 8003902:	d929      	bls.n	8003958 <strncmp+0x68>
 8003904:	6804      	ldr	r4, [r0, #0]
 8003906:	680d      	ldr	r5, [r1, #0]
 8003908:	42ac      	cmp	r4, r5
 800390a:	d125      	bne.n	8003958 <strncmp+0x68>
 800390c:	3a04      	subs	r2, #4
 800390e:	d037      	beq.n	8003980 <strncmp+0x90>
 8003910:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8003914:	ea25 0404 	bic.w	r4, r5, r4
 8003918:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800391c:	d12e      	bne.n	800397c <strncmp+0x8c>
 800391e:	460c      	mov	r4, r1
 8003920:	4603      	mov	r3, r0
 8003922:	e010      	b.n	8003946 <strncmp+0x56>
 8003924:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8003928:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800392c:	f1a3 3701 	sub.w	r7, r3, #16843009	; 0x1010101
 8003930:	42a3      	cmp	r3, r4
 8003932:	ea27 0703 	bic.w	r7, r7, r3
 8003936:	4634      	mov	r4, r6
 8003938:	462b      	mov	r3, r5
 800393a:	d109      	bne.n	8003950 <strncmp+0x60>
 800393c:	3a04      	subs	r2, #4
 800393e:	d01f      	beq.n	8003980 <strncmp+0x90>
 8003940:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8003944:	d123      	bne.n	800398e <strncmp+0x9e>
 8003946:	1d1d      	adds	r5, r3, #4
 8003948:	1d26      	adds	r6, r4, #4
 800394a:	2a03      	cmp	r2, #3
 800394c:	d8ea      	bhi.n	8003924 <strncmp+0x34>
 800394e:	b1d2      	cbz	r2, 8003986 <strncmp+0x96>
 8003950:	3a01      	subs	r2, #1
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	e000      	b.n	800395a <strncmp+0x6a>
 8003958:	3a01      	subs	r2, #1
 800395a:	7803      	ldrb	r3, [r0, #0]
 800395c:	780c      	ldrb	r4, [r1, #0]
 800395e:	42a3      	cmp	r3, r4
 8003960:	d113      	bne.n	800398a <strncmp+0x9a>
 8003962:	b16a      	cbz	r2, 8003980 <strncmp+0x90>
 8003964:	b153      	cbz	r3, 800397c <strncmp+0x8c>
 8003966:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800396a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800396e:	42a3      	cmp	r3, r4
 8003970:	d10b      	bne.n	800398a <strncmp+0x9a>
 8003972:	2a01      	cmp	r2, #1
 8003974:	d00b      	beq.n	800398e <strncmp+0x9e>
 8003976:	3a01      	subs	r2, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f4      	bne.n	8003966 <strncmp+0x76>
 800397c:	4618      	mov	r0, r3
 800397e:	e000      	b.n	8003982 <strncmp+0x92>
 8003980:	4610      	mov	r0, r2
 8003982:	bcf0      	pop	{r4, r5, r6, r7}
 8003984:	4770      	bx	lr
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	7924      	ldrb	r4, [r4, #4]
 800398a:	1b18      	subs	r0, r3, r4
 800398c:	e7f9      	b.n	8003982 <strncmp+0x92>
 800398e:	2000      	movs	r0, #0
 8003990:	e7f7      	b.n	8003982 <strncmp+0x92>
 8003992:	bf00      	nop

08003994 <strncpy>:
 8003994:	ea41 0300 	orr.w	r3, r1, r0
 8003998:	079b      	lsls	r3, r3, #30
 800399a:	b470      	push	{r4, r5, r6}
 800399c:	460d      	mov	r5, r1
 800399e:	4604      	mov	r4, r0
 80039a0:	d12a      	bne.n	80039f8 <strncpy+0x64>
 80039a2:	2a03      	cmp	r2, #3
 80039a4:	d817      	bhi.n	80039d6 <strncpy+0x42>
 80039a6:	b1a2      	cbz	r2, 80039d2 <strncpy+0x3e>
 80039a8:	780e      	ldrb	r6, [r1, #0]
 80039aa:	1e53      	subs	r3, r2, #1
 80039ac:	f804 6b01 	strb.w	r6, [r4], #1
 80039b0:	b14e      	cbz	r6, 80039c6 <strncpy+0x32>
 80039b2:	4622      	mov	r2, r4
 80039b4:	b16b      	cbz	r3, 80039d2 <strncpy+0x3e>
 80039b6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f802 5b01 	strb.w	r5, [r2], #1
 80039c0:	4614      	mov	r4, r2
 80039c2:	2d00      	cmp	r5, #0
 80039c4:	d1f6      	bne.n	80039b4 <strncpy+0x20>
 80039c6:	b123      	cbz	r3, 80039d2 <strncpy+0x3e>
 80039c8:	2200      	movs	r2, #0
 80039ca:	3b01      	subs	r3, #1
 80039cc:	f804 2b01 	strb.w	r2, [r4], #1
 80039d0:	d1fb      	bne.n	80039ca <strncpy+0x36>
 80039d2:	bc70      	pop	{r4, r5, r6}
 80039d4:	4770      	bx	lr
 80039d6:	4629      	mov	r1, r5
 80039d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039dc:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
 80039e0:	ea26 0603 	bic.w	r6, r6, r3
 80039e4:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80039e8:	d1dd      	bne.n	80039a6 <strncpy+0x12>
 80039ea:	3a04      	subs	r2, #4
 80039ec:	2a03      	cmp	r2, #3
 80039ee:	f844 3b04 	str.w	r3, [r4], #4
 80039f2:	d8f0      	bhi.n	80039d6 <strncpy+0x42>
 80039f4:	4629      	mov	r1, r5
 80039f6:	e7d6      	b.n	80039a6 <strncpy+0x12>
 80039f8:	4604      	mov	r4, r0
 80039fa:	e7d4      	b.n	80039a6 <strncpy+0x12>

080039fc <__strtok_r>:
 80039fc:	b4f0      	push	{r4, r5, r6, r7}
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d024      	beq.n	8003a4c <__strtok_r+0x50>
 8003a02:	4607      	mov	r7, r0
 8003a04:	7806      	ldrb	r6, [r0, #0]
 8003a06:	460d      	mov	r5, r1
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a0e:	b13c      	cbz	r4, 8003a20 <__strtok_r+0x24>
 8003a10:	42a6      	cmp	r6, r4
 8003a12:	d1fa      	bne.n	8003a0a <__strtok_r+0xe>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f4      	bne.n	8003a02 <__strtok_r+0x6>
 8003a18:	6010      	str	r0, [r2, #0]
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	703b      	strb	r3, [r7, #0]
 8003a1e:	e011      	b.n	8003a44 <__strtok_r+0x48>
 8003a20:	b90e      	cbnz	r6, 8003a26 <__strtok_r+0x2a>
 8003a22:	e017      	b.n	8003a54 <__strtok_r+0x58>
 8003a24:	b923      	cbnz	r3, 8003a30 <__strtok_r+0x34>
 8003a26:	4606      	mov	r6, r0
 8003a28:	7805      	ldrb	r5, [r0, #0]
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	4684      	mov	ip, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a34:	429d      	cmp	r5, r3
 8003a36:	d1f5      	bne.n	8003a24 <__strtok_r+0x28>
 8003a38:	b135      	cbz	r5, 8003a48 <__strtok_r+0x4c>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	7033      	strb	r3, [r6, #0]
 8003a3e:	f8c2 c000 	str.w	ip, [r2]
 8003a42:	4638      	mov	r0, r7
 8003a44:	bcf0      	pop	{r4, r5, r6, r7}
 8003a46:	4770      	bx	lr
 8003a48:	46ac      	mov	ip, r5
 8003a4a:	e7f8      	b.n	8003a3e <__strtok_r+0x42>
 8003a4c:	6810      	ldr	r0, [r2, #0]
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d1d7      	bne.n	8003a02 <__strtok_r+0x6>
 8003a52:	e7f7      	b.n	8003a44 <__strtok_r+0x48>
 8003a54:	6016      	str	r6, [r2, #0]
 8003a56:	4630      	mov	r0, r6
 8003a58:	e7f4      	b.n	8003a44 <__strtok_r+0x48>
 8003a5a:	bf00      	nop

08003a5c <strtok_r>:
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e7cd      	b.n	80039fc <__strtok_r>

08003a60 <__register_exitproc>:
 8003a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a64:	4605      	mov	r5, r0
 8003a66:	4826      	ldr	r0, [pc, #152]	; (8003b00 <__register_exitproc+0xa0>)
 8003a68:	b084      	sub	sp, #16
 8003a6a:	6804      	ldr	r4, [r0, #0]
 8003a6c:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d040      	beq.n	8003af6 <__register_exitproc+0x96>
 8003a74:	6846      	ldr	r6, [r0, #4]
 8003a76:	2e1f      	cmp	r6, #31
 8003a78:	dd1c      	ble.n	8003ab4 <__register_exitproc+0x54>
 8003a7a:	4822      	ldr	r0, [pc, #136]	; (8003b04 <__register_exitproc+0xa4>)
 8003a7c:	b910      	cbnz	r0, 8003a84 <__register_exitproc+0x24>
 8003a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a82:	e01e      	b.n	8003ac2 <__register_exitproc+0x62>
 8003a84:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003a88:	9103      	str	r1, [sp, #12]
 8003a8a:	9202      	str	r2, [sp, #8]
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	f7ff fb1f 	bl	80030d0 <malloc>
 8003a92:	9903      	ldr	r1, [sp, #12]
 8003a94:	9a02      	ldr	r2, [sp, #8]
 8003a96:	9b01      	ldr	r3, [sp, #4]
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d0f0      	beq.n	8003a7e <__register_exitproc+0x1e>
 8003a9c:	f8d4 6148 	ldr.w	r6, [r4, #328]	; 0x148
 8003aa0:	2700      	movs	r7, #0
 8003aa2:	e880 00c0 	stmia.w	r0, {r6, r7}
 8003aa6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 8003aaa:	463e      	mov	r6, r7
 8003aac:	f8c0 7188 	str.w	r7, [r0, #392]	; 0x188
 8003ab0:	f8c0 718c 	str.w	r7, [r0, #396]	; 0x18c
 8003ab4:	b945      	cbnz	r5, 8003ac8 <__register_exitproc+0x68>
 8003ab6:	1cb3      	adds	r3, r6, #2
 8003ab8:	3601      	adds	r6, #1
 8003aba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8003abe:	6046      	str	r6, [r0, #4]
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	b004      	add	sp, #16
 8003ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac8:	2401      	movs	r4, #1
 8003aca:	40b4      	lsls	r4, r6
 8003acc:	f8d0 7188 	ldr.w	r7, [r0, #392]	; 0x188
 8003ad0:	eb00 0886 	add.w	r8, r0, r6, lsl #2
 8003ad4:	ea47 0c04 	orr.w	ip, r7, r4
 8003ad8:	2d02      	cmp	r5, #2
 8003ada:	4647      	mov	r7, r8
 8003adc:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 8003ae0:	f8c0 c188 	str.w	ip, [r0, #392]	; 0x188
 8003ae4:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 8003ae8:	d1e5      	bne.n	8003ab6 <__register_exitproc+0x56>
 8003aea:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
 8003aee:	431c      	orrs	r4, r3
 8003af0:	f8c0 418c 	str.w	r4, [r0, #396]	; 0x18c
 8003af4:	e7df      	b.n	8003ab6 <__register_exitproc+0x56>
 8003af6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8003afa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 8003afe:	e7b9      	b.n	8003a74 <__register_exitproc+0x14>
 8003b00:	0800409c 	.word	0x0800409c
 8003b04:	080030d1 	.word	0x080030d1

08003b08 <register_fini>:
 8003b08:	4b02      	ldr	r3, [pc, #8]	; (8003b14 <register_fini+0xc>)
 8003b0a:	b113      	cbz	r3, 8003b12 <register_fini+0xa>
 8003b0c:	4802      	ldr	r0, [pc, #8]	; (8003b18 <register_fini+0x10>)
 8003b0e:	f7ff ba95 	b.w	800303c <atexit>
 8003b12:	4770      	bx	lr
 8003b14:	00000000 	.word	0x00000000
 8003b18:	0800305d 	.word	0x0800305d

08003b1c <_malloc_trim_r>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	4d24      	ldr	r5, [pc, #144]	; (8003bb0 <_malloc_trim_r+0x94>)
 8003b20:	4604      	mov	r4, r0
 8003b22:	460f      	mov	r7, r1
 8003b24:	f7ff fe00 	bl	8003728 <__malloc_lock>
 8003b28:	68ab      	ldr	r3, [r5, #8]
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	685e      	ldr	r6, [r3, #4]
 8003b2e:	f026 0603 	bic.w	r6, r6, #3
 8003b32:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 8003b36:	330f      	adds	r3, #15
 8003b38:	1bdf      	subs	r7, r3, r7
 8003b3a:	0b3f      	lsrs	r7, r7, #12
 8003b3c:	3f01      	subs	r7, #1
 8003b3e:	033f      	lsls	r7, r7, #12
 8003b40:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8003b44:	db1c      	blt.n	8003b80 <_malloc_trim_r+0x64>
 8003b46:	2100      	movs	r1, #0
 8003b48:	f7fc fca8 	bl	800049c <_sbrk_r>
 8003b4c:	68ab      	ldr	r3, [r5, #8]
 8003b4e:	199b      	adds	r3, r3, r6
 8003b50:	4298      	cmp	r0, r3
 8003b52:	d019      	beq.n	8003b88 <_malloc_trim_r+0x6c>
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff fde9 	bl	800372c <__malloc_unlock>
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7fc fc9b 	bl	800049c <_sbrk_r>
 8003b66:	68ab      	ldr	r3, [r5, #8]
 8003b68:	1ac2      	subs	r2, r0, r3
 8003b6a:	2a0f      	cmp	r2, #15
 8003b6c:	dd07      	ble.n	8003b7e <_malloc_trim_r+0x62>
 8003b6e:	4911      	ldr	r1, [pc, #68]	; (8003bb4 <_malloc_trim_r+0x98>)
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	6809      	ldr	r1, [r1, #0]
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	1a40      	subs	r0, r0, r1
 8003b7a:	490f      	ldr	r1, [pc, #60]	; (8003bb8 <_malloc_trim_r+0x9c>)
 8003b7c:	6008      	str	r0, [r1, #0]
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f7ff fdd4 	bl	800372c <__malloc_unlock>
 8003b84:	2000      	movs	r0, #0
 8003b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b88:	4279      	negs	r1, r7
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7fc fc86 	bl	800049c <_sbrk_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d0e4      	beq.n	8003b5e <_malloc_trim_r+0x42>
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <_malloc_trim_r+0x9c>)
 8003b96:	68aa      	ldr	r2, [r5, #8]
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	1bf6      	subs	r6, r6, r7
 8003b9c:	f046 0601 	orr.w	r6, r6, #1
 8003ba0:	1bcf      	subs	r7, r1, r7
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	6056      	str	r6, [r2, #4]
 8003ba6:	601f      	str	r7, [r3, #0]
 8003ba8:	f7ff fdc0 	bl	800372c <__malloc_unlock>
 8003bac:	2001      	movs	r0, #1
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	20000448 	.word	0x20000448
 8003bb4:	20000850 	.word	0x20000850
 8003bb8:	20000ed0 	.word	0x20000ed0

08003bbc <_free_r>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	460d      	mov	r5, r1
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d058      	beq.n	8003c7a <_free_r+0xbe>
 8003bc8:	f7ff fdae 	bl	8003728 <__malloc_lock>
 8003bcc:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003bd0:	4e59      	ldr	r6, [pc, #356]	; (8003d38 <_free_r+0x17c>)
 8003bd2:	f1a5 0108 	sub.w	r1, r5, #8
 8003bd6:	f020 0301 	bic.w	r3, r0, #1
 8003bda:	18ca      	adds	r2, r1, r3
 8003bdc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8003be0:	6857      	ldr	r7, [r2, #4]
 8003be2:	4594      	cmp	ip, r2
 8003be4:	f027 0703 	bic.w	r7, r7, #3
 8003be8:	d064      	beq.n	8003cb4 <_free_r+0xf8>
 8003bea:	f010 0001 	ands.w	r0, r0, #1
 8003bee:	6057      	str	r7, [r2, #4]
 8003bf0:	d032      	beq.n	8003c58 <_free_r+0x9c>
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	19d5      	adds	r5, r2, r7
 8003bf6:	686d      	ldr	r5, [r5, #4]
 8003bf8:	f015 0f01 	tst.w	r5, #1
 8003bfc:	d106      	bne.n	8003c0c <_free_r+0x50>
 8003bfe:	19db      	adds	r3, r3, r7
 8003c00:	6895      	ldr	r5, [r2, #8]
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d04a      	beq.n	8003c9c <_free_r+0xe0>
 8003c06:	68d2      	ldr	r2, [r2, #12]
 8003c08:	60ea      	str	r2, [r5, #12]
 8003c0a:	6095      	str	r5, [r2, #8]
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	604a      	str	r2, [r1, #4]
 8003c12:	50cb      	str	r3, [r1, r3]
 8003c14:	b9d8      	cbnz	r0, 8003c4e <_free_r+0x92>
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1a:	d330      	bcc.n	8003c7e <_free_r+0xc2>
 8003c1c:	0a5a      	lsrs	r2, r3, #9
 8003c1e:	2a04      	cmp	r2, #4
 8003c20:	d863      	bhi.n	8003cea <_free_r+0x12e>
 8003c22:	099d      	lsrs	r5, r3, #6
 8003c24:	3538      	adds	r5, #56	; 0x38
 8003c26:	00e8      	lsls	r0, r5, #3
 8003c28:	1986      	adds	r6, r0, r6
 8003c2a:	68b2      	ldr	r2, [r6, #8]
 8003c2c:	4842      	ldr	r0, [pc, #264]	; (8003d38 <_free_r+0x17c>)
 8003c2e:	42b2      	cmp	r2, r6
 8003c30:	d103      	bne.n	8003c3a <_free_r+0x7e>
 8003c32:	e060      	b.n	8003cf6 <_free_r+0x13a>
 8003c34:	6892      	ldr	r2, [r2, #8]
 8003c36:	4296      	cmp	r6, r2
 8003c38:	d004      	beq.n	8003c44 <_free_r+0x88>
 8003c3a:	6850      	ldr	r0, [r2, #4]
 8003c3c:	f020 0003 	bic.w	r0, r0, #3
 8003c40:	4283      	cmp	r3, r0
 8003c42:	d3f7      	bcc.n	8003c34 <_free_r+0x78>
 8003c44:	68d3      	ldr	r3, [r2, #12]
 8003c46:	60cb      	str	r3, [r1, #12]
 8003c48:	608a      	str	r2, [r1, #8]
 8003c4a:	60d1      	str	r1, [r2, #12]
 8003c4c:	6099      	str	r1, [r3, #8]
 8003c4e:	4620      	mov	r0, r4
 8003c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	f7ff bd6a 	b.w	800372c <__malloc_unlock>
 8003c58:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8003c5c:	f106 0808 	add.w	r8, r6, #8
 8003c60:	ebcc 0101 	rsb	r1, ip, r1
 8003c64:	688d      	ldr	r5, [r1, #8]
 8003c66:	4463      	add	r3, ip
 8003c68:	4545      	cmp	r5, r8
 8003c6a:	d03c      	beq.n	8003ce6 <_free_r+0x12a>
 8003c6c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003c70:	f8c5 c00c 	str.w	ip, [r5, #12]
 8003c74:	f8cc 5008 	str.w	r5, [ip, #8]
 8003c78:	e7bc      	b.n	8003bf4 <_free_r+0x38>
 8003c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	109a      	asrs	r2, r3, #2
 8003c82:	2001      	movs	r0, #1
 8003c84:	4090      	lsls	r0, r2
 8003c86:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8003c8a:	6875      	ldr	r5, [r6, #4]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	4328      	orrs	r0, r5
 8003c90:	60cb      	str	r3, [r1, #12]
 8003c92:	608a      	str	r2, [r1, #8]
 8003c94:	6070      	str	r0, [r6, #4]
 8003c96:	6099      	str	r1, [r3, #8]
 8003c98:	60d1      	str	r1, [r2, #12]
 8003c9a:	e7d8      	b.n	8003c4e <_free_r+0x92>
 8003c9c:	4f27      	ldr	r7, [pc, #156]	; (8003d3c <_free_r+0x180>)
 8003c9e:	42bd      	cmp	r5, r7
 8003ca0:	d1b1      	bne.n	8003c06 <_free_r+0x4a>
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	6171      	str	r1, [r6, #20]
 8003ca8:	6131      	str	r1, [r6, #16]
 8003caa:	60cd      	str	r5, [r1, #12]
 8003cac:	608d      	str	r5, [r1, #8]
 8003cae:	604a      	str	r2, [r1, #4]
 8003cb0:	50cb      	str	r3, [r1, r3]
 8003cb2:	e7cc      	b.n	8003c4e <_free_r+0x92>
 8003cb4:	07c2      	lsls	r2, r0, #31
 8003cb6:	443b      	add	r3, r7
 8003cb8:	d407      	bmi.n	8003cca <_free_r+0x10e>
 8003cba:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8003cbe:	1b49      	subs	r1, r1, r5
 8003cc0:	68ca      	ldr	r2, [r1, #12]
 8003cc2:	6888      	ldr	r0, [r1, #8]
 8003cc4:	195b      	adds	r3, r3, r5
 8003cc6:	60c2      	str	r2, [r0, #12]
 8003cc8:	6090      	str	r0, [r2, #8]
 8003cca:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <_free_r+0x184>)
 8003ccc:	f043 0001 	orr.w	r0, r3, #1
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	6048      	str	r0, [r1, #4]
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	60b1      	str	r1, [r6, #8]
 8003cd8:	d3b9      	bcc.n	8003c4e <_free_r+0x92>
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <_free_r+0x188>)
 8003cdc:	4620      	mov	r0, r4
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	f7ff ff1c 	bl	8003b1c <_malloc_trim_r>
 8003ce4:	e7b3      	b.n	8003c4e <_free_r+0x92>
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	e784      	b.n	8003bf4 <_free_r+0x38>
 8003cea:	2a14      	cmp	r2, #20
 8003cec:	d80b      	bhi.n	8003d06 <_free_r+0x14a>
 8003cee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8003cf2:	00e8      	lsls	r0, r5, #3
 8003cf4:	e798      	b.n	8003c28 <_free_r+0x6c>
 8003cf6:	10ad      	asrs	r5, r5, #2
 8003cf8:	2601      	movs	r6, #1
 8003cfa:	40ae      	lsls	r6, r5
 8003cfc:	6845      	ldr	r5, [r0, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	4335      	orrs	r5, r6
 8003d02:	6045      	str	r5, [r0, #4]
 8003d04:	e79f      	b.n	8003c46 <_free_r+0x8a>
 8003d06:	2a54      	cmp	r2, #84	; 0x54
 8003d08:	d803      	bhi.n	8003d12 <_free_r+0x156>
 8003d0a:	0b1d      	lsrs	r5, r3, #12
 8003d0c:	356e      	adds	r5, #110	; 0x6e
 8003d0e:	00e8      	lsls	r0, r5, #3
 8003d10:	e78a      	b.n	8003c28 <_free_r+0x6c>
 8003d12:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003d16:	d803      	bhi.n	8003d20 <_free_r+0x164>
 8003d18:	0bdd      	lsrs	r5, r3, #15
 8003d1a:	3577      	adds	r5, #119	; 0x77
 8003d1c:	00e8      	lsls	r0, r5, #3
 8003d1e:	e783      	b.n	8003c28 <_free_r+0x6c>
 8003d20:	f240 5054 	movw	r0, #1364	; 0x554
 8003d24:	4282      	cmp	r2, r0
 8003d26:	d803      	bhi.n	8003d30 <_free_r+0x174>
 8003d28:	0c9d      	lsrs	r5, r3, #18
 8003d2a:	357c      	adds	r5, #124	; 0x7c
 8003d2c:	00e8      	lsls	r0, r5, #3
 8003d2e:	e77b      	b.n	8003c28 <_free_r+0x6c>
 8003d30:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8003d34:	257e      	movs	r5, #126	; 0x7e
 8003d36:	e777      	b.n	8003c28 <_free_r+0x6c>
 8003d38:	20000448 	.word	0x20000448
 8003d3c:	20000450 	.word	0x20000450
 8003d40:	20000854 	.word	0x20000854
 8003d44:	20000ecc 	.word	0x20000ecc
 8003d48:	6c756e28 	.word	0x6c756e28
 8003d4c:	296c      	.short	0x296c
 8003d4e:	00          	.byte	0x00
 8003d4f:	25          	.byte	0x25
 8003d50:	09732a2d 	.word	0x09732a2d
 8003d54:	20202030 	.word	0x20202030
 8003d58:	20202020 	.word	0x20202020
 8003d5c:	09202020 	.word	0x09202020
 8003d60:	0d252530 	.word	0x0d252530
 8003d64:	2d25000a 	.word	0x2d25000a
 8003d68:	2509732a 	.word	0x2509732a
 8003d6c:	7531312d 	.word	0x7531312d
 8003d70:	25752509 	.word	0x25752509
 8003d74:	000a0d25 	.word	0x000a0d25
 8003d78:	732a2d25 	.word	0x732a2d25
 8003d7c:	312d2509 	.word	0x312d2509
 8003d80:	3c097531 	.word	0x3c097531
 8003d84:	0d252531 	.word	0x0d252531
 8003d88:	2d25000a 	.word	0x2d25000a
 8003d8c:	2509732a 	.word	0x2509732a
 8003d90:	0963372d 	.word	0x0963372d
 8003d94:	75372d25 	.word	0x75372d25
 8003d98:	372d2509 	.word	0x372d2509
 8003d9c:	75250975 	.word	0x75250975
 8003da0:	49000a0d 	.word	0x49000a0d
 8003da4:	00454c44 	.word	0x00454c44
 8003da8:	2c2b2a22 	.word	0x2c2b2a22
 8003dac:	3d3c3b3a 	.word	0x3d3c3b3a
 8003db0:	5d5b3f3e 	.word	0x5d5b3f3e
 8003db4:	7f7c      	.short	0x7f7c
	...

08003db7 <_runtimestatsHandler(char const**, unsigned long, char*, unsigned int)::header>:
 8003db7:	6154 6b73 0909 6241 2073 6954 656d 2509     Task..Abs Time.%
 8003dc7:	5420 6d69 0d65 2d0a 2d2d 2d2d 2d2d 2d2d      Time..---------
 8003dd7:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 8003de7:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d 0000     -------------...
	...

08003df8 <_dirCommandDefinition>:
 8003df8:	3e6a 0800 0001 0000 2155 0800 3e6e 0800     j>......U!..n>..
 8003e08:	002f 7341 6573 7472 6f69 206e 2522 2273     /.Assertion "%s"
 8003e18:	6620 6961 656c 2064 7461 6c20 6e69 2065      failed at line 
 8003e28:	6425 6920 206e 7325 000a 5f66 6f6d 6e75     %d in %s..f_moun
 8003e38:	2874 0029 616d 6e69 632e 7070 6800 6165     t().main.cpp.hea
 8003e48:	7472 6562 7461 5f00 6e69 7469 6169 696c     rtbeat._initiali
 8003e58:	657a 6548 7261 6274 6165 5474 7361 286b     zeHeartbeatTask(
 8003e68:	0029 6964 0072 6964 3a72 7020 6972 746e     ).dir.dir: print
 8003e78:	2073 6f63 746e 6e65 7374 6f20 2066 6573     s contents of se
 8003e88:	656c 7463 6465 6420 7269 6365 6f74 7972     lected directory
 8003e98:	6f20 206e 4453 6320 7261 0d64 090a 7509      on SD card....u
 8003ea8:	6173 6567 203a 6964 2072 705b 7461 5d68     sage: dir [path]
 8003eb8:	0a0d 7200 6e75 6974 656d 7473 7461 0073     ...runtimestats.
 8003ec8:	7572 746e 6d69 7365 6174 7374 203a 696c     runtimestats: li
 8003ed8:	7473 2073 6c61 206c 6174 6b73 2073 6977     sts all tasks wi
 8003ee8:	6874 7420 6568 7269 7220 6e75 6974 656d     th their runtime
 8003ef8:	7320 6174 7374 0a0d 7400 7361 6c6b 7369      stats...tasklis
 8003f08:	0074 6174 6b73 696c 7473 203a 696c 7473     t.tasklist: list
 8003f18:	2073 6c61 206c 6174 6b73 2073 6977 6874     s all tasks with
 8003f28:	7420 6568 7269 6920 666e 0d6f 000a           their info...

08003f36 <_tasklistHandler(char const**, unsigned long, char*, unsigned int)::header>:
 8003f36:	6154 6b73 0909 7453 7461 0965 7250 2e69     Task..State.Pri.
 8003f46:	5309 6174 6b63 2309 0d23 2d0a 2d2d 2d2d     .Stack.##..-----
 8003f56:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 8003f66:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 8003f76:	2d2d 2d2d 002d                              -----.

08003f7c <_tasklistCommandDefinition>:
 8003f7c:	3f01 0800 0000 0000 20ad 0800 3f0a 0800     .?....... ...?..

08003f8c <_runtimestatsCommandDefinition>:
 8003f8c:	3ebb 0800 0000 0000 2101 0800 3ec8 0800     .>.......!...>..
 8003f9c:	ffff 0000                                   ....

08003fa0 <._100>:
 8003fa0:	3fd4 0800 0920 0a0d 6800 6c65 0070 6568     .?.. ....help.he
 8003fb0:	706c 203a 696c 7473 2073 6c61 206c 7661     lp: lists all av
 8003fc0:	6961 616c 6c62 2065 6f63 6d6d 6e61 7364     ailable commands
 8003fd0:	0a0d 0000                                   ....

08003fd4 <_helpCommandDefinition>:
 8003fd4:	3fa9 0800 0000 0000 27b9 0800 3fae 0800     .?.......'...?..

08003fe4 <rccStartPll(rccPllInput, unsigned long, unsigned long)::muls>:
 8003fe4:	0403 0806 100c 2018 5530 4153 5452 5420     ....... 0USART T
 8003ff4:	0058 5355 5241 2054 5852 4500 5252 524f     X.USART RX.ERROR
 8004004:	203a 6e69 7570 2074 7369 6c20 6e6f 6567     : input is longe
 8004014:	2072 6874 6e61 6220 6675 6566 2072 656c     r than buffer le
 8004024:	676e 6874 2021 7028 7265 7069 6568 6172     ngth! (periphera
 8004034:	736c 752f 6173 7472 632e 7070 323a 3137     ls/usart.cpp:271
 8004044:	0d29 000a 5245 4f52 3a52 6320 6d6f 616d     )...ERROR: comma
 8004054:	646e 6820 6e61 6c64 7265 6520 6578 7563     nd handler execu
 8004064:	6974 6e6f 6620 6961 656c 2064 6977 6874     tion failed with
 8004074:	6320 646f 2065 6425 2021 7028 7265 7069      code %d! (perip
 8004084:	6568 6172 736c 752f 6173 7472 632e 7070     herals/usart.cpp
 8004094:	323a 3838 0d29 000a                         :288)...

0800409c <_global_impure_ptr>:
 800409c:	0020 2000 0043 0000                          .. C...

080040a4 <__data_array_start>:
 80040a4:	080040f0 	.word	0x080040f0
 80040a8:	20000000 	.word	0x20000000
 80040ac:	20000858 	.word	0x20000858

080040b0 <__bss_array_start>:
 80040b0:	20000858 	.word	0x20000858
 80040b4:	20000f04 	.word	0x20000f04

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <__init_array_start>:
 80040c4:	08003b09 	.word	0x08003b09

080040c8 <__frame_dummy_init_array_entry>:
 80040c8:	08000119 080022f5 080028f9              ....."...(..

080040d4 <_fini>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr

080040e0 <__fini_array_start>:
 80040e0:	080000f5 	.word	0x080000f5
