
out/mg-stm32l_acquisition_supervisor.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__text_start>:
 8000000:	200015b0 	.word	0x200015b0
 8000004:	08000149 	.word	0x08000149
 8000008:	08000e61 	.word	0x08000e61
 800000c:	08000e61 	.word	0x08000e61
 8000010:	08000e61 	.word	0x08000e61
 8000014:	08000e61 	.word	0x08000e61
 8000018:	08000e61 	.word	0x08000e61
 800001c:	08000e61 	.word	0x08000e61
 8000020:	08000e61 	.word	0x08000e61
 8000024:	08000e61 	.word	0x08000e61
 8000028:	08000e61 	.word	0x08000e61
 800002c:	080007e1 	.word	0x080007e1
 8000030:	08000e61 	.word	0x08000e61
 8000034:	08000e61 	.word	0x08000e61
 8000038:	08000869 	.word	0x08000869
 800003c:	080008a5 	.word	0x080008a5
 8000040:	08000e61 	.word	0x08000e61
 8000044:	08000e61 	.word	0x08000e61
 8000048:	08000e61 	.word	0x08000e61
 800004c:	08000e61 	.word	0x08000e61
 8000050:	08000e61 	.word	0x08000e61
 8000054:	08000e61 	.word	0x08000e61
 8000058:	080021bd 	.word	0x080021bd
 800005c:	08000e61 	.word	0x08000e61
 8000060:	08000e61 	.word	0x08000e61
 8000064:	08000e61 	.word	0x08000e61
 8000068:	08000e61 	.word	0x08000e61
 800006c:	08000e61 	.word	0x08000e61
 8000070:	08000e61 	.word	0x08000e61
 8000074:	08000e61 	.word	0x08000e61
 8000078:	08001fb1 	.word	0x08001fb1
 800007c:	08000e61 	.word	0x08000e61
 8000080:	08000e61 	.word	0x08000e61
 8000084:	08000e61 	.word	0x08000e61
 8000088:	08000e61 	.word	0x08000e61
 800008c:	08000e61 	.word	0x08000e61
 8000090:	08000e61 	.word	0x08000e61
 8000094:	08000e61 	.word	0x08000e61
 8000098:	08000e61 	.word	0x08000e61
 800009c:	08000e61 	.word	0x08000e61
 80000a0:	08000e61 	.word	0x08000e61
 80000a4:	08000e61 	.word	0x08000e61
 80000a8:	08000e61 	.word	0x08000e61
 80000ac:	08000e61 	.word	0x08000e61
 80000b0:	08000e61 	.word	0x08000e61
 80000b4:	08000e61 	.word	0x08000e61
 80000b8:	08000e61 	.word	0x08000e61
 80000bc:	08000e61 	.word	0x08000e61
 80000c0:	08000e61 	.word	0x08000e61
 80000c4:	08000e61 	.word	0x08000e61
 80000c8:	08000e61 	.word	0x08000e61
 80000cc:	08000e61 	.word	0x08000e61
 80000d0:	08000e61 	.word	0x08000e61
 80000d4:	08001ff5 	.word	0x08001ff5
 80000d8:	08000e61 	.word	0x08000e61
 80000dc:	08000e61 	.word	0x08000e61
 80000e0:	08000e61 	.word	0x08000e61
 80000e4:	08000e61 	.word	0x08000e61
 80000e8:	08000e61 	.word	0x08000e61
 80000ec:	08001675 	.word	0x08001675
 80000f0:	08000e61 	.word	0x08000e61

080000f4 <__do_global_dtors_aux>:
 80000f4:	b510      	push	{r4, lr}
 80000f6:	4c05      	ldr	r4, [pc, #20]	; (800010c <__do_global_dtors_aux+0x18>)
 80000f8:	7823      	ldrb	r3, [r4, #0]
 80000fa:	b933      	cbnz	r3, 800010a <__do_global_dtors_aux+0x16>
 80000fc:	4b04      	ldr	r3, [pc, #16]	; (8000110 <__do_global_dtors_aux+0x1c>)
 80000fe:	b113      	cbz	r3, 8000106 <__do_global_dtors_aux+0x12>
 8000100:	4804      	ldr	r0, [pc, #16]	; (8000114 <__do_global_dtors_aux+0x20>)
 8000102:	f3af 8000 	nop.w
 8000106:	2301      	movs	r3, #1
 8000108:	7023      	strb	r3, [r4, #0]
 800010a:	bd10      	pop	{r4, pc}
 800010c:	20000860 	.word	0x20000860
 8000110:	00000000 	.word	0x00000000
 8000114:	0800dd34 	.word	0x0800dd34

08000118 <frame_dummy>:
 8000118:	b508      	push	{r3, lr}
 800011a:	4b06      	ldr	r3, [pc, #24]	; (8000134 <frame_dummy+0x1c>)
 800011c:	b11b      	cbz	r3, 8000126 <frame_dummy+0xe>
 800011e:	4806      	ldr	r0, [pc, #24]	; (8000138 <frame_dummy+0x20>)
 8000120:	4906      	ldr	r1, [pc, #24]	; (800013c <frame_dummy+0x24>)
 8000122:	f3af 8000 	nop.w
 8000126:	4806      	ldr	r0, [pc, #24]	; (8000140 <frame_dummy+0x28>)
 8000128:	6803      	ldr	r3, [r0, #0]
 800012a:	b113      	cbz	r3, 8000132 <frame_dummy+0x1a>
 800012c:	4b05      	ldr	r3, [pc, #20]	; (8000144 <frame_dummy+0x2c>)
 800012e:	b103      	cbz	r3, 8000132 <frame_dummy+0x1a>
 8000130:	4798      	blx	r3
 8000132:	bd08      	pop	{r3, pc}
 8000134:	00000000 	.word	0x00000000
 8000138:	0800dd34 	.word	0x0800dd34
 800013c:	20000864 	.word	0x20000864
 8000140:	2000085c 	.word	0x2000085c
 8000144:	00000000 	.word	0x00000000

08000148 <Reset_Handler>:

Reset_Handler:

// Initialize the process stack pointer

	ldr		r0, =__process_stack_end
 8000148:	481b      	ldr	r0, [pc, #108]	; (80001b8 <__default_low_level_init+0x4>)
	msr		PSP, r0
 800014a:	f380 8809 	msr	PSP, r0

// Thread mode uses process stack (PSP) and is privileged

	movs	r0, #CONTROL_ALTERNATE_STACK
 800014e:	2002      	movs	r0, #2
	msr		CONTROL, r0
 8000150:	f380 8814 	msr	CONTROL, r0
	isb
 8000154:	f3bf 8f6f 	isb	sy

// Branch to low_level_init_0() function (.data and .bss are not initialized!)

	ldr		r0, =low_level_init_0
 8000158:	4818      	ldr	r0, [pc, #96]	; (80001bc <__default_low_level_init+0x8>)
	blx		r0
 800015a:	4780      	blx	r0

// Initialize sections from data_array (including .data)

	ldr		r4, =__data_array_start
 800015c:	4c18      	ldr	r4, [pc, #96]	; (80001c0 <__default_low_level_init+0xc>)
	ldr		r5, =__data_array_end
 800015e:	4d19      	ldr	r5, [pc, #100]	; (80001c4 <__default_low_level_init+0x10>)

1:	cmp		r4, r5							// outer loop - addresses from data_array
 8000160:	42ac      	cmp	r4, r5
	ittte	lo
 8000162:	bf3d      	ittte	cc
	ldrlo	r1, [r4], #4					// start of source address
 8000164:	f854 1b04 	ldrcc.w	r1, [r4], #4
	ldrlo	r2, [r4], #4					// start of destination address
 8000168:	f854 2b04 	ldrcc.w	r2, [r4], #4
	ldrlo	r3, [r4], #4					// end of destination address
 800016c:	f854 3b04 	ldrcc.w	r3, [r4], #4
	bhs		3f
 8000170:	e007      	bcs.n	8000182 <Reset_Handler+0x3a>

2:	cmp		r2, r3							// inner loop - section initialization
 8000172:	429a      	cmp	r2, r3
	ittt	lo
 8000174:	bf3e      	ittt	cc
	ldrlo	r0, [r1], #4
 8000176:	f851 0b04 	ldrcc.w	r0, [r1], #4
	strlo	r0, [r2], #4
 800017a:	f842 0b04 	strcc.w	r0, [r2], #4
	blo		2b
 800017e:	e7f8      	bcc.n	8000172 <Reset_Handler+0x2a>

	b		1b								// go back to start
 8000180:	e7ee      	b.n	8000160 <Reset_Handler+0x18>

3:

// Zero-init sections from bss_array (including .bss)

	movs	r0, #0
 8000182:	2000      	movs	r0, #0
	ldr		r3, =__bss_array_start
 8000184:	4b10      	ldr	r3, [pc, #64]	; (80001c8 <__default_low_level_init+0x14>)
	ldr		r4, =__bss_array_end
 8000186:	4c11      	ldr	r4, [pc, #68]	; (80001cc <__default_low_level_init+0x18>)

1:	cmp		r3, r4							// outer loop - addresses from data_array
 8000188:	42a3      	cmp	r3, r4
	itte	lo
 800018a:	bf3a      	itte	cc
	ldrlo	r1, [r3], #4					// start of destination address
 800018c:	f853 1b04 	ldrcc.w	r1, [r3], #4
	ldrlo	r2, [r3], #4					// end of destination address
 8000190:	f853 2b04 	ldrcc.w	r2, [r3], #4
	bhs		3f
 8000194:	e005      	bcs.n	80001a2 <Reset_Handler+0x5a>

2:	cmp		r1, r2							// inner loop - section initialization
 8000196:	4291      	cmp	r1, r2
	itt		lo
 8000198:	bf3c      	itt	cc
	strlo	r0, [r1], #4
 800019a:	f841 0b04 	strcc.w	r0, [r1], #4
	blo		2b
 800019e:	e7fa      	bcc.n	8000196 <Reset_Handler+0x4e>

	b		1b								// go back to start
 80001a0:	e7f2      	b.n	8000188 <Reset_Handler+0x40>
3:

// Call C++ constructors for global and static objects

#ifdef __USES_CXX
	ldr		r0, =__libc_init_array
 80001a2:	480b      	ldr	r0, [pc, #44]	; (80001d0 <__default_low_level_init+0x1c>)
	blx		r0
 80001a4:	4780      	blx	r0
#endif

// Branch to low_level_init_1() function

	ldr		r0, =low_level_init_1
 80001a6:	480b      	ldr	r0, [pc, #44]	; (80001d4 <__default_low_level_init+0x20>)
	blx		r0
 80001a8:	4780      	blx	r0

// Branch to main() with link

	ldr		r0, =main
 80001aa:	480b      	ldr	r0, [pc, #44]	; (80001d8 <__default_low_level_init+0x24>)
	blx		r0
 80001ac:	4780      	blx	r0

// Call C++ destructors for global and static objects

#ifdef __USES_CXX
	ldr		r0, =__libc_fini_array
 80001ae:	480b      	ldr	r0, [pc, #44]	; (80001dc <__default_low_level_init+0x28>)
	blx		r0
 80001b0:	4780      	blx	r0
#endif

// On return - loop till the end of the world

	b		.
 80001b2:	e7fe      	b.n	80001b2 <Reset_Handler+0x6a>

080001b4 <__default_low_level_init>:
.thumb
.thumb_func
.global __default_low_level_init

__default_low_level_init:
	bx		lr
 80001b4:	4770      	bx	lr
 80001b6:	0000      	.short	0x0000

Reset_Handler:

// Initialize the process stack pointer

	ldr		r0, =__process_stack_end
 80001b8:	200019b0 	.word	0x200019b0
	msr		CONTROL, r0
	isb

// Branch to low_level_init_0() function (.data and .bss are not initialized!)

	ldr		r0, =low_level_init_0
 80001bc:	080001b5 	.word	0x080001b5
	blx		r0

// Initialize sections from data_array (including .data)

	ldr		r4, =__data_array_start
 80001c0:	0800dd34 	.word	0x0800dd34
	ldr		r5, =__data_array_end
 80001c4:	0800dd40 	.word	0x0800dd40
3:

// Zero-init sections from bss_array (including .bss)

	movs	r0, #0
	ldr		r3, =__bss_array_start
 80001c8:	0800dd40 	.word	0x0800dd40
	ldr		r4, =__bss_array_end
 80001cc:	0800dd48 	.word	0x0800dd48
3:

// Call C++ constructors for global and static objects

#ifdef __USES_CXX
	ldr		r0, =__libc_init_array
 80001d0:	0800a1fd 	.word	0x0800a1fd
	blx		r0
#endif

// Branch to low_level_init_1() function

	ldr		r0, =low_level_init_1
 80001d4:	080001b5 	.word	0x080001b5
	blx		r0

// Branch to main() with link

	ldr		r0, =main
 80001d8:	080020bd 	.word	0x080020bd
	blx		r0

// Call C++ destructors for global and static objects

#ifdef __USES_CXX
	ldr		r0, =__libc_fini_array
 80001dc:	08009da9 	.word	0x08009da9

080001e0 <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	1c5a      	adds	r2, r3, #1
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	601a      	str	r2, [r3, #0]
}
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <vListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	6892      	ldr	r2, [r2, #8]
 8000240:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	6852      	ldr	r2, [r2, #4]
 800024a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	685a      	ldr	r2, [r3, #4]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	429a      	cmp	r2, r3
 800025a:	d103      	bne.n	8000264 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	689a      	ldr	r2, [r3, #8]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	1e5a      	subs	r2, r3, #1
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	601a      	str	r2, [r3, #0]
}
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000296:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d224      	bcs.n	80002f0 <xQueueGenericSendFromISR+0x70>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80002a6:	68f8      	ldr	r0, [r7, #12]
 80002a8:	68b9      	ldr	r1, [r7, #8]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	f000 f82c 	bl	8000308 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002b8:	d112      	bne.n	80002e0 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d013      	beq.n	80002ea <xQueueGenericSendFromISR+0x6a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3324      	adds	r3, #36	; 0x24
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f9fc 	bl	80006c4 <xTaskRemoveFromEventList>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d00b      	beq.n	80002ea <xQueueGenericSendFromISR+0x6a>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d008      	beq.n	80002ea <xQueueGenericSendFromISR+0x6a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	e004      	b.n	80002ea <xQueueGenericSendFromISR+0x6a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80002ea:	2301      	movs	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	e001      	b.n	80002f4 <xQueueGenericSendFromISR+0x74>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80002f4:	f04f 0000 	mov.w	r0, #0
 80002f8:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 80002fc:	697b      	ldr	r3, [r7, #20]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3718      	adds	r7, #24
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop

08000308 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000318:	2b00      	cmp	r3, #0
 800031a:	d10c      	bne.n	8000336 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d145      	bne.n	80003b0 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fa1b 	bl	8000764 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	e03c      	b.n	80003b0 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d11a      	bne.n	8000372 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000344:	4610      	mov	r0, r2
 8000346:	68b9      	ldr	r1, [r7, #8]
 8000348:	461a      	mov	r2, r3
 800034a:	f00a faa9 	bl	800a8a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000356:	441a      	add	r2, r3
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	689a      	ldr	r2, [r3, #8]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	429a      	cmp	r2, r3
 8000366:	d323      	bcc.n	80003b0 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	e01e      	b.n	80003b0 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	68da      	ldr	r2, [r3, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037a:	4610      	mov	r0, r2
 800037c:	68b9      	ldr	r1, [r7, #8]
 800037e:	461a      	mov	r2, r3
 8000380:	f00a fa8e 	bl	800a8a0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800038c:	425b      	negs	r3, r3
 800038e:	441a      	add	r2, r3
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	429a      	cmp	r2, r3
 800039e:	d207      	bcs.n	80003b0 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a8:	425b      	negs	r3, r3
 80003aa:	441a      	add	r2, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003b4:	1c5a      	adds	r2, r3, #1
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <vTaskSuspendAll+0x18>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	1c5a      	adds	r2, r3, #1
 80003ca:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <vTaskSuspendAll+0x18>)
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000090c 	.word	0x2000090c

080003dc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80003e6:	f000 fa17 	bl	8000818 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80003ea:	4b31      	ldr	r3, [pc, #196]	; (80004b0 <xTaskResumeAll+0xd4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	1e5a      	subs	r2, r3, #1
 80003f0:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <xTaskResumeAll+0xd4>)
 80003f2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80003f4:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <xTaskResumeAll+0xd4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d152      	bne.n	80004a2 <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80003fc:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <xTaskResumeAll+0xd8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d04e      	beq.n	80004a2 <xTaskResumeAll+0xc6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8000404:	2300      	movs	r3, #0
 8000406:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000408:	e027      	b.n	800045a <xTaskResumeAll+0x7e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 800040a:	4b2b      	ldr	r3, [pc, #172]	; (80004b8 <xTaskResumeAll+0xdc>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8000410:	f104 0318 	add.w	r3, r4, #24
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff0b 	bl	8000230 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 800041a:	1d23      	adds	r3, r4, #4
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff07 	bl	8000230 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8000422:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <xTaskResumeAll+0xe0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	429a      	cmp	r2, r3
 800042a:	d902      	bls.n	8000432 <xTaskResumeAll+0x56>
 800042c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <xTaskResumeAll+0xe0>)
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4a20      	ldr	r2, [pc, #128]	; (80004c0 <xTaskResumeAll+0xe4>)
 800043e:	441a      	add	r2, r3
 8000440:	1d23      	adds	r3, r4, #4
 8000442:	4610      	mov	r0, r2
 8000444:	4619      	mov	r1, r3
 8000446:	f7ff fecb 	bl	80001e0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800044a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <xTaskResumeAll+0xe8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000452:	429a      	cmp	r2, r3
 8000454:	d301      	bcc.n	800045a <xTaskResumeAll+0x7e>
					{
						xYieldRequired = pdTRUE;
 8000456:	2301      	movs	r3, #1
 8000458:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <xTaskResumeAll+0xdc>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1d3      	bne.n	800040a <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <xTaskResumeAll+0xec>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00d      	beq.n	8000486 <xTaskResumeAll+0xaa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800046a:	e006      	b.n	800047a <xTaskResumeAll+0x9e>
					{
						vTaskIncrementTick();
 800046c:	f000 f830 	bl	80004d0 <vTaskIncrementTick>
						--uxMissedTicks;
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <xTaskResumeAll+0xec>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	1e5a      	subs	r2, r3, #1
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <xTaskResumeAll+0xec>)
 8000478:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <xTaskResumeAll+0xec>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1f4      	bne.n	800046c <xTaskResumeAll+0x90>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8000482:	2301      	movs	r3, #1
 8000484:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d003      	beq.n	8000494 <xTaskResumeAll+0xb8>
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <xTaskResumeAll+0xf0>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d106      	bne.n	80004a2 <xTaskResumeAll+0xc6>
				{
					xAlreadyYielded = pdTRUE;
 8000494:	2301      	movs	r3, #1
 8000496:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <xTaskResumeAll+0xf0>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 800049e:	f000 f9af 	bl	8000800 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80004a2:	f000 f9cb 	bl	800083c <vPortExitCritical>

	return xAlreadyYielded;
 80004a6:	687b      	ldr	r3, [r7, #4]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd90      	pop	{r4, r7, pc}
 80004b0:	2000090c 	.word	0x2000090c
 80004b4:	20000900 	.word	0x20000900
 80004b8:	200008ec 	.word	0x200008ec
 80004bc:	20000908 	.word	0x20000908
 80004c0:	20000880 	.word	0x20000880
 80004c4:	2000087c 	.word	0x2000087c
 80004c8:	20000910 	.word	0x20000910
 80004cc:	20000914 	.word	0x20000914

080004d0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80004d6:	4b40      	ldr	r3, [pc, #256]	; (80005d8 <vTaskIncrementTick+0x108>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d173      	bne.n	80005c6 <vTaskIncrementTick+0xf6>
	{
		++xTickCount;
 80004de:	4b3f      	ldr	r3, [pc, #252]	; (80005dc <vTaskIncrementTick+0x10c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <vTaskIncrementTick+0x10c>)
 80004e6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 80004e8:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <vTaskIncrementTick+0x10c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d121      	bne.n	8000534 <vTaskIncrementTick+0x64>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 80004f0:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <vTaskIncrementTick+0x110>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 80004f6:	4b3b      	ldr	r3, [pc, #236]	; (80005e4 <vTaskIncrementTick+0x114>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <vTaskIncrementTick+0x110>)
 80004fc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 80004fe:	4b39      	ldr	r3, [pc, #228]	; (80005e4 <vTaskIncrementTick+0x114>)
 8000500:	68fa      	ldr	r2, [r7, #12]
 8000502:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8000504:	4b38      	ldr	r3, [pc, #224]	; (80005e8 <vTaskIncrementTick+0x118>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <vTaskIncrementTick+0x118>)
 800050c:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800050e:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <vTaskIncrementTick+0x110>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d104      	bne.n	8000522 <vTaskIncrementTick+0x52>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8000518:	4b34      	ldr	r3, [pc, #208]	; (80005ec <vTaskIncrementTick+0x11c>)
 800051a:	f04f 32ff 	mov.w	r2, #4294967295
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	e008      	b.n	8000534 <vTaskIncrementTick+0x64>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <vTaskIncrementTick+0x110>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <vTaskIncrementTick+0x11c>)
 8000532:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <vTaskIncrementTick+0x10c>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <vTaskIncrementTick+0x11c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	d341      	bcc.n	80005c4 <vTaskIncrementTick+0xf4>
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <vTaskIncrementTick+0x110>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d104      	bne.n	8000554 <vTaskIncrementTick+0x84>
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <vTaskIncrementTick+0x11c>)
 800054c:	f04f 32ff 	mov.w	r2, #4294967295
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	e037      	b.n	80005c4 <vTaskIncrementTick+0xf4>
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <vTaskIncrementTick+0x110>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <vTaskIncrementTick+0x10c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	d203      	bcs.n	8000576 <vTaskIncrementTick+0xa6>
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <vTaskIncrementTick+0x11c>)
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e026      	b.n	80005c4 <vTaskIncrementTick+0xf4>
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	3304      	adds	r3, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fe58 	bl	8000230 <vListRemove>
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000584:	2b00      	cmp	r3, #0
 8000586:	d004      	beq.n	8000592 <vTaskIncrementTick+0xc2>
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	3318      	adds	r3, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe4f 	bl	8000230 <vListRemove>
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <vTaskIncrementTick+0x120>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	429a      	cmp	r2, r3
 800059c:	d903      	bls.n	80005a6 <vTaskIncrementTick+0xd6>
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <vTaskIncrementTick+0x120>)
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005aa:	4613      	mov	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4413      	add	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <vTaskIncrementTick+0x124>)
 80005b4:	441a      	add	r2, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	3304      	adds	r3, #4
 80005ba:	4610      	mov	r0, r2
 80005bc:	4619      	mov	r1, r3
 80005be:	f7ff fe0f 	bl	80001e0 <vListInsertEnd>
 80005c2:	e7bd      	b.n	8000540 <vTaskIncrementTick+0x70>
 80005c4:	e004      	b.n	80005d0 <vTaskIncrementTick+0x100>
	}
	else
	{
		++uxMissedTicks;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <vTaskIncrementTick+0x128>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <vTaskIncrementTick+0x128>)
 80005ce:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000090c 	.word	0x2000090c
 80005dc:	20000904 	.word	0x20000904
 80005e0:	200008e4 	.word	0x200008e4
 80005e4:	200008e8 	.word	0x200008e8
 80005e8:	20000918 	.word	0x20000918
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000908 	.word	0x20000908
 80005f4:	20000880 	.word	0x20000880
 80005f8:	20000910 	.word	0x20000910

080005fc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <vTaskSwitchContext+0xa8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d003      	beq.n	8000612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 800060a:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <vTaskSwitchContext+0xac>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e043      	b.n	800069a <vTaskSwitchContext+0x9e>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <vTaskSwitchContext+0xb0>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	461a      	mov	r2, r3
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <vTaskSwitchContext+0xb4>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	4313      	orrs	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <vTaskSwitchContext+0xb8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <vTaskSwitchContext+0xbc>)
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	1a82      	subs	r2, r0, r2
 8000632:	440a      	add	r2, r1
 8000634:	64da      	str	r2, [r3, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <vTaskSwitchContext+0xbc>)
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800063c:	e004      	b.n	8000648 <vTaskSwitchContext+0x4c>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <vTaskSwitchContext+0xc0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <vTaskSwitchContext+0xc0>)
 8000646:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <vTaskSwitchContext+0xc0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	491c      	ldr	r1, [pc, #112]	; (80006c0 <vTaskSwitchContext+0xc4>)
 800064e:	4613      	mov	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0ef      	beq.n	800063e <vTaskSwitchContext+0x42>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <vTaskSwitchContext+0xc0>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <vTaskSwitchContext+0xc4>)
 800066c:	4413      	add	r3, r2
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	3308      	adds	r3, #8
 8000682:	429a      	cmp	r2, r3
 8000684:	d104      	bne.n	8000690 <vTaskSwitchContext+0x94>
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <vTaskSwitchContext+0xb8>)
 8000698:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	2000090c 	.word	0x2000090c
 80006a8:	20000914 	.word	0x20000914
 80006ac:	20000928 	.word	0x20000928
 80006b0:	40001000 	.word	0x40001000
 80006b4:	2000087c 	.word	0x2000087c
 80006b8:	2000091c 	.word	0x2000091c
 80006bc:	20000908 	.word	0x20000908
 80006c0:	20000880 	.word	0x20000880

080006c4 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	3318      	adds	r3, #24
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fda9 	bl	8000230 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <xTaskRemoveFromEventList+0x8c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d11d      	bne.n	8000722 <xTaskRemoveFromEventList+0x5e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	3304      	adds	r3, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fda0 	bl	8000230 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <xTaskRemoveFromEventList+0x90>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d903      	bls.n	8000704 <xTaskRemoveFromEventList+0x40>
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <xTaskRemoveFromEventList+0x90>)
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <xTaskRemoveFromEventList+0x94>)
 8000712:	441a      	add	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	3304      	adds	r3, #4
 8000718:	4610      	mov	r0, r2
 800071a:	4619      	mov	r1, r3
 800071c:	f7ff fd60 	bl	80001e0 <vListInsertEnd>
 8000720:	e005      	b.n	800072e <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	3318      	adds	r3, #24
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <xTaskRemoveFromEventList+0x98>)
 8000728:	4619      	mov	r1, r3
 800072a:	f7ff fd59 	bl	80001e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <xTaskRemoveFromEventList+0x9c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000738:	429a      	cmp	r2, r3
 800073a:	d302      	bcc.n	8000742 <xTaskRemoveFromEventList+0x7e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 800073c:	2301      	movs	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e001      	b.n	8000746 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		xReturn = pdFALSE;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000090c 	.word	0x2000090c
 8000754:	20000908 	.word	0x20000908
 8000758:	20000880 	.word	0x20000880
 800075c:	200008ec 	.word	0x200008ec
 8000760:	2000087c 	.word	0x2000087c

08000764 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d02c      	beq.n	80007d0 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800077e:	429a      	cmp	r2, r3
 8000780:	d026      	beq.n	80007d0 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3304      	adds	r3, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fd52 	bl	8000230 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000798:	f1c3 0205 	rsb	r2, r3, #5
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <vTaskPriorityDisinherit+0x74>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d903      	bls.n	80007b4 <vTaskPriorityDisinherit+0x50>
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <vTaskPriorityDisinherit+0x74>)
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <vTaskPriorityDisinherit+0x78>)
 80007c2:	441a      	add	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3304      	adds	r3, #4
 80007c8:	4610      	mov	r0, r2
 80007ca:	4619      	mov	r1, r3
 80007cc:	f7ff fd08 	bl	80001e0 <vListInsertEnd>
			}
		}
	}
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000908 	.word	0x20000908
 80007dc:	20000880 	.word	0x20000880

080007e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <pxCurrentTCBConst2>)
 80007e2:	6819      	ldr	r1, [r3, #0]
 80007e4:	6808      	ldr	r0, [r1, #0]
 80007e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007ea:	f380 8809 	msr	PSP, r0
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	f380 8811 	msr	BASEPRI, r0
 80007f6:	f04e 0e0d 	orr.w	lr, lr, #13
 80007fa:	4770      	bx	lr

080007fc <pxCurrentTCBConst2>:
 80007fc:	2000087c 	.word	0x2000087c

08000800 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <vPortYieldFromISR+0x14>)
 8000806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed04 	.word	0xe000ed04

08000818 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800081c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000820:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <vPortEnterCritical+0x20>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	4b03      	ldr	r3, [pc, #12]	; (8000838 <vPortEnterCritical+0x20>)
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000008 	.word	0x20000008

0800083c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <vPortExitCritical+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <vPortExitCritical+0x28>)
 8000848:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <vPortExitCritical+0x28>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d103      	bne.n	800085a <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f380 8811 	msr	BASEPRI, r0
	}
}
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008

08000868 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000868:	f3ef 8009 	mrs	r0, PSP
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <pxCurrentTCBConst>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000874:	6010      	str	r0, [r2, #0]
 8000876:	e92d 4008 	stmdb	sp!, {r3, lr}
 800087a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800087e:	f380 8811 	msr	BASEPRI, r0
 8000882:	f7ff febb 	bl	80005fc <vTaskSwitchContext>
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	f380 8811 	msr	BASEPRI, r0
 800088e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000892:	6819      	ldr	r1, [r3, #0]
 8000894:	6808      	ldr	r0, [r1, #0]
 8000896:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800089a:	f380 8809 	msr	PSP, r0
 800089e:	4770      	bx	lr

080008a0 <pxCurrentTCBConst>:
 80008a0:	2000087c 	.word	0x2000087c

080008a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <SysTick_Handler+0x2c>)
 80008ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b0:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80008ba:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80008be:	f7ff fe07 	bl	80004d0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f380 8811 	msr	BASEPRI, r0
}
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	e000ed04 	.word	0xe000ed04

080008d4 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80008dc:	f7ff fd70 	bl	80003c0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f009 fcb3 	bl	800a24c <malloc>
 80008e6:	4603      	mov	r3, r0
 80008e8:	60fb      	str	r3, [r7, #12]
	}
	xTaskResumeAll();
 80008ea:	f7ff fd77 	bl	80003dc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	return pvReturn;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if( pv )
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000906:	f7ff fd5b 	bl	80003c0 <vTaskSuspendAll>
		{
			free( pv );
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f009 fca6 	bl	800a25c <free>
		}
		xTaskResumeAll();
 8000910:	f7ff fd64 	bl	80003dc <xTaskResumeAll>
	}
}
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop

0800091c <printchar>:
#include <stdarg.h>

#define putchar(c)							usartSendCharacter(c)

static void printchar(char **str, int c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);
	
	if (str) {
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d00a      	beq.n	8000942 <printchar+0x26>
		**str = c;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	e002      	b.n	8000948 <printchar+0x2c>
	}
	else (void)putchar(c);
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f001 fb18 	bl	8001f78 <usartSendCharacter>
}
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop

08000950 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000960:	2400      	movs	r4, #0
 8000962:	2620      	movs	r6, #32

	if (width > 0) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dd19      	ble.n	800099e <prints+0x4e>
		register int len = 0;
 800096a:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800096c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8000970:	e002      	b.n	8000978 <prints+0x28>
 8000972:	3501      	adds	r5, #1
 8000974:	f108 0801 	add.w	r8, r8, #1
 8000978:	f898 3000 	ldrb.w	r3, [r8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f8      	bne.n	8000972 <prints+0x22>
		if (len >= width) width = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429d      	cmp	r5, r3
 8000984:	db02      	blt.n	800098c <prints+0x3c>
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e002      	b.n	8000992 <prints+0x42>
		else width -= len;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	1b5b      	subs	r3, r3, r5
 8000990:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	2b00      	cmp	r3, #0
 800099a:	d000      	beq.n	800099e <prints+0x4e>
 800099c:	2630      	movs	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10b      	bne.n	80009c0 <prints+0x70>
		for ( ; width > 0; --width) {
 80009a8:	e007      	b.n	80009ba <prints+0x6a>
			printchar (out, padchar);
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	4631      	mov	r1, r6
 80009ae:	f7ff ffb5 	bl	800091c <printchar>
			++pc;
 80009b2:	3401      	adds	r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dcf4      	bgt.n	80009aa <prints+0x5a>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80009c0:	e009      	b.n	80009d6 <prints+0x86>
		printchar (out, *string);
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f7ff ffa7 	bl	800091c <printchar>
		++pc;
 80009ce:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f1      	bne.n	80009c2 <prints+0x72>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80009de:	e007      	b.n	80009f0 <prints+0xa0>
		printchar (out, padchar);
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	4631      	mov	r1, r6
 80009e4:	f7ff ff9a 	bl	800091c <printchar>
		++pc;
 80009e8:	3401      	adds	r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	dcf4      	bgt.n	80009e0 <prints+0x90>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 80009f6:	4623      	mov	r3, r4
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a02:	bf00      	nop

08000a04 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a08:	b089      	sub	sp, #36	; 0x24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000a14:	f04f 0900 	mov.w	r9, #0
 8000a18:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = i;
 8000a1c:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10d      	bne.n	8000a40 <printi+0x3c>
		print_buf[0] = '0';
 8000a24:	2330      	movs	r3, #48	; 0x30
 8000a26:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000a28:	2300      	movs	r3, #0
 8000a2a:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	4619      	mov	r1, r3
 8000a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a38:	f7ff ff8a 	bl	8000950 <prints>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	e049      	b.n	8000ad4 <printi+0xd0>
	}

	if (sg && b == 10 && i < 0) {
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00a      	beq.n	8000a5c <printi+0x58>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0a      	cmp	r3, #10
 8000a4a:	d107      	bne.n	8000a5c <printi+0x58>
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da04      	bge.n	8000a5c <printi+0x58>
		neg = 1;
 8000a52:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	425b      	negs	r3, r3
 8000a5a:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000a5c:	f107 0414 	add.w	r4, r7, #20
 8000a60:	340b      	adds	r4, #11
	*s = '\0';
 8000a62:	2300      	movs	r3, #0
 8000a64:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000a66:	e013      	b.n	8000a90 <printi+0x8c>
		t = u % b;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	fbb5 f2f3 	udiv	r2, r5, r3
 8000a6e:	fb03 f302 	mul.w	r3, r3, r2
 8000a72:	1aeb      	subs	r3, r5, r3
 8000a74:	461e      	mov	r6, r3
		if( t >= 10 )
 8000a76:	2e09      	cmp	r6, #9
 8000a78:	dd02      	ble.n	8000a80 <printi+0x7c>
			t += letbase - '0' - 10;
 8000a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a7c:	3b3a      	subs	r3, #58	; 0x3a
 8000a7e:	441e      	add	r6, r3
		*--s = t + '0';
 8000a80:	3c01      	subs	r4, #1
 8000a82:	b2f3      	uxtb	r3, r6
 8000a84:	3330      	adds	r3, #48	; 0x30
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8000a90:	2d00      	cmp	r5, #0
 8000a92:	d1e9      	bne.n	8000a68 <printi+0x64>
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
 8000a94:	f1b9 0f00 	cmp.w	r9, #0
 8000a98:	d014      	beq.n	8000ac4 <printi+0xc0>
		if( width && (pad & PAD_ZERO) ) {
 8000a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d00e      	beq.n	8000abe <printi+0xba>
 8000aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d009      	beq.n	8000abe <printi+0xba>
			printchar (out, '-');
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	212d      	movs	r1, #45	; 0x2d
 8000aae:	f7ff ff35 	bl	800091c <printchar>
			++pc;
 8000ab2:	f108 0801 	add.w	r8, r8, #1
			--width;
 8000ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
 8000abc:	e002      	b.n	8000ac4 <printi+0xc0>
		}
		else {
			*--s = '-';
 8000abe:	3c01      	subs	r4, #1
 8000ac0:	232d      	movs	r3, #45	; 0x2d
 8000ac2:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000acc:	f7ff ff40 	bl	8000950 <prints>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4443      	add	r3, r8
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ade:	bf00      	nop

08000ae0 <print>:

static int print(char **out, const char *format, va_list args )
{
 8000ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae4:	b08a      	sub	sp, #40	; 0x28
 8000ae6:	af04      	add	r7, sp, #16
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000aee:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000af0:	e0d3      	b.n	8000c9a <print+0x1ba>
		if (*format == '%') {
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b25      	cmp	r3, #37	; 0x25
 8000af8:	f040 80c5 	bne.w	8000c86 <print+0x1a6>
			++format;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000b02:	2600      	movs	r6, #0
 8000b04:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d100      	bne.n	8000b10 <print+0x30>
 8000b0e:	e0c9      	b.n	8000ca4 <print+0x1c4>
			if (*format == '%') goto out;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b25      	cmp	r3, #37	; 0x25
 8000b16:	d100      	bne.n	8000b1a <print+0x3a>
 8000b18:	e0b5      	b.n	8000c86 <print+0x1a6>
			if (*format == '-') {
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b2d      	cmp	r3, #45	; 0x2d
 8000b20:	d104      	bne.n	8000b2c <print+0x4c>
				++format;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000b28:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000b2a:	e005      	b.n	8000b38 <print+0x58>
 8000b2c:	e004      	b.n	8000b38 <print+0x58>
				++format;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000b34:	f046 0602 	orr.w	r6, r6, #2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b30      	cmp	r3, #48	; 0x30
 8000b3e:	d0f6      	beq.n	8000b2e <print+0x4e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000b40:	e00b      	b.n	8000b5a <print+0x7a>
				width *= 10;
 8000b42:	462b      	mov	r3, r5
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	442b      	add	r3, r5
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	461d      	mov	r5, r3
				width += *format - '0';
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	3b30      	subs	r3, #48	; 0x30
 8000b52:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000b60:	d903      	bls.n	8000b6a <print+0x8a>
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b39      	cmp	r3, #57	; 0x39
 8000b68:	d9eb      	bls.n	8000b42 <print+0x62>
				width *= 10;
				width += *format - '0';
			}
			if (*format == '*') {
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000b70:	d106      	bne.n	8000b80 <print+0xa0>
				++format;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
				width = va_arg( args, int );
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	1d1a      	adds	r2, r3, #4
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	681d      	ldr	r5, [r3, #0]
			}
			if( *format == 's' ) {
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b73      	cmp	r3, #115	; 0x73
 8000b86:	d113      	bne.n	8000bb0 <print+0xd0>
				register char *s = (char *)va_arg( args, int );
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	1d1a      	adds	r2, r3, #4
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8000b92:	f1b8 0f00 	cmp.w	r8, #0
 8000b96:	d001      	beq.n	8000b9c <print+0xbc>
 8000b98:	4643      	mov	r3, r8
 8000b9a:	e000      	b.n	8000b9e <print+0xbe>
 8000b9c:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <print+0x1e0>)
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	462a      	mov	r2, r5
 8000ba4:	4633      	mov	r3, r6
 8000ba6:	f7ff fed3 	bl	8000950 <prints>
 8000baa:	4603      	mov	r3, r0
 8000bac:	441c      	add	r4, r3
				continue;
 8000bae:	e071      	b.n	8000c94 <print+0x1b4>
			}
			if( *format == 'd' ) {
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b64      	cmp	r3, #100	; 0x64
 8000bb6:	d110      	bne.n	8000bda <print+0xfa>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	1d1a      	adds	r2, r3, #4
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	9500      	str	r5, [sp, #0]
 8000bc2:	9601      	str	r6, [sp, #4]
 8000bc4:	2261      	movs	r2, #97	; 0x61
 8000bc6:	9202      	str	r2, [sp, #8]
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	220a      	movs	r2, #10
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f7ff ff18 	bl	8000a04 <printi>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	441c      	add	r4, r3
				continue;
 8000bd8:	e05c      	b.n	8000c94 <print+0x1b4>
			}
			if( *format == 'x' ) {
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b78      	cmp	r3, #120	; 0x78
 8000be0:	d110      	bne.n	8000c04 <print+0x124>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	1d1a      	adds	r2, r3, #4
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	9500      	str	r5, [sp, #0]
 8000bec:	9601      	str	r6, [sp, #4]
 8000bee:	2261      	movs	r2, #97	; 0x61
 8000bf0:	9202      	str	r2, [sp, #8]
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f7ff ff03 	bl	8000a04 <printi>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	441c      	add	r4, r3
				continue;
 8000c02:	e047      	b.n	8000c94 <print+0x1b4>
			}
			if( *format == 'X' ) {
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b58      	cmp	r3, #88	; 0x58
 8000c0a:	d110      	bne.n	8000c2e <print+0x14e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1d1a      	adds	r2, r3, #4
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	9500      	str	r5, [sp, #0]
 8000c16:	9601      	str	r6, [sp, #4]
 8000c18:	2241      	movs	r2, #65	; 0x41
 8000c1a:	9202      	str	r2, [sp, #8]
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	2210      	movs	r2, #16
 8000c22:	2300      	movs	r3, #0
 8000c24:	f7ff feee 	bl	8000a04 <printi>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	441c      	add	r4, r3
				continue;
 8000c2c:	e032      	b.n	8000c94 <print+0x1b4>
			}
			if( *format == 'u' ) {
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b75      	cmp	r3, #117	; 0x75
 8000c34:	d110      	bne.n	8000c58 <print+0x178>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	1d1a      	adds	r2, r3, #4
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	9500      	str	r5, [sp, #0]
 8000c40:	9601      	str	r6, [sp, #4]
 8000c42:	2261      	movs	r2, #97	; 0x61
 8000c44:	9202      	str	r2, [sp, #8]
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	220a      	movs	r2, #10
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f7ff fed9 	bl	8000a04 <printi>
 8000c52:	4603      	mov	r3, r0
 8000c54:	441c      	add	r4, r3
				continue;
 8000c56:	e01d      	b.n	8000c94 <print+0x1b4>
			}
			if( *format == 'c' ) {
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b63      	cmp	r3, #99	; 0x63
 8000c5e:	d119      	bne.n	8000c94 <print+0x1b4>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	1d1a      	adds	r2, r3, #4
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	4619      	mov	r1, r3
 8000c78:	462a      	mov	r2, r5
 8000c7a:	4633      	mov	r3, r6
 8000c7c:	f7ff fe68 	bl	8000950 <prints>
 8000c80:	4603      	mov	r3, r0
 8000c82:	441c      	add	r4, r3
				continue;
 8000c84:	e006      	b.n	8000c94 <print+0x1b4>
			}
		}
		else {
		out:
			printchar (out, *format);
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f7ff fe45 	bl	800091c <printchar>
			++pc;
 8000c92:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f47f af27 	bne.w	8000af2 <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <print+0x1d2>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000cb2:	4623      	mov	r3, r4
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cbe:	bf00      	nop
 8000cc0:	0800bfa8 	.word	0x0800bfa8

08000cc4 <printf>:

int printf(const char *format, ...)
{
 8000cc4:	b40f      	push	{r0, r1, r2, r3}
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
        va_list args;
        
        va_start( args, format );
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	6939      	ldr	r1, [r7, #16]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	f7ff ff02 	bl	8000ae0 <print>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <sprintf>:

int sprintf(char *out, const char *format, ...)
{
 8000cec:	b40e      	push	{r1, r2, r3}
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
        va_list args;
        
        va_start( args, format );
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	69f9      	ldr	r1, [r7, #28]
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	f7ff feec 	bl	8000ae0 <print>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d14:	b003      	add	sp, #12
 8000d16:	4770      	bx	lr

08000d18 <_close_r>:
 *
 * \return -1 for failure.
 */

int _close_r(struct _reent *r, int file)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	(void)r;								// suppress warning
	(void)file;								// suppress warning

	return -1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <_exit>:
 *
 * \param [in] status represents the termination status.
 */

void _exit(int status)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	(void)status;							// suppress warning

	while (1);
 8000d3c:	e7fe      	b.n	8000d3c <_exit+0x8>
 8000d3e:	bf00      	nop

08000d40 <_fstat_r>:
 *
 * \return 0 for success.
 */

int _fstat_r(struct _reent *r, int file, struct stat *st)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	(void)r;								// suppress warning
	(void)file;								// suppress warning
	(void)st;								// suppress warning

	st->st_mode = S_IFCHR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d52:	605a      	str	r2, [r3, #4]
	return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_getpid_r>:
 *
 * \return 1.
 */

pid_t _getpid_r(struct _reent *r)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	(void)r;								// suppress warning

	return 1;
 8000d6c:	2301      	movs	r3, #1
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <_isatty_r>:
 *
 * \return 1.
 */

int _isatty_r(struct _reent *r, int file)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	(void)r;								// suppress warning
	(void)file;								// suppress warning

	return 1;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_kill_r>:
 *
 * \return -1 for failure.
 */

int _kill_r(struct _reent *r, pid_t pid, int signal)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	(void)r;								// suppress warning
	(void)pid;								// suppress warning
	(void)signal;							// suppress warning

	errno = EINVAL;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <_kill_r+0x24>)
 8000da2:	2216      	movs	r2, #22
 8000da4:	601a      	str	r2, [r3, #0]
	return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200011ac 	.word	0x200011ac

08000dbc <_lseek_r>:
 *
 * \return 0 for success.
 */

off_t _lseek_r(struct _reent *r, int file, off_t offset, int whence)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	(void)r;								// suppress warning
	(void)file;								// suppress warning
	(void)offset;							// suppress warning
	(void)whence;							// suppress warning

	return 0;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_read_r>:
 *
 * \return 0 for success.
 */

ssize_t _read_r(struct _reent *r, int file, void *buf, size_t nbyte)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	(void)r;								// suppress warning
	(void)file;								// suppress warning
	(void)buf;								// suppress warning
	(void)nbyte;							// suppress warning

	return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_sbrk_r>:
 *
 * \return pointer to new data space.
 */

caddr_t _sbrk_r(struct _reent *r, int size)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	static char *current_heap_end = &__heap_start;
	char *previous_heap_end;

	(void)r;								// suppress warning

	previous_heap_end = current_heap_end;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <_sbrk_r+0x44>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60fb      	str	r3, [r7, #12]

	if (current_heap_end + size > &__heap_end)	// is there enough space on the heap left?
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <_sbrk_r+0x44>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <_sbrk_r+0x48>)
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d905      	bls.n	8000e1e <_sbrk_r+0x2a>
	{
		errno = ENOMEM;						// not enough memory left
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <_sbrk_r+0x4c>)
 8000e14:	220c      	movs	r2, #12
 8000e16:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;				// return immediatelly
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	e006      	b.n	8000e2c <_sbrk_r+0x38>
	}

	current_heap_end += size;				// increase data space
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <_sbrk_r+0x44>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	441a      	add	r2, r3
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <_sbrk_r+0x44>)
 8000e28:	601a      	str	r2, [r3, #0]

	return (caddr_t)previous_heap_end;		// return requested data space
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	20004000 	.word	0x20004000
 8000e40:	200011ac 	.word	0x200011ac

08000e44 <_write_r>:
 *
 * \return 0 for success.
 */

ssize_t _write_r(struct _reent *r, int file, const void *buf, size_t nbyte)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
	(void)r;								// suppress warning
	(void)file;								// suppress warning
	(void)buf;								// suppress warning
	(void)nbyte;							// suppress warning

	return 0;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <__Default_Handler>:
 * own handler defined.
*/

void __Default_Handler(void) __attribute__ ((interrupt));
void __Default_Handler(void)
{
 8000e60:	4668      	mov	r0, sp
 8000e62:	f020 0107 	bic.w	r1, r0, #7
 8000e66:	468d      	mov	sp, r1
 8000e68:	b481      	push	{r0, r7}
 8000e6a:	af00      	add	r7, sp, #0
	while (1);
 8000e6c:	e7fe      	b.n	8000e6c <__Default_Handler+0xc>
 8000e6e:	bf00      	nop

08000e70 <operator new(unsigned int, void*)>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::~list()>:
   *  we start at the tail and move forward by one.  When this member
   *  iterator's next/previous pointers refer to itself, the %list is
   *  %empty. 
  */
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f8d4 	bl	8001040 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::~_List_base()>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop

08000ea4 <_helpHandler(char const**, unsigned long, char*, unsigned int)>:
 * \return ERROR_NONE on success, otherwise an error code defined in the file error.h
 */

static enum Error _helpHandler(const char **arguments_array, uint32_t arguments_count, char *output_buffer,
		size_t output_buffer_length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	for (const CommandDefinition *definition : _commands)
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x9c>)
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eb8:	f000 f8d2 	bl	8001060 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::begin()>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ec2:	f000 f8df 	bl	8001084 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::end()>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e024      	b.n	8000f16 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x72>
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f90b 	bl	80010ec <std::_List_iterator<CommandDefinition const*>::operator*() const>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	623b      	str	r3, [r7, #32]
	{
		size_t string_length = strlen(definition->help_string);
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f00a fb45 	bl	800b570 <strlen>
 8000ee6:	61f8      	str	r0, [r7, #28]

		if ((output_buffer_length - 1) < string_length)	// will the help string fit into buffer?
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	1e5a      	subs	r2, r3, #1
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d201      	bcs.n	8000ef6 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x52>
			return ERROR_BUFFER_OVERFLOW;
 8000ef2:	2319      	movs	r3, #25
 8000ef4:	e01e      	b.n	8000f34 <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x90>

		memcpy(output_buffer, definition->help_string, string_length);
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	4619      	mov	r1, r3
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	f009 fcce 	bl	800a8a0 <memcpy>
		output_buffer += string_length;
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	4413      	add	r3, r2
 8000f0a:	607b      	str	r3, [r7, #4]
		size_t output_buffer_length)
{
	(void)arguments_array;					// suppress warning
	(void)arguments_count;					// suppress warning

	for (const CommandDefinition *definition : _commands)
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f8db 	bl	80010cc <std::_List_iterator<CommandDefinition const*>::operator++()>
 8000f16:	f107 0218 	add.w	r2, r7, #24
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f000 f8bf 	bl	80010a4 <std::_List_iterator<CommandDefinition const*>::operator!=(std::_List_iterator<CommandDefinition const*> const&) const>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1cf      	bne.n	8000ecc <_helpHandler(char const**, unsigned long, char*, unsigned int)+0x28>

		memcpy(output_buffer, definition->help_string, string_length);
		output_buffer += string_length;
	}

	*output_buffer = '\0';					// add trailing '\0' to the end of output
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]

	return ERROR_NONE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	b25b      	sxtb	r3, r3
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000920 	.word	0x20000920

08000f44 <std::allocator<CommandDefinition const*>::allocator()>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f8db 	bl	8001108 <__gnu_cxx::new_allocator<CommandDefinition const*>::new_allocator()>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <std::allocator<CommandDefinition const*>::~allocator()>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f8db 	bl	8001120 <__gnu_cxx::new_allocator<CommandDefinition const*>::~new_allocator()>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <std::initializer_list<CommandDefinition const*>::begin() const>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <std::initializer_list<CommandDefinition const*>::size() const>:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <std::initializer_list<CommandDefinition const*>::end() const>:
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffe1 	bl	8000f74 <std::initializer_list<CommandDefinition const*>::begin() const>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffe9 	bl	8000f8c <std::initializer_list<CommandDefinition const*>::size() const>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4423      	add	r3, r4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}

08000fc8 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::list(std::initializer_list<CommandDefinition const*>, std::allocator<CommandDefinition const*> const&)>:
       *  @param  __a  An allocator object.
       *
       *  Create a %list consisting of copies of the elements in the
       *  initializer_list @a __l.  This is linear in __l.size().
       */
      list(initializer_list<value_type> __l,
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	1d38      	adds	r0, r7, #4
 8000fd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fd6:	603b      	str	r3, [r7, #0]
           const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
 8000fd8:	68fc      	ldr	r4, [r7, #12]
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4618      	mov	r0, r3
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	f000 f8a9 	bl	8001138 <std::allocator<std::_List_node<CommandDefinition const*> >::allocator<CommandDefinition const*>(std::allocator<CommandDefinition const*> const&)>
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4620      	mov	r0, r4
 8000fec:	4619      	mov	r1, r3
 8000fee:	f000 f8bd 	bl	800116c <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_List_base(std::allocator<std::_List_node<CommandDefinition const*> > const&)>
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f8ac 	bl	8001154 <std::allocator<std::_List_node<CommandDefinition const*> >::~allocator()>
      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffb8 	bl	8000f74 <std::initializer_list<CommandDefinition const*>::begin() const>
 8001004:	4604      	mov	r4, r0
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffcb 	bl	8000fa4 <std::initializer_list<CommandDefinition const*>::end() const>
 800100e:	4603      	mov	r3, r0
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	4621      	mov	r1, r4
 8001014:	461a      	mov	r2, r3
 8001016:	462b      	mov	r3, r5
 8001018:	f000 f8ba 	bl	8001190 <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_initialize_dispatch<CommandDefinition const* const*>(CommandDefinition const* const*, CommandDefinition const* const*, std::__false_type)>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bdb0      	pop	{r4, r5, r7, pc}
 8001026:	bf00      	nop

08001028 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_List_impl::~_List_impl()>:
      typedef typename _Alloc::template rebind<_List_node<_Tp> >::other
        _Node_alloc_type;

      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _List_impl
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f88f 	bl	8001154 <std::allocator<std::_List_node<CommandDefinition const*> >::~allocator()>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::~_List_base()>:
	__detail::_List_node_base::swap(_M_impl._M_node, __x._M_impl._M_node);
      }
#endif

      // This is what actually destroys the list.
      ~_List_base() _GLIBCXX_NOEXCEPT
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f8b7 	bl	80011bc <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_clear()>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffe9 	bl	8001028 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_List_impl::~_List_impl()>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::begin()>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f000 f8c2 	bl	80011fc <std::_List_iterator<CommandDefinition const*>::_List_iterator(std::__detail::_List_node_base*)>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop

08001084 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::end()>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f000 f8b1 	bl	80011fc <std::_List_iterator<CommandDefinition const*>::_List_iterator(std::__detail::_List_node_base*)>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <std::_List_iterator<CommandDefinition const*>::operator!=(std::_List_iterator<CommandDefinition const*> const&) const>:
      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	bf0c      	ite	eq
 80010ba:	2300      	moveq	r3, #0
 80010bc:	2301      	movne	r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <std::_List_iterator<CommandDefinition const*>::operator++()>:
      pointer
      operator->() const
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++()
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
      {
	_M_node = _M_node->_M_next;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
	return *this;
 80010de:	687b      	ldr	r3, [r7, #4]
      }
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <std::_List_iterator<CommandDefinition const*>::operator*() const>:
      _List_iterator(__detail::_List_node_base* __x)
      : _M_node(__x) { }

      // Must downcast from _List_node_base to _List_node to get to _M_data.
      reference
      operator*() const
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Node*>(_M_node)->_M_data; }
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3308      	adds	r3, #8
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <__gnu_cxx::new_allocator<CommandDefinition const*>::new_allocator()>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__gnu_cxx::new_allocator<CommandDefinition const*>::~new_allocator()>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <std::allocator<std::_List_node<CommandDefinition const*> >::allocator<CommandDefinition const*>(std::allocator<CommandDefinition const*> const&)>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f88e 	bl	8001264 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::new_allocator()>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop

08001154 <std::allocator<std::_List_node<CommandDefinition const*> >::~allocator()>:

      ~allocator() throw() { }
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f88d 	bl	800127c <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::~new_allocator()>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_List_base(std::allocator<std::_List_node<CommandDefinition const*> > const&)>:

      _List_base()
      : _M_impl()
      { _M_init(); }

      _List_base(const _Node_alloc_type& __a)
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
      : _M_impl(__a)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	f000 f88a 	bl	8001294 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_List_impl::_List_impl(std::allocator<std::_List_node<CommandDefinition const*> > const&)>
      { _M_init(); }
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f89b 	bl	80012bc <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_init()>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_initialize_dispatch<CommandDefinition const* const*>(CommandDefinition const* const*, CommandDefinition const* const*, std::__false_type)>:
        { _M_fill_initialize(static_cast<size_type>(__n), __x); }

      // Called by the range constructor to implement [23.1.1]/9
      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	703b      	strb	r3, [r7, #0]
			       __false_type)
        {
	  for (; __first != __last; ++__first)
 800119e:	e006      	b.n	80011ae <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_initialize_dispatch<CommandDefinition const* const*>(CommandDefinition const* const*, CommandDefinition const* const*, std::__false_type)+0x1e>
#if __cplusplus >= 201103L
	    emplace_back(*__first);
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	f000 f89a 	bl	80012dc <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::emplace_back<CommandDefinition const* const&>(CommandDefinition const* const&)>
      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
			       __false_type)
        {
	  for (; __first != __last; ++__first)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3304      	adds	r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d1f4      	bne.n	80011a0 <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_initialize_dispatch<CommandDefinition const* const*>(CommandDefinition const* const*, CommandDefinition const* const*, std::__false_type)+0x10>
#if __cplusplus >= 201103L
	    emplace_back(*__first);
#else
	    push_back(*__first);
#endif
	}
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_clear()>:
{
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    _M_clear()
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(_M_impl._M_node._M_next);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
      while (__cur != &_M_impl._M_node)
 80011ca:	e010      	b.n	80011ee <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_clear()+0x32>
	{
	  _Node* __tmp = __cur;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	60bb      	str	r3, [r7, #8]
	  __cur = static_cast<_Node*>(__cur->_M_next);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	  _M_get_Node_allocator().destroy(__tmp);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f896 	bl	8001308 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_get_Node_allocator()>
 80011dc:	4603      	mov	r3, r0
 80011de:	4618      	mov	r0, r3
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	f000 f89d 	bl	8001320 <void __gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::destroy<std::_List_node<CommandDefinition const*> >(std::_List_node<CommandDefinition const*>*)>
#else
	  _M_get_Tp_allocator().destroy(std::__addressof(__tmp->_M_data));
#endif
	  _M_put_node(__tmp);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	f000 f8a3 	bl	8001334 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_put_node(std::_List_node<CommandDefinition const*>*)>
    _List_base<_Tp, _Alloc>::
    _M_clear()
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(_M_impl._M_node._M_next);
      while (__cur != &_M_impl._M_node)
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d1ea      	bne.n	80011cc <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_clear()+0x10>
#else
	  _M_get_Tp_allocator().destroy(std::__addressof(__tmp->_M_data));
#endif
	  _M_put_node(__tmp);
	}
    }
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <std::_List_iterator<CommandDefinition const*>::_List_iterator(std::__detail::_List_node_base*)>:

      _List_iterator()
      : _M_node() { }

      explicit
      _List_iterator(__detail::_List_node_base* __x)
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <CommandDefinition const* const& std::forward<CommandDefinition const* const&>(std::remove_reference<CommandDefinition const* const&>::type&)>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_insert<CommandDefinition const* const&>(std::_List_iterator<CommandDefinition const*>, CommandDefinition const* const&)>:
        __tmp->_M_hook(__position._M_node);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffeb 	bl	800121c <CommandDefinition const* const& std::forward<CommandDefinition const* const&>(std::remove_reference<CommandDefinition const* const&>::type&)>
 8001246:	4603      	mov	r3, r0
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	4619      	mov	r1, r3
 800124c:	f000 f880 	bl	8001350 <std::_List_node<CommandDefinition const*>* std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_create_node<CommandDefinition const* const&>(CommandDefinition const* const&)>
 8001250:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f000 ffff 	bl	800225c <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
       }
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::new_allocator()>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::~new_allocator()>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_List_impl::_List_impl(std::allocator<std::_List_node<CommandDefinition const*> > const&)>:

	_List_impl()
	: _Node_alloc_type(), _M_node()
	{ }

	_List_impl(const _Node_alloc_type& __a)
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(__a), _M_node()
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	f000 f873 	bl	800138c <std::allocator<std::_List_node<CommandDefinition const*> >::allocator(std::allocator<std::_List_node<CommandDefinition const*> > const&)>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
	{ }
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_init()>:

      void
      _M_clear();

      void
      _M_init()
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]
      }
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::emplace_back<CommandDefinition const* const&>(CommandDefinition const* const&)>:
      push_back(value_type&& __x)
      { this->_M_insert(end(), std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args)
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
        { this->_M_insert(end(), std::forward<_Args>(__args)...); }
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fecc 	bl	8001084 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::end()>
 80012ec:	4604      	mov	r4, r0
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f7ff ff94 	bl	800121c <CommandDefinition const* const& std::forward<CommandDefinition const* const&>(std::remove_reference<CommandDefinition const* const&>::type&)>
 80012f4:	4603      	mov	r3, r0
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4621      	mov	r1, r4
 80012fa:	461a      	mov	r2, r3
 80012fc:	f7ff ff9a 	bl	8001234 <void std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_insert<CommandDefinition const* const&>(std::_List_iterator<CommandDefinition const*>, CommandDefinition const* const&)>
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop

08001308 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_get_Node_allocator()>:

  public:
      typedef _Alloc allocator_type;

      _Node_alloc_type&
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_alloc_type*>(&_M_impl); }
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <void __gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::destroy<std::_List_node<CommandDefinition const*> >(std::_List_node<CommandDefinition const*>*)>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_put_node(std::_List_node<CommandDefinition const*>*)>:
      _List_node<_Tp>*
      _M_get_node()
      { return _M_impl._Node_alloc_type::allocate(1); }

      void
      _M_put_node(_List_node<_Tp>* __p)
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
      { _M_impl._Node_alloc_type::deallocate(__p, 1); }
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	2201      	movs	r2, #1
 8001346:	f000 f82f 	bl	80013a8 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::deallocate(std::_List_node<CommandDefinition const*>*, unsigned int)>
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <std::_List_node<CommandDefinition const*>* std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_create_node<CommandDefinition const* const&>(CommandDefinition const* const&)>:
	return __p;
      }
#else
      template<typename... _Args>
        _Node*
        _M_create_node(_Args&&... __args)
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	{
	  _Node* __p = this->_M_get_node();
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f82f 	bl	80013c0 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_get_node()>
 8001362:	60f8      	str	r0, [r7, #12]
	  __try
	    {
	      _M_get_Node_allocator().construct(__p,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ffce 	bl	8001308 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_get_Node_allocator()>
 800136c:	4604      	mov	r4, r0
						std::forward<_Args>(__args)...);
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f7ff ff54 	bl	800121c <CommandDefinition const* const& std::forward<CommandDefinition const* const&>(std::remove_reference<CommandDefinition const* const&>::type&)>
 8001374:	4603      	mov	r3, r0
        _M_create_node(_Args&&... __args)
	{
	  _Node* __p = this->_M_get_node();
	  __try
	    {
	      _M_get_Node_allocator().construct(__p,
 8001376:	4620      	mov	r0, r4
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	461a      	mov	r2, r3
 800137c:	f000 f830 	bl	80013e0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPK17CommandDefinitionEE9constructIS5_IRKS4_EEEvPT_DpOT0_>
	  __catch(...)
	    {
	      _M_put_node(__p);
	      __throw_exception_again;
	    }
	  return __p;
 8001380:	68fb      	ldr	r3, [r7, #12]
	}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	bf00      	nop

0800138c <std::allocator<std::_List_node<CommandDefinition const*> >::allocator(std::allocator<std::_List_node<CommandDefinition const*> > const&)>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	f000 f83b 	bl	8001414 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::new_allocator(__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> > const&)>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::deallocate(std::_List_node<CommandDefinition const*>*, unsigned int)>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f000 ff1d 	bl	80021f4 <operator delete(void*)>
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <std::_List_base<CommandDefinition const*, std::allocator<CommandDefinition const*> >::_M_get_node()>:
      };

      _List_impl _M_impl;

      _List_node<_Tp>*
      _M_get_node()
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
      { return _M_impl._Node_alloc_type::allocate(1); }
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	2101      	movs	r1, #1
 80013ce:	2200      	movs	r2, #0
 80013d0:	f000 f82c 	bl	800142c <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::allocate(unsigned int, void const*)>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop

080013e0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPK17CommandDefinitionEE9constructIS5_IRKS4_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff15 	bl	800121c <CommandDefinition const* const& std::forward<CommandDefinition const* const&>(std::remove_reference<CommandDefinition const* const&>::type&)>
 80013f2:	4604      	mov	r4, r0
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	200c      	movs	r0, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fd39 	bl	8000e70 <operator new(unsigned int, void*)>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPK17CommandDefinitionEE9constructIS5_IRKS4_EEEvPT_DpOT0_+0x2c>
 8001404:	4618      	mov	r0, r3
 8001406:	4621      	mov	r1, r4
 8001408:	f000 f832 	bl	8001470 <std::_List_node<CommandDefinition const*>::_List_node<CommandDefinition const* const&>(CommandDefinition const* const&)>
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop

08001414 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::new_allocator(__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> > const&)>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::allocate(unsigned int, void const*)>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
      { 
	if (__n > this->max_size())
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f831 	bl	80014a0 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::max_size() const>
 800143e:	4602      	mov	r2, r0
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	429a      	cmp	r2, r3
 8001444:	bf2c      	ite	cs
 8001446:	2300      	movcs	r3, #0
 8001448:	2301      	movcc	r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::allocate(unsigned int, void const*)+0x28>
	  std::__throw_bad_alloc();
 8001450:	f000 ff0c 	bl	800226c <std::__throw_bad_alloc()>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f000 febc 	bl	80021dc <operator new(unsigned int)>
 8001464:	4603      	mov	r3, r0
      }
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop

08001470 <std::_List_node<CommandDefinition const*>::_List_node<CommandDefinition const* const&>(CommandDefinition const* const&)>:
      ///< User's data.
      _Tp _M_data;

#if __cplusplus >= 201103L
      template<typename... _Args>
        _List_node(_Args&&... __args)
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	: __detail::_List_node_base(), _M_data(std::forward<_Args>(__args)...) 
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f7ff fec8 	bl	800121c <CommandDefinition const* const& std::forward<CommandDefinition const* const&>(std::remove_reference<CommandDefinition const* const&>::type&)>
 800148c:	4603      	mov	r3, r0
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
        { }
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop

080014a0 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::max_size() const>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <__gnu_cxx::new_allocator<std::_List_node<CommandDefinition const*> >::max_size() const+0x18>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	15555555 	.word	0x15555555

080014bc <__static_initialization_and_destruction_0(int, int)>:
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d122      	bne.n	8001512 <__static_initialization_and_destruction_0(int, int)+0x56>
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d11d      	bne.n	8001512 <__static_initialization_and_destruction_0(int, int)+0x56>
		0,									// maximum number of arguments
		_helpHandler,						// callback function
		"help: lists all available commands\r\n",	// string displayed by help function
};

std::list<const CommandDefinition*> _commands = {&_helpCommandDefinition};
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <__static_initialization_and_destruction_0(int, int)+0x5c>)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fd2b 	bl	8000f44 <std::allocator<CommandDefinition const*>::allocator()>
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	480a      	ldr	r0, [pc, #40]	; (800151c <__static_initialization_and_destruction_0(int, int)+0x60>)
 80014f4:	f107 020c 	add.w	r2, r7, #12
 80014f8:	ca06      	ldmia	r2, {r1, r2}
 80014fa:	f7ff fd65 	bl	8000fc8 <std::list<CommandDefinition const*, std::allocator<CommandDefinition const*> >::list(std::initializer_list<CommandDefinition const*>, std::allocator<CommandDefinition const*> const&)>
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd2a 	bl	8000f5c <std::allocator<CommandDefinition const*>::~allocator()>
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <__static_initialization_and_destruction_0(int, int)+0x60>)
 800150a:	4905      	ldr	r1, [pc, #20]	; (8001520 <__static_initialization_and_destruction_0(int, int)+0x64>)
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <__static_initialization_and_destruction_0(int, int)+0x68>)
 800150e:	f000 fe9f 	bl	8002250 <__aeabi_atexit>
	}

	*output_buffer = '\0';					// add trailing '\0' to the end of output

	return ERROR_NONE;
}
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800bfb8 	.word	0x0800bfb8
 800151c:	20000920 	.word	0x20000920
 8001520:	08000e89 	.word	0x08000e89
 8001524:	20000000 	.word	0x20000000

08001528 <_GLOBAL__sub_I__commands>:
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
 800152c:	2001      	movs	r0, #1
 800152e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001532:	f7ff ffc3 	bl	80014bc <__static_initialization_and_destruction_0(int, int)>
 8001536:	bd80      	pop	{r7, pc}

08001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>:
 * GPIO_[AF0; AF15]_{PP, OD}_{400kHz, 2MHz, 10MHz, 40MHz},
 * GPIO_[AF0; AF15]_{PP, OD}_{400kHz, 2MHz, 10MHz, 40MHz}_{PULL_UP, PULL_DOWN}, GPIO_ANALOG}
 */

void gpioConfigurePin(GPIO_TypeDef *port, enum GpioPin pin, enum GpioConfiguration configuration)
{
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	; 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	460b      	mov	r3, r1
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	72fb      	strb	r3, [r7, #11]
	uint32_t moder, otyper, ospeedr, pupdr, afr, afrx;

	moder = port->MODER;				// localize
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	623b      	str	r3, [r7, #32]
	moder &= ~(GPIO_MODER_mask << (pin * 2));	// clear current setting
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	6a3a      	ldr	r2, [r7, #32]
 800155a:	4013      	ands	r3, r2
 800155c:	623b      	str	r3, [r7, #32]
	moder |= (GPIO_GET_MODER(configuration) << (pin * 2));	// apply new setting
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f003 020f 	and.w	r2, r3, #15
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	6a3a      	ldr	r2, [r7, #32]
 800156e:	4313      	orrs	r3, r2
 8001570:	623b      	str	r3, [r7, #32]
	port->MODER = moder;				// save back
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	601a      	str	r2, [r3, #0]

	otyper = port->OTYPER;				// localize
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	889b      	ldrh	r3, [r3, #4]
 800157c:	b29b      	uxth	r3, r3
 800157e:	61fb      	str	r3, [r7, #28]
	otyper &= ~(GPIO_OTYPER_mask << pin);	// clear current setting
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	2201      	movs	r2, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	4013      	ands	r3, r2
 800158e:	61fb      	str	r3, [r7, #28]
	otyper |= (GPIO_GET_OTYPER(configuration) << pin);	// apply new setting
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001596:	111a      	asrs	r2, r3, #4
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61fb      	str	r3, [r7, #28]
	port->OTYPER = otyper;				// save back
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	809a      	strh	r2, [r3, #4]

	ospeedr = port->OSPEEDR;			// localize
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	61bb      	str	r3, [r7, #24]
	ospeedr &= ~(GPIO_OSPEEDR_mask << (pin * 2));	// clear current setting
 80015b2:	7afb      	ldrb	r3, [r7, #11]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
	ospeedr |= (GPIO_GET_OSPEEDR(configuration) << (pin * 2));	// apply new setting
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80015ca:	121a      	asrs	r2, r3, #8
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
	port->OSPEEDR = ospeedr;			// save back
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	609a      	str	r2, [r3, #8]

	pupdr = port->PUPDR;				// localize
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	617b      	str	r3, [r7, #20]
	pupdr &= ~(GPIO_PUPDR_mask << (pin * 2));	// clear current setting
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
	pupdr |= (GPIO_GET_PUPDR(configuration) << (pin * 2));	// apply new setting
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80015fe:	131a      	asrs	r2, r3, #12
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4313      	orrs	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
	port->PUPDR = pupdr;				// save back
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	60da      	str	r2, [r3, #12]

	if (pin < 8)							// determine which AFR register should be used
 8001614:	7afb      	ldrb	r3, [r7, #11]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d802      	bhi.n	8001620 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)+0xe8>
		afrx = 0;							// AFRL - pins [0; 7]
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e004      	b.n	800162a <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)+0xf2>
	else
	{
		afrx = 1;							// AFRH - pins [8; 15]
 8001620:	2301      	movs	r3, #1
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
		pin = (enum GpioPin)((uint32_t)pin - 8);	// trim pin number
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	3b08      	subs	r3, #8
 8001628:	72fb      	strb	r3, [r7, #11]
	}

	afr = port->AFR[afrx];				// localize
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	613b      	str	r3, [r7, #16]
	afr &= ~(GPIO_AFRx_mask << (pin * 4));	// clear current setting
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
	afr |= (GPIO_GET_AFR(configuration) << (pin * 4));	// apply new setting
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800164e:	141a      	asrs	r2, r3, #16
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
	port->AFR[afrx] = afr;				// save back
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001662:	3208      	adds	r2, #8
 8001664:	6939      	ldr	r1, [r7, #16]
 8001666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800166a:	372c      	adds	r7, #44	; 0x2c
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <TIM6_IRQHandler>:
 * TIM6_IRQHandler
 */

extern "C" void TIM6_IRQHandler(void) __attribute__ ((interrupt));
void TIM6_IRQHandler(void)
{
 8001674:	4668      	mov	r0, sp
 8001676:	f020 0107 	bic.w	r1, r0, #7
 800167a:	468d      	mov	sp, r1
 800167c:	b481      	push	{r0, r7}
 800167e:	af00      	add	r7, sp, #0
	tim6OverflowCount++;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <TIM6_IRQHandler+0x28>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	3301      	adds	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <TIM6_IRQHandler+0x28>)
 800168c:	801a      	strh	r2, [r3, #0]

	TIM6->SR = 0;							// clear UIF which is only bit in this register
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <TIM6_IRQHandler+0x2c>)
 8001690:	2200      	movs	r2, #0
 8001692:	821a      	strh	r2, [r3, #16]
}
 8001694:	46bd      	mov	sp, r7
 8001696:	bc81      	pop	{r0, r7}
 8001698:	4685      	mov	sp, r0
 800169a:	4770      	bx	lr
 800169c:	20000928 	.word	0x20000928
 80016a0:	40001000 	.word	0x40001000

080016a4 <LCD_Init()>:
 *
 * Enables RCC clocks for LCD driver. Enables GPIO ports. Configures LCD driver to work with default LCD pannel on STM32L152C-discovery board.
 *
 */
void LCD_Init()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
   	// getting access to RCC registers
	PWR->CR |= PWR_CR_DBP;
 80016a8:	4b6e      	ldr	r3, [pc, #440]	; (8001864 <LCD_Init()+0x1c0>)
 80016aa:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <LCD_Init()+0x1c0>)
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016b2:	601a      	str	r2, [r3, #0]

	// select the RTC clock source
	RCC->CSR |= (RCC_CSR_RTCSEL_LSE | RCC_CSR_RTCEN | RCC_CSR_LSEON);
 80016b4:	4a6c      	ldr	r2, [pc, #432]	; (8001868 <LCD_Init()+0x1c4>)
 80016b6:	4b6c      	ldr	r3, [pc, #432]	; (8001868 <LCD_Init()+0x1c4>)
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ba:	f443 0382 	orr.w	r3, r3, #4259840	; 0x410000
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6353      	str	r3, [r2, #52]	; 0x34

	// Enable rcc clock fot gpio
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <LCD_Init()+0x1c4>)
 80016c6:	4a68      	ldr	r2, [pc, #416]	; (8001868 <LCD_Init()+0x1c4>)
 80016c8:	69d2      	ldr	r2, [r2, #28]
 80016ca:	f042 0207 	orr.w	r2, r2, #7
 80016ce:	61da      	str	r2, [r3, #28]

	// Enable rcc clock for lcd
	RCC->APB1ENR|=RCC_APB1ENR_LCDEN;
 80016d0:	4b65      	ldr	r3, [pc, #404]	; (8001868 <LCD_Init()+0x1c4>)
 80016d2:	4a65      	ldr	r2, [pc, #404]	; (8001868 <LCD_Init()+0x1c4>)
 80016d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
	// 01 - LSE     RCC_CSR_RTCSEL_LSE
	// 10 - LSI     RCC_CSR_RTCSEL_LSI
	// 11 - HSE		RCC_CSR_RTCSEL_HSE

	// enabling RTC clock
	RCC->CSR |= (RCC_CSR_RTCSEL_LSI | RCC_CSR_RTCEN);
 80016dc:	4b62      	ldr	r3, [pc, #392]	; (8001868 <LCD_Init()+0x1c4>)
 80016de:	4a62      	ldr	r2, [pc, #392]	; (8001868 <LCD_Init()+0x1c4>)
 80016e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016e2:	f442 0284 	orr.w	r2, r2, #4325376	; 0x420000
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34

	// Configure the LCD GPIO pins as alternate functions
	// Comons
	gpioConfigurePin(LCD_COM0_GPIO, LCD_COM0_pin, GPIO_COM_CONFIGURATION);
 80016e8:	4860      	ldr	r0, [pc, #384]	; (800186c <LCD_Init()+0x1c8>)
 80016ea:	2108      	movs	r1, #8
 80016ec:	4a60      	ldr	r2, [pc, #384]	; (8001870 <LCD_Init()+0x1cc>)
 80016ee:	f7ff ff23 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_COM1_GPIO, LCD_COM1_pin, GPIO_COM_CONFIGURATION);
 80016f2:	485e      	ldr	r0, [pc, #376]	; (800186c <LCD_Init()+0x1c8>)
 80016f4:	2109      	movs	r1, #9
 80016f6:	4a5e      	ldr	r2, [pc, #376]	; (8001870 <LCD_Init()+0x1cc>)
 80016f8:	f7ff ff1e 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_COM2_GPIO, LCD_COM2_pin, GPIO_COM_CONFIGURATION);
 80016fc:	485b      	ldr	r0, [pc, #364]	; (800186c <LCD_Init()+0x1c8>)
 80016fe:	210a      	movs	r1, #10
 8001700:	4a5b      	ldr	r2, [pc, #364]	; (8001870 <LCD_Init()+0x1cc>)
 8001702:	f7ff ff19 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_COM3_GPIO, LCD_COM3_pin, GPIO_COM_CONFIGURATION);
 8001706:	485b      	ldr	r0, [pc, #364]	; (8001874 <LCD_Init()+0x1d0>)
 8001708:	2109      	movs	r1, #9
 800170a:	4a59      	ldr	r2, [pc, #356]	; (8001870 <LCD_Init()+0x1cc>)
 800170c:	f7ff ff14 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>

	// Segments
	gpioConfigurePin(LCD_SEG0_GPIO, LCD_SEG0_pin, GPIO_SEG_CONFIGURATION);
 8001710:	4856      	ldr	r0, [pc, #344]	; (800186c <LCD_Init()+0x1c8>)
 8001712:	2101      	movs	r1, #1
 8001714:	4a56      	ldr	r2, [pc, #344]	; (8001870 <LCD_Init()+0x1cc>)
 8001716:	f7ff ff0f 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG1_GPIO, LCD_SEG1_pin, GPIO_SEG_CONFIGURATION);
 800171a:	4854      	ldr	r0, [pc, #336]	; (800186c <LCD_Init()+0x1c8>)
 800171c:	2102      	movs	r1, #2
 800171e:	4a54      	ldr	r2, [pc, #336]	; (8001870 <LCD_Init()+0x1cc>)
 8001720:	f7ff ff0a 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG2_GPIO, LCD_SEG2_pin, GPIO_SEG_CONFIGURATION);
 8001724:	4851      	ldr	r0, [pc, #324]	; (800186c <LCD_Init()+0x1c8>)
 8001726:	2103      	movs	r1, #3
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <LCD_Init()+0x1cc>)
 800172a:	f7ff ff05 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG3_GPIO, LCD_SEG3_pin, GPIO_SEG_CONFIGURATION);
 800172e:	4851      	ldr	r0, [pc, #324]	; (8001874 <LCD_Init()+0x1d0>)
 8001730:	2103      	movs	r1, #3
 8001732:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <LCD_Init()+0x1cc>)
 8001734:	f7ff ff00 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG4_GPIO, LCD_SEG4_pin, GPIO_SEG_CONFIGURATION);
 8001738:	484e      	ldr	r0, [pc, #312]	; (8001874 <LCD_Init()+0x1d0>)
 800173a:	2104      	movs	r1, #4
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <LCD_Init()+0x1cc>)
 800173e:	f7ff fefb 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG5_GPIO, LCD_SEG5_pin, GPIO_SEG_CONFIGURATION);
 8001742:	484c      	ldr	r0, [pc, #304]	; (8001874 <LCD_Init()+0x1d0>)
 8001744:	2105      	movs	r1, #5
 8001746:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <LCD_Init()+0x1cc>)
 8001748:	f7ff fef6 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG6_GPIO, LCD_SEG6_pin, GPIO_SEG_CONFIGURATION);
 800174c:	4849      	ldr	r0, [pc, #292]	; (8001874 <LCD_Init()+0x1d0>)
 800174e:	210a      	movs	r1, #10
 8001750:	4a47      	ldr	r2, [pc, #284]	; (8001870 <LCD_Init()+0x1cc>)
 8001752:	f7ff fef1 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG7_GPIO, LCD_SEG7_pin, GPIO_SEG_CONFIGURATION);
 8001756:	4847      	ldr	r0, [pc, #284]	; (8001874 <LCD_Init()+0x1d0>)
 8001758:	210b      	movs	r1, #11
 800175a:	4a45      	ldr	r2, [pc, #276]	; (8001870 <LCD_Init()+0x1cc>)
 800175c:	f7ff feec 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG8_GPIO, LCD_SEG8_pin, GPIO_SEG_CONFIGURATION);
 8001760:	4844      	ldr	r0, [pc, #272]	; (8001874 <LCD_Init()+0x1d0>)
 8001762:	210c      	movs	r1, #12
 8001764:	4a42      	ldr	r2, [pc, #264]	; (8001870 <LCD_Init()+0x1cc>)
 8001766:	f7ff fee7 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG9_GPIO, LCD_SEG9_pin, GPIO_SEG_CONFIGURATION);
 800176a:	4842      	ldr	r0, [pc, #264]	; (8001874 <LCD_Init()+0x1d0>)
 800176c:	210d      	movs	r1, #13
 800176e:	4a40      	ldr	r2, [pc, #256]	; (8001870 <LCD_Init()+0x1cc>)
 8001770:	f7ff fee2 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG10_GPIO, LCD_SEG10_pin, GPIO_SEG_CONFIGURATION);
 8001774:	483f      	ldr	r0, [pc, #252]	; (8001874 <LCD_Init()+0x1d0>)
 8001776:	210e      	movs	r1, #14
 8001778:	4a3d      	ldr	r2, [pc, #244]	; (8001870 <LCD_Init()+0x1cc>)
 800177a:	f7ff fedd 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG11_GPIO, LCD_SEG11_pin, GPIO_SEG_CONFIGURATION);
 800177e:	483d      	ldr	r0, [pc, #244]	; (8001874 <LCD_Init()+0x1d0>)
 8001780:	210f      	movs	r1, #15
 8001782:	4a3b      	ldr	r2, [pc, #236]	; (8001870 <LCD_Init()+0x1cc>)
 8001784:	f7ff fed8 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG12_GPIO, LCD_SEG12_pin, GPIO_SEG_CONFIGURATION);
 8001788:	4838      	ldr	r0, [pc, #224]	; (800186c <LCD_Init()+0x1c8>)
 800178a:	210f      	movs	r1, #15
 800178c:	4a38      	ldr	r2, [pc, #224]	; (8001870 <LCD_Init()+0x1cc>)
 800178e:	f7ff fed3 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG13_GPIO, LCD_SEG13_pin, GPIO_SEG_CONFIGURATION);
 8001792:	4838      	ldr	r0, [pc, #224]	; (8001874 <LCD_Init()+0x1d0>)
 8001794:	2108      	movs	r1, #8
 8001796:	4a36      	ldr	r2, [pc, #216]	; (8001870 <LCD_Init()+0x1cc>)
 8001798:	f7ff fece 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG14_GPIO, LCD_SEG14_pin, GPIO_SEG_CONFIGURATION);
 800179c:	4836      	ldr	r0, [pc, #216]	; (8001878 <LCD_Init()+0x1d4>)
 800179e:	2100      	movs	r1, #0
 80017a0:	4a33      	ldr	r2, [pc, #204]	; (8001870 <LCD_Init()+0x1cc>)
 80017a2:	f7ff fec9 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG15_GPIO, LCD_SEG15_pin, GPIO_SEG_CONFIGURATION);
 80017a6:	4834      	ldr	r0, [pc, #208]	; (8001878 <LCD_Init()+0x1d4>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <LCD_Init()+0x1cc>)
 80017ac:	f7ff fec4 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG16_GPIO, LCD_SEG16_pin, GPIO_SEG_CONFIGURATION);
 80017b0:	4831      	ldr	r0, [pc, #196]	; (8001878 <LCD_Init()+0x1d4>)
 80017b2:	2102      	movs	r1, #2
 80017b4:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <LCD_Init()+0x1cc>)
 80017b6:	f7ff febf 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG17_GPIO, LCD_SEG17_pin, GPIO_SEG_CONFIGURATION);
 80017ba:	482f      	ldr	r0, [pc, #188]	; (8001878 <LCD_Init()+0x1d4>)
 80017bc:	2103      	movs	r1, #3
 80017be:	4a2c      	ldr	r2, [pc, #176]	; (8001870 <LCD_Init()+0x1cc>)
 80017c0:	f7ff feba 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG18_GPIO, LCD_SEG18_pin, GPIO_SEG_CONFIGURATION);
 80017c4:	482c      	ldr	r0, [pc, #176]	; (8001878 <LCD_Init()+0x1d4>)
 80017c6:	2106      	movs	r1, #6
 80017c8:	4a29      	ldr	r2, [pc, #164]	; (8001870 <LCD_Init()+0x1cc>)
 80017ca:	f7ff feb5 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG19_GPIO, LCD_SEG19_pin, GPIO_SEG_CONFIGURATION);
 80017ce:	482a      	ldr	r0, [pc, #168]	; (8001878 <LCD_Init()+0x1d4>)
 80017d0:	2107      	movs	r1, #7
 80017d2:	4a27      	ldr	r2, [pc, #156]	; (8001870 <LCD_Init()+0x1cc>)
 80017d4:	f7ff feb0 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG20_GPIO, LCD_SEG20_pin, GPIO_SEG_CONFIGURATION);
 80017d8:	4827      	ldr	r0, [pc, #156]	; (8001878 <LCD_Init()+0x1d4>)
 80017da:	2108      	movs	r1, #8
 80017dc:	4a24      	ldr	r2, [pc, #144]	; (8001870 <LCD_Init()+0x1cc>)
 80017de:	f7ff feab 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG21_GPIO, LCD_SEG21_pin, GPIO_SEG_CONFIGURATION);
 80017e2:	4825      	ldr	r0, [pc, #148]	; (8001878 <LCD_Init()+0x1d4>)
 80017e4:	2109      	movs	r1, #9
 80017e6:	4a22      	ldr	r2, [pc, #136]	; (8001870 <LCD_Init()+0x1cc>)
 80017e8:	f7ff fea6 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG22_GPIO, LCD_SEG22_pin, GPIO_SEG_CONFIGURATION);
 80017ec:	4822      	ldr	r0, [pc, #136]	; (8001878 <LCD_Init()+0x1d4>)
 80017ee:	210a      	movs	r1, #10
 80017f0:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <LCD_Init()+0x1cc>)
 80017f2:	f7ff fea1 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	gpioConfigurePin(LCD_SEG23_GPIO, LCD_SEG23_pin, GPIO_SEG_CONFIGURATION);
 80017f6:	4820      	ldr	r0, [pc, #128]	; (8001878 <LCD_Init()+0x1d4>)
 80017f8:	210b      	movs	r1, #11
 80017fa:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <LCD_Init()+0x1cc>)
 80017fc:	f7ff fe9c 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>

	// multiplexed pin enabled
	LCD->CR|=LCD_CR_MUX_SEG;
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <LCD_Init()+0x1d8>)
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <LCD_Init()+0x1d8>)
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800180a:	601a      	str	r2, [r3, #0]

	// BIAS in LCD_CR 1/3
	LCD->CR|=LCD_CR_BIAS_1;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <LCD_Init()+0x1d8>)
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <LCD_Init()+0x1d8>)
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001816:	601a      	str	r2, [r3, #0]

	// DUTY in LCD_CR 1/4
	LCD->CR|=(LCD_CR_DUTY_0 | LCD_CR_DUTY_1);
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <LCD_Init()+0x1d8>)
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <LCD_Init()+0x1d8>)
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f042 020c 	orr.w	r2, r2, #12
 8001822:	601a      	str	r2, [r3, #0]

	// Voltage internal source

	// Enable the display (LCDEN bit in LCD_FCR register)
	LCD->CR|=LCD_CR_LCDEN;
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <LCD_Init()+0x1d8>)
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <LCD_Init()+0x1d8>)
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

	// prescaler 1

	// divider 31
	LCD->FCR|=LCD_FCR_DIV;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <LCD_Init()+0x1d8>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <LCD_Init()+0x1d8>)
 8001834:	6852      	ldr	r2, [r2, #4]
 8001836:	f442 1270 	orr.w	r2, r2, #3932160	; 0x3c0000
 800183a:	605a      	str	r2, [r3, #4]

	// blink mode off

	// blink frequency 32
	LCD->FCR|=LCD_FCR_BLINKF_1;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <LCD_Init()+0x1d8>)
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <LCD_Init()+0x1d8>)
 8001840:	6852      	ldr	r2, [r2, #4]
 8001842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001846:	605a      	str	r2, [r3, #4]

	// Program the contrast (CC bits in LCD_CR)
	LCD->FCR|=(LCD_FCR_CC_2);
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <LCD_Init()+0x1d8>)
 800184a:	4a0c      	ldr	r2, [pc, #48]	; (800187c <LCD_Init()+0x1d8>)
 800184c:	6852      	ldr	r2, [r2, #4]
 800184e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001852:	605a      	str	r2, [r3, #4]

	// deadtime 0

	// pulse on duration 4
	LCD->FCR|=LCD_FCR_PON_2;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <LCD_Init()+0x1d8>)
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <LCD_Init()+0x1d8>)
 8001858:	6852      	ldr	r2, [r2, #4]
 800185a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800185e:	605a      	str	r2, [r3, #4]
}
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40007000 	.word	0x40007000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	000b0302 	.word	0x000b0302
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40002400 	.word	0x40002400

08001880 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)>:
 * \param [in] Colon display enable. Values 0 or 1.
 * \param [in] Digit number. Values from 1 to 6.
 *
 */
static void LCD_Conv_Char_Seg(char c,bool point,bool column, uint8_t* digit)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	460b      	mov	r3, r1
 800188e:	71bb      	strb	r3, [r7, #6]
 8001890:	4613      	mov	r3, r2
 8001892:	717b      	strb	r3, [r7, #5]
    uint16_t ch = 0 ;
 8001894:	2300      	movs	r3, #0
 8001896:	81fb      	strh	r3, [r7, #14]
    uint8_t i,j;

    switch (c)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b20      	cmp	r3, #32
 800189c:	d005      	beq.n	80018aa <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x2a>
 800189e:	2b20      	cmp	r3, #32
 80018a0:	db0e      	blt.n	80018c0 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x40>
 80018a2:	3b30      	subs	r3, #48	; 0x30
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d80b      	bhi.n	80018c0 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x40>
 80018a8:	e002      	b.n	80018b0 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x30>
    {
        case ' ' :
        	ch = 0x00;
 80018aa:	2300      	movs	r3, #0
 80018ac:	81fb      	strh	r3, [r7, #14]
        	break;
 80018ae:	e022      	b.n	80018f6 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x76>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	ch = NumberMap[c-0x30];
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0xd0>)
 80018b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018bc:	81fb      	strh	r3, [r7, #14]
        	break;
 80018be:	e01a      	b.n	80018f6 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x76>

        default:
        	/* The character c is one letter in upper case*/
        	if ( (c < 0x5b) && (c > 0x40) ){
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b5a      	cmp	r3, #90	; 0x5a
 80018c4:	d809      	bhi.n	80018da <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x5a>
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	d906      	bls.n	80018da <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x5a>
        	   	ch = CapLetterMap[c-'A'];
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0xd4>)
 80018d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018d8:	81fb      	strh	r3, [r7, #14]
        	}
        	/* The character c is one letter in lower case*/
        	if ( (c <0x7b) && ( c> 0x60) ){
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b7a      	cmp	r3, #122	; 0x7a
 80018de:	d809      	bhi.n	80018f4 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x74>
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2b60      	cmp	r3, #96	; 0x60
 80018e4:	d906      	bls.n	80018f4 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x74>
        		ch = CapLetterMap[c-'a'];
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0xd4>)
 80018ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018f2:	81fb      	strh	r3, [r7, #14]
        	}
        	break;
 80018f4:	bf00      	nop
    }

    /* Set the digital point can be displayed if the point is on */
    if (point){
 80018f6:	79bb      	ldrb	r3, [r7, #6]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x84>
    	ch |= 0x0002;
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	81fb      	strh	r3, [r7, #14]
    }

    /* Set the "COL" segment in the character that can be displayed if the column is on */
    if (column){
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x92>
    	ch |= 0x0020;
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	81fb      	strh	r3, [r7, #14]
    }

    for (i = 12,j=0 ;j<4; i-=4,j++){
 8001912:	230c      	movs	r3, #12
 8001914:	737b      	strb	r3, [r7, #13]
 8001916:	2300      	movs	r3, #0
 8001918:	733b      	strb	r3, [r7, #12]
 800191a:	e011      	b.n	8001940 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0xc0>
    	digit[j] = (ch >> i) & 0x0f; //To isolate the less signifiant dibit
 800191c:	7b3b      	ldrb	r3, [r7, #12]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	89f9      	ldrh	r1, [r7, #14]
 8001924:	7b7a      	ldrb	r2, [r7, #13]
 8001926:	fa41 f202 	asr.w	r2, r1, r2
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 020f 	and.w	r2, r2, #15
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	701a      	strb	r2, [r3, #0]
    /* Set the "COL" segment in the character that can be displayed if the column is on */
    if (column){
    	ch |= 0x0020;
    }

    for (i = 12,j=0 ;j<4; i-=4,j++){
 8001934:	7b7b      	ldrb	r3, [r7, #13]
 8001936:	3b04      	subs	r3, #4
 8001938:	737b      	strb	r3, [r7, #13]
 800193a:	7b3b      	ldrb	r3, [r7, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	733b      	strb	r3, [r7, #12]
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d9ea      	bls.n	800191c <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)+0x9c>
    	digit[j] = (ch >> i) & 0x0f; //To isolate the less signifiant dibit
    }
}
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	0800c038 	.word	0x0800c038
 8001954:	0800c004 	.word	0x0800c004

08001958 <LCD_WriteChar(char, bool, bool, unsigned char)>:
 * \param [in] Colon display enable. Values 0 or 1.
 * \param [in] Digit number. Values from 1 to 6.
 *
 */
void LCD_WriteChar(char ch, bool point, bool column, uint8_t position)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	71f8      	strb	r0, [r7, #7]
 8001960:	71b9      	strb	r1, [r7, #6]
 8001962:	717a      	strb	r2, [r7, #5]
 8001964:	713b      	strb	r3, [r7, #4]
    uint8_t digit[4];     /* Digit frame buffer */

    /* To convert displayed character in segment in array digit */
    LCD_Conv_Char_Seg(ch,point,column,digit);
 8001966:	79f8      	ldrb	r0, [r7, #7]
 8001968:	79b9      	ldrb	r1, [r7, #6]
 800196a:	797a      	ldrb	r2, [r7, #5]
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	f7ff ff86 	bl	8001880 <LCD_Conv_Char_Seg(char, bool, bool, unsigned char*)>

    while((LCD->SR&LCD_SR_UDR)!=0);
 8001974:	bf00      	nop
 8001976:	4b99      	ldr	r3, [pc, #612]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2300      	moveq	r3, #0
 8001984:	2301      	movne	r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f4      	bne.n	8001976 <LCD_WriteChar(char, bool, bool, unsigned char)+0x1e>

    switch (position)
 800198c:	793b      	ldrb	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	2b05      	cmp	r3, #5
 8001992:	f200 8232 	bhi.w	8001dfa <LCD_WriteChar(char, bool, bool, unsigned char)+0x4a2>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <LCD_WriteChar(char, bool, bool, unsigned char)+0x44>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019b5 	.word	0x080019b5
 80019a0:	08001a5f 	.word	0x08001a5f
 80019a4:	08001b39 	.word	0x08001b39
 80019a8:	08001be1 	.word	0x08001be1
 80019ac:	08001c93 	.word	0x08001c93
 80019b0:	08001d35 	.word	0x08001d35
    {
      /* Position 1 on LCD (Digit1)*/
      case 1:
    	LCD->RAM[0] &= 0xcffffffc;
 80019b4:	4a89      	ldr	r2, [pc, #548]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019b6:	4b89      	ldr	r3, [pc, #548]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	6153      	str	r3, [r2, #20]
    	LCD->RAM[2] &= 0xcffffffc;
 80019c4:	4a85      	ldr	r2, [pc, #532]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019c6:	4b85      	ldr	r3, [pc, #532]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	61d3      	str	r3, [r2, #28]
    	LCD->RAM[4] &= 0xcffffffc;
 80019d4:	4a81      	ldr	r2, [pc, #516]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019d6:	4b81      	ldr	r3, [pc, #516]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80019de:	f023 0303 	bic.w	r3, r3, #3
 80019e2:	6253      	str	r3, [r2, #36]	; 0x24
    	LCD->RAM[6] &= 0xcffffffc;
 80019e4:	4a7d      	ldr	r2, [pc, #500]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019e6:	4b7d      	ldr	r3, [pc, #500]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	62d3      	str	r3, [r2, #44]	; 0x2c

    	LCD->RAM[0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E
 80019f4:	4b79      	ldr	r3, [pc, #484]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019f6:	4a79      	ldr	r2, [pc, #484]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 80019f8:	6951      	ldr	r1, [r2, #20]
 80019fa:	7b3a      	ldrb	r2, [r7, #12]
 80019fc:	f002 020c 	and.w	r2, r2, #12
 8001a00:	0690      	lsls	r0, r2, #26
 8001a02:	7b3a      	ldrb	r2, [r7, #12]
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	4302      	orrs	r2, r0
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	615a      	str	r2, [r3, #20]
   		LCD->RAM[2] |= ((digit[1]& 0x0c) << 26 ) | (digit[1]& 0x03) ; // 1F 1A 1C 1D
 8001a0e:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a10:	4a72      	ldr	r2, [pc, #456]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a12:	69d1      	ldr	r1, [r2, #28]
 8001a14:	7b7a      	ldrb	r2, [r7, #13]
 8001a16:	f002 020c 	and.w	r2, r2, #12
 8001a1a:	0690      	lsls	r0, r2, #26
 8001a1c:	7b7a      	ldrb	r2, [r7, #13]
 8001a1e:	f002 0203 	and.w	r2, r2, #3
 8001a22:	4302      	orrs	r2, r0
 8001a24:	430a      	orrs	r2, r1
 8001a26:	61da      	str	r2, [r3, #28]
   		LCD->RAM[4] |= ((digit[2]& 0x0c) << 26 ) | (digit[2]& 0x03) ; // 1Q 1K 1Col 1P
 8001a28:	4b6c      	ldr	r3, [pc, #432]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a2a:	4a6c      	ldr	r2, [pc, #432]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a2c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001a2e:	7bba      	ldrb	r2, [r7, #14]
 8001a30:	f002 020c 	and.w	r2, r2, #12
 8001a34:	0690      	lsls	r0, r2, #26
 8001a36:	7bba      	ldrb	r2, [r7, #14]
 8001a38:	f002 0203 	and.w	r2, r2, #3
 8001a3c:	4302      	orrs	r2, r0
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
   		LCD->RAM[6] |= ((digit[3]& 0x0c) << 26 ) | (digit[3]& 0x03) ; // 1H 1J 1DP 1N
 8001a42:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a44:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	f002 020c 	and.w	r2, r2, #12
 8001a4e:	0690      	lsls	r0, r2, #26
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	4302      	orrs	r2, r0
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c

   		break;
 8001a5c:	e1ce      	b.n	8001dfc <LCD_WriteChar(char, bool, bool, unsigned char)+0x4a4>

   	  /* Position 2 on LCD (Digit2)*/
      case 2:
    	LCD->RAM[0] &= 0xf3ffff03;
 8001a5e:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a60:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a68:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001a6c:	6153      	str	r3, [r2, #20]
   		LCD->RAM[2] &= 0xf3ffff03;
 8001a6e:	4a5b      	ldr	r2, [pc, #364]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a70:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a78:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001a7c:	61d3      	str	r3, [r2, #28]
   		LCD->RAM[4] &= 0xf3ffff03;
 8001a7e:	4a57      	ldr	r2, [pc, #348]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a80:	4b56      	ldr	r3, [pc, #344]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a88:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001a8c:	6253      	str	r3, [r2, #36]	; 0x24
   		LCD->RAM[6] &= 0xf3ffff03;
 8001a8e:	4a53      	ldr	r2, [pc, #332]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a90:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a98:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    	LCD->RAM[0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E
 8001a9e:	4b4f      	ldr	r3, [pc, #316]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001aa2:	6951      	ldr	r1, [r2, #20]
 8001aa4:	7b3a      	ldrb	r2, [r7, #12]
 8001aa6:	f002 020c 	and.w	r2, r2, #12
 8001aaa:	0610      	lsls	r0, r2, #24
 8001aac:	7b3a      	ldrb	r2, [r7, #12]
 8001aae:	f002 0202 	and.w	r2, r2, #2
 8001ab2:	0192      	lsls	r2, r2, #6
 8001ab4:	4310      	orrs	r0, r2
 8001ab6:	7b3a      	ldrb	r2, [r7, #12]
 8001ab8:	f002 0201 	and.w	r2, r2, #1
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4302      	orrs	r2, r0
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	615a      	str	r2, [r3, #20]
   		LCD->RAM[2] |= ((digit[1]& 0x0c) << 24 )|((digit[1]& 0x02) << 6 )|((digit[1]& 0x01) << 2 ) ; // 2F 2A 2C 2D
 8001ac4:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001ac6:	4a45      	ldr	r2, [pc, #276]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001ac8:	69d1      	ldr	r1, [r2, #28]
 8001aca:	7b7a      	ldrb	r2, [r7, #13]
 8001acc:	f002 020c 	and.w	r2, r2, #12
 8001ad0:	0610      	lsls	r0, r2, #24
 8001ad2:	7b7a      	ldrb	r2, [r7, #13]
 8001ad4:	f002 0202 	and.w	r2, r2, #2
 8001ad8:	0192      	lsls	r2, r2, #6
 8001ada:	4310      	orrs	r0, r2
 8001adc:	7b7a      	ldrb	r2, [r7, #13]
 8001ade:	f002 0201 	and.w	r2, r2, #1
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4302      	orrs	r2, r0
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	61da      	str	r2, [r3, #28]
   		LCD->RAM[4] |= ((digit[2]& 0x0c) << 24 )|((digit[2]& 0x02) << 6 )|((digit[2]& 0x01) << 2 ) ; // 2Q 2K 2Col 2P
 8001aea:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001aec:	4a3b      	ldr	r2, [pc, #236]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001aee:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001af0:	7bba      	ldrb	r2, [r7, #14]
 8001af2:	f002 020c 	and.w	r2, r2, #12
 8001af6:	0610      	lsls	r0, r2, #24
 8001af8:	7bba      	ldrb	r2, [r7, #14]
 8001afa:	f002 0202 	and.w	r2, r2, #2
 8001afe:	0192      	lsls	r2, r2, #6
 8001b00:	4310      	orrs	r0, r2
 8001b02:	7bba      	ldrb	r2, [r7, #14]
 8001b04:	f002 0201 	and.w	r2, r2, #1
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4302      	orrs	r2, r0
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
   		LCD->RAM[6] |= ((digit[3]& 0x0c) << 24 )|((digit[3]& 0x02) << 6 )|((digit[3]& 0x01) << 2 ) ; // 2H 2J 2DP 2N
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b12:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	f002 020c 	and.w	r2, r2, #12
 8001b1c:	0610      	lsls	r0, r2, #24
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	f002 0202 	and.w	r2, r2, #2
 8001b24:	0192      	lsls	r2, r2, #6
 8001b26:	4310      	orrs	r0, r2
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	f002 0201 	and.w	r2, r2, #1
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4302      	orrs	r2, r0
 8001b32:	430a      	orrs	r2, r1
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c

    	break;
 8001b36:	e161      	b.n	8001dfc <LCD_WriteChar(char, bool, bool, unsigned char)+0x4a4>

      /* Position 3 on LCD (Digit3)*/
      case 3:
    	LCD->RAM[0] &= 0xfcfffcff;
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b3a:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b3c:	6952      	ldr	r2, [r2, #20]
 8001b3e:	f022 2203 	bic.w	r2, r2, #50332416	; 0x3000300
 8001b42:	615a      	str	r2, [r3, #20]
   		LCD->RAM[2] &= 0xfcfffcff;
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b46:	4a25      	ldr	r2, [pc, #148]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b48:	69d2      	ldr	r2, [r2, #28]
 8001b4a:	f022 2203 	bic.w	r2, r2, #50332416	; 0x3000300
 8001b4e:	61da      	str	r2, [r3, #28]
   		LCD->RAM[4] &= 0xfcfffcff;
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b52:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b56:	f022 2203 	bic.w	r2, r2, #50332416	; 0x3000300
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
   		LCD->RAM[6] &= 0xfcfffcff;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b62:	f022 2203 	bic.w	r2, r2, #50332416	; 0x3000300
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c

    	LCD->RAM[0] |= ((digit[0]& 0x0c) << 22 ) | ((digit[0]& 0x03) << 8 ) ; // 3G 3B 3M 3E
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b6c:	6951      	ldr	r1, [r2, #20]
 8001b6e:	7b3a      	ldrb	r2, [r7, #12]
 8001b70:	f002 020c 	and.w	r2, r2, #12
 8001b74:	0590      	lsls	r0, r2, #22
 8001b76:	7b3a      	ldrb	r2, [r7, #12]
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0212      	lsls	r2, r2, #8
 8001b7e:	4302      	orrs	r2, r0
 8001b80:	430a      	orrs	r2, r1
 8001b82:	615a      	str	r2, [r3, #20]
    	LCD->RAM[2] |= ((digit[1]& 0x0c) << 22 ) | ((digit[1]& 0x03) << 8 ) ; // 3F 3A 3C 3D
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001b88:	69d1      	ldr	r1, [r2, #28]
 8001b8a:	7b7a      	ldrb	r2, [r7, #13]
 8001b8c:	f002 020c 	and.w	r2, r2, #12
 8001b90:	0590      	lsls	r0, r2, #22
 8001b92:	7b7a      	ldrb	r2, [r7, #13]
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	0212      	lsls	r2, r2, #8
 8001b9a:	4302      	orrs	r2, r0
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	61da      	str	r2, [r3, #28]
   		LCD->RAM[4] |= ((digit[2]& 0x0c) << 22 ) | ((digit[2]& 0x03) << 8 ) ; // 3Q 3K 3Col 3P
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001ba4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001ba6:	7bba      	ldrb	r2, [r7, #14]
 8001ba8:	f002 020c 	and.w	r2, r2, #12
 8001bac:	0590      	lsls	r0, r2, #22
 8001bae:	7bba      	ldrb	r2, [r7, #14]
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0212      	lsls	r2, r2, #8
 8001bb6:	4302      	orrs	r2, r0
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
   		LCD->RAM[6] |= ((digit[3]& 0x0c) << 22 ) | ((digit[3]& 0x03) << 8 ) ; // 3H 3J 3DP 3N
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <LCD_WriteChar(char, bool, bool, unsigned char)+0x284>)
 8001bc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	f002 020c 	and.w	r2, r2, #12
 8001bc8:	0590      	lsls	r0, r2, #22
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	f002 0203 	and.w	r2, r2, #3
 8001bd0:	0212      	lsls	r2, r2, #8
 8001bd2:	4302      	orrs	r2, r0
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c

   		break;
 8001bd8:	e110      	b.n	8001dfc <LCD_WriteChar(char, bool, bool, unsigned char)+0x4a4>
 8001bda:	bf00      	nop
 8001bdc:	40002400 	.word	0x40002400

      /* Position 4 on LCD (Digit4)*/
      case 4:
    	LCD->RAM[0] &= 0xffcff3ff;
 8001be0:	4a8b      	ldr	r2, [pc, #556]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001be2:	4b8b      	ldr	r3, [pc, #556]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001bee:	6153      	str	r3, [r2, #20]
   		LCD->RAM[2] &= 0xffcff3ff;
 8001bf0:	4a87      	ldr	r2, [pc, #540]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001bf2:	4b87      	ldr	r3, [pc, #540]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bfa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001bfe:	61d3      	str	r3, [r2, #28]
   		LCD->RAM[4] &= 0xffcff3ff;
 8001c00:	4a83      	ldr	r2, [pc, #524]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c02:	4b83      	ldr	r3, [pc, #524]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c0a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c0e:	6253      	str	r3, [r2, #36]	; 0x24
   		LCD->RAM[6] &= 0xffcff3ff;
 8001c10:	4a7f      	ldr	r2, [pc, #508]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c12:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c1a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

    	LCD->RAM[0] |= ((digit[0]& 0x0c) << 18 ) | ((digit[0]& 0x03) << 10 ) ; // 4G 4B 4M 4E
 8001c20:	4b7b      	ldr	r3, [pc, #492]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c22:	4a7b      	ldr	r2, [pc, #492]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c24:	6951      	ldr	r1, [r2, #20]
 8001c26:	7b3a      	ldrb	r2, [r7, #12]
 8001c28:	f002 020c 	and.w	r2, r2, #12
 8001c2c:	0490      	lsls	r0, r2, #18
 8001c2e:	7b3a      	ldrb	r2, [r7, #12]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0292      	lsls	r2, r2, #10
 8001c36:	4302      	orrs	r2, r0
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	615a      	str	r2, [r3, #20]
   		LCD->RAM[2] |= ((digit[1]& 0x0c) << 18 ) | ((digit[1]& 0x03) << 10 ) ; // 4F 4A 4C 4D
 8001c3c:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c3e:	4a74      	ldr	r2, [pc, #464]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c40:	69d1      	ldr	r1, [r2, #28]
 8001c42:	7b7a      	ldrb	r2, [r7, #13]
 8001c44:	f002 020c 	and.w	r2, r2, #12
 8001c48:	0490      	lsls	r0, r2, #18
 8001c4a:	7b7a      	ldrb	r2, [r7, #13]
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0292      	lsls	r2, r2, #10
 8001c52:	4302      	orrs	r2, r0
 8001c54:	430a      	orrs	r2, r1
 8001c56:	61da      	str	r2, [r3, #28]
   		LCD->RAM[4] |= ((digit[2]& 0x0c) << 18 ) | ((digit[2]& 0x03) << 10 ) ; // 4Q 4K 4Col 4P
 8001c58:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c5a:	4a6d      	ldr	r2, [pc, #436]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c5c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001c5e:	7bba      	ldrb	r2, [r7, #14]
 8001c60:	f002 020c 	and.w	r2, r2, #12
 8001c64:	0490      	lsls	r0, r2, #18
 8001c66:	7bba      	ldrb	r2, [r7, #14]
 8001c68:	f002 0203 	and.w	r2, r2, #3
 8001c6c:	0292      	lsls	r2, r2, #10
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	430a      	orrs	r2, r1
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24
   		LCD->RAM[6] |= ((digit[3]& 0x0c) << 18 ) | ((digit[3]& 0x03) << 10 ) ; // 4H 4J 4DP 4N
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c76:	4a66      	ldr	r2, [pc, #408]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	f002 020c 	and.w	r2, r2, #12
 8001c80:	0490      	lsls	r0, r2, #18
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0292      	lsls	r2, r2, #10
 8001c8a:	4302      	orrs	r2, r0
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c

   		break;
 8001c90:	e0b4      	b.n	8001dfc <LCD_WriteChar(char, bool, bool, unsigned char)+0x4a4>

      /* Position 5 on LCD (Digit5)*/
      case 5:
        LCD->RAM[0] &= 0xfff3cfff;
 8001c92:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c94:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001c96:	6952      	ldr	r2, [r2, #20]
 8001c98:	f422 2243 	bic.w	r2, r2, #798720	; 0xc3000
 8001c9c:	615a      	str	r2, [r3, #20]
    	LCD->RAM[2] &= 0xfff3cfff;
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001ca0:	4a5b      	ldr	r2, [pc, #364]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001ca2:	69d2      	ldr	r2, [r2, #28]
 8001ca4:	f422 2243 	bic.w	r2, r2, #798720	; 0xc3000
 8001ca8:	61da      	str	r2, [r3, #28]
    	LCD->RAM[4] &= 0xfff3efff;
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cb0:	f422 2241 	bic.w	r2, r2, #790528	; 0xc1000
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
    	LCD->RAM[6] &= 0xfff3efff;
 8001cb6:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cbc:	f422 2241 	bic.w	r2, r2, #790528	; 0xc1000
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    	LCD->RAM[0] |= ((digit[0]& 0x0c) << 16 ) | ((digit[0]& 0x03) << 12 ) ; // 5G 5B 5M 5E
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cc6:	6951      	ldr	r1, [r2, #20]
 8001cc8:	7b3a      	ldrb	r2, [r7, #12]
 8001cca:	f002 020c 	and.w	r2, r2, #12
 8001cce:	0410      	lsls	r0, r2, #16
 8001cd0:	7b3a      	ldrb	r2, [r7, #12]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4302      	orrs	r2, r0
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	615a      	str	r2, [r3, #20]
    	LCD->RAM[2] |= ((digit[1]& 0x0c) << 16 ) | ((digit[1]& 0x03) << 12 ) ; // 5F 5A 5C 5D
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001ce0:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001ce2:	69d1      	ldr	r1, [r2, #28]
 8001ce4:	7b7a      	ldrb	r2, [r7, #13]
 8001ce6:	f002 020c 	and.w	r2, r2, #12
 8001cea:	0410      	lsls	r0, r2, #16
 8001cec:	7b7a      	ldrb	r2, [r7, #13]
 8001cee:	f002 0203 	and.w	r2, r2, #3
 8001cf2:	0312      	lsls	r2, r2, #12
 8001cf4:	4302      	orrs	r2, r0
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	61da      	str	r2, [r3, #28]
    	LCD->RAM[4] |= ((digit[2]& 0x0c) << 16 ) | ((digit[2]& 0x01) << 12 ) ; // 5Q 5K   5P
 8001cfa:	4b45      	ldr	r3, [pc, #276]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cfc:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001cfe:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001d00:	7bba      	ldrb	r2, [r7, #14]
 8001d02:	f002 020c 	and.w	r2, r2, #12
 8001d06:	0410      	lsls	r0, r2, #16
 8001d08:	7bba      	ldrb	r2, [r7, #14]
 8001d0a:	f002 0201 	and.w	r2, r2, #1
 8001d0e:	0312      	lsls	r2, r2, #12
 8001d10:	4302      	orrs	r2, r0
 8001d12:	430a      	orrs	r2, r1
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
    	LCD->RAM[6] |= ((digit[3]& 0x0c) << 16 ) | ((digit[3]& 0x01) << 12 ) ; // 5H 5J   5N
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d18:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	f002 020c 	and.w	r2, r2, #12
 8001d22:	0410      	lsls	r0, r2, #16
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	f002 0201 	and.w	r2, r2, #1
 8001d2a:	0312      	lsls	r2, r2, #12
 8001d2c:	4302      	orrs	r2, r0
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c

    	break;
 8001d32:	e063      	b.n	8001dfc <LCD_WriteChar(char, bool, bool, unsigned char)+0x4a4>

      /* Position 6 on LCD (Digit6)*/
      case 6:
    	LCD->RAM[0] &= 0xfffc3fff;
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d36:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d38:	6952      	ldr	r2, [r2, #20]
 8001d3a:	f422 3270 	bic.w	r2, r2, #245760	; 0x3c000
 8001d3e:	615a      	str	r2, [r3, #20]
    	LCD->RAM[2] &= 0xfffc3fff;
 8001d40:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d44:	69d2      	ldr	r2, [r2, #28]
 8001d46:	f422 3270 	bic.w	r2, r2, #245760	; 0x3c000
 8001d4a:	61da      	str	r2, [r3, #28]
    	LCD->RAM[4] &= 0xfffc3fff;
 8001d4c:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d4e:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d52:	f422 3270 	bic.w	r2, r2, #245760	; 0x3c000
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
    	LCD->RAM[6] &= 0xfffc3fff;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d5e:	f422 3270 	bic.w	r2, r2, #245760	; 0x3c000
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c

    	LCD->RAM[0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d66:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d68:	6951      	ldr	r1, [r2, #20]
 8001d6a:	7b3a      	ldrb	r2, [r7, #12]
 8001d6c:	f002 0204 	and.w	r2, r2, #4
 8001d70:	03d0      	lsls	r0, r2, #15
 8001d72:	7b3a      	ldrb	r2, [r7, #12]
 8001d74:	f002 0208 	and.w	r2, r2, #8
 8001d78:	0352      	lsls	r2, r2, #13
 8001d7a:	4310      	orrs	r0, r2
 8001d7c:	7b3a      	ldrb	r2, [r7, #12]
 8001d7e:	0392      	lsls	r2, r2, #14
 8001d80:	b292      	uxth	r2, r2
 8001d82:	4302      	orrs	r2, r0
 8001d84:	430a      	orrs	r2, r1
 8001d86:	615a      	str	r2, [r3, #20]
    	LCD->RAM[2] |= ((digit[1]& 0x04) << 15 ) | ((digit[1]& 0x08) << 13 ) | ((digit[1]& 0x03) << 14 ) ; // 6A 6F 6C 6D
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001d8c:	69d1      	ldr	r1, [r2, #28]
 8001d8e:	7b7a      	ldrb	r2, [r7, #13]
 8001d90:	f002 0204 	and.w	r2, r2, #4
 8001d94:	03d0      	lsls	r0, r2, #15
 8001d96:	7b7a      	ldrb	r2, [r7, #13]
 8001d98:	f002 0208 	and.w	r2, r2, #8
 8001d9c:	0352      	lsls	r2, r2, #13
 8001d9e:	4310      	orrs	r0, r2
 8001da0:	7b7a      	ldrb	r2, [r7, #13]
 8001da2:	0392      	lsls	r2, r2, #14
 8001da4:	b292      	uxth	r2, r2
 8001da6:	4302      	orrs	r2, r0
 8001da8:	430a      	orrs	r2, r1
 8001daa:	61da      	str	r2, [r3, #28]
    	LCD->RAM[4] |= ((digit[2]& 0x04) << 15 ) | ((digit[2]& 0x08) << 13 ) | ((digit[2]& 0x01) << 14 ) ; // 6K 6Q    6P
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001dae:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001db0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001db2:	7bba      	ldrb	r2, [r7, #14]
 8001db4:	f002 0204 	and.w	r2, r2, #4
 8001db8:	03d0      	lsls	r0, r2, #15
 8001dba:	7bba      	ldrb	r2, [r7, #14]
 8001dbc:	f002 0208 	and.w	r2, r2, #8
 8001dc0:	0352      	lsls	r2, r2, #13
 8001dc2:	4310      	orrs	r0, r2
 8001dc4:	7bba      	ldrb	r2, [r7, #14]
 8001dc6:	f002 0201 	and.w	r2, r2, #1
 8001dca:	0392      	lsls	r2, r2, #14
 8001dcc:	4302      	orrs	r2, r0
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
    	LCD->RAM[6] |= ((digit[3]& 0x04) << 15 ) | ((digit[3]& 0x08) << 13 ) | ((digit[3]& 0x01) << 14 ) ; // 6J 6H   6N
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001dd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	f002 0204 	and.w	r2, r2, #4
 8001dde:	03d0      	lsls	r0, r2, #15
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	f002 0208 	and.w	r2, r2, #8
 8001de6:	0352      	lsls	r2, r2, #13
 8001de8:	4310      	orrs	r0, r2
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	f002 0201 	and.w	r2, r2, #1
 8001df0:	0392      	lsls	r2, r2, #14
 8001df2:	4302      	orrs	r2, r0
 8001df4:	430a      	orrs	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c

    	break;
 8001df8:	e000      	b.n	8001dfc <LCD_WriteChar(char, bool, bool, unsigned char)+0x4a4>

      default:
    	break;
 8001dfa:	bf00      	nop
    }

    // Sending update display request
    LCD->SR|=LCD_SR_UDR;
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <LCD_WriteChar(char, bool, bool, unsigned char)+0x4b8>)
 8001e00:	6892      	ldr	r2, [r2, #8]
 8001e02:	f042 0204 	orr.w	r2, r2, #4
 8001e06:	609a      	str	r2, [r3, #8]
}
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40002400 	.word	0x40002400

08001e14 <rccStartPll(rccPllInput, unsigned long, unsigned long)>:
 *
 * \return real frequency that was set
 */

uint32_t rccStartPll(enum rccPllInput pll_input, uint32_t input_frequency, uint32_t output_frequency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	73fb      	strb	r3, [r7, #15]
	#error "Invalid value of DEVICE_VCORE_mV!"
#endif

	static const uint8_t muls[] = {3, 4, 6, 8, 12, 16, 24, 32, 48};	// allowed values of PLL multiplier
	uint32_t mul_i;
	uint32_t best_frequency = 0, best_mul_i = 0, best_div = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]

	for (mul_i = 0; mul_i < sizeof (muls) / sizeof (muls[0]); mul_i++)	// loop through all multipliers
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e32:	e036      	b.n	8001ea2 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x8e>
	{
		uint32_t pllvco = input_frequency * muls[mul_i];
 8001e34:	4a37      	ldr	r2, [pc, #220]	; (8001f14 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x100>)
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	61bb      	str	r3, [r7, #24]

		if (pllvco > pllvco_max)			// internal PLL frequency out of valid range?
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x104>)
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d900      	bls.n	8001e4e <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x3a>
			continue;
 8001e4c:	e026      	b.n	8001e9c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x88>

		uint32_t div;

		for (div = 2; div <= 4; div++)		// loop through all dividers
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e01b      	b.n	8001e8c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x78>
		{
			uint32_t frequency = pllvco / div;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]

			if (frequency > output_frequency)	// resulting frequency too high?
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d900      	bls.n	8001e68 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x54>
				continue;
 8001e66:	e00e      	b.n	8001e86 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x72>

			if (frequency > best_frequency)	// is this configuration better than previously found?
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d90a      	bls.n	8001e86 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x72>
			{
				best_frequency = frequency;	// yes - store values
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
				best_mul_i = mul_i;
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
				best_div = div;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	623b      	str	r3, [r7, #32]

				if (best_frequency == output_frequency)	// is this a perfect match?
 8001e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d100      	bne.n	8001e86 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x72>
					break;
 8001e84:	e005      	b.n	8001e92 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x7e>
		if (pllvco > pllvco_max)			// internal PLL frequency out of valid range?
			continue;

		uint32_t div;

		for (div = 2; div <= 4; div++)		// loop through all dividers
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d9e0      	bls.n	8001e54 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x40>
				if (best_frequency == output_frequency)	// is this a perfect match?
					break;
			}
		}

		if (best_frequency == output_frequency)	// is this a perfect match?
 8001e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d100      	bne.n	8001e9c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x88>
			break;
 8001e9a:	e006      	b.n	8001eaa <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x96>

	static const uint8_t muls[] = {3, 4, 6, 8, 12, 16, 24, 32, 48};	// allowed values of PLL multiplier
	uint32_t mul_i;
	uint32_t best_frequency = 0, best_mul_i = 0, best_div = 0;

	for (mul_i = 0; mul_i < sizeof (muls) / sizeof (muls[0]); mul_i++)	// loop through all multipliers
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea2:	2209      	movs	r2, #9
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d8c4      	bhi.n	8001e34 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x20>

		if (best_frequency == output_frequency)	// is this a perfect match?
			break;
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency
 8001eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eac:	f000 f83e 	bl	8001f2c <_flashLatency(unsigned long)>

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x108>)
			break;
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
 8001eb2:	6a3a      	ldr	r2, [r7, #32]
 8001eb4:	3a01      	subs	r2, #1
 8001eb6:	0591      	lsls	r1, r2, #22
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eba:	0492      	lsls	r2, r2, #18
 8001ebc:	4311      	orrs	r1, r2
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	0412      	lsls	r2, r2, #16
			break;
	}

	_flashLatency(best_frequency);			// configure flash latency using found frequency

	RCC->CFGR = ((best_div - 1) << RCC_CFGR_PLLDIV_bit) | (best_mul_i << RCC_CFGR_PLLMUL_bit) |
 8001ec2:	430a      	orrs	r2, r1
			(pll_input << RCC_CFGR_PLLSRC_bit);	// set PLL
 8001ec4:	609a      	str	r2, [r3, #8]

	RCC_CR_PLLON_bb = 1;					// enable PLL and wait for stabilization
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x10c>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
	while (RCC_CR_PLLRDY_bb == 0);
 8001ecc:	bf00      	nop
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x110>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f6      	bne.n	8001ece <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xba>

	RCC->CFGR |= RCC_CFGR_SW_PLL;			// change SYSCLK to PLL
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x108>)
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x108>)
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	f042 0203 	orr.w	r2, r2, #3
 8001eea:	609a      	str	r2, [r3, #8]
	while (((RCC->CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// wait for switch
 8001eec:	bf00      	nop
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x108>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	bf0c      	ite	eq
 8001efa:	2300      	moveq	r3, #0
 8001efc:	2301      	movne	r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f4      	bne.n	8001eee <rccStartPll(rccPllInput, unsigned long, unsigned long)+0xda>

	_coreFrequency = best_frequency;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <rccStartPll(rccPllInput, unsigned long, unsigned long)+0x114>)
 8001f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f08:	601a      	str	r2, [r3, #0]

	return best_frequency;
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3730      	adds	r7, #48	; 0x30
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	0800c04c 	.word	0x0800c04c
 8001f18:	05b8d800 	.word	0x05b8d800
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	42470060 	.word	0x42470060
 8001f24:	42470064 	.word	0x42470064
 8001f28:	20000010 	.word	0x20000010

08001f2c <_flashLatency(unsigned long)>:
 *
 * \param [in] frequency defines the target frequency of the core
 */

static void _flashLatency(uint32_t frequency)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
#if DEVICE_VCORE_mV == 1800

	uint32_t wait_states;

	if (frequency > 16000000)
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <_flashLatency(unsigned long)+0x44>)
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d902      	bls.n	8001f42 <_flashLatency(unsigned long)+0x16>
		wait_states = 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e001      	b.n	8001f46 <_flashLatency(unsigned long)+0x1a>
	else
		wait_states = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]

    FLASH->ACR |= FLASH_ACR_ACC64;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <_flashLatency(unsigned long)+0x48>)
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <_flashLatency(unsigned long)+0x48>)
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	f042 0204 	orr.w	r2, r2, #4
 8001f50:	601a      	str	r2, [r3, #0]
    FLASH->ACR = (FLASH->ACR & (~FLASH_ACR_LATENCY)) | FLASH_ACR_PRFTEN | wait_states;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_flashLatency(unsigned long)+0x48>)
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <_flashLatency(unsigned long)+0x48>)
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	f022 0103 	bic.w	r1, r2, #3
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	f042 0202 	orr.w	r2, r2, #2
 8001f64:	601a      	str	r2, [r3, #0]

#else
	#error "Invalid flash latency configuration for device's VCORE!"
#endif
}
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <usartSendCharacter>:
 * Low-level character print. Should be used for debugging only.
 *
 * \param [in] c is the character that will be printed
 */

void usartSendCharacter(char c) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
	while (!(USARTx_SR_TXE_bb(USARTx)));
 8001f82:	bf00      	nop
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <usartSendCharacter+0x30>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	2301      	moveq	r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f6      	bne.n	8001f84 <usartSendCharacter+0xc>
	USARTx->DR = c;
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <usartSendCharacter+0x34>)
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	809a      	strh	r2, [r3, #4]
}
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	4227001c 	.word	0x4227001c
 8001fac:	40013800 	.word	0x40013800

08001fb0 <DMA1_Channel4_IRQHandler>:
 * DMA channel interrupt handler
 */

extern "C" void USARTx_DMAx_TX_CH_IRQHandler(void) __attribute__ ((interrupt));
void USARTx_DMAx_TX_CH_IRQHandler(void)
{
 8001fb0:	4668      	mov	r0, sp
 8001fb2:	f020 0107 	bic.w	r1, r0, #7
 8001fb6:	468d      	mov	sp, r1
 8001fb8:	b581      	push	{r0, r7, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
	signed portBASE_TYPE higher_priority_task_woken;

	xSemaphoreGiveFromISR(_dmaTxSemaphore, &higher_priority_task_woken);
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <DMA1_Channel4_IRQHandler+0x3c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f7fe f958 	bl	8000280 <xQueueGenericSendFromISR>

	USARTx_DMAx_TX_IFCR_CTCIFx_bb = 1;			// clear interrupt flag
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <DMA1_Channel4_IRQHandler+0x40>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

	portEND_SWITCHING_ISR(higher_priority_task_woken);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <DMA1_Channel4_IRQHandler+0x30>
 8001fdc:	f7fe fc10 	bl	8000800 <vPortYieldFromISR>
}
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 8001fe8:	4685      	mov	sp, r0
 8001fea:	4770      	bx	lr
 8001fec:	20000930 	.word	0x20000930
 8001ff0:	424c00b4 	.word	0x424c00b4

08001ff4 <USART1_IRQHandler>:
 * USART interrupt handler
 */

extern "C" void USARTx_IRQHandler(void) __attribute((interrupt));
void USARTx_IRQHandler(void)
{
 8001ff4:	4668      	mov	r0, sp
 8001ff6:	f020 0107 	bic.w	r1, r0, #7
 8001ffa:	468d      	mov	sp, r1
 8001ffc:	b581      	push	{r0, r7, lr}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
 8002006:	e03c      	b.n	8002082 <USART1_IRQHandler+0x8e>
	{
		char c = USARTx->DR;
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <USART1_IRQHandler+0xb8>)
 800200a:	889b      	ldrh	r3, [r3, #4]
 800200c:	b29b      	uxth	r3, r3
 800200e:	71fb      	strb	r3, [r7, #7]
		message.string[message.length++] = c;	// get char to buffer
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	1c59      	adds	r1, r3, #1
 8002016:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002018:	6011      	str	r1, [r2, #0]
 800201a:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <USART1_IRQHandler+0xbc>)
 800201c:	4413      	add	r3, r2
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	715a      	strb	r2, [r3, #5]

		// check for "\r\n" sequence in the string
		if ((message.status == RX_STATUS_HAD_CR) && (c == '\n'))
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002024:	791b      	ldrb	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d106      	bne.n	8002038 <USART1_IRQHandler+0x44>
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b0a      	cmp	r3, #10
 800202e:	d103      	bne.n	8002038 <USART1_IRQHandler+0x44>
			message.status = RX_STATUS_HAD_CR_LF;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002032:	2202      	movs	r2, #2
 8002034:	711a      	strb	r2, [r3, #4]
 8002036:	e009      	b.n	800204c <USART1_IRQHandler+0x58>
		else if (c == '\r')
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b0d      	cmp	r3, #13
 800203c:	d103      	bne.n	8002046 <USART1_IRQHandler+0x52>
			message.status = RX_STATUS_HAD_CR;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002040:	2201      	movs	r2, #1
 8002042:	711a      	strb	r2, [r3, #4]
 8002044:	e002      	b.n	800204c <USART1_IRQHandler+0x58>
		else
			message.status = RX_STATUS_HAD_NONE;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002048:	2200      	movs	r2, #0
 800204a:	711a      	strb	r2, [r3, #4]

		// transfer block only if out of space or "\r\n" sequence was found
		if ((message.length >= USARTx_RX_QUEUE_BUFFER_LENGTH)
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <USART1_IRQHandler+0xbc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d803      	bhi.n	800205c <USART1_IRQHandler+0x68>
				|| (message.status == RX_STATUS_HAD_CR_LF)) {
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d112      	bne.n	8002082 <USART1_IRQHandler+0x8e>
			xQueueSendFromISR(_rxQueue, &message, &higher_priority_task_woken);
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <USART1_IRQHandler+0xc0>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	463b      	mov	r3, r7
 8002062:	4610      	mov	r0, r2
 8002064:	4912      	ldr	r1, [pc, #72]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002066:	461a      	mov	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	f7fe f909 	bl	8000280 <xQueueGenericSendFromISR>

			message.length = 0;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

			if (message.status == RX_STATUS_HAD_CR_LF)
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <USART1_IRQHandler+0xbc>)
 8002076:	791b      	ldrb	r3, [r3, #4]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d102      	bne.n	8002082 <USART1_IRQHandler+0x8e>
				message.status = RX_STATUS_HAD_NONE;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <USART1_IRQHandler+0xbc>)
 800207e:	2200      	movs	r2, #0
 8002080:	711a      	strb	r2, [r3, #4]
void USARTx_IRQHandler(void)
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	static struct _RxMessage message;

	while (USARTx_SR_RXNE_bb(USARTx))		// loop while data is available
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <USART1_IRQHandler+0xc4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf0c      	ite	eq
 800208a:	2300      	moveq	r3, #0
 800208c:	2301      	movne	r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1b9      	bne.n	8002008 <USART1_IRQHandler+0x14>
			if (message.status == RX_STATUS_HAD_CR_LF)
				message.status = RX_STATUS_HAD_NONE;
		}
	}

	portEND_SWITCHING_ISR(higher_priority_task_woken);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <USART1_IRQHandler+0xaa>
 800209a:	f7fe fbb1 	bl	8000800 <vPortYieldFromISR>
}
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 80020a6:	4685      	mov	sp, r0
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40013800 	.word	0x40013800
 80020b0:	20000934 	.word	0x20000934
 80020b4:	2000092c 	.word	0x2000092c
 80020b8:	42270014 	.word	0x42270014

080020bc <main>:

/**
 * \brief System root Task
 */
int main(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	enum Error sysError = _sysInit();
 80020c2:	f000 f813 	bl	80020ec <_sysInit()>
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	if (sysError != ERROR_NONE){
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d000      	beq.n	80020d4 <main+0x18>
		goto sys_panic;
 80020d2:	e009      	b.n	80020e8 <main+0x2c>
	}

	sysError = _peripLauncher();
 80020d4:	f000 f84a 	bl	800216c <_peripLauncher()>
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
	if (sysError != ERROR_NONE){
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d000      	beq.n	80020e6 <main+0x2a>
		goto sys_panic;
 80020e4:	e000      	b.n	80020e8 <main+0x2c>
	}

	goto sys_panic;

	sys_panic:
		while (1);
 80020e6:	e7fe      	b.n	80020e6 <main+0x2a>
 80020e8:	e7fe      	b.n	80020e8 <main+0x2c>
 80020ea:	bf00      	nop

080020ec <_sysInit()>:
 *  \brief Initialize uC Core and sysCLK
 *
 *  \return ERROR_NONE on success, otherwise appropriate error code from error.h
 */
static enum Error _sysInit()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
	Error error = ERROR_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	71fb      	strb	r3, [r7, #7]

	RCC_APB1ENR_PWREN_bb = 1;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <_sysInit()+0x68>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
	PWR->CR = (PWR->CR & (~PWR_CR_VOS)) | PWR_CR_VOS_0;	// set VCORE voltage range 1 (1.8V)
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <_sysInit()+0x6c>)
 80020fe:	4a16      	ldr	r2, [pc, #88]	; (8002158 <_sysInit()+0x6c>)
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	601a      	str	r2, [r3, #0]
	while((PWR->CSR & PWR_CSR_VOSF) != 0);	// wait for regulator ready
 800210c:	bf00      	nop
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <_sysInit()+0x6c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2300      	moveq	r3, #0
 800211c:	2301      	movne	r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f4      	bne.n	800210e <_sysInit()+0x22>

	RCC_CR_HSION_bb = 1;					// enable HSI oscillator
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <_sysInit()+0x70>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
	while (RCC_CR_HSIRDY_bb == 0);
 800212a:	bf00      	nop
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <_sysInit()+0x74>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2300      	movne	r3, #0
 8002136:	2301      	moveq	r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f6      	bne.n	800212c <_sysInit()+0x40>

	rccStartPll(RCC_PLL_INPUT_HSI, HSI_VALUE, FREQUENCY);
 800213e:	2000      	movs	r0, #0
 8002140:	4908      	ldr	r1, [pc, #32]	; (8002164 <_sysInit()+0x78>)
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <_sysInit()+0x7c>)
 8002144:	f7ff fe66 	bl	8001e14 <rccStartPll(rccPllInput, unsigned long, unsigned long)>

	return error;
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	b25b      	sxtb	r3, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	424704f0 	.word	0x424704f0
 8002158:	40007000 	.word	0x40007000
 800215c:	42470000 	.word	0x42470000
 8002160:	42470004 	.word	0x42470004
 8002164:	00f42400 	.word	0x00f42400
 8002168:	01e84800 	.word	0x01e84800

0800216c <_peripLauncher()>:
 *  \brief Launcher for used peripherals
 *
 *  \return ERROR_NONE on success, otherwise appropriate error code from error.h
 */
static enum Error _peripLauncher()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
	Error error = ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	71fb      	strb	r3, [r7, #7]

	// LED Initialise
	gpioConfigurePin(LED_GPIO, LED_pin, GPIO_OUT_PP_2MHz);
 8002176:	480e      	ldr	r0, [pc, #56]	; (80021b0 <_peripLauncher()+0x44>)
 8002178:	2106      	movs	r1, #6
 800217a:	f240 1201 	movw	r2, #257	; 0x101
 800217e:	f7ff f9db 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	LED_bb = 1;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <_peripLauncher()+0x48>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
	gpioConfigurePin(LED_GPIO, LED_pin_1, GPIO_OUT_PP_2MHz);
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <_peripLauncher()+0x44>)
 800218a:	2107      	movs	r1, #7
 800218c:	f240 1201 	movw	r2, #257	; 0x101
 8002190:	f7ff f9d2 	bl	8001538 <gpioConfigurePin(GPIO_TypeDef*, GpioPin, GpioConfiguration)>
	LED1_bb = 1;
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <_peripLauncher()+0x4c>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

	// LCD Initialise
	LCD_Init();
 800219a:	f7ff fa83 	bl	80016a4 <LCD_Init()>

	// Write on LCD "Ubirds"
	LCD_WriteChar_example();
 800219e:	f000 f847 	bl	8002230 <LCD_WriteChar_example()>

	out:
		return error;
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	b25b      	sxtb	r3, r3
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40020400 	.word	0x40020400
 80021b4:	42408298 	.word	0x42408298
 80021b8:	4240829c 	.word	0x4240829c

080021bc <EXTI0_IRQHandler>:
	return errorConvert_portBASE_TYPE(ret);
}

extern "C" void EXTI0_IRQHandler(void) __attribute((interrupt));
void EXTI0_IRQHandler(void)
{
 80021bc:	4668      	mov	r0, sp
 80021be:	f020 0107 	bic.w	r1, r0, #7
 80021c2:	468d      	mov	sp, r1
 80021c4:	b481      	push	{r0, r7}
 80021c6:	af00      	add	r7, sp, #0
	//Do something

	//Clear flags
	EXTI->PR=EXTI_PR_PR0;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <EXTI0_IRQHandler+0x1c>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	615a      	str	r2, [r3, #20]
}
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc81      	pop	{r0, r7}
 80021d2:	4685      	mov	sp, r0
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010400 	.word	0x40010400

080021dc <operator new(unsigned int)>:
 *
 * \return pointer to allocated memory or NULL if allocation failed
 */

void* operator new(size_t size) throw()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fe fb75 	bl	80008d4 <pvPortMalloc>
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <operator delete(void*)>:
 *
 * \param [in] ptr is the pointer to memory segment that should be freed
 */

void operator delete(void* ptr) throw ()
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	if (ptr)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <operator delete(void*)+0x14>
		vPortFree(ptr);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fb78 	bl	80008f8 <vPortFree>
}
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop

08002210 <__cxa_pure_virtual>:
 *
 * Pure virtual function called handler.
 */

extern "C" void __cxa_pure_virtual(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	PLATFORM_ASSERT("Pure virtual function was called...");
 8002214:	4803      	ldr	r0, [pc, #12]	; (8002224 <__cxa_pure_virtual+0x14>)
 8002216:	4904      	ldr	r1, [pc, #16]	; (8002228 <__cxa_pure_virtual+0x18>)
 8002218:	2236      	movs	r2, #54	; 0x36
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <__cxa_pure_virtual+0x1c>)
 800221c:	f7fe fd52 	bl	8000cc4 <printf>
 * \brief Pure virtual function called handler.
 *
 * Pure virtual function called handler.
 */

extern "C" void __cxa_pure_virtual(void)
 8002220:	e7fe      	b.n	8002220 <__cxa_pure_virtual+0x10>
 8002222:	bf00      	nop
 8002224:	0800c058 	.word	0x0800c058
 8002228:	0800c080 	.word	0x0800c080
 800222c:	0800c0a4 	.word	0x0800c0a4

08002230 <LCD_WriteChar_example()>:
 *
 * Displays "A" whith colon on digit 1 and displays "B" whith point on digit 3.
 *
 */
void LCD_WriteChar_example()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	LCD_WriteChar('a',0,1,1);
 8002234:	2061      	movs	r0, #97	; 0x61
 8002236:	2100      	movs	r1, #0
 8002238:	2201      	movs	r2, #1
 800223a:	2301      	movs	r3, #1
 800223c:	f7ff fb8c 	bl	8001958 <LCD_WriteChar(char, bool, bool, unsigned char)>
	LCD_WriteChar('b',1,0,3);
 8002240:	2062      	movs	r0, #98	; 0x62
 8002242:	2101      	movs	r1, #1
 8002244:	2200      	movs	r2, #0
 8002246:	2303      	movs	r3, #3
 8002248:	f7ff fb86 	bl	8001958 <LCD_WriteChar(char, bool, bool, unsigned char)>
}
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop

08002250 <__aeabi_atexit>:
 8002250:	4603      	mov	r3, r0
 8002252:	4608      	mov	r0, r1
 8002254:	4619      	mov	r1, r3
 8002256:	f007 bd9d 	b.w	8009d94 <__cxa_atexit>
 800225a:	bf00      	nop

0800225c <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>:
 800225c:	684b      	ldr	r3, [r1, #4]
 800225e:	6043      	str	r3, [r0, #4]
 8002260:	684b      	ldr	r3, [r1, #4]
 8002262:	6001      	str	r1, [r0, #0]
 8002264:	6018      	str	r0, [r3, #0]
 8002266:	6048      	str	r0, [r1, #4]
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop

0800226c <std::__throw_bad_alloc()>:
 800226c:	b508      	push	{r3, lr}
 800226e:	2004      	movs	r0, #4
 8002270:	f000 f8fc 	bl	800246c <__cxa_allocate_exception>
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <std::__throw_bad_alloc()+0x14>)
 8002276:	4903      	ldr	r1, [pc, #12]	; (8002284 <std::__throw_bad_alloc()+0x18>)
 8002278:	6003      	str	r3, [r0, #0]
 800227a:	4a03      	ldr	r2, [pc, #12]	; (8002288 <std::__throw_bad_alloc()+0x1c>)
 800227c:	f000 fc46 	bl	8002b0c <__cxa_throw>
 8002280:	0800c1e8 	.word	0x0800c1e8
 8002284:	0800c1f8 	.word	0x0800c1f8
 8002288:	08002da1 	.word	0x08002da1

0800228c <std::__throw_logic_error(char const*)>:
 800228c:	b530      	push	{r4, r5, lr}
 800228e:	4605      	mov	r5, r0
 8002290:	b085      	sub	sp, #20
 8002292:	2008      	movs	r0, #8
 8002294:	f000 f8ea 	bl	800246c <__cxa_allocate_exception>
 8002298:	4629      	mov	r1, r5
 800229a:	4604      	mov	r4, r0
 800229c:	aa01      	add	r2, sp, #4
 800229e:	a803      	add	r0, sp, #12
 80022a0:	f001 f8ae 	bl	8003400 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
 80022a4:	4620      	mov	r0, r4
 80022a6:	a903      	add	r1, sp, #12
 80022a8:	f000 ffd0 	bl	800324c <std::logic_error::logic_error(std::string const&)>
 80022ac:	9803      	ldr	r0, [sp, #12]
 80022ae:	a902      	add	r1, sp, #8
 80022b0:	380c      	subs	r0, #12
 80022b2:	f001 f81d 	bl	80032f0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
 80022b6:	4620      	mov	r0, r4
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <std::__throw_logic_error(char const*)+0x4c>)
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <std::__throw_logic_error(char const*)+0x50>)
 80022bc:	f000 fc26 	bl	8002b0c <__cxa_throw>
 80022c0:	4620      	mov	r0, r4
 80022c2:	f000 f8ff 	bl	80024c4 <__cxa_free_exception>
 80022c6:	f000 fca1 	bl	8002c0c <__cxa_end_cleanup>
 80022ca:	9803      	ldr	r0, [sp, #12]
 80022cc:	a902      	add	r1, sp, #8
 80022ce:	380c      	subs	r0, #12
 80022d0:	f001 f80e 	bl	80032f0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
 80022d4:	e7f4      	b.n	80022c0 <std::__throw_logic_error(char const*)+0x34>
 80022d6:	bf00      	nop
 80022d8:	0800c3d4 	.word	0x0800c3d4
 80022dc:	080031c9 	.word	0x080031c9

080022e0 <std::__throw_length_error(char const*)>:
 80022e0:	b530      	push	{r4, r5, lr}
 80022e2:	4605      	mov	r5, r0
 80022e4:	b085      	sub	sp, #20
 80022e6:	2008      	movs	r0, #8
 80022e8:	f000 f8c0 	bl	800246c <__cxa_allocate_exception>
 80022ec:	4629      	mov	r1, r5
 80022ee:	4604      	mov	r4, r0
 80022f0:	aa01      	add	r2, sp, #4
 80022f2:	a803      	add	r0, sp, #12
 80022f4:	f001 f884 	bl	8003400 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
 80022f8:	4620      	mov	r0, r4
 80022fa:	a903      	add	r1, sp, #12
 80022fc:	f000 ffb6 	bl	800326c <std::length_error::length_error(std::string const&)>
 8002300:	9803      	ldr	r0, [sp, #12]
 8002302:	a902      	add	r1, sp, #8
 8002304:	380c      	subs	r0, #12
 8002306:	f000 fff3 	bl	80032f0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
 800230a:	4620      	mov	r0, r4
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <std::__throw_length_error(char const*)+0x4c>)
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <std::__throw_length_error(char const*)+0x50>)
 8002310:	f000 fbfc 	bl	8002b0c <__cxa_throw>
 8002314:	4620      	mov	r0, r4
 8002316:	f000 f8d5 	bl	80024c4 <__cxa_free_exception>
 800231a:	f000 fc77 	bl	8002c0c <__cxa_end_cleanup>
 800231e:	9803      	ldr	r0, [sp, #12]
 8002320:	a902      	add	r1, sp, #8
 8002322:	380c      	subs	r0, #12
 8002324:	f000 ffe4 	bl	80032f0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
 8002328:	e7f4      	b.n	8002314 <std::__throw_length_error(char const*)+0x34>
 800232a:	bf00      	nop
 800232c:	0800c41c 	.word	0x0800c41c
 8002330:	0800321d 	.word	0x0800321d

08002334 <(anonymous namespace)::generic_error_category::name() const>:
 8002334:	4800      	ldr	r0, [pc, #0]	; (8002338 <(anonymous namespace)::generic_error_category::name() const+0x4>)
 8002336:	4770      	bx	lr
 8002338:	0800c180 	.word	0x0800c180

0800233c <(anonymous namespace)::system_error_category::name() const>:
 800233c:	4800      	ldr	r0, [pc, #0]	; (8002340 <(anonymous namespace)::system_error_category::name() const+0x4>)
 800233e:	4770      	bx	lr
 8002340:	0800c188 	.word	0x0800c188

08002344 <std::error_category::~error_category()>:
 8002344:	4b01      	ldr	r3, [pc, #4]	; (800234c <std::error_category::~error_category()+0x8>)
 8002346:	6003      	str	r3, [r0, #0]
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	0800c0f8 	.word	0x0800c0f8

08002350 <std::error_category::default_error_condition(int) const>:
 8002350:	6002      	str	r2, [r0, #0]
 8002352:	6041      	str	r1, [r0, #4]
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <std::error_category::equivalent(int, std::error_condition const&) const>:
 8002358:	b510      	push	{r4, lr}
 800235a:	6803      	ldr	r3, [r0, #0]
 800235c:	b082      	sub	sp, #8
 800235e:	4614      	mov	r4, r2
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	460a      	mov	r2, r1
 8002364:	4601      	mov	r1, r0
 8002366:	4668      	mov	r0, sp
 8002368:	4798      	blx	r3
 800236a:	6863      	ldr	r3, [r4, #4]
 800236c:	9a01      	ldr	r2, [sp, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d002      	beq.n	8002378 <std::error_category::equivalent(int, std::error_condition const&) const+0x20>
 8002372:	2000      	movs	r0, #0
 8002374:	b002      	add	sp, #8
 8002376:	bd10      	pop	{r4, pc}
 8002378:	6820      	ldr	r0, [r4, #0]
 800237a:	9b00      	ldr	r3, [sp, #0]
 800237c:	1a1b      	subs	r3, r3, r0
 800237e:	4258      	negs	r0, r3
 8002380:	4158      	adcs	r0, r3
 8002382:	b002      	add	sp, #8
 8002384:	bd10      	pop	{r4, pc}
 8002386:	bf00      	nop

08002388 <std::error_category::equivalent(std::error_code const&, int) const>:
 8002388:	684b      	ldr	r3, [r1, #4]
 800238a:	4283      	cmp	r3, r0
 800238c:	d001      	beq.n	8002392 <std::error_category::equivalent(std::error_code const&, int) const+0xa>
 800238e:	2000      	movs	r0, #0
 8002390:	4770      	bx	lr
 8002392:	6808      	ldr	r0, [r1, #0]
 8002394:	1a83      	subs	r3, r0, r2
 8002396:	4258      	negs	r0, r3
 8002398:	4158      	adcs	r0, r3
 800239a:	4770      	bx	lr

0800239c <(anonymous namespace)::system_error_category::~system_error_category()>:
 800239c:	4b01      	ldr	r3, [pc, #4]	; (80023a4 <(anonymous namespace)::system_error_category::~system_error_category()+0x8>)
 800239e:	6003      	str	r3, [r0, #0]
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	0800c0f8 	.word	0x0800c0f8

080023a8 <(anonymous namespace)::generic_error_category::~generic_error_category()>:
 80023a8:	4b01      	ldr	r3, [pc, #4]	; (80023b0 <(anonymous namespace)::generic_error_category::~generic_error_category()+0x8>)
 80023aa:	6003      	str	r3, [r0, #0]
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	0800c0f8 	.word	0x0800c0f8

080023b4 <std::error_category::~error_category()>:
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <std::error_category::~error_category()+0x10>)
 80023b8:	4604      	mov	r4, r0
 80023ba:	6003      	str	r3, [r0, #0]
 80023bc:	f7ff ff1a 	bl	80021f4 <operator delete(void*)>
 80023c0:	4620      	mov	r0, r4
 80023c2:	bd10      	pop	{r4, pc}
 80023c4:	0800c0f8 	.word	0x0800c0f8

080023c8 <(anonymous namespace)::system_error_category::~system_error_category()>:
 80023c8:	b510      	push	{r4, lr}
 80023ca:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <(anonymous namespace)::system_error_category::~system_error_category()+0x10>)
 80023cc:	4604      	mov	r4, r0
 80023ce:	6003      	str	r3, [r0, #0]
 80023d0:	f7ff ff10 	bl	80021f4 <operator delete(void*)>
 80023d4:	4620      	mov	r0, r4
 80023d6:	bd10      	pop	{r4, pc}
 80023d8:	0800c0f8 	.word	0x0800c0f8

080023dc <(anonymous namespace)::generic_error_category::~generic_error_category()>:
 80023dc:	b510      	push	{r4, lr}
 80023de:	4b03      	ldr	r3, [pc, #12]	; (80023ec <(anonymous namespace)::generic_error_category::~generic_error_category()+0x10>)
 80023e0:	4604      	mov	r4, r0
 80023e2:	6003      	str	r3, [r0, #0]
 80023e4:	f7ff ff06 	bl	80021f4 <operator delete(void*)>
 80023e8:	4620      	mov	r0, r4
 80023ea:	bd10      	pop	{r4, pc}
 80023ec:	0800c0f8 	.word	0x0800c0f8

080023f0 <(anonymous namespace)::system_error_category::message(int) const>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	4604      	mov	r4, r0
 80023f4:	b082      	sub	sp, #8
 80023f6:	4610      	mov	r0, r2
 80023f8:	f009 f8b0 	bl	800b55c <strerror>
 80023fc:	aa01      	add	r2, sp, #4
 80023fe:	4601      	mov	r1, r0
 8002400:	4620      	mov	r0, r4
 8002402:	f000 fffd 	bl	8003400 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
 8002406:	4620      	mov	r0, r4
 8002408:	b002      	add	sp, #8
 800240a:	bd10      	pop	{r4, pc}

0800240c <(anonymous namespace)::generic_error_category::message(int) const>:
 800240c:	b510      	push	{r4, lr}
 800240e:	4604      	mov	r4, r0
 8002410:	b082      	sub	sp, #8
 8002412:	4610      	mov	r0, r2
 8002414:	f009 f8a2 	bl	800b55c <strerror>
 8002418:	aa01      	add	r2, sp, #4
 800241a:	4601      	mov	r1, r0
 800241c:	4620      	mov	r0, r4
 800241e:	f000 ffef 	bl	8003400 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
 8002422:	4620      	mov	r0, r4
 8002424:	b002      	add	sp, #8
 8002426:	bd10      	pop	{r4, pc}

08002428 <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev+0x28>)
 800242c:	4c09      	ldr	r4, [pc, #36]	; (8002454 <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev+0x2c>)
 800242e:	4d0a      	ldr	r5, [pc, #40]	; (8002458 <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev+0x30>)
 8002430:	4622      	mov	r2, r4
 8002432:	4618      	mov	r0, r3
 8002434:	4909      	ldr	r1, [pc, #36]	; (800245c <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev+0x34>)
 8002436:	601d      	str	r5, [r3, #0]
 8002438:	f7ff ff0a 	bl	8002250 <__aeabi_atexit>
 800243c:	4d08      	ldr	r5, [pc, #32]	; (8002460 <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev+0x38>)
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev+0x3c>)
 8002440:	4622      	mov	r2, r4
 8002442:	4618      	mov	r0, r3
 8002444:	601d      	str	r5, [r3, #0]
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <_GLOBAL__sub_I__ZNSt14error_categoryC2Ev+0x40>)
 8002448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800244c:	f7ff bf00 	b.w	8002250 <__aeabi_atexit>
 8002450:	20000950 	.word	0x20000950
 8002454:	20000000 	.word	0x20000000
 8002458:	0800c160 	.word	0x0800c160
 800245c:	080023a9 	.word	0x080023a9
 8002460:	0800c120 	.word	0x0800c120
 8002464:	2000094c 	.word	0x2000094c
 8002468:	0800239d 	.word	0x0800239d

0800246c <__cxa_allocate_exception>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	f100 0580 	add.w	r5, r0, #128	; 0x80
 8002472:	4628      	mov	r0, r5
 8002474:	f007 feea 	bl	800a24c <malloc>
 8002478:	4604      	mov	r4, r0
 800247a:	b138      	cbz	r0, 800248c <__cxa_allocate_exception+0x20>
 800247c:	4620      	mov	r0, r4
 800247e:	2100      	movs	r1, #0
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	f008 fae9 	bl	800aa58 <memset>
 8002486:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <__cxa_allocate_exception+0x50>)
 800248e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002492:	6811      	ldr	r1, [r2, #0]
 8002494:	d807      	bhi.n	80024a6 <__cxa_allocate_exception+0x3a>
 8002496:	460b      	mov	r3, r1
 8002498:	07d8      	lsls	r0, r3, #31
 800249a:	d506      	bpl.n	80024aa <__cxa_allocate_exception+0x3e>
 800249c:	3401      	adds	r4, #1
 800249e:	2c04      	cmp	r4, #4
 80024a0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80024a4:	d1f8      	bne.n	8002498 <__cxa_allocate_exception+0x2c>
 80024a6:	f000 fe79 	bl	800319c <std::terminate()>
 80024aa:	2001      	movs	r0, #1
 80024ac:	40a0      	lsls	r0, r4
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__cxa_allocate_exception+0x54>)
 80024b0:	4301      	orrs	r1, r0
 80024b2:	6011      	str	r1, [r2, #0]
 80024b4:	eb03 2444 	add.w	r4, r3, r4, lsl #9
 80024b8:	e7e0      	b.n	800247c <__cxa_allocate_exception+0x10>
 80024ba:	bf00      	nop
 80024bc:	20000954 	.word	0x20000954
 80024c0:	20000958 	.word	0x20000958

080024c4 <__cxa_free_exception>:
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <__cxa_free_exception+0x2c>)
 80024c6:	4298      	cmp	r0, r3
 80024c8:	d303      	bcc.n	80024d2 <__cxa_free_exception+0xe>
 80024ca:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80024ce:	4290      	cmp	r0, r2
 80024d0:	d302      	bcc.n	80024d8 <__cxa_free_exception+0x14>
 80024d2:	3880      	subs	r0, #128	; 0x80
 80024d4:	f007 bec2 	b.w	800a25c <free>
 80024d8:	1ac3      	subs	r3, r0, r3
 80024da:	2101      	movs	r1, #1
 80024dc:	0a5b      	lsrs	r3, r3, #9
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <__cxa_free_exception+0x30>)
 80024e4:	6811      	ldr	r1, [r2, #0]
 80024e6:	ea21 0103 	bic.w	r1, r1, r3
 80024ea:	6011      	str	r1, [r2, #0]
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000958 	.word	0x20000958
 80024f4:	20000954 	.word	0x20000954

080024f8 <read_sleb128(unsigned char const*, long*)>:
 80024f8:	b430      	push	{r4, r5}
 80024fa:	2400      	movs	r4, #0
 80024fc:	4623      	mov	r3, r4
 80024fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002502:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 8002506:	409d      	lsls	r5, r3
 8002508:	432c      	orrs	r4, r5
 800250a:	0615      	lsls	r5, r2, #24
 800250c:	f103 0307 	add.w	r3, r3, #7
 8002510:	d4f5      	bmi.n	80024fe <read_sleb128(unsigned char const*, long*)+0x6>
 8002512:	2b1f      	cmp	r3, #31
 8002514:	d806      	bhi.n	8002524 <read_sleb128(unsigned char const*, long*)+0x2c>
 8002516:	0652      	lsls	r2, r2, #25
 8002518:	d504      	bpl.n	8002524 <read_sleb128(unsigned char const*, long*)+0x2c>
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	431c      	orrs	r4, r3
 8002524:	600c      	str	r4, [r1, #0]
 8002526:	bc30      	pop	{r4, r5}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
 800252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002530:	2850      	cmp	r0, #80	; 0x50
 8002532:	b084      	sub	sp, #16
 8002534:	4607      	mov	r7, r0
 8002536:	4688      	mov	r8, r1
 8002538:	d046      	beq.n	80025c8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x9c>
 800253a:	f000 010f 	and.w	r1, r0, #15
 800253e:	290c      	cmp	r1, #12
 8002540:	d840      	bhi.n	80025c4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x98>
 8002542:	e8df f001 	tbb	[pc, r1]
 8002546:	2c07      	.short	0x2c07
 8002548:	3f19073b 	.word	0x3f19073b
 800254c:	213f3f3f 	.word	0x213f3f3f
 8002550:	071d      	.short	0x071d
 8002552:	19          	.byte	0x19
 8002553:	00          	.byte	0x00
 8002554:	4616      	mov	r6, r2
 8002556:	f856 4b04 	ldr.w	r4, [r6], #4
 800255a:	b144      	cbz	r4, 800256e <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x42>
 800255c:	f007 0170 	and.w	r1, r7, #112	; 0x70
 8002560:	2910      	cmp	r1, #16
 8002562:	bf08      	it	eq
 8002564:	4690      	moveq	r8, r2
 8002566:	4444      	add	r4, r8
 8002568:	063a      	lsls	r2, r7, #24
 800256a:	bf48      	it	mi
 800256c:	6824      	ldrmi	r4, [r4, #0]
 800256e:	4630      	mov	r0, r6
 8002570:	601c      	str	r4, [r3, #0]
 8002572:	b004      	add	sp, #16
 8002574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002578:	6814      	ldr	r4, [r2, #0]
 800257a:	f102 0608 	add.w	r6, r2, #8
 800257e:	e7ec      	b.n	800255a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2e>
 8002580:	4616      	mov	r6, r2
 8002582:	f936 4b02 	ldrsh.w	r4, [r6], #2
 8002586:	e7e8      	b.n	800255a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2e>
 8002588:	4610      	mov	r0, r2
 800258a:	a903      	add	r1, sp, #12
 800258c:	9201      	str	r2, [sp, #4]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f7ff ffb2 	bl	80024f8 <read_sleb128(unsigned char const*, long*)>
 8002594:	9c03      	ldr	r4, [sp, #12]
 8002596:	4606      	mov	r6, r0
 8002598:	9a01      	ldr	r2, [sp, #4]
 800259a:	9b00      	ldr	r3, [sp, #0]
 800259c:	e7dd      	b.n	800255a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2e>
 800259e:	2400      	movs	r4, #0
 80025a0:	4625      	mov	r5, r4
 80025a2:	4616      	mov	r6, r2
 80025a4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80025a8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 80025ac:	40a8      	lsls	r0, r5
 80025ae:	0609      	lsls	r1, r1, #24
 80025b0:	ea44 0400 	orr.w	r4, r4, r0
 80025b4:	f105 0507 	add.w	r5, r5, #7
 80025b8:	d4f4      	bmi.n	80025a4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x78>
 80025ba:	e7ce      	b.n	800255a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2e>
 80025bc:	4616      	mov	r6, r2
 80025be:	f836 4b02 	ldrh.w	r4, [r6], #2
 80025c2:	e7ca      	b.n	800255a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2e>
 80025c4:	f007 fbde 	bl	8009d84 <abort>
 80025c8:	1cd6      	adds	r6, r2, #3
 80025ca:	f026 0603 	bic.w	r6, r6, #3
 80025ce:	f856 4b04 	ldr.w	r4, [r6], #4
 80025d2:	4630      	mov	r0, r6
 80025d4:	601c      	str	r4, [r3, #0]
 80025d6:	b004      	add	sp, #16
 80025d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025dc <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
 80025dc:	28ff      	cmp	r0, #255	; 0xff
 80025de:	b508      	push	{r3, lr}
 80025e0:	d00f      	beq.n	8002602 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x26>
 80025e2:	f000 0370 	and.w	r3, r0, #112	; 0x70
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d018      	beq.n	800261c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 80025ea:	d90c      	bls.n	8002606 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2a>
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d010      	beq.n	8002612 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x36>
 80025f0:	2b50      	cmp	r3, #80	; 0x50
 80025f2:	d006      	beq.n	8002602 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x26>
 80025f4:	2b30      	cmp	r3, #48	; 0x30
 80025f6:	d10a      	bne.n	800260e <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x32>
 80025f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025fc:	4608      	mov	r0, r1
 80025fe:	f007 bbb9 	b.w	8009d74 <_Unwind_GetDataRelBase>
 8002602:	2000      	movs	r0, #0
 8002604:	bd08      	pop	{r3, pc}
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0fb      	beq.n	8002602 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x26>
 800260a:	2b10      	cmp	r3, #16
 800260c:	d0f9      	beq.n	8002602 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x26>
 800260e:	f007 fbb9 	bl	8009d84 <abort>
 8002612:	4608      	mov	r0, r1
 8002614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002618:	f007 bb9c 	b.w	8009d54 <_Unwind_GetRegionStart>
 800261c:	4608      	mov	r0, r1
 800261e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002622:	f007 bbab 	b.w	8009d7c <_Unwind_GetTextRelBase>
 8002626:	bf00      	nop

08002628 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	460c      	mov	r4, r1
 800262c:	4616      	mov	r6, r2
 800262e:	4607      	mov	r7, r0
 8002630:	b108      	cbz	r0, 8002636 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0xe>
 8002632:	f007 fb8f 	bl	8009d54 <_Unwind_GetRegionStart>
 8002636:	6030      	str	r0, [r6, #0]
 8002638:	7825      	ldrb	r5, [r4, #0]
 800263a:	3401      	adds	r4, #1
 800263c:	2dff      	cmp	r5, #255	; 0xff
 800263e:	d033      	beq.n	80026a8 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x80>
 8002640:	4639      	mov	r1, r7
 8002642:	4628      	mov	r0, r5
 8002644:	f7ff ffca 	bl	80025dc <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8002648:	4622      	mov	r2, r4
 800264a:	4601      	mov	r1, r0
 800264c:	1d33      	adds	r3, r6, #4
 800264e:	4628      	mov	r0, r5
 8002650:	f7ff ff6c 	bl	800252c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8002654:	4604      	mov	r4, r0
 8002656:	7823      	ldrb	r3, [r4, #0]
 8002658:	1c60      	adds	r0, r4, #1
 800265a:	2bff      	cmp	r3, #255	; 0xff
 800265c:	7533      	strb	r3, [r6, #20]
 800265e:	d029      	beq.n	80026b4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x8c>
 8002660:	2310      	movs	r3, #16
 8002662:	2200      	movs	r2, #0
 8002664:	7533      	strb	r3, [r6, #20]
 8002666:	4613      	mov	r3, r2
 8002668:	f810 1b01 	ldrb.w	r1, [r0], #1
 800266c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002670:	409c      	lsls	r4, r3
 8002672:	0609      	lsls	r1, r1, #24
 8002674:	ea42 0204 	orr.w	r2, r2, r4
 8002678:	f103 0307 	add.w	r3, r3, #7
 800267c:	d4f4      	bmi.n	8002668 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x40>
 800267e:	4402      	add	r2, r0
 8002680:	60f2      	str	r2, [r6, #12]
 8002682:	7803      	ldrb	r3, [r0, #0]
 8002684:	2400      	movs	r4, #0
 8002686:	7573      	strb	r3, [r6, #21]
 8002688:	3001      	adds	r0, #1
 800268a:	4623      	mov	r3, r4
 800268c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002690:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002694:	409d      	lsls	r5, r3
 8002696:	060a      	lsls	r2, r1, #24
 8002698:	ea44 0405 	orr.w	r4, r4, r5
 800269c:	f103 0307 	add.w	r3, r3, #7
 80026a0:	d4f4      	bmi.n	800268c <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x64>
 80026a2:	4404      	add	r4, r0
 80026a4:	6134      	str	r4, [r6, #16]
 80026a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a8:	6070      	str	r0, [r6, #4]
 80026aa:	7823      	ldrb	r3, [r4, #0]
 80026ac:	1c60      	adds	r0, r4, #1
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	7533      	strb	r3, [r6, #20]
 80026b2:	d1d5      	bne.n	8002660 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x38>
 80026b4:	2300      	movs	r3, #0
 80026b6:	60f3      	str	r3, [r6, #12]
 80026b8:	e7e3      	b.n	8002682 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x5a>
 80026ba:	bf00      	nop

080026bc <__gxx_personality_v0>:
 80026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c0:	f000 0303 	and.w	r3, r0, #3
 80026c4:	b093      	sub	sp, #76	; 0x4c
 80026c6:	2500      	movs	r5, #0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	460e      	mov	r6, r1
 80026cc:	4614      	mov	r4, r2
 80026ce:	9506      	str	r5, [sp, #24]
 80026d0:	f000 80a6 	beq.w	8002820 <__gxx_personality_v0+0x164>
 80026d4:	d30e      	bcc.n	80026f4 <__gxx_personality_v0+0x38>
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d10a      	bne.n	80026f0 <__gxx_personality_v0+0x34>
 80026da:	4630      	mov	r0, r6
 80026dc:	4621      	mov	r1, r4
 80026de:	f007 fb25 	bl	8009d2c <__gnu_unwind_frame>
 80026e2:	2800      	cmp	r0, #0
 80026e4:	f000 80a4 	beq.w	8002830 <__gxx_personality_v0+0x174>
 80026e8:	2009      	movs	r0, #9
 80026ea:	b013      	add	sp, #76	; 0x4c
 80026ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f0:	f007 fb48 	bl	8009d84 <abort>
 80026f4:	f000 0008 	and.w	r0, r0, #8
 80026f8:	fa5f f880 	uxtb.w	r8, r0
 80026fc:	f04f 0901 	mov.w	r9, #1
 8002700:	ab12      	add	r3, sp, #72	; 0x48
 8002702:	f843 6d2c 	str.w	r6, [r3, #-44]!
 8002706:	2100      	movs	r1, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	220c      	movs	r2, #12
 800270c:	460b      	mov	r3, r1
 800270e:	4620      	mov	r0, r4
 8002710:	f006 fdc0 	bl	8009294 <_Unwind_VRS_Set>
 8002714:	4620      	mov	r0, r4
 8002716:	f007 fb23 	bl	8009d60 <_Unwind_GetLanguageSpecificData>
 800271a:	4607      	mov	r7, r0
 800271c:	2800      	cmp	r0, #0
 800271e:	d0dc      	beq.n	80026da <__gxx_personality_v0+0x1e>
 8002720:	aa0c      	add	r2, sp, #48	; 0x30
 8002722:	4639      	mov	r1, r7
 8002724:	4620      	mov	r0, r4
 8002726:	9203      	str	r2, [sp, #12]
 8002728:	f7ff ff7e 	bl	8002628 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 800272c:	4621      	mov	r1, r4
 800272e:	4683      	mov	fp, r0
 8002730:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8002734:	f7ff ff52 	bl	80025dc <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8002738:	ad0b      	add	r5, sp, #44	; 0x2c
 800273a:	2100      	movs	r1, #0
 800273c:	900e      	str	r0, [sp, #56]	; 0x38
 800273e:	460b      	mov	r3, r1
 8002740:	220f      	movs	r2, #15
 8002742:	9500      	str	r5, [sp, #0]
 8002744:	4620      	mov	r0, r4
 8002746:	f006 fd7d 	bl	8009244 <_Unwind_VRS_Get>
 800274a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800274c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	459b      	cmp	fp, r3
 8002754:	ea48 0809 	orr.w	r8, r8, r9
 8002758:	f102 39ff 	add.w	r9, r2, #4294967295
 800275c:	d239      	bcs.n	80027d2 <__gxx_personality_v0+0x116>
 800275e:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 8002762:	2100      	movs	r1, #0
 8002764:	4650      	mov	r0, sl
 8002766:	f7ff ff39 	bl	80025dc <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 800276a:	465a      	mov	r2, fp
 800276c:	4601      	mov	r1, r0
 800276e:	ab09      	add	r3, sp, #36	; 0x24
 8002770:	4650      	mov	r0, sl
 8002772:	f7ff fedb 	bl	800252c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8002776:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 800277a:	4683      	mov	fp, r0
 800277c:	2100      	movs	r1, #0
 800277e:	4650      	mov	r0, sl
 8002780:	f7ff ff2c 	bl	80025dc <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8002784:	465a      	mov	r2, fp
 8002786:	4601      	mov	r1, r0
 8002788:	ab0a      	add	r3, sp, #40	; 0x28
 800278a:	4650      	mov	r0, sl
 800278c:	f7ff fece 	bl	800252c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8002790:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 8002794:	4683      	mov	fp, r0
 8002796:	2100      	movs	r1, #0
 8002798:	4650      	mov	r0, sl
 800279a:	f7ff ff1f 	bl	80025dc <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 800279e:	465a      	mov	r2, fp
 80027a0:	4601      	mov	r1, r0
 80027a2:	462b      	mov	r3, r5
 80027a4:	4650      	mov	r0, sl
 80027a6:	f7ff fec1 	bl	800252c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 80027aa:	2100      	movs	r1, #0
 80027ac:	4683      	mov	fp, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	f81b eb01 	ldrb.w	lr, [fp], #1
 80027b4:	f00e 027f 	and.w	r2, lr, #127	; 0x7f
 80027b8:	409a      	lsls	r2, r3
 80027ba:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80027be:	ea41 0102 	orr.w	r1, r1, r2
 80027c2:	f103 0307 	add.w	r3, r3, #7
 80027c6:	d1f3      	bne.n	80027b0 <__gxx_personality_v0+0xf4>
 80027c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027cc:	4413      	add	r3, r2
 80027ce:	4599      	cmp	r9, r3
 80027d0:	d21d      	bcs.n	800280e <__gxx_personality_v0+0x152>
 80027d2:	f04f 0900 	mov.w	r9, #0
 80027d6:	f04f 0b01 	mov.w	fp, #1
 80027da:	2500      	movs	r5, #0
 80027dc:	f018 0f01 	tst.w	r8, #1
 80027e0:	d04c      	beq.n	800287c <__gxx_personality_v0+0x1c0>
 80027e2:	f1bb 0f02 	cmp.w	fp, #2
 80027e6:	f43f af78 	beq.w	80026da <__gxx_personality_v0+0x1e>
 80027ea:	ab0a      	add	r3, sp, #40	; 0x28
 80027ec:	2100      	movs	r1, #0
 80027ee:	4620      	mov	r0, r4
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	220d      	movs	r2, #13
 80027f4:	460b      	mov	r3, r1
 80027f6:	9c06      	ldr	r4, [sp, #24]
 80027f8:	f006 fd24 	bl	8009244 <_Unwind_VRS_Get>
 80027fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027fe:	6274      	str	r4, [r6, #36]	; 0x24
 8002800:	62b5      	str	r5, [r6, #40]	; 0x28
 8002802:	62f7      	str	r7, [r6, #44]	; 0x2c
 8002804:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
 8002808:	6233      	str	r3, [r6, #32]
 800280a:	2006      	movs	r0, #6
 800280c:	e76d      	b.n	80026ea <__gxx_personality_v0+0x2e>
 800280e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002810:	4413      	add	r3, r2
 8002812:	4599      	cmp	r9, r3
 8002814:	f0c0 8092 	bcc.w	800293c <__gxx_personality_v0+0x280>
 8002818:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800281a:	459b      	cmp	fp, r3
 800281c:	d39f      	bcc.n	800275e <__gxx_personality_v0+0xa2>
 800281e:	e7d8      	b.n	80027d2 <__gxx_personality_v0+0x116>
 8002820:	f000 0008 	and.w	r0, r0, #8
 8002824:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 8002828:	b130      	cbz	r0, 8002838 <__gxx_personality_v0+0x17c>
 800282a:	f04f 0902 	mov.w	r9, #2
 800282e:	e767      	b.n	8002700 <__gxx_personality_v0+0x44>
 8002830:	2008      	movs	r0, #8
 8002832:	b013      	add	sp, #76	; 0x4c
 8002834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002838:	a90c      	add	r1, sp, #48	; 0x30
 800283a:	9100      	str	r1, [sp, #0]
 800283c:	9103      	str	r1, [sp, #12]
 800283e:	4610      	mov	r0, r2
 8002840:	4643      	mov	r3, r8
 8002842:	4641      	mov	r1, r8
 8002844:	220d      	movs	r2, #13
 8002846:	6a35      	ldr	r5, [r6, #32]
 8002848:	f006 fcfc 	bl	8009244 <_Unwind_VRS_Get>
 800284c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800284e:	429d      	cmp	r5, r3
 8002850:	d1eb      	bne.n	800282a <__gxx_personality_v0+0x16e>
 8002852:	ab12      	add	r3, sp, #72	; 0x48
 8002854:	f843 6d2c 	str.w	r6, [r3, #-44]!
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4641      	mov	r1, r8
 800285c:	4643      	mov	r3, r8
 800285e:	4620      	mov	r0, r4
 8002860:	220c      	movs	r2, #12
 8002862:	f106 0528 	add.w	r5, r6, #40	; 0x28
 8002866:	f006 fd15 	bl	8009294 <_Unwind_VRS_Set>
 800286a:	e895 02a0 	ldmia.w	r5, {r5, r7, r9}
 800286e:	f1b9 0f00 	cmp.w	r9, #0
 8002872:	f000 8117 	beq.w	8002aa4 <__gxx_personality_v0+0x3e8>
 8002876:	f04f 0b03 	mov.w	fp, #3
 800287a:	e03d      	b.n	80028f8 <__gxx_personality_v0+0x23c>
 800287c:	f018 0f08 	tst.w	r8, #8
 8002880:	d036      	beq.n	80028f0 <__gxx_personality_v0+0x234>
 8002882:	f1bb 0f01 	cmp.w	fp, #1
 8002886:	f000 811c 	beq.w	8002ac2 <__gxx_personality_v0+0x406>
 800288a:	2d00      	cmp	r5, #0
 800288c:	f2c0 8115 	blt.w	8002aba <__gxx_personality_v0+0x3fe>
 8002890:	ab12      	add	r3, sp, #72	; 0x48
 8002892:	2100      	movs	r1, #0
 8002894:	f843 6d28 	str.w	r6, [r3, #-40]!
 8002898:	460a      	mov	r2, r1
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4620      	mov	r0, r4
 800289e:	460b      	mov	r3, r1
 80028a0:	f006 fcf8 	bl	8009294 <_Unwind_VRS_Set>
 80028a4:	ab12      	add	r3, sp, #72	; 0x48
 80028a6:	f843 5d24 	str.w	r5, [r3, #-36]!
 80028aa:	2100      	movs	r1, #0
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4620      	mov	r0, r4
 80028b0:	460b      	mov	r3, r1
 80028b2:	2201      	movs	r2, #1
 80028b4:	f006 fcee 	bl	8009294 <_Unwind_VRS_Set>
 80028b8:	ad0a      	add	r5, sp, #40	; 0x28
 80028ba:	2100      	movs	r1, #0
 80028bc:	460b      	mov	r3, r1
 80028be:	4620      	mov	r0, r4
 80028c0:	220f      	movs	r2, #15
 80028c2:	9500      	str	r5, [sp, #0]
 80028c4:	f006 fcbe 	bl	8009244 <_Unwind_VRS_Get>
 80028c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028ca:	2100      	movs	r1, #0
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	4620      	mov	r0, r4
 80028d2:	9500      	str	r5, [sp, #0]
 80028d4:	ea49 0403 	orr.w	r4, r9, r3
 80028d8:	220f      	movs	r2, #15
 80028da:	460b      	mov	r3, r1
 80028dc:	940a      	str	r4, [sp, #40]	; 0x28
 80028de:	f006 fcd9 	bl	8009294 <_Unwind_VRS_Set>
 80028e2:	f1bb 0f02 	cmp.w	fp, #2
 80028e6:	d036      	beq.n	8002956 <__gxx_personality_v0+0x29a>
 80028e8:	2007      	movs	r0, #7
 80028ea:	b013      	add	sp, #76	; 0x4c
 80028ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f0:	f1bb 0f01 	cmp.w	fp, #1
 80028f4:	f000 80d6 	beq.w	8002aa4 <__gxx_personality_v0+0x3e8>
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	dac9      	bge.n	8002890 <__gxx_personality_v0+0x1d4>
 80028fc:	4639      	mov	r1, r7
 80028fe:	9a03      	ldr	r2, [sp, #12]
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff fe91 	bl	8002628 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 8002906:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800290a:	4621      	mov	r1, r4
 800290c:	f7ff fe66 	bl	80025dc <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8002910:	00aa      	lsls	r2, r5, #2
 8002912:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8002914:	f082 0203 	eor.w	r2, r2, #3
 8002918:	43d2      	mvns	r2, r2
 800291a:	900e      	str	r0, [sp, #56]	; 0x38
 800291c:	58bb      	ldr	r3, [r7, r2]
 800291e:	4417      	add	r7, r2
 8002920:	b133      	cbz	r3, 8002930 <__gxx_personality_v0+0x274>
 8002922:	463a      	mov	r2, r7
 8002924:	2300      	movs	r3, #0
 8002926:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800292a:	3301      	adds	r3, #1
 800292c:	2900      	cmp	r1, #0
 800292e:	d1fa      	bne.n	8002926 <__gxx_personality_v0+0x26a>
 8002930:	2204      	movs	r2, #4
 8002932:	62b3      	str	r3, [r6, #40]	; 0x28
 8002934:	62f0      	str	r0, [r6, #44]	; 0x2c
 8002936:	6377      	str	r7, [r6, #52]	; 0x34
 8002938:	6332      	str	r2, [r6, #48]	; 0x30
 800293a:	e7a9      	b.n	8002890 <__gxx_personality_v0+0x1d4>
 800293c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800293e:	b17b      	cbz	r3, 8002960 <__gxx_personality_v0+0x2a4>
 8002940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002942:	eb03 0902 	add.w	r9, r3, r2
 8002946:	b969      	cbnz	r1, 8002964 <__gxx_personality_v0+0x2a8>
 8002948:	f1b9 0f00 	cmp.w	r9, #0
 800294c:	f43f aec5 	beq.w	80026da <__gxx_personality_v0+0x1e>
 8002950:	f04f 0b02 	mov.w	fp, #2
 8002954:	e741      	b.n	80027da <__gxx_personality_v0+0x11e>
 8002956:	4630      	mov	r0, r6
 8002958:	f000 f9b4 	bl	8002cc4 <__cxa_begin_cleanup>
 800295c:	2007      	movs	r0, #7
 800295e:	e6c4      	b.n	80026ea <__gxx_personality_v0+0x2e>
 8002960:	4699      	mov	r9, r3
 8002962:	e7f0      	b.n	8002946 <__gxx_personality_v0+0x28a>
 8002964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002966:	3901      	subs	r1, #1
 8002968:	1858      	adds	r0, r3, r1
 800296a:	f1b9 0f00 	cmp.w	r9, #0
 800296e:	f43f aeb4 	beq.w	80026da <__gxx_personality_v0+0x1e>
 8002972:	2800      	cmp	r0, #0
 8002974:	d0ec      	beq.n	8002950 <__gxx_personality_v0+0x294>
 8002976:	f018 0308 	ands.w	r3, r8, #8
 800297a:	9305      	str	r3, [sp, #20]
 800297c:	d07e      	beq.n	8002a7c <__gxx_personality_v0+0x3c0>
 800297e:	2247      	movs	r2, #71	; 0x47
 8002980:	234e      	movs	r3, #78	; 0x4e
 8002982:	2155      	movs	r1, #85	; 0x55
 8002984:	7032      	strb	r2, [r6, #0]
 8002986:	7073      	strb	r3, [r6, #1]
 8002988:	2243      	movs	r2, #67	; 0x43
 800298a:	2346      	movs	r3, #70	; 0x46
 800298c:	70b1      	strb	r1, [r6, #2]
 800298e:	70f2      	strb	r2, [r6, #3]
 8002990:	214f      	movs	r1, #79	; 0x4f
 8002992:	2252      	movs	r2, #82	; 0x52
 8002994:	7133      	strb	r3, [r6, #4]
 8002996:	2300      	movs	r3, #0
 8002998:	7171      	strb	r1, [r6, #5]
 800299a:	71b2      	strb	r2, [r6, #6]
 800299c:	71f3      	strb	r3, [r6, #7]
 800299e:	f04f 0b00 	mov.w	fp, #0
 80029a2:	9404      	str	r4, [sp, #16]
 80029a4:	a908      	add	r1, sp, #32
 80029a6:	f7ff fda7 	bl	80024f8 <read_sleb128(unsigned char const*, long*)>
 80029aa:	a909      	add	r1, sp, #36	; 0x24
 80029ac:	4682      	mov	sl, r0
 80029ae:	f7ff fda3 	bl	80024f8 <read_sleb128(unsigned char const*, long*)>
 80029b2:	9b08      	ldr	r3, [sp, #32]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d02f      	beq.n	8002a18 <__gxx_personality_v0+0x35c>
 80029b8:	dd31      	ble.n	8002a1e <__gxx_personality_v0+0x362>
 80029ba:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80029be:	28ff      	cmp	r0, #255	; 0xff
 80029c0:	d05a      	beq.n	8002a78 <__gxx_personality_v0+0x3bc>
 80029c2:	f000 0207 	and.w	r2, r0, #7
 80029c6:	2a04      	cmp	r2, #4
 80029c8:	f63f ae92 	bhi.w	80026f0 <__gxx_personality_v0+0x34>
 80029cc:	a101      	add	r1, pc, #4	; (adr r1, 80029d4 <__gxx_personality_v0+0x318>)
 80029ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002a13 	.word	0x08002a13
 80029d8:	080026f1 	.word	0x080026f1
 80029dc:	08002a0d 	.word	0x08002a0d
 80029e0:	08002a13 	.word	0x08002a13
 80029e4:	080029e9 	.word	0x080029e9
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	425b      	negs	r3, r3
 80029ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80029ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80029f0:	441a      	add	r2, r3
 80029f2:	ab0a      	add	r3, sp, #40	; 0x28
 80029f4:	f7ff fd9a 	bl	800252c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 80029f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80029fa:	b1f9      	cbz	r1, 8002a3c <__gxx_personality_v0+0x380>
 80029fc:	2e00      	cmp	r6, #0
 80029fe:	d154      	bne.n	8002aaa <__gxx_personality_v0+0x3ee>
 8002a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d045      	beq.n	8002a92 <__gxx_personality_v0+0x3d6>
 8002a06:	eb0a 0003 	add.w	r0, sl, r3
 8002a0a:	e7cb      	b.n	80029a4 <__gxx_personality_v0+0x2e8>
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	425b      	negs	r3, r3
 8002a10:	e7ec      	b.n	80029ec <__gxx_personality_v0+0x330>
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	425b      	negs	r3, r3
 8002a16:	e7e9      	b.n	80029ec <__gxx_personality_v0+0x330>
 8002a18:	f04f 0b01 	mov.w	fp, #1
 8002a1c:	e7f0      	b.n	8002a00 <__gxx_personality_v0+0x344>
 8002a1e:	3301      	adds	r3, #1
 8002a20:	b10e      	cbz	r6, 8002a26 <__gxx_personality_v0+0x36a>
 8002a22:	9a05      	ldr	r2, [sp, #20]
 8002a24:	b17a      	cbz	r2, 8002a46 <__gxx_personality_v0+0x38a>
 8002a26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002a28:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	f1d3 0301 	rsbs	r3, r3, #1
 8002a34:	bf38      	it	cc
 8002a36:	2300      	movcc	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0e1      	beq.n	8002a00 <__gxx_personality_v0+0x344>
 8002a3c:	9c04      	ldr	r4, [sp, #16]
 8002a3e:	9d08      	ldr	r5, [sp, #32]
 8002a40:	f04f 0b03 	mov.w	fp, #3
 8002a44:	e6ca      	b.n	80027dc <__gxx_personality_v0+0x120>
 8002a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002a48:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8002a4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a50:	9806      	ldr	r0, [sp, #24]
 8002a52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002a56:	900b      	str	r0, [sp, #44]	; 0x2c
 8002a58:	461c      	mov	r4, r3
 8002a5a:	b919      	cbnz	r1, 8002a64 <__gxx_personality_v0+0x3a8>
 8002a5c:	e017      	b.n	8002a8e <__gxx_personality_v0+0x3d2>
 8002a5e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8002a62:	b1a1      	cbz	r1, 8002a8e <__gxx_personality_v0+0x3d2>
 8002a64:	4421      	add	r1, r4
 8002a66:	4630      	mov	r0, r6
 8002a68:	2200      	movs	r2, #0
 8002a6a:	462b      	mov	r3, r5
 8002a6c:	f000 f8d4 	bl	8002c18 <__cxa_type_match>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d0f4      	beq.n	8002a5e <__gxx_personality_v0+0x3a2>
 8002a74:	2300      	movs	r3, #0
 8002a76:	e7df      	b.n	8002a38 <__gxx_personality_v0+0x37c>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e7b7      	b.n	80029ec <__gxx_personality_v0+0x330>
 8002a7c:	79f3      	ldrb	r3, [r6, #7]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	bf0c      	ite	eq
 8002a82:	f856 3c20 	ldreq.w	r3, [r6, #-32]
 8002a86:	f106 0358 	addne.w	r3, r6, #88	; 0x58
 8002a8a:	9306      	str	r3, [sp, #24]
 8002a8c:	e787      	b.n	800299e <__gxx_personality_v0+0x2e2>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e7d2      	b.n	8002a38 <__gxx_personality_v0+0x37c>
 8002a92:	9c04      	ldr	r4, [sp, #16]
 8002a94:	f1bb 0f00 	cmp.w	fp, #0
 8002a98:	f43f ae1f 	beq.w	80026da <__gxx_personality_v0+0x1e>
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	f04f 0b02 	mov.w	fp, #2
 8002aa2:	e69b      	b.n	80027dc <__gxx_personality_v0+0x120>
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	f000 f9b9 	bl	8002e1c <__cxa_call_terminate>
 8002aaa:	4630      	mov	r0, r6
 8002aac:	2200      	movs	r2, #0
 8002aae:	ab06      	add	r3, sp, #24
 8002ab0:	f000 f8b2 	bl	8002c18 <__cxa_type_match>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d1c1      	bne.n	8002a3c <__gxx_personality_v0+0x380>
 8002ab8:	e7a2      	b.n	8002a00 <__gxx_personality_v0+0x344>
 8002aba:	f000 fb7b 	bl	80031b4 <std::unexpected()>
 8002abe:	f000 fcb5 	bl	800342c <__cxa_begin_catch>
 8002ac2:	f000 fb6b 	bl	800319c <std::terminate()>
 8002ac6:	bf00      	nop

08002ac8 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
 8002ac8:	2801      	cmp	r0, #1
 8002aca:	b510      	push	{r4, lr}
 8002acc:	d81a      	bhi.n	8002b04 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3c>
 8002ace:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8002ad2:	f3bf 8f5f 	dmb	sy
 8002ad6:	e853 2f00 	ldrex	r2, [r3]
 8002ada:	3a01      	subs	r2, #1
 8002adc:	e843 2000 	strex	r0, r2, [r3]
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d1f8      	bne.n	8002ad6 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0xe>
 8002ae4:	f3bf 8f5f 	dmb	sy
 8002ae8:	b95a      	cbnz	r2, 8002b02 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3a>
 8002aea:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8002aee:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8002af2:	b10b      	cbz	r3, 8002af8 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x30>
 8002af4:	4620      	mov	r0, r4
 8002af6:	4798      	blx	r3
 8002af8:	4620      	mov	r0, r4
 8002afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002afe:	f7ff bce1 	b.w	80024c4 <__cxa_free_exception>
 8002b02:	bd10      	pop	{r4, pc}
 8002b04:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8002b08:	f000 fb34 	bl	8003174 <__cxxabiv1::__terminate(void (*)())>

08002b0c <__cxa_throw>:
 8002b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b10:	4604      	mov	r4, r0
 8002b12:	460f      	mov	r7, r1
 8002b14:	4690      	mov	r8, r2
 8002b16:	f000 f95f 	bl	8002dd8 <__cxa_get_globals>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	481c      	ldr	r0, [pc, #112]	; (8002b90 <__cxa_throw+0x84>)
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <__cxa_throw+0x88>)
 8002b22:	f8d0 a000 	ldr.w	sl, [r0]
 8002b26:	1c4e      	adds	r6, r1, #1
 8002b28:	6810      	ldr	r0, [r2, #0]
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <__cxa_throw+0x8c>)
 8002b2c:	605e      	str	r6, [r3, #4]
 8002b2e:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8002b32:	232b      	movs	r3, #43	; 0x2b
 8002b34:	f04f 0e55 	mov.w	lr, #85	; 0x55
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 8002b3e:	2643      	movs	r6, #67	; 0x43
 8002b40:	f04f 0b01 	mov.w	fp, #1
 8002b44:	f04f 0947 	mov.w	r9, #71	; 0x47
 8002b48:	f844 0c6c 	str.w	r0, [r4, #-108]
 8002b4c:	f804 cc57 	strb.w	ip, [r4, #-87]
 8002b50:	f804 ec56 	strb.w	lr, [r4, #-86]
 8002b54:	f804 1c51 	strb.w	r1, [r4, #-81]
 8002b58:	f844 2c50 	str.w	r2, [r4, #-80]
 8002b5c:	f804 3c53 	strb.w	r3, [r4, #-83]
 8002b60:	f804 3c52 	strb.w	r3, [r4, #-82]
 8002b64:	f844 7c78 	str.w	r7, [r4, #-120]
 8002b68:	f844 8c74 	str.w	r8, [r4, #-116]
 8002b6c:	f844 bc80 	str.w	fp, [r4, #-128]
 8002b70:	f844 ac70 	str.w	sl, [r4, #-112]
 8002b74:	f804 9c58 	strb.w	r9, [r4, #-88]
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f804 6c55 	strb.w	r6, [r4, #-85]
 8002b7e:	f804 6c54 	strb.w	r6, [r4, #-84]
 8002b82:	f006 ff07 	bl	8009994 <_Unwind_RaiseException>
 8002b86:	4628      	mov	r0, r5
 8002b88:	f000 fc50 	bl	800342c <__cxa_begin_catch>
 8002b8c:	f000 fb06 	bl	800319c <std::terminate()>
 8002b90:	20000014 	.word	0x20000014
 8002b94:	20000018 	.word	0x20000018
 8002b98:	08002ac9 	.word	0x08002ac9

08002b9c <__cxa_rethrow>:
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	f000 f91b 	bl	8002dd8 <__cxa_get_globals>
 8002ba2:	6842      	ldr	r2, [r0, #4]
 8002ba4:	6803      	ldr	r3, [r0, #0]
 8002ba6:	3201      	adds	r2, #1
 8002ba8:	6042      	str	r2, [r0, #4]
 8002baa:	b16b      	cbz	r3, 8002bc8 <__cxa_rethrow+0x2c>
 8002bac:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002bb0:	2a47      	cmp	r2, #71	; 0x47
 8002bb2:	d00b      	beq.n	8002bcc <__cxa_rethrow+0x30>
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6002      	str	r2, [r0, #0]
 8002bb8:	f103 0420 	add.w	r4, r3, #32
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f006 ff0d 	bl	80099dc <_Unwind_Resume_or_Rethrow>
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f000 fc32 	bl	800342c <__cxa_begin_catch>
 8002bc8:	f000 fae8 	bl	800319c <std::terminate()>
 8002bcc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002bd0:	2a4e      	cmp	r2, #78	; 0x4e
 8002bd2:	d1ef      	bne.n	8002bb4 <__cxa_rethrow+0x18>
 8002bd4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002bd8:	2a55      	cmp	r2, #85	; 0x55
 8002bda:	d1eb      	bne.n	8002bb4 <__cxa_rethrow+0x18>
 8002bdc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8002be0:	2a43      	cmp	r2, #67	; 0x43
 8002be2:	d1e7      	bne.n	8002bb4 <__cxa_rethrow+0x18>
 8002be4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002be8:	2a43      	cmp	r2, #67	; 0x43
 8002bea:	d1e3      	bne.n	8002bb4 <__cxa_rethrow+0x18>
 8002bec:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002bf0:	2a2b      	cmp	r2, #43	; 0x2b
 8002bf2:	d1df      	bne.n	8002bb4 <__cxa_rethrow+0x18>
 8002bf4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002bf8:	2a2b      	cmp	r2, #43	; 0x2b
 8002bfa:	d1db      	bne.n	8002bb4 <__cxa_rethrow+0x18>
 8002bfc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002c00:	2a01      	cmp	r2, #1
 8002c02:	d8d7      	bhi.n	8002bb4 <__cxa_rethrow+0x18>
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	4252      	negs	r2, r2
 8002c08:	615a      	str	r2, [r3, #20]
 8002c0a:	e7d5      	b.n	8002bb8 <__cxa_rethrow+0x1c>

08002c0c <__cxa_end_cleanup>:
 8002c0c:	b41e      	push	{r1, r2, r3, r4}
 8002c0e:	f000 f88b 	bl	8002d28 <__gnu_end_cleanup>
 8002c12:	bc1e      	pop	{r1, r2, r3, r4}
 8002c14:	f006 fed0 	bl	80099b8 <_Unwind_Resume>

08002c18 <__cxa_type_match>:
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1a:	7802      	ldrb	r2, [r0, #0]
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	2a47      	cmp	r2, #71	; 0x47
 8002c20:	460d      	mov	r5, r1
 8002c22:	461e      	mov	r6, r3
 8002c24:	d01a      	beq.n	8002c5c <__cxa_type_match+0x44>
 8002c26:	2300      	movs	r3, #0
 8002c28:	4c24      	ldr	r4, [pc, #144]	; (8002cbc <__cxa_type_match+0xa4>)
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	4620      	mov	r0, r4
 8002c30:	6893      	ldr	r3, [r2, #8]
 8002c32:	4798      	blx	r3
 8002c34:	b180      	cbz	r0, 8002c58 <__cxa_type_match+0x40>
 8002c36:	9b01      	ldr	r3, [sp, #4]
 8002c38:	2702      	movs	r7, #2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	682a      	ldr	r2, [r5, #0]
 8002c40:	4621      	mov	r1, r4
 8002c42:	4628      	mov	r0, r5
 8002c44:	6914      	ldr	r4, [r2, #16]
 8002c46:	2301      	movs	r3, #1
 8002c48:	aa01      	add	r2, sp, #4
 8002c4a:	47a0      	blx	r4
 8002c4c:	b110      	cbz	r0, 8002c54 <__cxa_type_match+0x3c>
 8002c4e:	9b01      	ldr	r3, [sp, #4]
 8002c50:	4638      	mov	r0, r7
 8002c52:	6033      	str	r3, [r6, #0]
 8002c54:	b003      	add	sp, #12
 8002c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c58:	2701      	movs	r7, #1
 8002c5a:	e7f0      	b.n	8002c3e <__cxa_type_match+0x26>
 8002c5c:	7843      	ldrb	r3, [r0, #1]
 8002c5e:	2b4e      	cmp	r3, #78	; 0x4e
 8002c60:	d1e1      	bne.n	8002c26 <__cxa_type_match+0xe>
 8002c62:	7883      	ldrb	r3, [r0, #2]
 8002c64:	2b55      	cmp	r3, #85	; 0x55
 8002c66:	d1de      	bne.n	8002c26 <__cxa_type_match+0xe>
 8002c68:	78c3      	ldrb	r3, [r0, #3]
 8002c6a:	2b43      	cmp	r3, #67	; 0x43
 8002c6c:	d1db      	bne.n	8002c26 <__cxa_type_match+0xe>
 8002c6e:	7903      	ldrb	r3, [r0, #4]
 8002c70:	2b46      	cmp	r3, #70	; 0x46
 8002c72:	d016      	beq.n	8002ca2 <__cxa_type_match+0x8a>
 8002c74:	7903      	ldrb	r3, [r0, #4]
 8002c76:	2b43      	cmp	r3, #67	; 0x43
 8002c78:	d1d5      	bne.n	8002c26 <__cxa_type_match+0xe>
 8002c7a:	7943      	ldrb	r3, [r0, #5]
 8002c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8002c7e:	d1d2      	bne.n	8002c26 <__cxa_type_match+0xe>
 8002c80:	7983      	ldrb	r3, [r0, #6]
 8002c82:	2b2b      	cmp	r3, #43	; 0x2b
 8002c84:	d1cf      	bne.n	8002c26 <__cxa_type_match+0xe>
 8002c86:	79c3      	ldrb	r3, [r0, #7]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d8cc      	bhi.n	8002c26 <__cxa_type_match+0xe>
 8002c8c:	d004      	beq.n	8002c98 <__cxa_type_match+0x80>
 8002c8e:	f850 4c20 	ldr.w	r4, [r0, #-32]
 8002c92:	3058      	adds	r0, #88	; 0x58
 8002c94:	9001      	str	r0, [sp, #4]
 8002c96:	e7c9      	b.n	8002c2c <__cxa_type_match+0x14>
 8002c98:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8002c9c:	f850 4c78 	ldr.w	r4, [r0, #-120]
 8002ca0:	e7f8      	b.n	8002c94 <__cxa_type_match+0x7c>
 8002ca2:	7943      	ldrb	r3, [r0, #5]
 8002ca4:	2b4f      	cmp	r3, #79	; 0x4f
 8002ca6:	d1e5      	bne.n	8002c74 <__cxa_type_match+0x5c>
 8002ca8:	7983      	ldrb	r3, [r0, #6]
 8002caa:	2b52      	cmp	r3, #82	; 0x52
 8002cac:	d1e2      	bne.n	8002c74 <__cxa_type_match+0x5c>
 8002cae:	79c3      	ldrb	r3, [r0, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1df      	bne.n	8002c74 <__cxa_type_match+0x5c>
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	4c02      	ldr	r4, [pc, #8]	; (8002cc0 <__cxa_type_match+0xa8>)
 8002cb8:	e7b8      	b.n	8002c2c <__cxa_type_match+0x14>
 8002cba:	bf00      	nop
 8002cbc:	0800c30c 	.word	0x0800c30c
 8002cc0:	0800c2a0 	.word	0x0800c2a0

08002cc4 <__cxa_begin_cleanup>:
 8002cc4:	b510      	push	{r4, lr}
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	f000 f886 	bl	8002dd8 <__cxa_get_globals>
 8002ccc:	7823      	ldrb	r3, [r4, #0]
 8002cce:	f1a4 0220 	sub.w	r2, r4, #32
 8002cd2:	2b47      	cmp	r3, #71	; 0x47
 8002cd4:	d004      	beq.n	8002ce0 <__cxa_begin_cleanup+0x1c>
 8002cd6:	6883      	ldr	r3, [r0, #8]
 8002cd8:	bb23      	cbnz	r3, 8002d24 <__cxa_begin_cleanup+0x60>
 8002cda:	6082      	str	r2, [r0, #8]
 8002cdc:	2001      	movs	r0, #1
 8002cde:	bd10      	pop	{r4, pc}
 8002ce0:	7863      	ldrb	r3, [r4, #1]
 8002ce2:	2b4e      	cmp	r3, #78	; 0x4e
 8002ce4:	d1f7      	bne.n	8002cd6 <__cxa_begin_cleanup+0x12>
 8002ce6:	78a3      	ldrb	r3, [r4, #2]
 8002ce8:	2b55      	cmp	r3, #85	; 0x55
 8002cea:	d1f4      	bne.n	8002cd6 <__cxa_begin_cleanup+0x12>
 8002cec:	78e3      	ldrb	r3, [r4, #3]
 8002cee:	2b43      	cmp	r3, #67	; 0x43
 8002cf0:	d1f1      	bne.n	8002cd6 <__cxa_begin_cleanup+0x12>
 8002cf2:	7923      	ldrb	r3, [r4, #4]
 8002cf4:	2b43      	cmp	r3, #67	; 0x43
 8002cf6:	d1ee      	bne.n	8002cd6 <__cxa_begin_cleanup+0x12>
 8002cf8:	7963      	ldrb	r3, [r4, #5]
 8002cfa:	2b2b      	cmp	r3, #43	; 0x2b
 8002cfc:	d1eb      	bne.n	8002cd6 <__cxa_begin_cleanup+0x12>
 8002cfe:	79a3      	ldrb	r3, [r4, #6]
 8002d00:	2b2b      	cmp	r3, #43	; 0x2b
 8002d02:	d1e8      	bne.n	8002cd6 <__cxa_begin_cleanup+0x12>
 8002d04:	79e3      	ldrb	r3, [r4, #7]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d8e5      	bhi.n	8002cd6 <__cxa_begin_cleanup+0x12>
 8002d0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f844 3c04 	str.w	r3, [r4, #-4]
 8002d16:	d1e1      	bne.n	8002cdc <__cxa_begin_cleanup+0x18>
 8002d18:	6883      	ldr	r3, [r0, #8]
 8002d1a:	f844 3c08 	str.w	r3, [r4, #-8]
 8002d1e:	6082      	str	r2, [r0, #8]
 8002d20:	2001      	movs	r0, #1
 8002d22:	bd10      	pop	{r4, pc}
 8002d24:	f000 fa3a 	bl	800319c <std::terminate()>

08002d28 <__gnu_end_cleanup>:
 8002d28:	b508      	push	{r3, lr}
 8002d2a:	f000 f855 	bl	8002dd8 <__cxa_get_globals>
 8002d2e:	6883      	ldr	r3, [r0, #8]
 8002d30:	b383      	cbz	r3, 8002d94 <__gnu_end_cleanup+0x6c>
 8002d32:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002d36:	2a47      	cmp	r2, #71	; 0x47
 8002d38:	d004      	beq.n	8002d44 <__gnu_end_cleanup+0x1c>
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	6082      	str	r2, [r0, #8]
 8002d3e:	f103 0020 	add.w	r0, r3, #32
 8002d42:	bd08      	pop	{r3, pc}
 8002d44:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002d48:	2a4e      	cmp	r2, #78	; 0x4e
 8002d4a:	d1f6      	bne.n	8002d3a <__gnu_end_cleanup+0x12>
 8002d4c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002d50:	2a55      	cmp	r2, #85	; 0x55
 8002d52:	d1f2      	bne.n	8002d3a <__gnu_end_cleanup+0x12>
 8002d54:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8002d58:	2a43      	cmp	r2, #67	; 0x43
 8002d5a:	d1ee      	bne.n	8002d3a <__gnu_end_cleanup+0x12>
 8002d5c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002d60:	2a43      	cmp	r2, #67	; 0x43
 8002d62:	d1ea      	bne.n	8002d3a <__gnu_end_cleanup+0x12>
 8002d64:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002d68:	2a2b      	cmp	r2, #43	; 0x2b
 8002d6a:	d1e6      	bne.n	8002d3a <__gnu_end_cleanup+0x12>
 8002d6c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002d70:	2a2b      	cmp	r2, #43	; 0x2b
 8002d72:	d1e2      	bne.n	8002d3a <__gnu_end_cleanup+0x12>
 8002d74:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002d78:	2a01      	cmp	r2, #1
 8002d7a:	d8de      	bhi.n	8002d3a <__gnu_end_cleanup+0x12>
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	61da      	str	r2, [r3, #28]
 8002d82:	2a00      	cmp	r2, #0
 8002d84:	d1db      	bne.n	8002d3e <__gnu_end_cleanup+0x16>
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	2100      	movs	r1, #0
 8002d8a:	6082      	str	r2, [r0, #8]
 8002d8c:	6199      	str	r1, [r3, #24]
 8002d8e:	f103 0020 	add.w	r0, r3, #32
 8002d92:	bd08      	pop	{r3, pc}
 8002d94:	f000 fa02 	bl	800319c <std::terminate()>

08002d98 <std::bad_alloc::what() const>:
 8002d98:	4800      	ldr	r0, [pc, #0]	; (8002d9c <std::bad_alloc::what() const+0x4>)
 8002d9a:	4770      	bx	lr
 8002d9c:	0800c204 	.word	0x0800c204

08002da0 <std::bad_alloc::~bad_alloc()>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <std::bad_alloc::~bad_alloc()+0x10>)
 8002da4:	4604      	mov	r4, r0
 8002da6:	6003      	str	r3, [r0, #0]
 8002da8:	f000 f92e 	bl	8003008 <std::exception::~exception()>
 8002dac:	4620      	mov	r0, r4
 8002dae:	bd10      	pop	{r4, pc}
 8002db0:	0800c1e8 	.word	0x0800c1e8

08002db4 <std::bad_alloc::~bad_alloc()>:
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <std::bad_alloc::~bad_alloc()+0x18>)
 8002db8:	4604      	mov	r4, r0
 8002dba:	6003      	str	r3, [r0, #0]
 8002dbc:	f000 f924 	bl	8003008 <std::exception::~exception()>
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff fa17 	bl	80021f4 <operator delete(void*)>
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	bf00      	nop
 8002dcc:	0800c1e8 	.word	0x0800c1e8

08002dd0 <__cxa_get_globals_fast>:
 8002dd0:	4800      	ldr	r0, [pc, #0]	; (8002dd4 <__cxa_get_globals_fast+0x4>)
 8002dd2:	4770      	bx	lr
 8002dd4:	20001158 	.word	0x20001158

08002dd8 <__cxa_get_globals>:
 8002dd8:	4800      	ldr	r0, [pc, #0]	; (8002ddc <__cxa_get_globals+0x4>)
 8002dda:	4770      	bx	lr
 8002ddc:	20001158 	.word	0x20001158

08002de0 <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8002de0:	7803      	ldrb	r3, [r0, #0]
 8002de2:	2b47      	cmp	r3, #71	; 0x47
 8002de4:	d001      	beq.n	8002dea <__cxxabiv1::__is_gxx_exception_class(char*)+0xa>
 8002de6:	2000      	movs	r0, #0
 8002de8:	4770      	bx	lr
 8002dea:	7843      	ldrb	r3, [r0, #1]
 8002dec:	2b4e      	cmp	r3, #78	; 0x4e
 8002dee:	d1fa      	bne.n	8002de6 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8002df0:	7883      	ldrb	r3, [r0, #2]
 8002df2:	2b55      	cmp	r3, #85	; 0x55
 8002df4:	d1f7      	bne.n	8002de6 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8002df6:	78c3      	ldrb	r3, [r0, #3]
 8002df8:	2b43      	cmp	r3, #67	; 0x43
 8002dfa:	d1f4      	bne.n	8002de6 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8002dfc:	7903      	ldrb	r3, [r0, #4]
 8002dfe:	2b43      	cmp	r3, #67	; 0x43
 8002e00:	d1f1      	bne.n	8002de6 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8002e02:	7943      	ldrb	r3, [r0, #5]
 8002e04:	2b2b      	cmp	r3, #43	; 0x2b
 8002e06:	d1ee      	bne.n	8002de6 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8002e08:	7983      	ldrb	r3, [r0, #6]
 8002e0a:	2b2b      	cmp	r3, #43	; 0x2b
 8002e0c:	d1eb      	bne.n	8002de6 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8002e0e:	79c0      	ldrb	r0, [r0, #7]
 8002e10:	2801      	cmp	r0, #1
 8002e12:	bf8c      	ite	hi
 8002e14:	2000      	movhi	r0, #0
 8002e16:	2001      	movls	r0, #1
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop

08002e1c <__cxa_call_terminate>:
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	4604      	mov	r4, r0
 8002e20:	b128      	cbz	r0, 8002e2e <__cxa_call_terminate+0x12>
 8002e22:	f000 fb03 	bl	800342c <__cxa_begin_catch>
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7ff ffda 	bl	8002de0 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8002e2c:	b908      	cbnz	r0, 8002e32 <__cxa_call_terminate+0x16>
 8002e2e:	f000 f9b5 	bl	800319c <std::terminate()>
 8002e32:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8002e36:	f000 f99d 	bl	8003174 <__cxxabiv1::__terminate(void (*)())>
 8002e3a:	bf00      	nop

08002e3c <__cxa_call_unexpected>:
 8002e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e40:	b083      	sub	sp, #12
 8002e42:	4604      	mov	r4, r0
 8002e44:	f7ff ffcc 	bl	8002de0 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8002e48:	b168      	cbz	r0, 8002e66 <__cxa_call_unexpected+0x2a>
 8002e4a:	f854 5c18 	ldr.w	r5, [r4, #-24]
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8002e54:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002e56:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8002e5a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8002e5c:	f000 fae6 	bl	800342c <__cxa_begin_catch>
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f9a3 	bl	80031ac <__cxxabiv1::__unexpected(void (*)())>
 8002e66:	4620      	mov	r0, r4
 8002e68:	f000 fae0 	bl	800342c <__cxa_begin_catch>
 8002e6c:	f000 f9a2 	bl	80031b4 <std::unexpected()>
 8002e70:	f000 fadc 	bl	800342c <__cxa_begin_catch>
 8002e74:	f000 f992 	bl	800319c <std::terminate()>
 8002e78:	f000 fad8 	bl	800342c <__cxa_begin_catch>
 8002e7c:	f7ff ffa8 	bl	8002dd0 <__cxa_get_globals_fast>
 8002e80:	6803      	ldr	r3, [r0, #0]
 8002e82:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002e86:	2a01      	cmp	r2, #1
 8002e88:	d027      	beq.n	8002eda <__cxa_call_unexpected+0x9e>
 8002e8a:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8002e8e:	2500      	movs	r5, #0
 8002e90:	9200      	str	r2, [sp, #0]
 8002e92:	f028 0803 	bic.w	r8, r8, #3
 8002e96:	f103 0b20 	add.w	fp, r3, #32
 8002e9a:	46aa      	mov	sl, r5
 8002e9c:	45ba      	cmp	sl, r7
 8002e9e:	da28      	bge.n	8002ef2 <__cxa_call_unexpected+0xb6>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	b323      	cbz	r3, 8002eee <__cxa_call_unexpected+0xb2>
 8002ea4:	eb03 0904 	add.w	r9, r3, r4
 8002ea8:	4658      	mov	r0, fp
 8002eaa:	4649      	mov	r1, r9
 8002eac:	2200      	movs	r2, #0
 8002eae:	466b      	mov	r3, sp
 8002eb0:	f7ff feb2 	bl	8002c18 <__cxa_type_match>
 8002eb4:	b998      	cbnz	r0, 8002ede <__cxa_call_unexpected+0xa2>
 8002eb6:	f8d9 3000 	ldr.w	r3, [r9]
 8002eba:	aa02      	add	r2, sp, #8
 8002ebc:	f842 0d04 	str.w	r0, [r2, #-4]!
 8002ec0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8002ec4:	4648      	mov	r0, r9
 8002ec6:	4911      	ldr	r1, [pc, #68]	; (8002f0c <__cxa_call_unexpected+0xd0>)
 8002ec8:	2301      	movs	r3, #1
 8002eca:	47e0      	blx	ip
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	bf18      	it	ne
 8002ed0:	2501      	movne	r5, #1
 8002ed2:	f10a 0a01 	add.w	sl, sl, #1
 8002ed6:	4444      	add	r4, r8
 8002ed8:	e7e0      	b.n	8002e9c <__cxa_call_unexpected+0x60>
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	e7d7      	b.n	8002e8e <__cxa_call_unexpected+0x52>
 8002ede:	f7ff fe5d 	bl	8002b9c <__cxa_rethrow>
 8002ee2:	f000 fae9 	bl	80034b8 <__cxa_end_catch>
 8002ee6:	f000 fae7 	bl	80034b8 <__cxa_end_catch>
 8002eea:	f7ff fe8f 	bl	8002c0c <__cxa_end_cleanup>
 8002eee:	4699      	mov	r9, r3
 8002ef0:	e7da      	b.n	8002ea8 <__cxa_call_unexpected+0x6c>
 8002ef2:	b145      	cbz	r5, 8002f06 <__cxa_call_unexpected+0xca>
 8002ef4:	2004      	movs	r0, #4
 8002ef6:	f7ff fab9 	bl	800246c <__cxa_allocate_exception>
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <__cxa_call_unexpected+0xd4>)
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <__cxa_call_unexpected+0xd0>)
 8002efe:	6003      	str	r3, [r0, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <__cxa_call_unexpected+0xd8>)
 8002f02:	f7ff fe03 	bl	8002b0c <__cxa_throw>
 8002f06:	4630      	mov	r0, r6
 8002f08:	f000 f934 	bl	8003174 <__cxxabiv1::__terminate(void (*)())>
 8002f0c:	0800c360 	.word	0x0800c360
 8002f10:	0800c320 	.word	0x0800c320
 8002f14:	08003015 	.word	0x08003015

08002f18 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	6803      	ldr	r3, [r0, #0]
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	2400      	movs	r4, #0
 8002f20:	2710      	movs	r7, #16
 8002f22:	4615      	mov	r5, r2
 8002f24:	699e      	ldr	r6, [r3, #24]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	466b      	mov	r3, sp
 8002f2a:	9400      	str	r4, [sp, #0]
 8002f2c:	f88d 4004 	strb.w	r4, [sp, #4]
 8002f30:	9403      	str	r4, [sp, #12]
 8002f32:	9702      	str	r7, [sp, #8]
 8002f34:	47b0      	blx	r6
 8002f36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f3a:	f003 0306 	and.w	r3, r3, #6
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	bf05      	ittet	eq
 8002f42:	9b00      	ldreq	r3, [sp, #0]
 8002f44:	2001      	moveq	r0, #1
 8002f46:	4620      	movne	r0, r4
 8002f48:	602b      	streq	r3, [r5, #0]
 8002f4a:	b005      	add	sp, #20
 8002f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f4e:	bf00      	nop

08002f50 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8002f50:	9800      	ldr	r0, [sp, #0]
 8002f52:	4290      	cmp	r0, r2
 8002f54:	bf14      	ite	ne
 8002f56:	2001      	movne	r0, #1
 8002f58:	2006      	moveq	r0, #6
 8002f5a:	4770      	bx	lr

08002f5c <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
 8002f60:	4604      	mov	r4, r0
 8002f62:	6003      	str	r3, [r0, #0]
 8002f64:	f000 fb78 	bl	8003658 <std::type_info::~type_info()>
 8002f68:	4620      	mov	r0, r4
 8002f6a:	bd10      	pop	{r4, pc}
 8002f6c:	0800c230 	.word	0x0800c230

08002f70 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <__cxxabiv1::__class_type_info::~__class_type_info()+0x18>)
 8002f74:	4604      	mov	r4, r0
 8002f76:	6003      	str	r3, [r0, #0]
 8002f78:	f000 fb6e 	bl	8003658 <std::type_info::~type_info()>
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7ff f939 	bl	80021f4 <operator delete(void*)>
 8002f82:	4620      	mov	r0, r4
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	bf00      	nop
 8002f88:	0800c230 	.word	0x0800c230

08002f8c <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4615      	mov	r5, r2
 8002f90:	461c      	mov	r4, r3
 8002f92:	f000 fb77 	bl	8003684 <std::type_info::operator==(std::type_info const&) const>
 8002f96:	b120      	cbz	r0, 8002fa2 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 8002f98:	2208      	movs	r2, #8
 8002f9a:	2306      	movs	r3, #6
 8002f9c:	6025      	str	r5, [r4, #0]
 8002f9e:	60e2      	str	r2, [r4, #12]
 8002fa0:	7123      	strb	r3, [r4, #4]
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}

08002fa4 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	4616      	mov	r6, r2
 8002fa8:	461c      	mov	r4, r3
 8002faa:	4607      	mov	r7, r0
 8002fac:	460d      	mov	r5, r1
 8002fae:	f000 fb69 	bl	8003684 <std::type_info::operator==(std::type_info const&) const>
 8002fb2:	b908      	cbnz	r0, 8002fb8 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x14>
 8002fb4:	2c03      	cmp	r4, #3
 8002fb6:	d900      	bls.n	8002fba <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x16>
 8002fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fba:	682b      	ldr	r3, [r5, #0]
 8002fbc:	4639      	mov	r1, r7
 8002fbe:	4632      	mov	r2, r6
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	4798      	blx	r3
 8002fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002fc8 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8002fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	9c08      	ldr	r4, [sp, #32]
 8002fce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002fd0:	4617      	mov	r7, r2
 8002fd2:	42ac      	cmp	r4, r5
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	d00c      	beq.n	8002ff2 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2a>
 8002fd8:	4630      	mov	r0, r6
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f000 fb52 	bl	8003684 <std::type_info::operator==(std::type_info const&) const>
 8002fe0:	b120      	cbz	r0, 8002fec <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x24>
 8002fe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	6014      	str	r4, [r2, #0]
 8002fe8:	7117      	strb	r7, [r2, #4]
 8002fea:	7193      	strb	r3, [r2, #6]
 8002fec:	2000      	movs	r0, #0
 8002fee:	b003      	add	sp, #12
 8002ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	f000 fb45 	bl	8003684 <std::type_info::operator==(std::type_info const&) const>
 8002ffa:	9b01      	ldr	r3, [sp, #4]
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d0eb      	beq.n	8002fd8 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x10>
 8003000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003002:	715f      	strb	r7, [r3, #5]
 8003004:	e7f2      	b.n	8002fec <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x24>
 8003006:	bf00      	nop

08003008 <std::exception::~exception()>:
 8003008:	4b01      	ldr	r3, [pc, #4]	; (8003010 <std::exception::~exception()+0x8>)
 800300a:	6003      	str	r3, [r0, #0]
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	0800c290 	.word	0x0800c290

08003014 <std::bad_exception::~bad_exception()>:
 8003014:	4b01      	ldr	r3, [pc, #4]	; (800301c <std::bad_exception::~bad_exception()+0x8>)
 8003016:	6003      	str	r3, [r0, #0]
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	0800c290 	.word	0x0800c290

08003020 <std::exception::what() const>:
 8003020:	4800      	ldr	r0, [pc, #0]	; (8003024 <std::exception::what() const+0x4>)
 8003022:	4770      	bx	lr
 8003024:	0800c2c4 	.word	0x0800c2c4

08003028 <std::bad_exception::what() const>:
 8003028:	4800      	ldr	r0, [pc, #0]	; (800302c <std::bad_exception::what() const+0x4>)
 800302a:	4770      	bx	lr
 800302c:	0800c2d4 	.word	0x0800c2d4

08003030 <std::exception::~exception()>:
 8003030:	b510      	push	{r4, lr}
 8003032:	4b03      	ldr	r3, [pc, #12]	; (8003040 <std::exception::~exception()+0x10>)
 8003034:	4604      	mov	r4, r0
 8003036:	6003      	str	r3, [r0, #0]
 8003038:	f7ff f8dc 	bl	80021f4 <operator delete(void*)>
 800303c:	4620      	mov	r0, r4
 800303e:	bd10      	pop	{r4, pc}
 8003040:	0800c290 	.word	0x0800c290

08003044 <std::bad_exception::~bad_exception()>:
 8003044:	b510      	push	{r4, lr}
 8003046:	4b03      	ldr	r3, [pc, #12]	; (8003054 <std::bad_exception::~bad_exception()+0x10>)
 8003048:	4604      	mov	r4, r0
 800304a:	6003      	str	r3, [r0, #0]
 800304c:	f7ff f8d2 	bl	80021f4 <operator delete(void*)>
 8003050:	4620      	mov	r0, r4
 8003052:	bd10      	pop	{r4, pc}
 8003054:	0800c290 	.word	0x0800c290

08003058 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8003058:	b510      	push	{r4, lr}
 800305a:	4b03      	ldr	r3, [pc, #12]	; (8003068 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
 800305c:	4604      	mov	r4, r0
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	f7ff ff7c 	bl	8002f5c <__cxxabiv1::__class_type_info::~__class_type_info()>
 8003064:	4620      	mov	r0, r4
 8003066:	bd10      	pop	{r4, pc}
 8003068:	0800c378 	.word	0x0800c378

0800306c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 800306c:	b510      	push	{r4, lr}
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x18>)
 8003070:	4604      	mov	r4, r0
 8003072:	6003      	str	r3, [r0, #0]
 8003074:	f7ff ff72 	bl	8002f5c <__cxxabiv1::__class_type_info::~__class_type_info()>
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff f8bb 	bl	80021f4 <operator delete(void*)>
 800307e:	4620      	mov	r0, r4
 8003080:	bd10      	pop	{r4, pc}
 8003082:	bf00      	nop
 8003084:	0800c378 	.word	0x0800c378

08003088 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	9c08      	ldr	r4, [sp, #32]
 800308e:	460d      	mov	r5, r1
 8003090:	4294      	cmp	r4, r2
 8003092:	4606      	mov	r6, r0
 8003094:	d007      	beq.n	80030a6 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1e>
 8003096:	68b0      	ldr	r0, [r6, #8]
 8003098:	4629      	mov	r1, r5
 800309a:	6805      	ldr	r5, [r0, #0]
 800309c:	9400      	str	r4, [sp, #0]
 800309e:	6a2c      	ldr	r4, [r5, #32]
 80030a0:	47a0      	blx	r4
 80030a2:	b004      	add	sp, #16
 80030a4:	bd70      	pop	{r4, r5, r6, pc}
 80030a6:	4619      	mov	r1, r3
 80030a8:	9203      	str	r2, [sp, #12]
 80030aa:	9302      	str	r3, [sp, #8]
 80030ac:	f000 faea 	bl	8003684 <std::type_info::operator==(std::type_info const&) const>
 80030b0:	9a03      	ldr	r2, [sp, #12]
 80030b2:	9b02      	ldr	r3, [sp, #8]
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d0ee      	beq.n	8003096 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
 80030b8:	2006      	movs	r0, #6
 80030ba:	e7f2      	b.n	80030a2 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1a>

080030bc <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 80030bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c0:	4688      	mov	r8, r1
 80030c2:	b085      	sub	sp, #20
 80030c4:	4619      	mov	r1, r3
 80030c6:	461f      	mov	r7, r3
 80030c8:	4692      	mov	sl, r2
 80030ca:	4683      	mov	fp, r0
 80030cc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80030ce:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80030d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80030d4:	f000 fad6 	bl	8003684 <std::type_info::operator==(std::type_info const&) const>
 80030d8:	4604      	mov	r4, r0
 80030da:	b198      	cbz	r0, 8003104 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x48>
 80030dc:	f1b8 0f00 	cmp.w	r8, #0
 80030e0:	602e      	str	r6, [r5, #0]
 80030e2:	f885 a004 	strb.w	sl, [r5, #4]
 80030e6:	db22      	blt.n	800312e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
 80030e8:	4446      	add	r6, r8
 80030ea:	2400      	movs	r4, #0
 80030ec:	45b1      	cmp	r9, r6
 80030ee:	bf14      	ite	ne
 80030f0:	f04f 0901 	movne.w	r9, #1
 80030f4:	f04f 0906 	moveq.w	r9, #6
 80030f8:	4620      	mov	r0, r4
 80030fa:	f885 9006 	strb.w	r9, [r5, #6]
 80030fe:	b005      	add	sp, #20
 8003100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003104:	454e      	cmp	r6, r9
 8003106:	d017      	beq.n	8003138 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x7c>
 8003108:	f8db 0008 	ldr.w	r0, [fp, #8]
 800310c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800310e:	6804      	ldr	r4, [r0, #0]
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	9600      	str	r6, [sp, #0]
 8003114:	f8cd 9008 	str.w	r9, [sp, #8]
 8003118:	9503      	str	r5, [sp, #12]
 800311a:	69e4      	ldr	r4, [r4, #28]
 800311c:	4641      	mov	r1, r8
 800311e:	4652      	mov	r2, sl
 8003120:	463b      	mov	r3, r7
 8003122:	47a0      	blx	r4
 8003124:	4604      	mov	r4, r0
 8003126:	4620      	mov	r0, r4
 8003128:	b005      	add	sp, #20
 800312a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800312e:	f118 0f02 	cmn.w	r8, #2
 8003132:	d00a      	beq.n	800314a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x8e>
 8003134:	2400      	movs	r4, #0
 8003136:	e7f6      	b.n	8003126 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x6a>
 8003138:	4658      	mov	r0, fp
 800313a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800313c:	f000 faa2 	bl	8003684 <std::type_info::operator==(std::type_info const&) const>
 8003140:	2800      	cmp	r0, #0
 8003142:	d0e1      	beq.n	8003108 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x4c>
 8003144:	f885 a005 	strb.w	sl, [r5, #5]
 8003148:	e7ed      	b.n	8003126 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x6a>
 800314a:	2301      	movs	r3, #1
 800314c:	71ab      	strb	r3, [r5, #6]
 800314e:	2400      	movs	r4, #0
 8003150:	e7e9      	b.n	8003126 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x6a>
 8003152:	bf00      	nop

08003154 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	4607      	mov	r7, r0
 8003158:	460e      	mov	r6, r1
 800315a:	4615      	mov	r5, r2
 800315c:	461c      	mov	r4, r3
 800315e:	f7ff ff15 	bl	8002f8c <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
 8003162:	b930      	cbnz	r0, 8003172 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x1e>
 8003164:	68b8      	ldr	r0, [r7, #8]
 8003166:	4631      	mov	r1, r6
 8003168:	6806      	ldr	r6, [r0, #0]
 800316a:	4623      	mov	r3, r4
 800316c:	462a      	mov	r2, r5
 800316e:	69b4      	ldr	r4, [r6, #24]
 8003170:	47a0      	blx	r4
 8003172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003174 <__cxxabiv1::__terminate(void (*)())>:
 8003174:	b508      	push	{r3, lr}
 8003176:	4780      	blx	r0
 8003178:	f006 fe04 	bl	8009d84 <abort>
 800317c:	f000 f956 	bl	800342c <__cxa_begin_catch>
 8003180:	f006 fe00 	bl	8009d84 <abort>
 8003184:	460c      	mov	r4, r1
 8003186:	4605      	mov	r5, r0
 8003188:	f000 f996 	bl	80034b8 <__cxa_end_catch>
 800318c:	3401      	adds	r4, #1
 800318e:	d001      	beq.n	8003194 <__cxxabiv1::__terminate(void (*)())+0x20>
 8003190:	f7ff fd3c 	bl	8002c0c <__cxa_end_cleanup>
 8003194:	4628      	mov	r0, r5
 8003196:	f7ff fe51 	bl	8002e3c <__cxa_call_unexpected>
 800319a:	bf00      	nop

0800319c <std::terminate()>:
 800319c:	b508      	push	{r3, lr}
 800319e:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <std::terminate()+0xc>)
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	f7ff ffe7 	bl	8003174 <__cxxabiv1::__terminate(void (*)())>
 80031a6:	bf00      	nop
 80031a8:	20000018 	.word	0x20000018

080031ac <__cxxabiv1::__unexpected(void (*)())>:
 80031ac:	b508      	push	{r3, lr}
 80031ae:	4780      	blx	r0
 80031b0:	f7ff fff4 	bl	800319c <std::terminate()>

080031b4 <std::unexpected()>:
 80031b4:	b508      	push	{r3, lr}
 80031b6:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <std::unexpected()+0xc>)
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	f7ff fff7 	bl	80031ac <__cxxabiv1::__unexpected(void (*)())>
 80031be:	bf00      	nop
 80031c0:	20000014 	.word	0x20000014

080031c4 <std::logic_error::what() const>:
 80031c4:	6840      	ldr	r0, [r0, #4]
 80031c6:	4770      	bx	lr

080031c8 <std::logic_error::~logic_error()>:
 80031c8:	b510      	push	{r4, lr}
 80031ca:	6843      	ldr	r3, [r0, #4]
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <std::logic_error::~logic_error()+0x38>)
 80031ce:	4604      	mov	r4, r0
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <std::logic_error::~logic_error()+0x3c>)
 80031d2:	f1a3 000c 	sub.w	r0, r3, #12
 80031d6:	4290      	cmp	r0, r2
 80031d8:	b082      	sub	sp, #8
 80031da:	6021      	str	r1, [r4, #0]
 80031dc:	d105      	bne.n	80031ea <std::logic_error::~logic_error()+0x22>
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff ff12 	bl	8003008 <std::exception::~exception()>
 80031e4:	4620      	mov	r0, r4
 80031e6:	b002      	add	sp, #8
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80031ee:	1e51      	subs	r1, r2, #1
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	f843 1c04 	str.w	r1, [r3, #-4]
 80031f6:	dcf2      	bgt.n	80031de <std::logic_error::~logic_error()+0x16>
 80031f8:	a901      	add	r1, sp, #4
 80031fa:	f000 f86d 	bl	80032d8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
 80031fe:	e7ee      	b.n	80031de <std::logic_error::~logic_error()+0x16>
 8003200:	20001164 	.word	0x20001164
 8003204:	0800c3f8 	.word	0x0800c3f8

08003208 <std::logic_error::~logic_error()>:
 8003208:	b510      	push	{r4, lr}
 800320a:	4604      	mov	r4, r0
 800320c:	f7ff ffdc 	bl	80031c8 <std::logic_error::~logic_error()>
 8003210:	4620      	mov	r0, r4
 8003212:	f7fe ffef 	bl	80021f4 <operator delete(void*)>
 8003216:	4620      	mov	r0, r4
 8003218:	bd10      	pop	{r4, pc}
 800321a:	bf00      	nop

0800321c <std::length_error::~length_error()>:
 800321c:	b510      	push	{r4, lr}
 800321e:	4b03      	ldr	r3, [pc, #12]	; (800322c <std::length_error::~length_error()+0x10>)
 8003220:	4604      	mov	r4, r0
 8003222:	6003      	str	r3, [r0, #0]
 8003224:	f7ff ffd0 	bl	80031c8 <std::logic_error::~logic_error()>
 8003228:	4620      	mov	r0, r4
 800322a:	bd10      	pop	{r4, pc}
 800322c:	0800c430 	.word	0x0800c430

08003230 <std::length_error::~length_error()>:
 8003230:	b510      	push	{r4, lr}
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <std::length_error::~length_error()+0x18>)
 8003234:	4604      	mov	r4, r0
 8003236:	6003      	str	r3, [r0, #0]
 8003238:	f7ff ffc6 	bl	80031c8 <std::logic_error::~logic_error()>
 800323c:	4620      	mov	r0, r4
 800323e:	f7fe ffd9 	bl	80021f4 <operator delete(void*)>
 8003242:	4620      	mov	r0, r4
 8003244:	bd10      	pop	{r4, pc}
 8003246:	bf00      	nop
 8003248:	0800c430 	.word	0x0800c430

0800324c <std::logic_error::logic_error(std::string const&)>:
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <std::logic_error::logic_error(std::string const&)+0x1c>)
 800324e:	b510      	push	{r4, lr}
 8003250:	4604      	mov	r4, r0
 8003252:	f840 3b04 	str.w	r3, [r0], #4
 8003256:	f000 f87b 	bl	8003350 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
 800325a:	4620      	mov	r0, r4
 800325c:	bd10      	pop	{r4, pc}
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff fed2 	bl	8003008 <std::exception::~exception()>
 8003264:	f7ff fcd2 	bl	8002c0c <__cxa_end_cleanup>
 8003268:	0800c3f8 	.word	0x0800c3f8

0800326c <std::length_error::length_error(std::string const&)>:
 800326c:	b510      	push	{r4, lr}
 800326e:	4604      	mov	r4, r0
 8003270:	f7ff ffec 	bl	800324c <std::logic_error::logic_error(std::string const&)>
 8003274:	4b01      	ldr	r3, [pc, #4]	; (800327c <std::length_error::length_error(std::string const&)+0x10>)
 8003276:	4620      	mov	r0, r4
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	bd10      	pop	{r4, pc}
 800327c:	0800c430 	.word	0x0800c430

08003280 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>:
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x50>)
 8003282:	b510      	push	{r4, lr}
 8003284:	4298      	cmp	r0, r3
 8003286:	4604      	mov	r4, r0
 8003288:	d81e      	bhi.n	80032c8 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x48>
 800328a:	4288      	cmp	r0, r1
 800328c:	d914      	bls.n	80032b8 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x38>
 800328e:	004a      	lsls	r2, r1, #1
 8003290:	4294      	cmp	r4, r2
 8003292:	bf38      	it	cc
 8003294:	4614      	movcc	r4, r2
 8003296:	f104 021d 	add.w	r2, r4, #29
 800329a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800329e:	f104 000d 	add.w	r0, r4, #13
 80032a2:	d90b      	bls.n	80032bc <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x3c>
 80032a4:	42a1      	cmp	r1, r4
 80032a6:	d209      	bcs.n	80032bc <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x3c>
 80032a8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80032ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80032b0:	1aa4      	subs	r4, r4, r2
 80032b2:	429c      	cmp	r4, r3
 80032b4:	bf28      	it	cs
 80032b6:	461c      	movcs	r4, r3
 80032b8:	f104 000d 	add.w	r0, r4, #13
 80032bc:	f7fe ff8e 	bl	80021dc <operator new(unsigned int)>
 80032c0:	2200      	movs	r2, #0
 80032c2:	6044      	str	r4, [r0, #4]
 80032c4:	6082      	str	r2, [r0, #8]
 80032c6:	bd10      	pop	{r4, pc}
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x54>)
 80032ca:	f7ff f809 	bl	80022e0 <std::__throw_length_error(char const*)>
 80032ce:	bf00      	nop
 80032d0:	3ffffffc 	.word	0x3ffffffc
 80032d4:	0800c480 	.word	0x0800c480

080032d8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
 80032d8:	f7fe bf8c 	b.w	80021f4 <operator delete(void*)>

080032dc <std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.11]>:
 80032dc:	6883      	ldr	r3, [r0, #8]
 80032de:	b510      	push	{r4, lr}
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f103 34ff 	add.w	r4, r3, #4294967295
 80032e6:	6084      	str	r4, [r0, #8]
 80032e8:	dc01      	bgt.n	80032ee <std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.11]+0x12>
 80032ea:	f7ff fff5 	bl	80032d8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
 80032ee:	bd10      	pop	{r4, pc}

080032f0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>:
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0xc>)
 80032f2:	4283      	cmp	r3, r0
 80032f4:	d100      	bne.n	80032f8 <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x8>
 80032f6:	4770      	bx	lr
 80032f8:	f7ff bff0 	b.w	80032dc <std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.11]>
 80032fc:	20001164 	.word	0x20001164

08003300 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4604      	mov	r4, r0
 8003304:	6800      	ldr	r0, [r0, #0]
 8003306:	460b      	mov	r3, r1
 8003308:	4410      	add	r0, r2
 800330a:	6861      	ldr	r1, [r4, #4]
 800330c:	461a      	mov	r2, r3
 800330e:	f7ff ffb7 	bl	8003280 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	4605      	mov	r5, r0
 8003316:	b922      	cbnz	r2, 8003322 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)+0x22>
 8003318:	300c      	adds	r0, #12
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)+0x4c>)
 800331c:	429d      	cmp	r5, r3
 800331e:	d110      	bne.n	8003342 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)+0x42>
 8003320:	bd38      	pop	{r3, r4, r5, pc}
 8003322:	2a01      	cmp	r2, #1
 8003324:	f100 030c 	add.w	r3, r0, #12
 8003328:	d006      	beq.n	8003338 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)+0x38>
 800332a:	4618      	mov	r0, r3
 800332c:	f104 010c 	add.w	r1, r4, #12
 8003330:	f007 fab6 	bl	800a8a0 <memcpy>
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	e7f0      	b.n	800331a <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)+0x1a>
 8003338:	7b22      	ldrb	r2, [r4, #12]
 800333a:	4618      	mov	r0, r3
 800333c:	732a      	strb	r2, [r5, #12]
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	e7eb      	b.n	800331a <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)+0x1a>
 8003342:	2300      	movs	r3, #0
 8003344:	602a      	str	r2, [r5, #0]
 8003346:	60ab      	str	r3, [r5, #8]
 8003348:	5483      	strb	r3, [r0, r2]
 800334a:	e7e9      	b.n	8003320 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)+0x20>
 800334c:	20001164 	.word	0x20001164

08003350 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>:
 8003350:	b510      	push	{r4, lr}
 8003352:	680b      	ldr	r3, [r1, #0]
 8003354:	4604      	mov	r4, r0
 8003356:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800335a:	b082      	sub	sp, #8
 800335c:	2a00      	cmp	r2, #0
 800335e:	f1a3 000c 	sub.w	r0, r3, #12
 8003362:	db0b      	blt.n	800337c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)+0x2c>
 8003364:	4909      	ldr	r1, [pc, #36]	; (800338c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)+0x3c>)
 8003366:	4288      	cmp	r0, r1
 8003368:	bf18      	it	ne
 800336a:	3201      	addne	r2, #1
 800336c:	4618      	mov	r0, r3
 800336e:	bf18      	it	ne
 8003370:	f843 2c04 	strne.w	r2, [r3, #-4]
 8003374:	6020      	str	r0, [r4, #0]
 8003376:	4620      	mov	r0, r4
 8003378:	b002      	add	sp, #8
 800337a:	bd10      	pop	{r4, pc}
 800337c:	a901      	add	r1, sp, #4
 800337e:	2200      	movs	r2, #0
 8003380:	f7ff ffbe 	bl	8003300 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)>
 8003384:	6020      	str	r0, [r4, #0]
 8003386:	4620      	mov	r0, r4
 8003388:	b002      	add	sp, #8
 800338a:	bd10      	pop	{r4, pc}
 800338c:	20001164 	.word	0x20001164

08003390 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>:
 8003390:	4288      	cmp	r0, r1
 8003392:	b570      	push	{r4, r5, r6, lr}
 8003394:	460b      	mov	r3, r1
 8003396:	4604      	mov	r4, r0
 8003398:	d01e      	beq.n	80033d8 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x48>
 800339a:	b300      	cbz	r0, 80033de <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x4e>
 800339c:	1a0e      	subs	r6, r1, r0
 800339e:	4630      	mov	r0, r6
 80033a0:	2100      	movs	r1, #0
 80033a2:	f7ff ff6d 	bl	8003280 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>
 80033a6:	2e01      	cmp	r6, #1
 80033a8:	4605      	mov	r5, r0
 80033aa:	f100 030c 	add.w	r3, r0, #12
 80033ae:	d10c      	bne.n	80033ca <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x3a>
 80033b0:	7822      	ldrb	r2, [r4, #0]
 80033b2:	732a      	strb	r2, [r5, #12]
 80033b4:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x64>)
 80033b6:	4295      	cmp	r5, r2
 80033b8:	d116      	bne.n	80033e8 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x58>
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
 80033be:	f7ff ff5f 	bl	8003280 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>
 80033c2:	4626      	mov	r6, r4
 80033c4:	4605      	mov	r5, r0
 80033c6:	f100 030c 	add.w	r3, r0, #12
 80033ca:	4618      	mov	r0, r3
 80033cc:	4621      	mov	r1, r4
 80033ce:	4632      	mov	r2, r6
 80033d0:	f007 fa66 	bl	800a8a0 <memcpy>
 80033d4:	4603      	mov	r3, r0
 80033d6:	e7ed      	b.n	80033b4 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x24>
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x68>)
 80033da:	4618      	mov	r0, r3
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ed      	beq.n	80033be <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x2e>
 80033e2:	4806      	ldr	r0, [pc, #24]	; (80033fc <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x6c>)
 80033e4:	f7fe ff52 	bl	800228c <std::__throw_logic_error(char const*)>
 80033e8:	2200      	movs	r2, #0
 80033ea:	602e      	str	r6, [r5, #0]
 80033ec:	60aa      	str	r2, [r5, #8]
 80033ee:	559a      	strb	r2, [r3, r6]
 80033f0:	e7e3      	b.n	80033ba <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x2a>
 80033f2:	bf00      	nop
 80033f4:	20001164 	.word	0x20001164
 80033f8:	20001170 	.word	0x20001170
 80033fc:	0800c544 	.word	0x0800c544

08003400 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	460c      	mov	r4, r1
 8003404:	4605      	mov	r5, r0
 8003406:	4616      	mov	r6, r2
 8003408:	b161      	cbz	r1, 8003424 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x24>
 800340a:	4608      	mov	r0, r1
 800340c:	f008 f8b0 	bl	800b570 <strlen>
 8003410:	1821      	adds	r1, r4, r0
 8003412:	4620      	mov	r0, r4
 8003414:	4632      	mov	r2, r6
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	f7ff ffb9 	bl	8003390 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
 800341e:	6028      	str	r0, [r5, #0]
 8003420:	4628      	mov	r0, r5
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	e7f3      	b.n	8003412 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x12>
 800342a:	bf00      	nop

0800342c <__cxa_begin_catch>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4604      	mov	r4, r0
 8003430:	f7ff fcd2 	bl	8002dd8 <__cxa_get_globals>
 8003434:	7821      	ldrb	r1, [r4, #0]
 8003436:	6803      	ldr	r3, [r0, #0]
 8003438:	2947      	cmp	r1, #71	; 0x47
 800343a:	f1a4 0220 	sub.w	r2, r4, #32
 800343e:	d005      	beq.n	800344c <__cxa_begin_catch+0x20>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d131      	bne.n	80034a8 <__cxa_begin_catch+0x7c>
 8003444:	461c      	mov	r4, r3
 8003446:	6002      	str	r2, [r0, #0]
 8003448:	4620      	mov	r0, r4
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	7861      	ldrb	r1, [r4, #1]
 800344e:	294e      	cmp	r1, #78	; 0x4e
 8003450:	d1f6      	bne.n	8003440 <__cxa_begin_catch+0x14>
 8003452:	78a1      	ldrb	r1, [r4, #2]
 8003454:	2955      	cmp	r1, #85	; 0x55
 8003456:	d1f3      	bne.n	8003440 <__cxa_begin_catch+0x14>
 8003458:	78e1      	ldrb	r1, [r4, #3]
 800345a:	2943      	cmp	r1, #67	; 0x43
 800345c:	d1f0      	bne.n	8003440 <__cxa_begin_catch+0x14>
 800345e:	7921      	ldrb	r1, [r4, #4]
 8003460:	2943      	cmp	r1, #67	; 0x43
 8003462:	d1ed      	bne.n	8003440 <__cxa_begin_catch+0x14>
 8003464:	7961      	ldrb	r1, [r4, #5]
 8003466:	292b      	cmp	r1, #43	; 0x2b
 8003468:	d1ea      	bne.n	8003440 <__cxa_begin_catch+0x14>
 800346a:	79a1      	ldrb	r1, [r4, #6]
 800346c:	292b      	cmp	r1, #43	; 0x2b
 800346e:	d1e7      	bne.n	8003440 <__cxa_begin_catch+0x14>
 8003470:	79e1      	ldrb	r1, [r4, #7]
 8003472:	2901      	cmp	r1, #1
 8003474:	d8e4      	bhi.n	8003440 <__cxa_begin_catch+0x14>
 8003476:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800347a:	2d00      	cmp	r5, #0
 800347c:	db11      	blt.n	80034a2 <__cxa_begin_catch+0x76>
 800347e:	3501      	adds	r5, #1
 8003480:	6841      	ldr	r1, [r0, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	f101 31ff 	add.w	r1, r1, #4294967295
 8003488:	f844 5c0c 	str.w	r5, [r4, #-12]
 800348c:	6041      	str	r1, [r0, #4]
 800348e:	bf1c      	itt	ne
 8003490:	f844 3c10 	strne.w	r3, [r4, #-16]
 8003494:	6002      	strne	r2, [r0, #0]
 8003496:	4620      	mov	r0, r4
 8003498:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800349a:	f005 fec9 	bl	8009230 <_Unwind_Complete>
 800349e:	4620      	mov	r0, r4
 80034a0:	bd38      	pop	{r3, r4, r5, pc}
 80034a2:	f1c5 0501 	rsb	r5, r5, #1
 80034a6:	e7eb      	b.n	8003480 <__cxa_begin_catch+0x54>
 80034a8:	f7ff fe78 	bl	800319c <std::terminate()>
 80034ac:	3101      	adds	r1, #1
 80034ae:	d001      	beq.n	80034b4 <__cxa_begin_catch+0x88>
 80034b0:	f7ff fbac 	bl	8002c0c <__cxa_end_cleanup>
 80034b4:	f7ff fcc2 	bl	8002e3c <__cxa_call_unexpected>

080034b8 <__cxa_end_catch>:
 80034b8:	b508      	push	{r3, lr}
 80034ba:	f7ff fc89 	bl	8002dd0 <__cxa_get_globals_fast>
 80034be:	4602      	mov	r2, r0
 80034c0:	6800      	ldr	r0, [r0, #0]
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d03d      	beq.n	8003542 <__cxa_end_catch+0x8a>
 80034c6:	f890 1020 	ldrb.w	r1, [r0, #32]
 80034ca:	2947      	cmp	r1, #71	; 0x47
 80034cc:	d006      	beq.n	80034dc <__cxa_end_catch+0x24>
 80034ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80034d2:	2100      	movs	r1, #0
 80034d4:	3020      	adds	r0, #32
 80034d6:	6011      	str	r1, [r2, #0]
 80034d8:	f005 beac 	b.w	8009234 <_Unwind_DeleteException>
 80034dc:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
 80034e0:	294e      	cmp	r1, #78	; 0x4e
 80034e2:	d1f4      	bne.n	80034ce <__cxa_end_catch+0x16>
 80034e4:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
 80034e8:	2955      	cmp	r1, #85	; 0x55
 80034ea:	d1f0      	bne.n	80034ce <__cxa_end_catch+0x16>
 80034ec:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
 80034f0:	2943      	cmp	r1, #67	; 0x43
 80034f2:	d1ec      	bne.n	80034ce <__cxa_end_catch+0x16>
 80034f4:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 80034f8:	2943      	cmp	r1, #67	; 0x43
 80034fa:	d1e8      	bne.n	80034ce <__cxa_end_catch+0x16>
 80034fc:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
 8003500:	292b      	cmp	r1, #43	; 0x2b
 8003502:	d1e4      	bne.n	80034ce <__cxa_end_catch+0x16>
 8003504:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 8003508:	292b      	cmp	r1, #43	; 0x2b
 800350a:	d1e0      	bne.n	80034ce <__cxa_end_catch+0x16>
 800350c:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
 8003510:	2901      	cmp	r1, #1
 8003512:	d8dc      	bhi.n	80034ce <__cxa_end_catch+0x16>
 8003514:	6941      	ldr	r1, [r0, #20]
 8003516:	2900      	cmp	r1, #0
 8003518:	db05      	blt.n	8003526 <__cxa_end_catch+0x6e>
 800351a:	3901      	subs	r1, #1
 800351c:	d008      	beq.n	8003530 <__cxa_end_catch+0x78>
 800351e:	1c4b      	adds	r3, r1, #1
 8003520:	d00d      	beq.n	800353e <__cxa_end_catch+0x86>
 8003522:	6141      	str	r1, [r0, #20]
 8003524:	bd08      	pop	{r3, pc}
 8003526:	3101      	adds	r1, #1
 8003528:	d1fb      	bne.n	8003522 <__cxa_end_catch+0x6a>
 800352a:	6903      	ldr	r3, [r0, #16]
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e7f8      	b.n	8003522 <__cxa_end_catch+0x6a>
 8003530:	6901      	ldr	r1, [r0, #16]
 8003532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003536:	3020      	adds	r0, #32
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	f005 be7b 	b.w	8009234 <_Unwind_DeleteException>
 800353e:	f7ff fe2d 	bl	800319c <std::terminate()>
 8003542:	bd08      	pop	{r3, pc}

08003544 <__gnu_cxx::__verbose_terminate_handler()>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4b3d      	ldr	r3, [pc, #244]	; (800363c <__gnu_cxx::__verbose_terminate_handler()+0xf8>)
 8003548:	b082      	sub	sp, #8
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	2a00      	cmp	r2, #0
 800354e:	d136      	bne.n	80035be <__gnu_cxx::__verbose_terminate_handler()+0x7a>
 8003550:	2401      	movs	r4, #1
 8003552:	701c      	strb	r4, [r3, #0]
 8003554:	f000 f8b0 	bl	80036b8 <__cxa_current_exception_type>
 8003558:	2800      	cmp	r0, #0
 800355a:	d05c      	beq.n	8003616 <__gnu_cxx::__verbose_terminate_handler()+0xd2>
 800355c:	6840      	ldr	r0, [r0, #4]
 800355e:	2100      	movs	r1, #0
 8003560:	7803      	ldrb	r3, [r0, #0]
 8003562:	f04f 32ff 	mov.w	r2, #4294967295
 8003566:	2b2a      	cmp	r3, #42	; 0x2a
 8003568:	bf0c      	ite	eq
 800356a:	1905      	addeq	r5, r0, r4
 800356c:	4605      	movne	r5, r0
 800356e:	ab02      	add	r3, sp, #8
 8003570:	f843 2d04 	str.w	r2, [r3, #-4]!
 8003574:	4628      	mov	r0, r5
 8003576:	460a      	mov	r2, r1
 8003578:	f005 fc0c 	bl	8008d94 <__cxa_demangle>
 800357c:	4c30      	ldr	r4, [pc, #192]	; (8003640 <__gnu_cxx::__verbose_terminate_handler()+0xfc>)
 800357e:	4606      	mov	r6, r0
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	4830      	ldr	r0, [pc, #192]	; (8003644 <__gnu_cxx::__verbose_terminate_handler()+0x100>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2101      	movs	r1, #1
 8003588:	2230      	movs	r2, #48	; 0x30
 800358a:	f006 fe25 	bl	800a1d8 <fwrite>
 800358e:	9b01      	ldr	r3, [sp, #4]
 8003590:	b17b      	cbz	r3, 80035b2 <__gnu_cxx::__verbose_terminate_handler()+0x6e>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	4628      	mov	r0, r5
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	f006 fc58 	bl	8009e4c <fputs>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	482a      	ldr	r0, [pc, #168]	; (8003648 <__gnu_cxx::__verbose_terminate_handler()+0x104>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2101      	movs	r1, #1
 80035a4:	2202      	movs	r2, #2
 80035a6:	f006 fe17 	bl	800a1d8 <fwrite>
 80035aa:	9b01      	ldr	r3, [sp, #4]
 80035ac:	b18b      	cbz	r3, 80035d2 <__gnu_cxx::__verbose_terminate_handler()+0x8e>
 80035ae:	f7ff faf5 	bl	8002b9c <__cxa_rethrow>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	4630      	mov	r0, r6
 80035b6:	68d9      	ldr	r1, [r3, #12]
 80035b8:	f006 fc48 	bl	8009e4c <fputs>
 80035bc:	e7ee      	b.n	800359c <__gnu_cxx::__verbose_terminate_handler()+0x58>
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <__gnu_cxx::__verbose_terminate_handler()+0xfc>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	221d      	movs	r2, #29
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4820      	ldr	r0, [pc, #128]	; (800364c <__gnu_cxx::__verbose_terminate_handler()+0x108>)
 80035ca:	f006 fe05 	bl	800a1d8 <fwrite>
 80035ce:	f006 fbd9 	bl	8009d84 <abort>
 80035d2:	4630      	mov	r0, r6
 80035d4:	f006 fe42 	bl	800a25c <free>
 80035d8:	e7e9      	b.n	80035ae <__gnu_cxx::__verbose_terminate_handler()+0x6a>
 80035da:	2901      	cmp	r1, #1
 80035dc:	460d      	mov	r5, r1
 80035de:	d127      	bne.n	8003630 <__gnu_cxx::__verbose_terminate_handler()+0xec>
 80035e0:	f7ff ff24 	bl	800342c <__cxa_begin_catch>
 80035e4:	6803      	ldr	r3, [r0, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4798      	blx	r3
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	4606      	mov	r6, r0
 80035ee:	4629      	mov	r1, r5
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4817      	ldr	r0, [pc, #92]	; (8003650 <__gnu_cxx::__verbose_terminate_handler()+0x10c>)
 80035f4:	220b      	movs	r2, #11
 80035f6:	f006 fdef 	bl	800a1d8 <fwrite>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	4630      	mov	r0, r6
 80035fe:	68d9      	ldr	r1, [r3, #12]
 8003600:	f006 fc24 	bl	8009e4c <fputs>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	200a      	movs	r0, #10
 8003608:	68d9      	ldr	r1, [r3, #12]
 800360a:	f006 fbe5 	bl	8009dd8 <fputc>
 800360e:	f7ff ff53 	bl	80034b8 <__cxa_end_catch>
 8003612:	f006 fbb7 	bl	8009d84 <abort>
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <__gnu_cxx::__verbose_terminate_handler()+0xfc>)
 8003618:	4621      	mov	r1, r4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	222d      	movs	r2, #45	; 0x2d
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	480c      	ldr	r0, [pc, #48]	; (8003654 <__gnu_cxx::__verbose_terminate_handler()+0x110>)
 8003622:	f006 fdd9 	bl	800a1d8 <fwrite>
 8003626:	e7f4      	b.n	8003612 <__gnu_cxx::__verbose_terminate_handler()+0xce>
 8003628:	f7ff ff46 	bl	80034b8 <__cxa_end_catch>
 800362c:	f7ff faee 	bl	8002c0c <__cxa_end_cleanup>
 8003630:	f7ff fefc 	bl	800342c <__cxa_begin_catch>
 8003634:	f7ff ff40 	bl	80034b8 <__cxa_end_catch>
 8003638:	e7eb      	b.n	8003612 <__gnu_cxx::__verbose_terminate_handler()+0xce>
 800363a:	bf00      	nop
 800363c:	20001174 	.word	0x20001174
 8003640:	20000448 	.word	0x20000448
 8003644:	0800c5c4 	.word	0x0800c5c4
 8003648:	0800c5f8 	.word	0x0800c5f8
 800364c:	0800c5a4 	.word	0x0800c5a4
 8003650:	0800c62c 	.word	0x0800c62c
 8003654:	0800c5fc 	.word	0x0800c5fc

08003658 <std::type_info::~type_info()>:
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <std::type_info::~type_info()+0x8>)
 800365a:	6003      	str	r3, [r0, #0]
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	0800c658 	.word	0x0800c658

08003664 <std::type_info::__is_pointer_p() const>:
 8003664:	2000      	movs	r0, #0
 8003666:	4770      	bx	lr

08003668 <std::type_info::__is_function_p() const>:
 8003668:	2000      	movs	r0, #0
 800366a:	4770      	bx	lr

0800366c <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 800366c:	2000      	movs	r0, #0
 800366e:	4770      	bx	lr

08003670 <std::type_info::~type_info()>:
 8003670:	b510      	push	{r4, lr}
 8003672:	4b03      	ldr	r3, [pc, #12]	; (8003680 <std::type_info::~type_info()+0x10>)
 8003674:	4604      	mov	r4, r0
 8003676:	6003      	str	r3, [r0, #0]
 8003678:	f7fe fdbc 	bl	80021f4 <operator delete(void*)>
 800367c:	4620      	mov	r0, r4
 800367e:	bd10      	pop	{r4, pc}
 8003680:	0800c658 	.word	0x0800c658

08003684 <std::type_info::operator==(std::type_info const&) const>:
 8003684:	4281      	cmp	r1, r0
 8003686:	b508      	push	{r3, lr}
 8003688:	d011      	beq.n	80036ae <std::type_info::operator==(std::type_info const&) const+0x2a>
 800368a:	6840      	ldr	r0, [r0, #4]
 800368c:	7803      	ldrb	r3, [r0, #0]
 800368e:	2b2a      	cmp	r3, #42	; 0x2a
 8003690:	d00b      	beq.n	80036aa <std::type_info::operator==(std::type_info const&) const+0x26>
 8003692:	6849      	ldr	r1, [r1, #4]
 8003694:	780b      	ldrb	r3, [r1, #0]
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	bf08      	it	eq
 800369a:	3101      	addeq	r1, #1
 800369c:	f007 fc72 	bl	800af84 <strcmp>
 80036a0:	f1d0 0001 	rsbs	r0, r0, #1
 80036a4:	bf38      	it	cc
 80036a6:	2000      	movcc	r0, #0
 80036a8:	bd08      	pop	{r3, pc}
 80036aa:	2000      	movs	r0, #0
 80036ac:	bd08      	pop	{r3, pc}
 80036ae:	2001      	movs	r0, #1
 80036b0:	bd08      	pop	{r3, pc}
 80036b2:	bf00      	nop

080036b4 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 80036b4:	f7ff bfe6 	b.w	8003684 <std::type_info::operator==(std::type_info const&) const>

080036b8 <__cxa_current_exception_type>:
 80036b8:	b508      	push	{r3, lr}
 80036ba:	f7ff fb8d 	bl	8002dd8 <__cxa_get_globals>
 80036be:	6800      	ldr	r0, [r0, #0]
 80036c0:	b130      	cbz	r0, 80036d0 <__cxa_current_exception_type+0x18>
 80036c2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	bf04      	itt	eq
 80036ca:	6800      	ldreq	r0, [r0, #0]
 80036cc:	3878      	subeq	r0, #120	; 0x78
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	bd08      	pop	{r3, pc}
 80036d2:	bf00      	nop

080036d4 <d_make_comp>:
 80036d4:	b470      	push	{r4, r5, r6}
 80036d6:	1e4c      	subs	r4, r1, #1
 80036d8:	2c4a      	cmp	r4, #74	; 0x4a
 80036da:	d82c      	bhi.n	8003736 <d_make_comp+0x62>
 80036dc:	e8df f004 	tbb	[pc, r4]
 80036e0:	3c3c3c3c 	.word	0x3c3c3c3c
 80036e4:	2b2b2b2b 	.word	0x2b2b2b2b
 80036e8:	263c2626 	.word	0x263c2626
 80036ec:	26262626 	.word	0x26262626
 80036f0:	26262626 	.word	0x26262626
 80036f4:	2b262626 	.word	0x2b262626
 80036f8:	27272727 	.word	0x27272727
 80036fc:	27272727 	.word	0x27272727
 8003700:	2626263c 	.word	0x2626263c
 8003704:	262b2626 	.word	0x262b2626
 8003708:	2b3c3d27 	.word	0x2b3c3d27
 800370c:	3d27273c 	.word	0x3d27273c
 8003710:	26262b2b 	.word	0x26262b2b
 8003714:	3c3c3c3c 	.word	0x3c3c3c3c
 8003718:	3c3c263c 	.word	0x3c3c263c
 800371c:	2b2b3c26 	.word	0x2b2b3c26
 8003720:	2b262626 	.word	0x2b262626
 8003724:	26262b2b 	.word	0x26262b2b
 8003728:	3c26      	.short	0x3c26
 800372a:	3c          	.byte	0x3c
 800372b:	00          	.byte	0x00
 800372c:	b1ca      	cbz	r2, 8003762 <d_make_comp+0x8e>
 800372e:	6944      	ldr	r4, [r0, #20]
 8003730:	6985      	ldr	r5, [r0, #24]
 8003732:	42ac      	cmp	r4, r5
 8003734:	db02      	blt.n	800373c <d_make_comp+0x68>
 8003736:	2000      	movs	r0, #0
 8003738:	bc70      	pop	{r4, r5, r6}
 800373a:	4770      	bx	lr
 800373c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003740:	6906      	ldr	r6, [r0, #16]
 8003742:	3401      	adds	r4, #1
 8003744:	00ad      	lsls	r5, r5, #2
 8003746:	6144      	str	r4, [r0, #20]
 8003748:	1974      	adds	r4, r6, r5
 800374a:	d00c      	beq.n	8003766 <d_make_comp+0x92>
 800374c:	5571      	strb	r1, [r6, r5]
 800374e:	6062      	str	r2, [r4, #4]
 8003750:	60a3      	str	r3, [r4, #8]
 8003752:	4620      	mov	r0, r4
 8003754:	bc70      	pop	{r4, r5, r6}
 8003756:	4770      	bx	lr
 8003758:	b11a      	cbz	r2, 8003762 <d_make_comp+0x8e>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e7      	bne.n	800372e <d_make_comp+0x5a>
 800375e:	4618      	mov	r0, r3
 8003760:	e7ea      	b.n	8003738 <d_make_comp+0x64>
 8003762:	4610      	mov	r0, r2
 8003764:	e7e8      	b.n	8003738 <d_make_comp+0x64>
 8003766:	4620      	mov	r0, r4
 8003768:	e7e6      	b.n	8003738 <d_make_comp+0x64>
 800376a:	bf00      	nop

0800376c <d_make_name>:
 800376c:	b430      	push	{r4, r5}
 800376e:	6943      	ldr	r3, [r0, #20]
 8003770:	6984      	ldr	r4, [r0, #24]
 8003772:	42a3      	cmp	r3, r4
 8003774:	da09      	bge.n	800378a <d_make_name+0x1e>
 8003776:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800377a:	6905      	ldr	r5, [r0, #16]
 800377c:	3301      	adds	r3, #1
 800377e:	00a4      	lsls	r4, r4, #2
 8003780:	6143      	str	r3, [r0, #20]
 8003782:	192b      	adds	r3, r5, r4
 8003784:	d001      	beq.n	800378a <d_make_name+0x1e>
 8003786:	b101      	cbz	r1, 800378a <d_make_name+0x1e>
 8003788:	b912      	cbnz	r2, 8003790 <d_make_name+0x24>
 800378a:	2000      	movs	r0, #0
 800378c:	bc30      	pop	{r4, r5}
 800378e:	4770      	bx	lr
 8003790:	2000      	movs	r0, #0
 8003792:	5528      	strb	r0, [r5, r4]
 8003794:	6059      	str	r1, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	bc30      	pop	{r4, r5}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop

080037a0 <d_cv_qualifiers>:
 80037a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a4:	68c5      	ldr	r5, [r0, #12]
 80037a6:	4604      	mov	r4, r0
 80037a8:	4688      	mov	r8, r1
 80037aa:	4617      	mov	r7, r2
 80037ac:	782b      	ldrb	r3, [r5, #0]
 80037ae:	460e      	mov	r6, r1
 80037b0:	e017      	b.n	80037e2 <d_cv_qualifiers+0x42>
 80037b2:	2b56      	cmp	r3, #86	; 0x56
 80037b4:	d022      	beq.n	80037fc <d_cv_qualifiers+0x5c>
 80037b6:	2b4b      	cmp	r3, #75	; 0x4b
 80037b8:	d12d      	bne.n	8003816 <d_cv_qualifiers+0x76>
 80037ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037bc:	3501      	adds	r5, #1
 80037be:	2f00      	cmp	r7, #0
 80037c0:	f103 0306 	add.w	r3, r3, #6
 80037c4:	60e5      	str	r5, [r4, #12]
 80037c6:	6323      	str	r3, [r4, #48]	; 0x30
 80037c8:	bf0c      	ite	eq
 80037ca:	211b      	moveq	r1, #27
 80037cc:	211e      	movne	r1, #30
 80037ce:	2200      	movs	r2, #0
 80037d0:	4613      	mov	r3, r2
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ff7e 	bl	80036d4 <d_make_comp>
 80037d8:	6030      	str	r0, [r6, #0]
 80037da:	b1d0      	cbz	r0, 8003812 <d_cv_qualifiers+0x72>
 80037dc:	68e5      	ldr	r5, [r4, #12]
 80037de:	1d06      	adds	r6, r0, #4
 80037e0:	782b      	ldrb	r3, [r5, #0]
 80037e2:	2b72      	cmp	r3, #114	; 0x72
 80037e4:	d1e5      	bne.n	80037b2 <d_cv_qualifiers+0x12>
 80037e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037e8:	3501      	adds	r5, #1
 80037ea:	2f00      	cmp	r7, #0
 80037ec:	f103 0309 	add.w	r3, r3, #9
 80037f0:	60e5      	str	r5, [r4, #12]
 80037f2:	6323      	str	r3, [r4, #48]	; 0x30
 80037f4:	bf0c      	ite	eq
 80037f6:	2119      	moveq	r1, #25
 80037f8:	211c      	movne	r1, #28
 80037fa:	e7e8      	b.n	80037ce <d_cv_qualifiers+0x2e>
 80037fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037fe:	3501      	adds	r5, #1
 8003800:	2f00      	cmp	r7, #0
 8003802:	f103 0309 	add.w	r3, r3, #9
 8003806:	60e5      	str	r5, [r4, #12]
 8003808:	6323      	str	r3, [r4, #48]	; 0x30
 800380a:	bf0c      	ite	eq
 800380c:	211a      	moveq	r1, #26
 800380e:	211d      	movne	r1, #29
 8003810:	e7dd      	b.n	80037ce <d_cv_qualifiers+0x2e>
 8003812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003816:	b9bf      	cbnz	r7, 8003848 <d_cv_qualifiers+0xa8>
 8003818:	2b46      	cmp	r3, #70	; 0x46
 800381a:	d115      	bne.n	8003848 <d_cv_qualifiers+0xa8>
 800381c:	4546      	cmp	r6, r8
 800381e:	d013      	beq.n	8003848 <d_cv_qualifiers+0xa8>
 8003820:	241d      	movs	r4, #29
 8003822:	201e      	movs	r0, #30
 8003824:	211c      	movs	r1, #28
 8003826:	e008      	b.n	800383a <d_cv_qualifiers+0x9a>
 8003828:	2a1b      	cmp	r2, #27
 800382a:	d010      	beq.n	800384e <d_cv_qualifiers+0xae>
 800382c:	2a19      	cmp	r2, #25
 800382e:	d100      	bne.n	8003832 <d_cv_qualifiers+0x92>
 8003830:	7019      	strb	r1, [r3, #0]
 8003832:	f103 0804 	add.w	r8, r3, #4
 8003836:	4546      	cmp	r6, r8
 8003838:	d006      	beq.n	8003848 <d_cv_qualifiers+0xa8>
 800383a:	f8d8 3000 	ldr.w	r3, [r8]
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	2a1a      	cmp	r2, #26
 8003842:	d1f1      	bne.n	8003828 <d_cv_qualifiers+0x88>
 8003844:	701c      	strb	r4, [r3, #0]
 8003846:	e7f4      	b.n	8003832 <d_cv_qualifiers+0x92>
 8003848:	4630      	mov	r0, r6
 800384a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800384e:	7018      	strb	r0, [r3, #0]
 8003850:	e7ef      	b.n	8003832 <d_cv_qualifiers+0x92>
 8003852:	bf00      	nop

08003854 <d_ref_qualifier>:
 8003854:	b410      	push	{r4}
 8003856:	68c4      	ldr	r4, [r0, #12]
 8003858:	460a      	mov	r2, r1
 800385a:	7823      	ldrb	r3, [r4, #0]
 800385c:	2b52      	cmp	r3, #82	; 0x52
 800385e:	d010      	beq.n	8003882 <d_ref_qualifier+0x2e>
 8003860:	2b4f      	cmp	r3, #79	; 0x4f
 8003862:	d003      	beq.n	800386c <d_ref_qualifier+0x18>
 8003864:	4608      	mov	r0, r1
 8003866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800386e:	2120      	movs	r1, #32
 8003870:	3303      	adds	r3, #3
 8003872:	6303      	str	r3, [r0, #48]	; 0x30
 8003874:	3401      	adds	r4, #1
 8003876:	60c4      	str	r4, [r0, #12]
 8003878:	2300      	movs	r3, #0
 800387a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800387e:	f7ff bf29 	b.w	80036d4 <d_make_comp>
 8003882:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003884:	211f      	movs	r1, #31
 8003886:	3302      	adds	r3, #2
 8003888:	6303      	str	r3, [r0, #48]	; 0x30
 800388a:	e7f3      	b.n	8003874 <d_ref_qualifier+0x20>

0800388c <d_clone_suffix>:
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8003894:	4680      	mov	r8, r0
 8003896:	f89e 4000 	ldrb.w	r4, [lr]
 800389a:	460f      	mov	r7, r1
 800389c:	2c2e      	cmp	r4, #46	; 0x2e
 800389e:	d029      	beq.n	80038f4 <d_clone_suffix+0x68>
 80038a0:	4673      	mov	r3, lr
 80038a2:	2c2e      	cmp	r4, #46	; 0x2e
 80038a4:	d114      	bne.n	80038d0 <d_clone_suffix+0x44>
 80038a6:	785c      	ldrb	r4, [r3, #1]
 80038a8:	3c30      	subs	r4, #48	; 0x30
 80038aa:	2c09      	cmp	r4, #9
 80038ac:	d810      	bhi.n	80038d0 <d_clone_suffix+0x44>
 80038ae:	789c      	ldrb	r4, [r3, #2]
 80038b0:	1c98      	adds	r0, r3, #2
 80038b2:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80038b6:	2a09      	cmp	r2, #9
 80038b8:	d81a      	bhi.n	80038f0 <d_clone_suffix+0x64>
 80038ba:	1cdd      	adds	r5, r3, #3
 80038bc:	782c      	ldrb	r4, [r5, #0]
 80038be:	462b      	mov	r3, r5
 80038c0:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80038c4:	2e09      	cmp	r6, #9
 80038c6:	f105 0501 	add.w	r5, r5, #1
 80038ca:	d9f7      	bls.n	80038bc <d_clone_suffix+0x30>
 80038cc:	2c2e      	cmp	r4, #46	; 0x2e
 80038ce:	d0ea      	beq.n	80038a6 <d_clone_suffix+0x1a>
 80038d0:	ebce 0203 	rsb	r2, lr, r3
 80038d4:	4671      	mov	r1, lr
 80038d6:	f8c8 300c 	str.w	r3, [r8, #12]
 80038da:	4640      	mov	r0, r8
 80038dc:	f7ff ff46 	bl	800376c <d_make_name>
 80038e0:	463a      	mov	r2, r7
 80038e2:	4603      	mov	r3, r0
 80038e4:	214b      	movs	r1, #75	; 0x4b
 80038e6:	4640      	mov	r0, r8
 80038e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ec:	f7ff bef2 	b.w	80036d4 <d_make_comp>
 80038f0:	4603      	mov	r3, r0
 80038f2:	e7d6      	b.n	80038a2 <d_clone_suffix+0x16>
 80038f4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80038f8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80038fc:	2a19      	cmp	r2, #25
 80038fe:	d80c      	bhi.n	800391a <d_clone_suffix+0x8e>
 8003900:	f10e 0202 	add.w	r2, lr, #2
 8003904:	7814      	ldrb	r4, [r2, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	f1a4 0161 	sub.w	r1, r4, #97	; 0x61
 800390c:	2919      	cmp	r1, #25
 800390e:	f102 0201 	add.w	r2, r2, #1
 8003912:	d9f7      	bls.n	8003904 <d_clone_suffix+0x78>
 8003914:	2c5f      	cmp	r4, #95	; 0x5f
 8003916:	d0f5      	beq.n	8003904 <d_clone_suffix+0x78>
 8003918:	e7c3      	b.n	80038a2 <d_clone_suffix+0x16>
 800391a:	2b5f      	cmp	r3, #95	; 0x5f
 800391c:	d1c0      	bne.n	80038a0 <d_clone_suffix+0x14>
 800391e:	e7ef      	b.n	8003900 <d_clone_suffix+0x74>

08003920 <d_substitution>:
 8003920:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8003924:	68c2      	ldr	r2, [r0, #12]
 8003926:	7813      	ldrb	r3, [r2, #0]
 8003928:	2b53      	cmp	r3, #83	; 0x53
 800392a:	d003      	beq.n	8003934 <d_substitution+0x14>
 800392c:	2000      	movs	r0, #0
 800392e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8003932:	4770      	bx	lr
 8003934:	1c53      	adds	r3, r2, #1
 8003936:	60c3      	str	r3, [r0, #12]
 8003938:	7853      	ldrb	r3, [r2, #1]
 800393a:	b1ab      	cbz	r3, 8003968 <d_substitution+0x48>
 800393c:	1c93      	adds	r3, r2, #2
 800393e:	60c3      	str	r3, [r0, #12]
 8003940:	7853      	ldrb	r3, [r2, #1]
 8003942:	2b5f      	cmp	r3, #95	; 0x5f
 8003944:	d152      	bne.n	80039ec <d_substitution+0xcc>
 8003946:	2400      	movs	r4, #0
 8003948:	6a03      	ldr	r3, [r0, #32]
 800394a:	429c      	cmp	r4, r3
 800394c:	d2ee      	bcs.n	800392c <d_substitution+0xc>
 800394e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003950:	69c2      	ldr	r2, [r0, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	6283      	str	r3, [r0, #40]	; 0x28
 8003956:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800395a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800395e:	4770      	bx	lr
 8003960:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003964:	2a19      	cmp	r2, #25
 8003966:	d946      	bls.n	80039f6 <d_substitution+0xd6>
 8003968:	6882      	ldr	r2, [r0, #8]
 800396a:	0712      	lsls	r2, r2, #28
 800396c:	d46a      	bmi.n	8003a44 <d_substitution+0x124>
 800396e:	2900      	cmp	r1, #0
 8003970:	d16a      	bne.n	8003a48 <d_substitution+0x128>
 8003972:	4a3f      	ldr	r2, [pc, #252]	; (8003a70 <d_substitution+0x150>)
 8003974:	f102 05c4 	add.w	r5, r2, #196	; 0xc4
 8003978:	e002      	b.n	8003980 <d_substitution+0x60>
 800397a:	321c      	adds	r2, #28
 800397c:	42aa      	cmp	r2, r5
 800397e:	d0d5      	beq.n	800392c <d_substitution+0xc>
 8003980:	7814      	ldrb	r4, [r2, #0]
 8003982:	429c      	cmp	r4, r3
 8003984:	d1f9      	bne.n	800397a <d_substitution+0x5a>
 8003986:	6955      	ldr	r5, [r2, #20]
 8003988:	2d00      	cmp	r5, #0
 800398a:	d06a      	beq.n	8003a62 <d_substitution+0x142>
 800398c:	6943      	ldr	r3, [r0, #20]
 800398e:	6984      	ldr	r4, [r0, #24]
 8003990:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8003994:	42a3      	cmp	r3, r4
 8003996:	da62      	bge.n	8003a5e <d_substitution+0x13e>
 8003998:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800399c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80039a0:	00bf      	lsls	r7, r7, #2
 80039a2:	3301      	adds	r3, #1
 80039a4:	eb1c 0607 	adds.w	r6, ip, r7
 80039a8:	6143      	str	r3, [r0, #20]
 80039aa:	d05f      	beq.n	8003a6c <d_substitution+0x14c>
 80039ac:	f04f 0918 	mov.w	r9, #24
 80039b0:	f80c 9007 	strb.w	r9, [ip, r7]
 80039b4:	4637      	mov	r7, r6
 80039b6:	6075      	str	r5, [r6, #4]
 80039b8:	f8c6 8008 	str.w	r8, [r6, #8]
 80039bc:	62c7      	str	r7, [r0, #44]	; 0x2c
 80039be:	2900      	cmp	r1, #0
 80039c0:	d04a      	beq.n	8003a58 <d_substitution+0x138>
 80039c2:	68d5      	ldr	r5, [r2, #12]
 80039c4:	6912      	ldr	r2, [r2, #16]
 80039c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	4411      	add	r1, r2
 80039cc:	6301      	str	r1, [r0, #48]	; 0x30
 80039ce:	daad      	bge.n	800392c <d_substitution+0xc>
 80039d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80039d4:	6904      	ldr	r4, [r0, #16]
 80039d6:	3301      	adds	r3, #1
 80039d8:	0089      	lsls	r1, r1, #2
 80039da:	6143      	str	r3, [r0, #20]
 80039dc:	1863      	adds	r3, r4, r1
 80039de:	d043      	beq.n	8003a68 <d_substitution+0x148>
 80039e0:	2018      	movs	r0, #24
 80039e2:	5460      	strb	r0, [r4, r1]
 80039e4:	4618      	mov	r0, r3
 80039e6:	605d      	str	r5, [r3, #4]
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	e7a0      	b.n	800392e <d_substitution+0xe>
 80039ec:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80039f0:	b2ea      	uxtb	r2, r5
 80039f2:	2a09      	cmp	r2, #9
 80039f4:	d8b4      	bhi.n	8003960 <d_substitution+0x40>
 80039f6:	2200      	movs	r2, #0
 80039f8:	e012      	b.n	8003a20 <d_substitution+0x100>
 80039fa:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
 80039fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a02:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8003a06:	42a2      	cmp	r2, r4
 8003a08:	d890      	bhi.n	800392c <d_substitution+0xc>
 8003a0a:	68c1      	ldr	r1, [r0, #12]
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	780b      	ldrb	r3, [r1, #0]
 8003a10:	1c4d      	adds	r5, r1, #1
 8003a12:	b11b      	cbz	r3, 8003a1c <d_substitution+0xfc>
 8003a14:	60c5      	str	r5, [r0, #12]
 8003a16:	780b      	ldrb	r3, [r1, #0]
 8003a18:	2b5f      	cmp	r3, #95	; 0x5f
 8003a1a:	d011      	beq.n	8003a40 <d_substitution+0x120>
 8003a1c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003a20:	b2e9      	uxtb	r1, r5
 8003a22:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8003a26:	2909      	cmp	r1, #9
 8003a28:	b2e4      	uxtb	r4, r4
 8003a2a:	d9e6      	bls.n	80039fa <d_substitution+0xda>
 8003a2c:	2c19      	cmp	r4, #25
 8003a2e:	f63f af7d 	bhi.w	800392c <d_substitution+0xc>
 8003a32:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
 8003a36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a3a:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 8003a3e:	e7e2      	b.n	8003a06 <d_substitution+0xe6>
 8003a40:	3401      	adds	r4, #1
 8003a42:	e781      	b.n	8003948 <d_substitution+0x28>
 8003a44:	2101      	movs	r1, #1
 8003a46:	e794      	b.n	8003972 <d_substitution+0x52>
 8003a48:	68c2      	ldr	r2, [r0, #12]
 8003a4a:	7811      	ldrb	r1, [r2, #0]
 8003a4c:	3943      	subs	r1, #67	; 0x43
 8003a4e:	2901      	cmp	r1, #1
 8003a50:	bf8c      	ite	hi
 8003a52:	2100      	movhi	r1, #0
 8003a54:	2101      	movls	r1, #1
 8003a56:	e78c      	b.n	8003972 <d_substitution+0x52>
 8003a58:	6855      	ldr	r5, [r2, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	e7b3      	b.n	80039c6 <d_substitution+0xa6>
 8003a5e:	2700      	movs	r7, #0
 8003a60:	e7ac      	b.n	80039bc <d_substitution+0x9c>
 8003a62:	6984      	ldr	r4, [r0, #24]
 8003a64:	6943      	ldr	r3, [r0, #20]
 8003a66:	e7aa      	b.n	80039be <d_substitution+0x9e>
 8003a68:	4618      	mov	r0, r3
 8003a6a:	e760      	b.n	800392e <d_substitution+0xe>
 8003a6c:	4637      	mov	r7, r6
 8003a6e:	e7a5      	b.n	80039bc <d_substitution+0x9c>
 8003a70:	0800c670 	.word	0x0800c670

08003a74 <d_append_char>:
 8003a74:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	2bff      	cmp	r3, #255	; 0xff
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	460d      	mov	r5, r1
 8003a80:	d006      	beq.n	8003a90 <d_append_char+0x1c>
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003a88:	54e5      	strb	r5, [r4, r3]
 8003a8a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	2600      	movs	r6, #0
 8003a92:	4619      	mov	r1, r3
 8003a94:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003a98:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003a9c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8003aa0:	4798      	blx	r3
 8003aa2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8003aa6:	4633      	mov	r3, r6
 8003aa8:	3201      	adds	r2, #1
 8003aaa:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ab4:	54e5      	strb	r5, [r4, r3]
 8003ab6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003aba:	bd70      	pop	{r4, r5, r6, pc}

08003abc <d_number.isra.0>:
 8003abc:	b430      	push	{r4, r5}
 8003abe:	6802      	ldr	r2, [r0, #0]
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	7813      	ldrb	r3, [r2, #0]
 8003ac4:	2b6e      	cmp	r3, #110	; 0x6e
 8003ac6:	d018      	beq.n	8003afa <d_number.isra.0+0x3e>
 8003ac8:	2500      	movs	r5, #0
 8003aca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003ace:	2a09      	cmp	r2, #9
 8003ad0:	d818      	bhi.n	8003b04 <d_number.isra.0+0x48>
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	3201      	adds	r2, #1
 8003ad8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8003adc:	6022      	str	r2, [r4, #0]
 8003ade:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003ae2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003ae6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8003aea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003aee:	2909      	cmp	r1, #9
 8003af0:	d9f2      	bls.n	8003ad8 <d_number.isra.0+0x1c>
 8003af2:	b105      	cbz	r5, 8003af6 <d_number.isra.0+0x3a>
 8003af4:	4240      	negs	r0, r0
 8003af6:	bc30      	pop	{r4, r5}
 8003af8:	4770      	bx	lr
 8003afa:	1c53      	adds	r3, r2, #1
 8003afc:	6003      	str	r3, [r0, #0]
 8003afe:	7853      	ldrb	r3, [r2, #1]
 8003b00:	2501      	movs	r5, #1
 8003b02:	e7e2      	b.n	8003aca <d_number.isra.0+0xe>
 8003b04:	2000      	movs	r0, #0
 8003b06:	e7f4      	b.n	8003af2 <d_number.isra.0+0x36>

08003b08 <d_number_component>:
 8003b08:	6943      	ldr	r3, [r0, #20]
 8003b0a:	6982      	ldr	r2, [r0, #24]
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	da13      	bge.n	8003b3a <d_number_component+0x32>
 8003b12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8003b16:	6901      	ldr	r1, [r0, #16]
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	188c      	adds	r4, r1, r2
 8003b1e:	6143      	str	r3, [r0, #20]
 8003b20:	d008      	beq.n	8003b34 <d_number_component+0x2c>
 8003b22:	2340      	movs	r3, #64	; 0x40
 8003b24:	548b      	strb	r3, [r1, r2]
 8003b26:	300c      	adds	r0, #12
 8003b28:	f7ff ffc8 	bl	8003abc <d_number.isra.0>
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	6060      	str	r0, [r4, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd10      	pop	{r4, pc}
 8003b34:	4623      	mov	r3, r4
 8003b36:	4618      	mov	r0, r3
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd10      	pop	{r4, pc}

08003b40 <d_compact_number>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	68c3      	ldr	r3, [r0, #12]
 8003b44:	4604      	mov	r4, r0
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	2a5f      	cmp	r2, #95	; 0x5f
 8003b4a:	d00b      	beq.n	8003b64 <d_compact_number+0x24>
 8003b4c:	2a6e      	cmp	r2, #110	; 0x6e
 8003b4e:	d006      	beq.n	8003b5e <d_compact_number+0x1e>
 8003b50:	300c      	adds	r0, #12
 8003b52:	f7ff ffb3 	bl	8003abc <d_number.isra.0>
 8003b56:	68e3      	ldr	r3, [r4, #12]
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	2a5f      	cmp	r2, #95	; 0x5f
 8003b5c:	d006      	beq.n	8003b6c <d_compact_number+0x2c>
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	bd10      	pop	{r4, pc}
 8003b64:	2000      	movs	r0, #0
 8003b66:	3301      	adds	r3, #1
 8003b68:	60e3      	str	r3, [r4, #12]
 8003b6a:	bd10      	pop	{r4, pc}
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	e7fa      	b.n	8003b66 <d_compact_number+0x26>

08003b70 <d_template_param>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	68c3      	ldr	r3, [r0, #12]
 8003b74:	4604      	mov	r4, r0
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	2a54      	cmp	r2, #84	; 0x54
 8003b7a:	d001      	beq.n	8003b80 <d_template_param+0x10>
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	3301      	adds	r3, #1
 8003b82:	60c3      	str	r3, [r0, #12]
 8003b84:	f7ff ffdc 	bl	8003b40 <d_compact_number>
 8003b88:	1e05      	subs	r5, r0, #0
 8003b8a:	dbf7      	blt.n	8003b7c <d_template_param+0xc>
 8003b8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003b8e:	6963      	ldr	r3, [r4, #20]
 8003b90:	69a2      	ldr	r2, [r4, #24]
 8003b92:	3101      	adds	r1, #1
 8003b94:	4293      	cmp	r3, r2
 8003b96:	62a1      	str	r1, [r4, #40]	; 0x28
 8003b98:	daf0      	bge.n	8003b7c <d_template_param+0xc>
 8003b9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8003b9e:	6921      	ldr	r1, [r4, #16]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	6163      	str	r3, [r4, #20]
 8003ba6:	188b      	adds	r3, r1, r2
 8003ba8:	d0e8      	beq.n	8003b7c <d_template_param+0xc>
 8003baa:	2405      	movs	r4, #5
 8003bac:	548c      	strb	r4, [r1, r2]
 8003bae:	605d      	str	r5, [r3, #4]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}

08003bb4 <d_discriminator>:
 8003bb4:	b508      	push	{r3, lr}
 8003bb6:	68c3      	ldr	r3, [r0, #12]
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	2a5f      	cmp	r2, #95	; 0x5f
 8003bbc:	d001      	beq.n	8003bc2 <d_discriminator+0xe>
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	bd08      	pop	{r3, pc}
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f840 3f0c 	str.w	r3, [r0, #12]!
 8003bc8:	f7ff ff78 	bl	8003abc <d_number.isra.0>
 8003bcc:	43c0      	mvns	r0, r0
 8003bce:	0fc0      	lsrs	r0, r0, #31
 8003bd0:	bd08      	pop	{r3, pc}
 8003bd2:	bf00      	nop

08003bd4 <d_source_name>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	300c      	adds	r0, #12
 8003bda:	f7ff ff6f 	bl	8003abc <d_number.isra.0>
 8003bde:	1e06      	subs	r6, r0, #0
 8003be0:	dd32      	ble.n	8003c48 <d_source_name+0x74>
 8003be2:	68e5      	ldr	r5, [r4, #12]
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	1b5b      	subs	r3, r3, r5
 8003be8:	429e      	cmp	r6, r3
 8003bea:	dc2f      	bgt.n	8003c4c <d_source_name+0x78>
 8003bec:	68a2      	ldr	r2, [r4, #8]
 8003bee:	19ab      	adds	r3, r5, r6
 8003bf0:	0752      	lsls	r2, r2, #29
 8003bf2:	60e3      	str	r3, [r4, #12]
 8003bf4:	d415      	bmi.n	8003c22 <d_source_name+0x4e>
 8003bf6:	2e09      	cmp	r6, #9
 8003bf8:	dd0c      	ble.n	8003c14 <d_source_name+0x40>
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	4914      	ldr	r1, [pc, #80]	; (8003c50 <d_source_name+0x7c>)
 8003bfe:	2208      	movs	r2, #8
 8003c00:	f006 fe1a 	bl	800a838 <memcmp>
 8003c04:	b930      	cbnz	r0, 8003c14 <d_source_name+0x40>
 8003c06:	7a2b      	ldrb	r3, [r5, #8]
 8003c08:	2b2e      	cmp	r3, #46	; 0x2e
 8003c0a:	d010      	beq.n	8003c2e <d_source_name+0x5a>
 8003c0c:	2b5f      	cmp	r3, #95	; 0x5f
 8003c0e:	d00e      	beq.n	8003c2e <d_source_name+0x5a>
 8003c10:	2b24      	cmp	r3, #36	; 0x24
 8003c12:	d00c      	beq.n	8003c2e <d_source_name+0x5a>
 8003c14:	4629      	mov	r1, r5
 8003c16:	4632      	mov	r2, r6
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff fda7 	bl	800376c <d_make_name>
 8003c1e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	5daa      	ldrb	r2, [r5, r6]
 8003c24:	2a24      	cmp	r2, #36	; 0x24
 8003c26:	bf04      	itt	eq
 8003c28:	3301      	addeq	r3, #1
 8003c2a:	60e3      	streq	r3, [r4, #12]
 8003c2c:	e7e3      	b.n	8003bf6 <d_source_name+0x22>
 8003c2e:	7a6b      	ldrb	r3, [r5, #9]
 8003c30:	2b4e      	cmp	r3, #78	; 0x4e
 8003c32:	d1ef      	bne.n	8003c14 <d_source_name+0x40>
 8003c34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c36:	4620      	mov	r0, r4
 8003c38:	3316      	adds	r3, #22
 8003c3a:	1b9e      	subs	r6, r3, r6
 8003c3c:	6326      	str	r6, [r4, #48]	; 0x30
 8003c3e:	4905      	ldr	r1, [pc, #20]	; (8003c54 <d_source_name+0x80>)
 8003c40:	2215      	movs	r2, #21
 8003c42:	f7ff fd93 	bl	800376c <d_make_name>
 8003c46:	e7ea      	b.n	8003c1e <d_source_name+0x4a>
 8003c48:	2000      	movs	r0, #0
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	e7e6      	b.n	8003c1e <d_source_name+0x4a>
 8003c50:	0800cda8 	.word	0x0800cda8
 8003c54:	0800cdb4 	.word	0x0800cdb4

08003c58 <d_call_offset>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	b929      	cbnz	r1, 8003c6a <d_call_offset+0x12>
 8003c5e:	68c3      	ldr	r3, [r0, #12]
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	b132      	cbz	r2, 8003c72 <d_call_offset+0x1a>
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	60c2      	str	r2, [r0, #12]
 8003c68:	7819      	ldrb	r1, [r3, #0]
 8003c6a:	2968      	cmp	r1, #104	; 0x68
 8003c6c:	d012      	beq.n	8003c94 <d_call_offset+0x3c>
 8003c6e:	2976      	cmp	r1, #118	; 0x76
 8003c70:	d001      	beq.n	8003c76 <d_call_offset+0x1e>
 8003c72:	2000      	movs	r0, #0
 8003c74:	bd38      	pop	{r3, r4, r5, pc}
 8003c76:	f104 050c 	add.w	r5, r4, #12
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7ff ff1e 	bl	8003abc <d_number.isra.0>
 8003c80:	68e3      	ldr	r3, [r4, #12]
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	2a5f      	cmp	r2, #95	; 0x5f
 8003c86:	d1f4      	bne.n	8003c72 <d_call_offset+0x1a>
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60e3      	str	r3, [r4, #12]
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f7ff ff15 	bl	8003abc <d_number.isra.0>
 8003c92:	e003      	b.n	8003c9c <d_call_offset+0x44>
 8003c94:	f104 000c 	add.w	r0, r4, #12
 8003c98:	f7ff ff10 	bl	8003abc <d_number.isra.0>
 8003c9c:	68e3      	ldr	r3, [r4, #12]
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	2a5f      	cmp	r2, #95	; 0x5f
 8003ca2:	d1e6      	bne.n	8003c72 <d_call_offset+0x1a>
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60e3      	str	r3, [r4, #12]
 8003ca8:	2001      	movs	r0, #1
 8003caa:	bd38      	pop	{r3, r4, r5, pc}

08003cac <d_lookup_template_argument.isra.6>:
 8003cac:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	b1c3      	cbz	r3, 8003ce6 <d_lookup_template_argument.isra.6+0x3a>
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	680b      	ldr	r3, [r1, #0]
 8003cb8:	6890      	ldr	r0, [r2, #8]
 8003cba:	b170      	cbz	r0, 8003cda <d_lookup_template_argument.isra.6+0x2e>
 8003cbc:	7802      	ldrb	r2, [r0, #0]
 8003cbe:	2a2f      	cmp	r2, #47	; 0x2f
 8003cc0:	d10d      	bne.n	8003cde <d_lookup_template_argument.isra.6+0x32>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dc04      	bgt.n	8003cd0 <d_lookup_template_argument.isra.6+0x24>
 8003cc6:	e009      	b.n	8003cdc <d_lookup_template_argument.isra.6+0x30>
 8003cc8:	7802      	ldrb	r2, [r0, #0]
 8003cca:	2a2f      	cmp	r2, #47	; 0x2f
 8003ccc:	d107      	bne.n	8003cde <d_lookup_template_argument.isra.6+0x32>
 8003cce:	b143      	cbz	r3, 8003ce2 <d_lookup_template_argument.isra.6+0x36>
 8003cd0:	6880      	ldr	r0, [r0, #8]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d1f7      	bne.n	8003cc8 <d_lookup_template_argument.isra.6+0x1c>
 8003cd8:	4770      	bx	lr
 8003cda:	4770      	bx	lr
 8003cdc:	d001      	beq.n	8003ce2 <d_lookup_template_argument.isra.6+0x36>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	4770      	bx	lr
 8003ce2:	6840      	ldr	r0, [r0, #4]
 8003ce4:	4770      	bx	lr
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 8003cee:	4770      	bx	lr

08003cf0 <d_find_pack>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	b391      	cbz	r1, 8003d5e <d_find_pack+0x6e>
 8003cf8:	7823      	ldrb	r3, [r4, #0]
 8003cfa:	2b4a      	cmp	r3, #74	; 0x4a
 8003cfc:	d827      	bhi.n	8003d4e <d_find_pack+0x5e>
 8003cfe:	e8df f003 	tbb	[pc, r3]
 8003d02:	262e      	.short	0x262e
 8003d04:	30262626 	.word	0x30262626
 8003d08:	262b2b2e 	.word	0x262b2b2e
 8003d0c:	26262626 	.word	0x26262626
 8003d10:	26262626 	.word	0x26262626
 8003d14:	26262626 	.word	0x26262626
 8003d18:	262e2626 	.word	0x262e2626
 8003d1c:	26262626 	.word	0x26262626
 8003d20:	26262626 	.word	0x26262626
 8003d24:	26262626 	.word	0x26262626
 8003d28:	26262e26 	.word	0x26262e26
 8003d2c:	26262626 	.word	0x26262626
 8003d30:	2e262626 	.word	0x2e262626
 8003d34:	2626262b 	.word	0x2626262b
 8003d38:	26262626 	.word	0x26262626
 8003d3c:	26262626 	.word	0x26262626
 8003d40:	26262e26 	.word	0x26262e26
 8003d44:	262e2626 	.word	0x262e2626
 8003d48:	2e26262e 	.word	0x2e26262e
 8003d4c:	2e          	.byte	0x2e
 8003d4d:	00          	.byte	0x00
 8003d4e:	4628      	mov	r0, r5
 8003d50:	6861      	ldr	r1, [r4, #4]
 8003d52:	f7ff ffcd 	bl	8003cf0 <d_find_pack>
 8003d56:	b918      	cbnz	r0, 8003d60 <d_find_pack+0x70>
 8003d58:	68a4      	ldr	r4, [r4, #8]
 8003d5a:	2c00      	cmp	r4, #0
 8003d5c:	d1cc      	bne.n	8003cf8 <d_find_pack+0x8>
 8003d5e:	2000      	movs	r0, #0
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	4628      	mov	r0, r5
 8003d64:	1d21      	adds	r1, r4, #4
 8003d66:	f7ff ffa1 	bl	8003cac <d_lookup_template_argument.isra.6>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d0f7      	beq.n	8003d5e <d_find_pack+0x6e>
 8003d6e:	7803      	ldrb	r3, [r0, #0]
 8003d70:	2b2f      	cmp	r3, #47	; 0x2f
 8003d72:	d1f4      	bne.n	8003d5e <d_find_pack+0x6e>
 8003d74:	bd38      	pop	{r3, r4, r5, pc}
 8003d76:	bf00      	nop

08003d78 <d_growable_string_callback_adapter>:
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	6853      	ldr	r3, [r2, #4]
 8003d7c:	6894      	ldr	r4, [r2, #8]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	440b      	add	r3, r1
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	b083      	sub	sp, #12
 8003d86:	4615      	mov	r5, r2
 8003d88:	460e      	mov	r6, r1
 8003d8a:	4607      	mov	r7, r0
 8003d8c:	d813      	bhi.n	8003db6 <d_growable_string_callback_adapter+0x3e>
 8003d8e:	68ec      	ldr	r4, [r5, #12]
 8003d90:	b10c      	cbz	r4, 8003d96 <d_growable_string_callback_adapter+0x1e>
 8003d92:	b003      	add	sp, #12
 8003d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d96:	e895 0009 	ldmia.w	r5, {r0, r3}
 8003d9a:	4632      	mov	r2, r6
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	4418      	add	r0, r3
 8003da0:	f006 fd7e 	bl	800a8a0 <memcpy>
 8003da4:	e895 000c 	ldmia.w	r5, {r2, r3}
 8003da8:	4432      	add	r2, r6
 8003daa:	54d4      	strb	r4, [r2, r3]
 8003dac:	686b      	ldr	r3, [r5, #4]
 8003dae:	441e      	add	r6, r3
 8003db0:	606e      	str	r6, [r5, #4]
 8003db2:	b003      	add	sp, #12
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db6:	68d2      	ldr	r2, [r2, #12]
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	d1ea      	bne.n	8003d92 <d_growable_string_callback_adapter+0x1a>
 8003dbc:	b91c      	cbnz	r4, 8003dc6 <d_growable_string_callback_adapter+0x4e>
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	f04f 0402 	mov.w	r4, #2
 8003dc4:	d902      	bls.n	8003dcc <d_growable_string_callback_adapter+0x54>
 8003dc6:	0064      	lsls	r4, r4, #1
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	d8fc      	bhi.n	8003dc6 <d_growable_string_callback_adapter+0x4e>
 8003dcc:	6828      	ldr	r0, [r5, #0]
 8003dce:	4621      	mov	r1, r4
 8003dd0:	f006 febc 	bl	800ab4c <realloc>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	b110      	cbz	r0, 8003dde <d_growable_string_callback_adapter+0x66>
 8003dd8:	6028      	str	r0, [r5, #0]
 8003dda:	60ac      	str	r4, [r5, #8]
 8003ddc:	e7d7      	b.n	8003d8e <d_growable_string_callback_adapter+0x16>
 8003dde:	6828      	ldr	r0, [r5, #0]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	f006 fa3b 	bl	800a25c <free>
 8003de6:	9b01      	ldr	r3, [sp, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	606b      	str	r3, [r5, #4]
 8003dee:	60ab      	str	r3, [r5, #8]
 8003df0:	60ea      	str	r2, [r5, #12]
 8003df2:	e7ce      	b.n	8003d92 <d_growable_string_callback_adapter+0x1a>

08003df4 <d_expr_primary>:
 8003df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df8:	68c3      	ldr	r3, [r0, #12]
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	2a4c      	cmp	r2, #76	; 0x4c
 8003e00:	d002      	beq.n	8003e08 <d_expr_primary+0x14>
 8003e02:	2000      	movs	r0, #0
 8003e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	60c2      	str	r2, [r0, #12]
 8003e0c:	7859      	ldrb	r1, [r3, #1]
 8003e0e:	295f      	cmp	r1, #95	; 0x5f
 8003e10:	d03a      	beq.n	8003e88 <d_expr_primary+0x94>
 8003e12:	295a      	cmp	r1, #90	; 0x5a
 8003e14:	d10d      	bne.n	8003e32 <d_expr_primary+0x3e>
 8003e16:	3201      	adds	r2, #1
 8003e18:	60ea      	str	r2, [r5, #12]
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	f000 fdef 	bl	8004a00 <d_encoding>
 8003e22:	68ea      	ldr	r2, [r5, #12]
 8003e24:	7813      	ldrb	r3, [r2, #0]
 8003e26:	2b45      	cmp	r3, #69	; 0x45
 8003e28:	d1eb      	bne.n	8003e02 <d_expr_primary+0xe>
 8003e2a:	3201      	adds	r2, #1
 8003e2c:	60ea      	str	r2, [r5, #12]
 8003e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e32:	f000 fa03 	bl	800423c <d_type>
 8003e36:	4607      	mov	r7, r0
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d0e2      	beq.n	8003e02 <d_expr_primary+0xe>
 8003e3c:	7803      	ldrb	r3, [r0, #0]
 8003e3e:	2b27      	cmp	r3, #39	; 0x27
 8003e40:	d033      	beq.n	8003eaa <d_expr_primary+0xb6>
 8003e42:	68e9      	ldr	r1, [r5, #12]
 8003e44:	780b      	ldrb	r3, [r1, #0]
 8003e46:	2b6e      	cmp	r3, #110	; 0x6e
 8003e48:	d028      	beq.n	8003e9c <d_expr_primary+0xa8>
 8003e4a:	f04f 083b 	mov.w	r8, #59	; 0x3b
 8003e4e:	2b45      	cmp	r3, #69	; 0x45
 8003e50:	d034      	beq.n	8003ebc <d_expr_primary+0xc8>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0d5      	beq.n	8003e02 <d_expr_primary+0xe>
 8003e56:	1c4b      	adds	r3, r1, #1
 8003e58:	e001      	b.n	8003e5e <d_expr_primary+0x6a>
 8003e5a:	2c00      	cmp	r4, #0
 8003e5c:	d0d1      	beq.n	8003e02 <d_expr_primary+0xe>
 8003e5e:	60eb      	str	r3, [r5, #12]
 8003e60:	461e      	mov	r6, r3
 8003e62:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003e66:	2c45      	cmp	r4, #69	; 0x45
 8003e68:	d1f7      	bne.n	8003e5a <d_expr_primary+0x66>
 8003e6a:	1a72      	subs	r2, r6, r1
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7ff fc7d 	bl	800376c <d_make_name>
 8003e72:	463a      	mov	r2, r7
 8003e74:	4603      	mov	r3, r0
 8003e76:	4641      	mov	r1, r8
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f7ff fc2b 	bl	80036d4 <d_make_comp>
 8003e7e:	68ea      	ldr	r2, [r5, #12]
 8003e80:	7813      	ldrb	r3, [r2, #0]
 8003e82:	2b45      	cmp	r3, #69	; 0x45
 8003e84:	d1bd      	bne.n	8003e02 <d_expr_primary+0xe>
 8003e86:	e7d0      	b.n	8003e2a <d_expr_primary+0x36>
 8003e88:	1c9a      	adds	r2, r3, #2
 8003e8a:	60c2      	str	r2, [r0, #12]
 8003e8c:	789b      	ldrb	r3, [r3, #2]
 8003e8e:	2b5a      	cmp	r3, #90	; 0x5a
 8003e90:	d0c1      	beq.n	8003e16 <d_expr_primary+0x22>
 8003e92:	2b45      	cmp	r3, #69	; 0x45
 8003e94:	f04f 0000 	mov.w	r0, #0
 8003e98:	d1b3      	bne.n	8003e02 <d_expr_primary+0xe>
 8003e9a:	e7c6      	b.n	8003e2a <d_expr_primary+0x36>
 8003e9c:	1c4a      	adds	r2, r1, #1
 8003e9e:	60ea      	str	r2, [r5, #12]
 8003ea0:	784b      	ldrb	r3, [r1, #1]
 8003ea2:	f04f 083c 	mov.w	r8, #60	; 0x3c
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	e7d1      	b.n	8003e4e <d_expr_primary+0x5a>
 8003eaa:	6843      	ldr	r3, [r0, #4]
 8003eac:	7c1a      	ldrb	r2, [r3, #16]
 8003eae:	2a00      	cmp	r2, #0
 8003eb0:	d0c7      	beq.n	8003e42 <d_expr_primary+0x4e>
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	632b      	str	r3, [r5, #48]	; 0x30
 8003eba:	e7c2      	b.n	8003e42 <d_expr_primary+0x4e>
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	e7d5      	b.n	8003e6c <d_expr_primary+0x78>

08003ec0 <d_template_args>:
 8003ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec2:	68c1      	ldr	r1, [r0, #12]
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	780b      	ldrb	r3, [r1, #0]
 8003ec8:	4604      	mov	r4, r0
 8003eca:	3b49      	subs	r3, #73	; 0x49
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8003ed0:	d81e      	bhi.n	8003f10 <d_template_args+0x50>
 8003ed2:	1c4a      	adds	r2, r1, #1
 8003ed4:	60c2      	str	r2, [r0, #12]
 8003ed6:	784b      	ldrb	r3, [r1, #1]
 8003ed8:	2b45      	cmp	r3, #69	; 0x45
 8003eda:	d045      	beq.n	8003f68 <d_template_args+0xa8>
 8003edc:	2100      	movs	r1, #0
 8003ede:	ae02      	add	r6, sp, #8
 8003ee0:	f846 1d04 	str.w	r1, [r6, #-4]!
 8003ee4:	3b49      	subs	r3, #73	; 0x49
 8003ee6:	2b0f      	cmp	r3, #15
 8003ee8:	d835      	bhi.n	8003f56 <d_template_args+0x96>
 8003eea:	e8df f003 	tbb	[pc, r3]
 8003eee:	2f2f      	.short	0x2f2f
 8003ef0:	34341434 	.word	0x34341434
 8003ef4:	34343434 	.word	0x34343434
 8003ef8:	34343434 	.word	0x34343434
 8003efc:	0834      	.short	0x0834
 8003efe:	3201      	adds	r2, #1
 8003f00:	60e2      	str	r2, [r4, #12]
 8003f02:	4620      	mov	r0, r4
 8003f04:	f001 fa6c 	bl	80053e0 <d_expression>
 8003f08:	68e3      	ldr	r3, [r4, #12]
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	2a45      	cmp	r2, #69	; 0x45
 8003f0e:	d027      	beq.n	8003f60 <d_template_args+0xa0>
 8003f10:	2000      	movs	r0, #0
 8003f12:	b003      	add	sp, #12
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff ff6c 	bl	8003df4 <d_expr_primary>
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	4620      	mov	r0, r4
 8003f20:	212f      	movs	r1, #47	; 0x2f
 8003f22:	462a      	mov	r2, r5
 8003f24:	2300      	movs	r3, #0
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	d0f2      	beq.n	8003f10 <d_template_args+0x50>
 8003f2a:	f7ff fbd3 	bl	80036d4 <d_make_comp>
 8003f2e:	6030      	str	r0, [r6, #0]
 8003f30:	f100 0608 	add.w	r6, r0, #8
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d0eb      	beq.n	8003f10 <d_template_args+0x50>
 8003f38:	68e2      	ldr	r2, [r4, #12]
 8003f3a:	7813      	ldrb	r3, [r2, #0]
 8003f3c:	2b45      	cmp	r3, #69	; 0x45
 8003f3e:	d1d1      	bne.n	8003ee4 <d_template_args+0x24>
 8003f40:	9801      	ldr	r0, [sp, #4]
 8003f42:	3201      	adds	r2, #1
 8003f44:	60e2      	str	r2, [r4, #12]
 8003f46:	62e7      	str	r7, [r4, #44]	; 0x2c
 8003f48:	b003      	add	sp, #12
 8003f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7ff ffb7 	bl	8003ec0 <d_template_args>
 8003f52:	4605      	mov	r5, r0
 8003f54:	e7e3      	b.n	8003f1e <d_template_args+0x5e>
 8003f56:	4620      	mov	r0, r4
 8003f58:	f000 f970 	bl	800423c <d_type>
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	e7de      	b.n	8003f1e <d_template_args+0x5e>
 8003f60:	3301      	adds	r3, #1
 8003f62:	60e3      	str	r3, [r4, #12]
 8003f64:	4605      	mov	r5, r0
 8003f66:	e7da      	b.n	8003f1e <d_template_args+0x5e>
 8003f68:	3102      	adds	r1, #2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60c1      	str	r1, [r0, #12]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	212f      	movs	r1, #47	; 0x2f
 8003f72:	b003      	add	sp, #12
 8003f74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003f78:	f7ff bbac 	b.w	80036d4 <d_make_comp>

08003f7c <d_name>:
 8003f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	68c2      	ldr	r2, [r0, #12]
 8003f82:	b082      	sub	sp, #8
 8003f84:	7813      	ldrb	r3, [r2, #0]
 8003f86:	4605      	mov	r5, r0
 8003f88:	3b4c      	subs	r3, #76	; 0x4c
 8003f8a:	2b0e      	cmp	r3, #14
 8003f8c:	d86d      	bhi.n	800406a <d_name+0xee>
 8003f8e:	e8df f003 	tbb	[pc, r3]
 8003f92:	6c2c      	.short	0x6c2c
 8003f94:	6c6c6c31 	.word	0x6c6c6c31
 8003f98:	2c6c176c 	.word	0x2c6c176c
 8003f9c:	6c6c6c6c 	.word	0x6c6c6c6c
 8003fa0:	08          	.byte	0x08
 8003fa1:	00          	.byte	0x00
 8003fa2:	3201      	adds	r2, #1
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	60c2      	str	r2, [r0, #12]
 8003fa8:	f000 fd2a 	bl	8004a00 <d_encoding>
 8003fac:	68eb      	ldr	r3, [r5, #12]
 8003fae:	4606      	mov	r6, r0
 8003fb0:	7819      	ldrb	r1, [r3, #0]
 8003fb2:	2945      	cmp	r1, #69	; 0x45
 8003fb4:	f000 80d1 	beq.w	800415a <d_name+0x1de>
 8003fb8:	2000      	movs	r0, #0
 8003fba:	b002      	add	sp, #8
 8003fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc0:	7853      	ldrb	r3, [r2, #1]
 8003fc2:	2b74      	cmp	r3, #116	; 0x74
 8003fc4:	d069      	beq.n	800409a <d_name+0x11e>
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f7ff fcaa 	bl	8003920 <d_substitution>
 8003fcc:	68eb      	ldr	r3, [r5, #12]
 8003fce:	4604      	mov	r4, r0
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b49      	cmp	r3, #73	; 0x49
 8003fd4:	d150      	bne.n	8004078 <d_name+0xfc>
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f7ff ff72 	bl	8003ec0 <d_template_args>
 8003fdc:	4622      	mov	r2, r4
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f7ff fb76 	bl	80036d4 <d_make_comp>
 8003fe8:	e001      	b.n	8003fee <d_name+0x72>
 8003fea:	f001 f8bb 	bl	8005164 <d_unqualified_name>
 8003fee:	b002      	add	sp, #8
 8003ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff4:	3201      	adds	r2, #1
 8003ff6:	60c2      	str	r2, [r0, #12]
 8003ff8:	a901      	add	r1, sp, #4
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f7ff fbd0 	bl	80037a0 <d_cv_qualifiers>
 8004000:	4607      	mov	r7, r0
 8004002:	2800      	cmp	r0, #0
 8004004:	d0d8      	beq.n	8003fb8 <d_name+0x3c>
 8004006:	4628      	mov	r0, r5
 8004008:	2100      	movs	r1, #0
 800400a:	f7ff fc23 	bl	8003854 <d_ref_qualifier>
 800400e:	68eb      	ldr	r3, [r5, #12]
 8004010:	4680      	mov	r8, r0
 8004012:	781c      	ldrb	r4, [r3, #0]
 8004014:	2600      	movs	r6, #0
 8004016:	2c00      	cmp	r4, #0
 8004018:	f000 808e 	beq.w	8004138 <d_name+0x1bc>
 800401c:	2c44      	cmp	r4, #68	; 0x44
 800401e:	f000 8082 	beq.w	8004126 <d_name+0x1aa>
 8004022:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	2a09      	cmp	r2, #9
 800402a:	d95c      	bls.n	80040e6 <d_name+0x16a>
 800402c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	2a19      	cmp	r2, #25
 8004034:	d957      	bls.n	80040e6 <d_name+0x16a>
 8004036:	2c43      	cmp	r4, #67	; 0x43
 8004038:	d055      	beq.n	80040e6 <d_name+0x16a>
 800403a:	2c55      	cmp	r4, #85	; 0x55
 800403c:	d053      	beq.n	80040e6 <d_name+0x16a>
 800403e:	2c4c      	cmp	r4, #76	; 0x4c
 8004040:	d051      	beq.n	80040e6 <d_name+0x16a>
 8004042:	2c53      	cmp	r4, #83	; 0x53
 8004044:	f000 8084 	beq.w	8004150 <d_name+0x1d4>
 8004048:	2c49      	cmp	r4, #73	; 0x49
 800404a:	d07a      	beq.n	8004142 <d_name+0x1c6>
 800404c:	2c54      	cmp	r4, #84	; 0x54
 800404e:	f000 80b3 	beq.w	80041b8 <d_name+0x23c>
 8004052:	2c45      	cmp	r4, #69	; 0x45
 8004054:	f000 80d8 	beq.w	8004208 <d_name+0x28c>
 8004058:	2c4d      	cmp	r4, #77	; 0x4d
 800405a:	d16d      	bne.n	8004138 <d_name+0x1bc>
 800405c:	2e00      	cmp	r6, #0
 800405e:	d06b      	beq.n	8004138 <d_name+0x1bc>
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	60ea      	str	r2, [r5, #12]
 8004064:	785c      	ldrb	r4, [r3, #1]
 8004066:	4613      	mov	r3, r2
 8004068:	e7d5      	b.n	8004016 <d_name+0x9a>
 800406a:	f001 f87b 	bl	8005164 <d_unqualified_name>
 800406e:	68eb      	ldr	r3, [r5, #12]
 8004070:	4604      	mov	r4, r0
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b49      	cmp	r3, #73	; 0x49
 8004076:	d003      	beq.n	8004080 <d_name+0x104>
 8004078:	4620      	mov	r0, r4
 800407a:	b002      	add	sp, #8
 800407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004080:	2800      	cmp	r0, #0
 8004082:	d099      	beq.n	8003fb8 <d_name+0x3c>
 8004084:	6a2b      	ldr	r3, [r5, #32]
 8004086:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004088:	4293      	cmp	r3, r2
 800408a:	da95      	bge.n	8003fb8 <d_name+0x3c>
 800408c:	69ea      	ldr	r2, [r5, #28]
 800408e:	1c59      	adds	r1, r3, #1
 8004090:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8004094:	4628      	mov	r0, r5
 8004096:	6229      	str	r1, [r5, #32]
 8004098:	e79e      	b.n	8003fd8 <d_name+0x5c>
 800409a:	3202      	adds	r2, #2
 800409c:	4965      	ldr	r1, [pc, #404]	; (8004234 <d_name+0x2b8>)
 800409e:	60c2      	str	r2, [r0, #12]
 80040a0:	2203      	movs	r2, #3
 80040a2:	f7ff fb63 	bl	800376c <d_make_name>
 80040a6:	4604      	mov	r4, r0
 80040a8:	4628      	mov	r0, r5
 80040aa:	f001 f85b 	bl	8005164 <d_unqualified_name>
 80040ae:	4622      	mov	r2, r4
 80040b0:	4603      	mov	r3, r0
 80040b2:	2101      	movs	r1, #1
 80040b4:	4628      	mov	r0, r5
 80040b6:	f7ff fb0d 	bl	80036d4 <d_make_comp>
 80040ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80040bc:	68eb      	ldr	r3, [r5, #12]
 80040be:	3203      	adds	r2, #3
 80040c0:	632a      	str	r2, [r5, #48]	; 0x30
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	4604      	mov	r4, r0
 80040c6:	2b49      	cmp	r3, #73	; 0x49
 80040c8:	d1d6      	bne.n	8004078 <d_name+0xfc>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f43f af74 	beq.w	8003fb8 <d_name+0x3c>
 80040d0:	6a2b      	ldr	r3, [r5, #32]
 80040d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80040d4:	4293      	cmp	r3, r2
 80040d6:	f6bf af6f 	bge.w	8003fb8 <d_name+0x3c>
 80040da:	69ea      	ldr	r2, [r5, #28]
 80040dc:	1c59      	adds	r1, r3, #1
 80040de:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80040e2:	6229      	str	r1, [r5, #32]
 80040e4:	e777      	b.n	8003fd6 <d_name+0x5a>
 80040e6:	4628      	mov	r0, r5
 80040e8:	f001 f83c 	bl	8005164 <d_unqualified_name>
 80040ec:	b1ce      	cbz	r6, 8004122 <d_name+0x1a6>
 80040ee:	2101      	movs	r1, #1
 80040f0:	4632      	mov	r2, r6
 80040f2:	4603      	mov	r3, r0
 80040f4:	4628      	mov	r0, r5
 80040f6:	f7ff faed 	bl	80036d4 <d_make_comp>
 80040fa:	4606      	mov	r6, r0
 80040fc:	68eb      	ldr	r3, [r5, #12]
 80040fe:	2c53      	cmp	r4, #83	; 0x53
 8004100:	781c      	ldrb	r4, [r3, #0]
 8004102:	d088      	beq.n	8004016 <d_name+0x9a>
 8004104:	2c45      	cmp	r4, #69	; 0x45
 8004106:	d08c      	beq.n	8004022 <d_name+0xa6>
 8004108:	b1b6      	cbz	r6, 8004138 <d_name+0x1bc>
 800410a:	6a2b      	ldr	r3, [r5, #32]
 800410c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800410e:	4293      	cmp	r3, r2
 8004110:	da12      	bge.n	8004138 <d_name+0x1bc>
 8004112:	69ea      	ldr	r2, [r5, #28]
 8004114:	1c59      	adds	r1, r3, #1
 8004116:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 800411a:	68eb      	ldr	r3, [r5, #12]
 800411c:	6229      	str	r1, [r5, #32]
 800411e:	781c      	ldrb	r4, [r3, #0]
 8004120:	e779      	b.n	8004016 <d_name+0x9a>
 8004122:	4606      	mov	r6, r0
 8004124:	e7ea      	b.n	80040fc <d_name+0x180>
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800412c:	2b54      	cmp	r3, #84	; 0x54
 800412e:	d1da      	bne.n	80040e6 <d_name+0x16a>
 8004130:	4628      	mov	r0, r5
 8004132:	f000 f883 	bl	800423c <d_type>
 8004136:	e7d9      	b.n	80040ec <d_name+0x170>
 8004138:	2000      	movs	r0, #0
 800413a:	6038      	str	r0, [r7, #0]
 800413c:	b002      	add	sp, #8
 800413e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004142:	2e00      	cmp	r6, #0
 8004144:	d0f8      	beq.n	8004138 <d_name+0x1bc>
 8004146:	4628      	mov	r0, r5
 8004148:	f7ff feba 	bl	8003ec0 <d_template_args>
 800414c:	2104      	movs	r1, #4
 800414e:	e7cf      	b.n	80040f0 <d_name+0x174>
 8004150:	4628      	mov	r0, r5
 8004152:	2101      	movs	r1, #1
 8004154:	f7ff fbe4 	bl	8003920 <d_substitution>
 8004158:	e7c8      	b.n	80040ec <d_name+0x170>
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	60ea      	str	r2, [r5, #12]
 800415e:	785a      	ldrb	r2, [r3, #1]
 8004160:	2a73      	cmp	r2, #115	; 0x73
 8004162:	d03d      	beq.n	80041e0 <d_name+0x264>
 8004164:	2a64      	cmp	r2, #100	; 0x64
 8004166:	d02b      	beq.n	80041c0 <d_name+0x244>
 8004168:	f04f 37ff 	mov.w	r7, #4294967295
 800416c:	4628      	mov	r0, r5
 800416e:	f7ff ff05 	bl	8003f7c <d_name>
 8004172:	4604      	mov	r4, r0
 8004174:	b120      	cbz	r0, 8004180 <d_name+0x204>
 8004176:	7803      	ldrb	r3, [r0, #0]
 8004178:	2b44      	cmp	r3, #68	; 0x44
 800417a:	d001      	beq.n	8004180 <d_name+0x204>
 800417c:	2b46      	cmp	r3, #70	; 0x46
 800417e:	d129      	bne.n	80041d4 <d_name+0x258>
 8004180:	1c7b      	adds	r3, r7, #1
 8004182:	d025      	beq.n	80041d0 <d_name+0x254>
 8004184:	696b      	ldr	r3, [r5, #20]
 8004186:	69aa      	ldr	r2, [r5, #24]
 8004188:	4293      	cmp	r3, r2
 800418a:	da13      	bge.n	80041b4 <d_name+0x238>
 800418c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004190:	6929      	ldr	r1, [r5, #16]
 8004192:	3301      	adds	r3, #1
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	616b      	str	r3, [r5, #20]
 8004198:	188b      	adds	r3, r1, r2
 800419a:	d003      	beq.n	80041a4 <d_name+0x228>
 800419c:	2045      	movs	r0, #69	; 0x45
 800419e:	5488      	strb	r0, [r1, r2]
 80041a0:	609f      	str	r7, [r3, #8]
 80041a2:	605c      	str	r4, [r3, #4]
 80041a4:	4628      	mov	r0, r5
 80041a6:	4632      	mov	r2, r6
 80041a8:	2102      	movs	r1, #2
 80041aa:	f7ff fa93 	bl	80036d4 <d_make_comp>
 80041ae:	b002      	add	sp, #8
 80041b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b4:	2300      	movs	r3, #0
 80041b6:	e7f5      	b.n	80041a4 <d_name+0x228>
 80041b8:	4628      	mov	r0, r5
 80041ba:	f7ff fcd9 	bl	8003b70 <d_template_param>
 80041be:	e795      	b.n	80040ec <d_name+0x170>
 80041c0:	3302      	adds	r3, #2
 80041c2:	60eb      	str	r3, [r5, #12]
 80041c4:	4628      	mov	r0, r5
 80041c6:	f7ff fcbb 	bl	8003b40 <d_compact_number>
 80041ca:	1e07      	subs	r7, r0, #0
 80041cc:	dace      	bge.n	800416c <d_name+0x1f0>
 80041ce:	e6f3      	b.n	8003fb8 <d_name+0x3c>
 80041d0:	4623      	mov	r3, r4
 80041d2:	e7e7      	b.n	80041a4 <d_name+0x228>
 80041d4:	4628      	mov	r0, r5
 80041d6:	f7ff fced 	bl	8003bb4 <d_discriminator>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d1d0      	bne.n	8004180 <d_name+0x204>
 80041de:	e6eb      	b.n	8003fb8 <d_name+0x3c>
 80041e0:	3302      	adds	r3, #2
 80041e2:	60eb      	str	r3, [r5, #12]
 80041e4:	4628      	mov	r0, r5
 80041e6:	f7ff fce5 	bl	8003bb4 <d_discriminator>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	f43f aee4 	beq.w	8003fb8 <d_name+0x3c>
 80041f0:	4628      	mov	r0, r5
 80041f2:	4911      	ldr	r1, [pc, #68]	; (8004238 <d_name+0x2bc>)
 80041f4:	220e      	movs	r2, #14
 80041f6:	f7ff fab9 	bl	800376c <d_make_name>
 80041fa:	4632      	mov	r2, r6
 80041fc:	4603      	mov	r3, r0
 80041fe:	2102      	movs	r1, #2
 8004200:	4628      	mov	r0, r5
 8004202:	f7ff fa67 	bl	80036d4 <d_make_comp>
 8004206:	e6f2      	b.n	8003fee <d_name+0x72>
 8004208:	603e      	str	r6, [r7, #0]
 800420a:	2e00      	cmp	r6, #0
 800420c:	f43f aed4 	beq.w	8003fb8 <d_name+0x3c>
 8004210:	f1b8 0f00 	cmp.w	r8, #0
 8004214:	d004      	beq.n	8004220 <d_name+0x2a4>
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	f8cd 8004 	str.w	r8, [sp, #4]
 800421c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004220:	68eb      	ldr	r3, [r5, #12]
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	2a45      	cmp	r2, #69	; 0x45
 8004226:	f47f aec7 	bne.w	8003fb8 <d_name+0x3c>
 800422a:	3301      	adds	r3, #1
 800422c:	60eb      	str	r3, [r5, #12]
 800422e:	9801      	ldr	r0, [sp, #4]
 8004230:	e6dd      	b.n	8003fee <d_name+0x72>
 8004232:	bf00      	nop
 8004234:	0800cddc 	.word	0x0800cddc
 8004238:	0800cdcc 	.word	0x0800cdcc

0800423c <d_type>:
 800423c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423e:	68c2      	ldr	r2, [r0, #12]
 8004240:	b083      	sub	sp, #12
 8004242:	7813      	ldrb	r3, [r2, #0]
 8004244:	4604      	mov	r4, r0
 8004246:	2b72      	cmp	r3, #114	; 0x72
 8004248:	d054      	beq.n	80042f4 <d_type+0xb8>
 800424a:	2b56      	cmp	r3, #86	; 0x56
 800424c:	d052      	beq.n	80042f4 <d_type+0xb8>
 800424e:	2b4b      	cmp	r3, #75	; 0x4b
 8004250:	d050      	beq.n	80042f4 <d_type+0xb8>
 8004252:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004256:	294a      	cmp	r1, #74	; 0x4a
 8004258:	d87d      	bhi.n	8004356 <d_type+0x11a>
 800425a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800425e:	00a2      	.short	0x00a2
 8004260:	00a200a2 	.word	0x00a200a2
 8004264:	00a200a2 	.word	0x00a200a2
 8004268:	00a200a2 	.word	0x00a200a2
 800426c:	00a200a2 	.word	0x00a200a2
 8004270:	007c00a2 	.word	0x007c00a2
 8004274:	007c007c 	.word	0x007c007c
 8004278:	007c007c 	.word	0x007c007c
 800427c:	007c007c 	.word	0x007c007c
 8004280:	007c00a7 	.word	0x007c00a7
 8004284:	00ff00cf 	.word	0x00ff00cf
 8004288:	00dc007c 	.word	0x00dc007c
 800428c:	007c00f2 	.word	0x007c00f2
 8004290:	007c007c 	.word	0x007c007c
 8004294:	007c007c 	.word	0x007c007c
 8004298:	00a20171 	.word	0x00a20171
 800429c:	01a701c1 	.word	0x01a701c1
 80042a0:	01b4007c 	.word	0x01b4007c
 80042a4:	01ef01ce 	.word	0x01ef01ce
 80042a8:	007c0207 	.word	0x007c0207
 80042ac:	007c007c 	.word	0x007c007c
 80042b0:	00a2007c 	.word	0x00a2007c
 80042b4:	007c007c 	.word	0x007c007c
 80042b8:	007c007c 	.word	0x007c007c
 80042bc:	007c007c 	.word	0x007c007c
 80042c0:	02180218 	.word	0x02180218
 80042c4:	02180218 	.word	0x02180218
 80042c8:	02180218 	.word	0x02180218
 80042cc:	02180218 	.word	0x02180218
 80042d0:	02180218 	.word	0x02180218
 80042d4:	0218007c 	.word	0x0218007c
 80042d8:	02180218 	.word	0x02180218
 80042dc:	007c0218 	.word	0x007c0218
 80042e0:	007c007c 	.word	0x007c007c
 80042e4:	02180218 	.word	0x02180218
 80042e8:	02180089 	.word	0x02180089
 80042ec:	02180218 	.word	0x02180218
 80042f0:	02180218 	.word	0x02180218
 80042f4:	4620      	mov	r0, r4
 80042f6:	a901      	add	r1, sp, #4
 80042f8:	2200      	movs	r2, #0
 80042fa:	f7ff fa51 	bl	80037a0 <d_cv_qualifiers>
 80042fe:	4605      	mov	r5, r0
 8004300:	b348      	cbz	r0, 8004356 <d_type+0x11a>
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff ff9a 	bl	800423c <d_type>
 8004308:	6028      	str	r0, [r5, #0]
 800430a:	b320      	cbz	r0, 8004356 <d_type+0x11a>
 800430c:	7802      	ldrb	r2, [r0, #0]
 800430e:	3a1f      	subs	r2, #31
 8004310:	2a01      	cmp	r2, #1
 8004312:	d923      	bls.n	800435c <d_type+0x120>
 8004314:	9a01      	ldr	r2, [sp, #4]
 8004316:	b1f2      	cbz	r2, 8004356 <d_type+0x11a>
 8004318:	6a23      	ldr	r3, [r4, #32]
 800431a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800431c:	428b      	cmp	r3, r1
 800431e:	da1a      	bge.n	8004356 <d_type+0x11a>
 8004320:	69e1      	ldr	r1, [r4, #28]
 8004322:	1c5d      	adds	r5, r3, #1
 8004324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004328:	9801      	ldr	r0, [sp, #4]
 800432a:	6225      	str	r5, [r4, #32]
 800432c:	b003      	add	sp, #12
 800432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004330:	4620      	mov	r0, r4
 8004332:	f001 f855 	bl	80053e0 <d_expression>
 8004336:	2141      	movs	r1, #65	; 0x41
 8004338:	4602      	mov	r2, r0
 800433a:	2300      	movs	r3, #0
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff f9c9 	bl	80036d4 <d_make_comp>
 8004342:	9001      	str	r0, [sp, #4]
 8004344:	b138      	cbz	r0, 8004356 <d_type+0x11a>
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	781a      	ldrb	r2, [r3, #0]
 800434a:	b122      	cbz	r2, 8004356 <d_type+0x11a>
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	60e2      	str	r2, [r4, #12]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b45      	cmp	r3, #69	; 0x45
 8004354:	d01a      	beq.n	800438c <d_type+0x150>
 8004356:	2000      	movs	r0, #0
 8004358:	b003      	add	sp, #12
 800435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435c:	9a01      	ldr	r2, [sp, #4]
 800435e:	6841      	ldr	r1, [r0, #4]
 8004360:	6042      	str	r2, [r0, #4]
 8004362:	682b      	ldr	r3, [r5, #0]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	6029      	str	r1, [r5, #0]
 8004368:	9a01      	ldr	r2, [sp, #4]
 800436a:	2a00      	cmp	r2, #0
 800436c:	d1d4      	bne.n	8004318 <d_type+0xdc>
 800436e:	e7f2      	b.n	8004356 <d_type+0x11a>
 8004370:	3201      	adds	r2, #1
 8004372:	60e2      	str	r2, [r4, #12]
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff fc2d 	bl	8003bd4 <d_source_name>
 800437a:	2128      	movs	r1, #40	; 0x28
 800437c:	4602      	mov	r2, r0
 800437e:	2300      	movs	r3, #0
 8004380:	4620      	mov	r0, r4
 8004382:	f7ff f9a7 	bl	80036d4 <d_make_comp>
 8004386:	9001      	str	r0, [sp, #4]
 8004388:	2800      	cmp	r0, #0
 800438a:	d0e4      	beq.n	8004356 <d_type+0x11a>
 800438c:	6a23      	ldr	r3, [r4, #32]
 800438e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004390:	4293      	cmp	r3, r2
 8004392:	dae0      	bge.n	8004356 <d_type+0x11a>
 8004394:	69e2      	ldr	r2, [r4, #28]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800439c:	9801      	ldr	r0, [sp, #4]
 800439e:	6221      	str	r1, [r4, #32]
 80043a0:	e7da      	b.n	8004358 <d_type+0x11c>
 80043a2:	4620      	mov	r0, r4
 80043a4:	f7ff fdea 	bl	8003f7c <d_name>
 80043a8:	9001      	str	r0, [sp, #4]
 80043aa:	e7ed      	b.n	8004388 <d_type+0x14c>
 80043ac:	1c51      	adds	r1, r2, #1
 80043ae:	60e1      	str	r1, [r4, #12]
 80043b0:	7853      	ldrb	r3, [r2, #1]
 80043b2:	2b5f      	cmp	r3, #95	; 0x5f
 80043b4:	f000 8277 	beq.w	80048a6 <d_type+0x66a>
 80043b8:	3b30      	subs	r3, #48	; 0x30
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	f200 827b 	bhi.w	80048b6 <d_type+0x67a>
 80043c0:	460a      	mov	r2, r1
 80043c2:	3201      	adds	r2, #1
 80043c4:	60e2      	str	r2, [r4, #12]
 80043c6:	7813      	ldrb	r3, [r2, #0]
 80043c8:	3b30      	subs	r3, #48	; 0x30
 80043ca:	2b09      	cmp	r3, #9
 80043cc:	d9f9      	bls.n	80043c2 <d_type+0x186>
 80043ce:	1a52      	subs	r2, r2, r1
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7ff f9cb 	bl	800376c <d_make_name>
 80043d6:	4605      	mov	r5, r0
 80043d8:	2800      	cmp	r0, #0
 80043da:	d030      	beq.n	800443e <d_type+0x202>
 80043dc:	68e1      	ldr	r1, [r4, #12]
 80043de:	780b      	ldrb	r3, [r1, #0]
 80043e0:	2b5f      	cmp	r3, #95	; 0x5f
 80043e2:	d12c      	bne.n	800443e <d_type+0x202>
 80043e4:	3101      	adds	r1, #1
 80043e6:	60e1      	str	r1, [r4, #12]
 80043e8:	4620      	mov	r0, r4
 80043ea:	f7ff ff27 	bl	800423c <d_type>
 80043ee:	462a      	mov	r2, r5
 80043f0:	4603      	mov	r3, r0
 80043f2:	212a      	movs	r1, #42	; 0x2a
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7ff f96d 	bl	80036d4 <d_make_comp>
 80043fa:	e7d5      	b.n	80043a8 <d_type+0x16c>
 80043fc:	3201      	adds	r2, #1
 80043fe:	60e2      	str	r2, [r4, #12]
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff ff1b 	bl	800423c <d_type>
 8004406:	2125      	movs	r1, #37	; 0x25
 8004408:	4602      	mov	r2, r0
 800440a:	2300      	movs	r3, #0
 800440c:	4620      	mov	r0, r4
 800440e:	f7ff f961 	bl	80036d4 <d_make_comp>
 8004412:	9001      	str	r0, [sp, #4]
 8004414:	e7b8      	b.n	8004388 <d_type+0x14c>
 8004416:	1c53      	adds	r3, r2, #1
 8004418:	60e3      	str	r3, [r4, #12]
 800441a:	7853      	ldrb	r3, [r2, #1]
 800441c:	2101      	movs	r1, #1
 800441e:	2b59      	cmp	r3, #89	; 0x59
 8004420:	bf04      	itt	eq
 8004422:	3202      	addeq	r2, #2
 8004424:	60e2      	streq	r2, [r4, #12]
 8004426:	4620      	mov	r0, r4
 8004428:	f000 facc 	bl	80049c4 <d_bare_function_type>
 800442c:	4601      	mov	r1, r0
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff fa10 	bl	8003854 <d_ref_qualifier>
 8004434:	68e3      	ldr	r3, [r4, #12]
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	2a45      	cmp	r2, #69	; 0x45
 800443a:	f000 8239 	beq.w	80048b0 <d_type+0x674>
 800443e:	2000      	movs	r0, #0
 8004440:	e7b2      	b.n	80043a8 <d_type+0x16c>
 8004442:	3201      	adds	r2, #1
 8004444:	60e2      	str	r2, [r4, #12]
 8004446:	4620      	mov	r0, r4
 8004448:	f7ff fef8 	bl	800423c <d_type>
 800444c:	2126      	movs	r1, #38	; 0x26
 800444e:	4602      	mov	r2, r0
 8004450:	2300      	movs	r3, #0
 8004452:	4620      	mov	r0, r4
 8004454:	f7ff f93e 	bl	80036d4 <d_make_comp>
 8004458:	9001      	str	r0, [sp, #4]
 800445a:	e795      	b.n	8004388 <d_type+0x14c>
 800445c:	1c53      	adds	r3, r2, #1
 800445e:	60e3      	str	r3, [r4, #12]
 8004460:	7853      	ldrb	r3, [r2, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f43f af77 	beq.w	8004356 <d_type+0x11a>
 8004468:	1c93      	adds	r3, r2, #2
 800446a:	60e3      	str	r3, [r4, #12]
 800446c:	7853      	ldrb	r3, [r2, #1]
 800446e:	3b46      	subs	r3, #70	; 0x46
 8004470:	2b30      	cmp	r3, #48	; 0x30
 8004472:	f63f af70 	bhi.w	8004356 <d_type+0x11a>
 8004476:	a101      	add	r1, pc, #4	; (adr r1, 800447c <d_type+0x240>)
 8004478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800447c:	08004793 	.word	0x08004793
 8004480:	08004357 	.word	0x08004357
 8004484:	08004357 	.word	0x08004357
 8004488:	08004357 	.word	0x08004357
 800448c:	08004357 	.word	0x08004357
 8004490:	08004357 	.word	0x08004357
 8004494:	08004357 	.word	0x08004357
 8004498:	08004357 	.word	0x08004357
 800449c:	08004357 	.word	0x08004357
 80044a0:	08004357 	.word	0x08004357
 80044a4:	08004357 	.word	0x08004357
 80044a8:	08004357 	.word	0x08004357
 80044ac:	08004357 	.word	0x08004357
 80044b0:	08004357 	.word	0x08004357
 80044b4:	08004331 	.word	0x08004331
 80044b8:	08004357 	.word	0x08004357
 80044bc:	08004357 	.word	0x08004357
 80044c0:	08004357 	.word	0x08004357
 80044c4:	08004357 	.word	0x08004357
 80044c8:	08004357 	.word	0x08004357
 80044cc:	08004357 	.word	0x08004357
 80044d0:	08004357 	.word	0x08004357
 80044d4:	08004357 	.word	0x08004357
 80044d8:	08004357 	.word	0x08004357
 80044dc:	08004357 	.word	0x08004357
 80044e0:	08004357 	.word	0x08004357
 80044e4:	08004357 	.word	0x08004357
 80044e8:	08004787 	.word	0x08004787
 80044ec:	08004357 	.word	0x08004357
 80044f0:	08004357 	.word	0x08004357
 80044f4:	0800475f 	.word	0x0800475f
 80044f8:	08004737 	.word	0x08004737
 80044fc:	0800470f 	.word	0x0800470f
 8004500:	08004357 	.word	0x08004357
 8004504:	080046e7 	.word	0x080046e7
 8004508:	080046b7 	.word	0x080046b7
 800450c:	08004357 	.word	0x08004357
 8004510:	08004357 	.word	0x08004357
 8004514:	08004357 	.word	0x08004357
 8004518:	08004357 	.word	0x08004357
 800451c:	08004869 	.word	0x08004869
 8004520:	08004357 	.word	0x08004357
 8004524:	08004853 	.word	0x08004853
 8004528:	08004357 	.word	0x08004357
 800452c:	08004357 	.word	0x08004357
 8004530:	0800482f 	.word	0x0800482f
 8004534:	08004331 	.word	0x08004331
 8004538:	08004357 	.word	0x08004357
 800453c:	080047f9 	.word	0x080047f9
 8004540:	3201      	adds	r2, #1
 8004542:	60e2      	str	r2, [r4, #12]
 8004544:	4620      	mov	r0, r4
 8004546:	f7ff fe79 	bl	800423c <d_type>
 800454a:	ae01      	add	r6, sp, #4
 800454c:	4607      	mov	r7, r0
 800454e:	4631      	mov	r1, r6
 8004550:	4620      	mov	r0, r4
 8004552:	2201      	movs	r2, #1
 8004554:	f7ff f924 	bl	80037a0 <d_cv_qualifiers>
 8004558:	4605      	mov	r5, r0
 800455a:	2800      	cmp	r0, #0
 800455c:	f43f af6f 	beq.w	800443e <d_type+0x202>
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff fe6b 	bl	800423c <d_type>
 8004566:	6028      	str	r0, [r5, #0]
 8004568:	2800      	cmp	r0, #0
 800456a:	f43f af68 	beq.w	800443e <d_type+0x202>
 800456e:	42b5      	cmp	r5, r6
 8004570:	d015      	beq.n	800459e <d_type+0x362>
 8004572:	7801      	ldrb	r1, [r0, #0]
 8004574:	f1a1 021f 	sub.w	r2, r1, #31
 8004578:	2a01      	cmp	r2, #1
 800457a:	f240 81a4 	bls.w	80048c6 <d_type+0x68a>
 800457e:	2929      	cmp	r1, #41	; 0x29
 8004580:	d00d      	beq.n	800459e <d_type+0x362>
 8004582:	9a01      	ldr	r2, [sp, #4]
 8004584:	2a00      	cmp	r2, #0
 8004586:	f43f af5a 	beq.w	800443e <d_type+0x202>
 800458a:	6a23      	ldr	r3, [r4, #32]
 800458c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800458e:	428b      	cmp	r3, r1
 8004590:	f6bf af55 	bge.w	800443e <d_type+0x202>
 8004594:	69e1      	ldr	r1, [r4, #28]
 8004596:	1c58      	adds	r0, r3, #1
 8004598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800459c:	6220      	str	r0, [r4, #32]
 800459e:	463a      	mov	r2, r7
 80045a0:	4620      	mov	r0, r4
 80045a2:	212b      	movs	r1, #43	; 0x2b
 80045a4:	9b01      	ldr	r3, [sp, #4]
 80045a6:	f7ff f895 	bl	80036d4 <d_make_comp>
 80045aa:	e6fd      	b.n	80043a8 <d_type+0x16c>
 80045ac:	3201      	adds	r2, #1
 80045ae:	60e2      	str	r2, [r4, #12]
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7ff fe43 	bl	800423c <d_type>
 80045b6:	2122      	movs	r1, #34	; 0x22
 80045b8:	4602      	mov	r2, r0
 80045ba:	2300      	movs	r3, #0
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff f889 	bl	80036d4 <d_make_comp>
 80045c2:	9001      	str	r0, [sp, #4]
 80045c4:	e6e0      	b.n	8004388 <d_type+0x14c>
 80045c6:	3201      	adds	r2, #1
 80045c8:	60e2      	str	r2, [r4, #12]
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7ff fe36 	bl	800423c <d_type>
 80045d0:	2123      	movs	r1, #35	; 0x23
 80045d2:	4602      	mov	r2, r0
 80045d4:	2300      	movs	r3, #0
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7ff f87c 	bl	80036d4 <d_make_comp>
 80045dc:	9001      	str	r0, [sp, #4]
 80045de:	e6d3      	b.n	8004388 <d_type+0x14c>
 80045e0:	3201      	adds	r2, #1
 80045e2:	60e2      	str	r2, [r4, #12]
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff fe29 	bl	800423c <d_type>
 80045ea:	2124      	movs	r1, #36	; 0x24
 80045ec:	4602      	mov	r2, r0
 80045ee:	2300      	movs	r3, #0
 80045f0:	4620      	mov	r0, r4
 80045f2:	f7ff f86f 	bl	80036d4 <d_make_comp>
 80045f6:	9001      	str	r0, [sp, #4]
 80045f8:	e6c6      	b.n	8004388 <d_type+0x14c>
 80045fa:	7853      	ldrb	r3, [r2, #1]
 80045fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004600:	2a09      	cmp	r2, #9
 8004602:	d905      	bls.n	8004610 <d_type+0x3d4>
 8004604:	2b5f      	cmp	r3, #95	; 0x5f
 8004606:	d003      	beq.n	8004610 <d_type+0x3d4>
 8004608:	3b41      	subs	r3, #65	; 0x41
 800460a:	2b19      	cmp	r3, #25
 800460c:	f200 8163 	bhi.w	80048d6 <d_type+0x69a>
 8004610:	4620      	mov	r0, r4
 8004612:	2100      	movs	r1, #0
 8004614:	f7ff f984 	bl	8003920 <d_substitution>
 8004618:	68e3      	ldr	r3, [r4, #12]
 800461a:	9001      	str	r0, [sp, #4]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	4605      	mov	r5, r0
 8004620:	2b49      	cmp	r3, #73	; 0x49
 8004622:	f47f ae99 	bne.w	8004358 <d_type+0x11c>
 8004626:	4620      	mov	r0, r4
 8004628:	f7ff fc4a 	bl	8003ec0 <d_template_args>
 800462c:	462a      	mov	r2, r5
 800462e:	4603      	mov	r3, r0
 8004630:	2104      	movs	r1, #4
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff f84e 	bl	80036d4 <d_make_comp>
 8004638:	9001      	str	r0, [sp, #4]
 800463a:	e6a5      	b.n	8004388 <d_type+0x14c>
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff fa97 	bl	8003b70 <d_template_param>
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	9001      	str	r0, [sp, #4]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b49      	cmp	r3, #73	; 0x49
 800464a:	f47f ae9d 	bne.w	8004388 <d_type+0x14c>
 800464e:	2800      	cmp	r0, #0
 8004650:	f43f ae81 	beq.w	8004356 <d_type+0x11a>
 8004654:	6a23      	ldr	r3, [r4, #32]
 8004656:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004658:	4293      	cmp	r3, r2
 800465a:	f6bf ae7c 	bge.w	8004356 <d_type+0x11a>
 800465e:	69e2      	ldr	r2, [r4, #28]
 8004660:	1c59      	adds	r1, r3, #1
 8004662:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8004666:	9d01      	ldr	r5, [sp, #4]
 8004668:	6221      	str	r1, [r4, #32]
 800466a:	e7dc      	b.n	8004626 <d_type+0x3ea>
 800466c:	3201      	adds	r2, #1
 800466e:	60e2      	str	r2, [r4, #12]
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff faaf 	bl	8003bd4 <d_source_name>
 8004676:	9001      	str	r0, [sp, #4]
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff fddf 	bl	800423c <d_type>
 800467e:	2121      	movs	r1, #33	; 0x21
 8004680:	4602      	mov	r2, r0
 8004682:	9b01      	ldr	r3, [sp, #4]
 8004684:	4620      	mov	r0, r4
 8004686:	f7ff f825 	bl	80036d4 <d_make_comp>
 800468a:	9001      	str	r0, [sp, #4]
 800468c:	e67c      	b.n	8004388 <d_type+0x14c>
 800468e:	6961      	ldr	r1, [r4, #20]
 8004690:	69a0      	ldr	r0, [r4, #24]
 8004692:	3b61      	subs	r3, #97	; 0x61
 8004694:	4da0      	ldr	r5, [pc, #640]	; (8004918 <d_type+0x6dc>)
 8004696:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800469a:	4281      	cmp	r1, r0
 800469c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80046a0:	f2c0 80f4 	blt.w	800488c <d_type+0x650>
 80046a4:	2000      	movs	r0, #0
 80046a6:	6843      	ldr	r3, [r0, #4]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046ac:	3201      	adds	r2, #1
 80046ae:	440b      	add	r3, r1
 80046b0:	60e2      	str	r2, [r4, #12]
 80046b2:	6323      	str	r3, [r4, #48]	; 0x30
 80046b4:	e650      	b.n	8004358 <d_type+0x11c>
 80046b6:	6963      	ldr	r3, [r4, #20]
 80046b8:	69a2      	ldr	r2, [r4, #24]
 80046ba:	4293      	cmp	r3, r2
 80046bc:	f280 80f5 	bge.w	80048aa <d_type+0x66e>
 80046c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80046c4:	6921      	ldr	r1, [r4, #16]
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	3301      	adds	r3, #1
 80046ca:	1888      	adds	r0, r1, r2
 80046cc:	6163      	str	r3, [r4, #20]
 80046ce:	f000 80ed 	beq.w	80048ac <d_type+0x670>
 80046d2:	4d92      	ldr	r5, [pc, #584]	; (800491c <d_type+0x6e0>)
 80046d4:	2327      	movs	r3, #39	; 0x27
 80046d6:	548b      	strb	r3, [r1, r2]
 80046d8:	462b      	mov	r3, r5
 80046da:	6045      	str	r5, [r0, #4]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046e0:	4413      	add	r3, r2
 80046e2:	6323      	str	r3, [r4, #48]	; 0x30
 80046e4:	e638      	b.n	8004358 <d_type+0x11c>
 80046e6:	6963      	ldr	r3, [r4, #20]
 80046e8:	69a2      	ldr	r2, [r4, #24]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	f280 80dd 	bge.w	80048aa <d_type+0x66e>
 80046f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80046f4:	6921      	ldr	r1, [r4, #16]
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	3301      	adds	r3, #1
 80046fa:	1888      	adds	r0, r1, r2
 80046fc:	6163      	str	r3, [r4, #20]
 80046fe:	f000 80d5 	beq.w	80048ac <d_type+0x670>
 8004702:	4d87      	ldr	r5, [pc, #540]	; (8004920 <d_type+0x6e4>)
 8004704:	2327      	movs	r3, #39	; 0x27
 8004706:	548b      	strb	r3, [r1, r2]
 8004708:	462b      	mov	r3, r5
 800470a:	6045      	str	r5, [r0, #4]
 800470c:	e7e6      	b.n	80046dc <d_type+0x4a0>
 800470e:	6963      	ldr	r3, [r4, #20]
 8004710:	69a2      	ldr	r2, [r4, #24]
 8004712:	4293      	cmp	r3, r2
 8004714:	f280 80c9 	bge.w	80048aa <d_type+0x66e>
 8004718:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800471c:	6921      	ldr	r1, [r4, #16]
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	3301      	adds	r3, #1
 8004722:	1888      	adds	r0, r1, r2
 8004724:	6163      	str	r3, [r4, #20]
 8004726:	f000 80c1 	beq.w	80048ac <d_type+0x670>
 800472a:	4d7e      	ldr	r5, [pc, #504]	; (8004924 <d_type+0x6e8>)
 800472c:	2327      	movs	r3, #39	; 0x27
 800472e:	548b      	strb	r3, [r1, r2]
 8004730:	462b      	mov	r3, r5
 8004732:	6045      	str	r5, [r0, #4]
 8004734:	e7d2      	b.n	80046dc <d_type+0x4a0>
 8004736:	6963      	ldr	r3, [r4, #20]
 8004738:	69a2      	ldr	r2, [r4, #24]
 800473a:	4293      	cmp	r3, r2
 800473c:	f280 80b5 	bge.w	80048aa <d_type+0x66e>
 8004740:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004744:	6921      	ldr	r1, [r4, #16]
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	3301      	adds	r3, #1
 800474a:	1888      	adds	r0, r1, r2
 800474c:	6163      	str	r3, [r4, #20]
 800474e:	f000 80ad 	beq.w	80048ac <d_type+0x670>
 8004752:	4d75      	ldr	r5, [pc, #468]	; (8004928 <d_type+0x6ec>)
 8004754:	2327      	movs	r3, #39	; 0x27
 8004756:	548b      	strb	r3, [r1, r2]
 8004758:	462b      	mov	r3, r5
 800475a:	6045      	str	r5, [r0, #4]
 800475c:	e7be      	b.n	80046dc <d_type+0x4a0>
 800475e:	6963      	ldr	r3, [r4, #20]
 8004760:	69a2      	ldr	r2, [r4, #24]
 8004762:	4293      	cmp	r3, r2
 8004764:	f280 80a1 	bge.w	80048aa <d_type+0x66e>
 8004768:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800476c:	6921      	ldr	r1, [r4, #16]
 800476e:	0092      	lsls	r2, r2, #2
 8004770:	3301      	adds	r3, #1
 8004772:	1888      	adds	r0, r1, r2
 8004774:	6163      	str	r3, [r4, #20]
 8004776:	f000 8099 	beq.w	80048ac <d_type+0x670>
 800477a:	4d6c      	ldr	r5, [pc, #432]	; (800492c <d_type+0x6f0>)
 800477c:	2327      	movs	r3, #39	; 0x27
 800477e:	548b      	strb	r3, [r1, r2]
 8004780:	462b      	mov	r3, r5
 8004782:	6045      	str	r5, [r0, #4]
 8004784:	e7aa      	b.n	80046dc <d_type+0x4a0>
 8004786:	4620      	mov	r0, r4
 8004788:	4969      	ldr	r1, [pc, #420]	; (8004930 <d_type+0x6f4>)
 800478a:	2204      	movs	r2, #4
 800478c:	f7fe ffee 	bl	800376c <d_make_name>
 8004790:	e5e2      	b.n	8004358 <d_type+0x11c>
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	69a1      	ldr	r1, [r4, #24]
 8004796:	428b      	cmp	r3, r1
 8004798:	f280 80a9 	bge.w	80048ee <d_type+0x6b2>
 800479c:	6921      	ldr	r1, [r4, #16]
 800479e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80047a2:	3301      	adds	r3, #1
 80047a4:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80047a8:	6163      	str	r3, [r4, #20]
 80047aa:	232c      	movs	r3, #44	; 0x2c
 80047ac:	9501      	str	r5, [sp, #4]
 80047ae:	702b      	strb	r3, [r5, #0]
 80047b0:	7893      	ldrb	r3, [r2, #2]
 80047b2:	3b30      	subs	r3, #48	; 0x30
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	bf8c      	ite	hi
 80047b8:	2300      	movhi	r3, #0
 80047ba:	2301      	movls	r3, #1
 80047bc:	812b      	strh	r3, [r5, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 8097 	bne.w	80048f2 <d_type+0x6b6>
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7ff fd39 	bl	800423c <d_type>
 80047ca:	6068      	str	r0, [r5, #4]
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f43f adc0 	beq.w	8004356 <d_type+0x11a>
 80047d6:	f104 000c 	add.w	r0, r4, #12
 80047da:	f7ff f96f 	bl	8003abc <d_number.isra.0>
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	b132      	cbz	r2, 80047f2 <d_type+0x5b6>
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	60e2      	str	r2, [r4, #12]
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	f1b2 0373 	subs.w	r3, r2, #115	; 0x73
 80047ee:	425a      	negs	r2, r3
 80047f0:	415a      	adcs	r2, r3
 80047f2:	9801      	ldr	r0, [sp, #4]
 80047f4:	8142      	strh	r2, [r0, #10]
 80047f6:	e5af      	b.n	8004358 <d_type+0x11c>
 80047f8:	7893      	ldrb	r3, [r2, #2]
 80047fa:	2b5f      	cmp	r3, #95	; 0x5f
 80047fc:	d07f      	beq.n	80048fe <d_type+0x6c2>
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff f982 	bl	8003b08 <d_number_component>
 8004804:	4605      	mov	r5, r0
 8004806:	2d00      	cmp	r5, #0
 8004808:	f000 8083 	beq.w	8004912 <d_type+0x6d6>
 800480c:	68e3      	ldr	r3, [r4, #12]
 800480e:	781a      	ldrb	r2, [r3, #0]
 8004810:	2a5f      	cmp	r2, #95	; 0x5f
 8004812:	f47f ae14 	bne.w	800443e <d_type+0x202>
 8004816:	3301      	adds	r3, #1
 8004818:	60e3      	str	r3, [r4, #12]
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff fd0e 	bl	800423c <d_type>
 8004820:	462a      	mov	r2, r5
 8004822:	4603      	mov	r3, r0
 8004824:	212d      	movs	r1, #45	; 0x2d
 8004826:	4620      	mov	r0, r4
 8004828:	f7fe ff54 	bl	80036d4 <d_make_comp>
 800482c:	e5bc      	b.n	80043a8 <d_type+0x16c>
 800482e:	6963      	ldr	r3, [r4, #20]
 8004830:	69a2      	ldr	r2, [r4, #24]
 8004832:	4293      	cmp	r3, r2
 8004834:	da39      	bge.n	80048aa <d_type+0x66e>
 8004836:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800483a:	6921      	ldr	r1, [r4, #16]
 800483c:	0092      	lsls	r2, r2, #2
 800483e:	3301      	adds	r3, #1
 8004840:	1888      	adds	r0, r1, r2
 8004842:	6163      	str	r3, [r4, #20]
 8004844:	d032      	beq.n	80048ac <d_type+0x670>
 8004846:	4d3b      	ldr	r5, [pc, #236]	; (8004934 <d_type+0x6f8>)
 8004848:	2327      	movs	r3, #39	; 0x27
 800484a:	548b      	strb	r3, [r1, r2]
 800484c:	462b      	mov	r3, r5
 800484e:	6045      	str	r5, [r0, #4]
 8004850:	e744      	b.n	80046dc <d_type+0x4a0>
 8004852:	4620      	mov	r0, r4
 8004854:	f7ff fcf2 	bl	800423c <d_type>
 8004858:	2149      	movs	r1, #73	; 0x49
 800485a:	4602      	mov	r2, r0
 800485c:	2300      	movs	r3, #0
 800485e:	4620      	mov	r0, r4
 8004860:	f7fe ff38 	bl	80036d4 <d_make_comp>
 8004864:	9001      	str	r0, [sp, #4]
 8004866:	e58f      	b.n	8004388 <d_type+0x14c>
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	69a2      	ldr	r2, [r4, #24]
 800486c:	4293      	cmp	r3, r2
 800486e:	da1c      	bge.n	80048aa <d_type+0x66e>
 8004870:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004874:	6921      	ldr	r1, [r4, #16]
 8004876:	0092      	lsls	r2, r2, #2
 8004878:	3301      	adds	r3, #1
 800487a:	1888      	adds	r0, r1, r2
 800487c:	6163      	str	r3, [r4, #20]
 800487e:	d015      	beq.n	80048ac <d_type+0x670>
 8004880:	4d2d      	ldr	r5, [pc, #180]	; (8004938 <d_type+0x6fc>)
 8004882:	2327      	movs	r3, #39	; 0x27
 8004884:	548b      	strb	r3, [r1, r2]
 8004886:	462b      	mov	r3, r5
 8004888:	6045      	str	r5, [r0, #4]
 800488a:	e727      	b.n	80046dc <d_type+0x4a0>
 800488c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8004890:	6925      	ldr	r5, [r4, #16]
 8004892:	3101      	adds	r1, #1
 8004894:	0080      	lsls	r0, r0, #2
 8004896:	6161      	str	r1, [r4, #20]
 8004898:	1829      	adds	r1, r5, r0
 800489a:	d037      	beq.n	800490c <d_type+0x6d0>
 800489c:	2627      	movs	r6, #39	; 0x27
 800489e:	542e      	strb	r6, [r5, r0]
 80048a0:	4608      	mov	r0, r1
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	e700      	b.n	80046a8 <d_type+0x46c>
 80048a6:	2500      	movs	r5, #0
 80048a8:	e59c      	b.n	80043e4 <d_type+0x1a8>
 80048aa:	2000      	movs	r0, #0
 80048ac:	6843      	ldr	r3, [r0, #4]
 80048ae:	e715      	b.n	80046dc <d_type+0x4a0>
 80048b0:	3301      	adds	r3, #1
 80048b2:	60e3      	str	r3, [r4, #12]
 80048b4:	e578      	b.n	80043a8 <d_type+0x16c>
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 fd92 	bl	80053e0 <d_expression>
 80048bc:	4605      	mov	r5, r0
 80048be:	2800      	cmp	r0, #0
 80048c0:	f47f ad8c 	bne.w	80043dc <d_type+0x1a0>
 80048c4:	e5bb      	b.n	800443e <d_type+0x202>
 80048c6:	9901      	ldr	r1, [sp, #4]
 80048c8:	6842      	ldr	r2, [r0, #4]
 80048ca:	6041      	str	r1, [r0, #4]
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	7811      	ldrb	r1, [r2, #0]
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	602a      	str	r2, [r5, #0]
 80048d4:	e653      	b.n	800457e <d_type+0x342>
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7ff fb50 	bl	8003f7c <d_name>
 80048dc:	9001      	str	r0, [sp, #4]
 80048de:	2800      	cmp	r0, #0
 80048e0:	f43f ad39 	beq.w	8004356 <d_type+0x11a>
 80048e4:	7803      	ldrb	r3, [r0, #0]
 80048e6:	2b18      	cmp	r3, #24
 80048e8:	f47f ad50 	bne.w	800438c <d_type+0x150>
 80048ec:	e534      	b.n	8004358 <d_type+0x11c>
 80048ee:	2500      	movs	r5, #0
 80048f0:	e75b      	b.n	80047aa <d_type+0x56e>
 80048f2:	f104 000c 	add.w	r0, r4, #12
 80048f6:	f7ff f8e1 	bl	8003abc <d_number.isra.0>
 80048fa:	9d01      	ldr	r5, [sp, #4]
 80048fc:	e762      	b.n	80047c4 <d_type+0x588>
 80048fe:	3203      	adds	r2, #3
 8004900:	60e2      	str	r2, [r4, #12]
 8004902:	4620      	mov	r0, r4
 8004904:	f000 fd6c 	bl	80053e0 <d_expression>
 8004908:	4605      	mov	r5, r0
 800490a:	e77c      	b.n	8004806 <d_type+0x5ca>
 800490c:	684b      	ldr	r3, [r1, #4]
 800490e:	4608      	mov	r0, r1
 8004910:	e6ca      	b.n	80046a8 <d_type+0x46c>
 8004912:	4628      	mov	r0, r5
 8004914:	e548      	b.n	80043a8 <d_type+0x16c>
 8004916:	bf00      	nop
 8004918:	0800c734 	.word	0x0800c734
 800491c:	0800c9a0 	.word	0x0800c9a0
 8004920:	0800c978 	.word	0x0800c978
 8004924:	0800c93c 	.word	0x0800c93c
 8004928:	0800c964 	.word	0x0800c964
 800492c:	0800c950 	.word	0x0800c950
 8004930:	0800cde0 	.word	0x0800cde0
 8004934:	0800c98c 	.word	0x0800c98c
 8004938:	0800c9b4 	.word	0x0800c9b4

0800493c <d_parmlist>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	2300      	movs	r3, #0
 8004940:	b082      	sub	sp, #8
 8004942:	68c2      	ldr	r2, [r0, #12]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	7813      	ldrb	r3, [r2, #0]
 8004948:	4604      	mov	r4, r0
 800494a:	b34b      	cbz	r3, 80049a0 <d_parmlist+0x64>
 800494c:	2b45      	cmp	r3, #69	; 0x45
 800494e:	d027      	beq.n	80049a0 <d_parmlist+0x64>
 8004950:	2b2e      	cmp	r3, #46	; 0x2e
 8004952:	d025      	beq.n	80049a0 <d_parmlist+0x64>
 8004954:	ae01      	add	r6, sp, #4
 8004956:	e017      	b.n	8004988 <d_parmlist+0x4c>
 8004958:	2b4f      	cmp	r3, #79	; 0x4f
 800495a:	d017      	beq.n	800498c <d_parmlist+0x50>
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff fc6d 	bl	800423c <d_type>
 8004962:	4605      	mov	r5, r0
 8004964:	212e      	movs	r1, #46	; 0x2e
 8004966:	4620      	mov	r0, r4
 8004968:	462a      	mov	r2, r5
 800496a:	2300      	movs	r3, #0
 800496c:	b1c5      	cbz	r5, 80049a0 <d_parmlist+0x64>
 800496e:	f7fe feb1 	bl	80036d4 <d_make_comp>
 8004972:	6030      	str	r0, [r6, #0]
 8004974:	b1a0      	cbz	r0, 80049a0 <d_parmlist+0x64>
 8004976:	68e2      	ldr	r2, [r4, #12]
 8004978:	f100 0608 	add.w	r6, r0, #8
 800497c:	7813      	ldrb	r3, [r2, #0]
 800497e:	b143      	cbz	r3, 8004992 <d_parmlist+0x56>
 8004980:	2b45      	cmp	r3, #69	; 0x45
 8004982:	d006      	beq.n	8004992 <d_parmlist+0x56>
 8004984:	2b2e      	cmp	r3, #46	; 0x2e
 8004986:	d004      	beq.n	8004992 <d_parmlist+0x56>
 8004988:	2b52      	cmp	r3, #82	; 0x52
 800498a:	d1e5      	bne.n	8004958 <d_parmlist+0x1c>
 800498c:	7853      	ldrb	r3, [r2, #1]
 800498e:	2b45      	cmp	r3, #69	; 0x45
 8004990:	d1e4      	bne.n	800495c <d_parmlist+0x20>
 8004992:	9b01      	ldr	r3, [sp, #4]
 8004994:	b123      	cbz	r3, 80049a0 <d_parmlist+0x64>
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	b12a      	cbz	r2, 80049a6 <d_parmlist+0x6a>
 800499a:	4618      	mov	r0, r3
 800499c:	b002      	add	sp, #8
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	2000      	movs	r0, #0
 80049a2:	b002      	add	sp, #8
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	7808      	ldrb	r0, [r1, #0]
 80049aa:	2827      	cmp	r0, #39	; 0x27
 80049ac:	d1f5      	bne.n	800499a <d_parmlist+0x5e>
 80049ae:	6849      	ldr	r1, [r1, #4]
 80049b0:	7c08      	ldrb	r0, [r1, #16]
 80049b2:	2809      	cmp	r0, #9
 80049b4:	d1f1      	bne.n	800499a <d_parmlist+0x5e>
 80049b6:	684d      	ldr	r5, [r1, #4]
 80049b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049ba:	4618      	mov	r0, r3
 80049bc:	1b49      	subs	r1, r1, r5
 80049be:	6321      	str	r1, [r4, #48]	; 0x30
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	e7eb      	b.n	800499c <d_parmlist+0x60>

080049c4 <d_bare_function_type>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	68c3      	ldr	r3, [r0, #12]
 80049c8:	4604      	mov	r4, r0
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	2a4a      	cmp	r2, #74	; 0x4a
 80049ce:	d00d      	beq.n	80049ec <d_bare_function_type+0x28>
 80049d0:	b971      	cbnz	r1, 80049f0 <d_bare_function_type+0x2c>
 80049d2:	460d      	mov	r5, r1
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff ffb1 	bl	800493c <d_parmlist>
 80049da:	4603      	mov	r3, r0
 80049dc:	b170      	cbz	r0, 80049fc <d_bare_function_type+0x38>
 80049de:	4620      	mov	r0, r4
 80049e0:	462a      	mov	r2, r5
 80049e2:	2129      	movs	r1, #41	; 0x29
 80049e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049e8:	f7fe be74 	b.w	80036d4 <d_make_comp>
 80049ec:	3301      	adds	r3, #1
 80049ee:	60c3      	str	r3, [r0, #12]
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7ff fc23 	bl	800423c <d_type>
 80049f6:	4605      	mov	r5, r0
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d1eb      	bne.n	80049d4 <d_bare_function_type+0x10>
 80049fc:	2000      	movs	r0, #0
 80049fe:	bd70      	pop	{r4, r5, r6, pc}

08004a00 <d_encoding>:
 8004a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a04:	68c3      	ldr	r3, [r0, #12]
 8004a06:	4605      	mov	r5, r0
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	460e      	mov	r6, r1
 8004a0c:	2a47      	cmp	r2, #71	; 0x47
 8004a0e:	d034      	beq.n	8004a7a <d_encoding+0x7a>
 8004a10:	2a54      	cmp	r2, #84	; 0x54
 8004a12:	d032      	beq.n	8004a7a <d_encoding+0x7a>
 8004a14:	f7ff fab2 	bl	8003f7c <d_name>
 8004a18:	4604      	mov	r4, r0
 8004a1a:	b358      	cbz	r0, 8004a74 <d_encoding+0x74>
 8004a1c:	b116      	cbz	r6, 8004a24 <d_encoding+0x24>
 8004a1e:	68ab      	ldr	r3, [r5, #8]
 8004a20:	07db      	lsls	r3, r3, #31
 8004a22:	d51f      	bpl.n	8004a64 <d_encoding+0x64>
 8004a24:	68eb      	ldr	r3, [r5, #12]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	b323      	cbz	r3, 8004a74 <d_encoding+0x74>
 8004a2a:	2b45      	cmp	r3, #69	; 0x45
 8004a2c:	d022      	beq.n	8004a74 <d_encoding+0x74>
 8004a2e:	4621      	mov	r1, r4
 8004a30:	780b      	ldrb	r3, [r1, #0]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	f1a3 021c 	sub.w	r2, r3, #28
 8004a38:	f000 80a4 	beq.w	8004b84 <d_encoding+0x184>
 8004a3c:	f0c0 80a0 	bcc.w	8004b80 <d_encoding+0x180>
 8004a40:	2a04      	cmp	r2, #4
 8004a42:	f200 809d 	bhi.w	8004b80 <d_encoding+0x180>
 8004a46:	6849      	ldr	r1, [r1, #4]
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d1f1      	bne.n	8004a30 <d_encoding+0x30>
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7ff ffb9 	bl	80049c4 <d_bare_function_type>
 8004a52:	4622      	mov	r2, r4
 8004a54:	4603      	mov	r3, r0
 8004a56:	2103      	movs	r1, #3
 8004a58:	4628      	mov	r0, r5
 8004a5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5e:	f7fe be39 	b.w	80036d4 <d_make_comp>
 8004a62:	6864      	ldr	r4, [r4, #4]
 8004a64:	7823      	ldrb	r3, [r4, #0]
 8004a66:	f1a3 021c 	sub.w	r2, r3, #28
 8004a6a:	2a04      	cmp	r2, #4
 8004a6c:	d9f9      	bls.n	8004a62 <d_encoding+0x62>
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	f000 816e 	beq.w	8004d50 <d_encoding+0x350>
 8004a74:	4620      	mov	r0, r4
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004a7c:	f101 0214 	add.w	r2, r1, #20
 8004a80:	632a      	str	r2, [r5, #48]	; 0x30
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	2a54      	cmp	r2, #84	; 0x54
 8004a86:	d005      	beq.n	8004a94 <d_encoding+0x94>
 8004a88:	2a47      	cmp	r2, #71	; 0x47
 8004a8a:	f000 80ed 	beq.w	8004c68 <d_encoding+0x268>
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	60ea      	str	r2, [r5, #12]
 8004a98:	785a      	ldrb	r2, [r3, #1]
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	d0f7      	beq.n	8004a8e <d_encoding+0x8e>
 8004a9e:	1c9a      	adds	r2, r3, #2
 8004aa0:	60ea      	str	r2, [r5, #12]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	3b43      	subs	r3, #67	; 0x43
 8004aa6:	2b33      	cmp	r3, #51	; 0x33
 8004aa8:	d8f1      	bhi.n	8004a8e <d_encoding+0x8e>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <d_encoding+0xb0>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004fbd 	.word	0x08004fbd
 8004ab4:	08004a8f 	.word	0x08004a8f
 8004ab8:	08004a8f 	.word	0x08004a8f
 8004abc:	08004fa7 	.word	0x08004fa7
 8004ac0:	08004a8f 	.word	0x08004a8f
 8004ac4:	08004f91 	.word	0x08004f91
 8004ac8:	08004f7b 	.word	0x08004f7b
 8004acc:	08004f65 	.word	0x08004f65
 8004ad0:	08004a8f 	.word	0x08004a8f
 8004ad4:	08004a8f 	.word	0x08004a8f
 8004ad8:	08004a8f 	.word	0x08004a8f
 8004adc:	08004a8f 	.word	0x08004a8f
 8004ae0:	08004a8f 	.word	0x08004a8f
 8004ae4:	08004a8f 	.word	0x08004a8f
 8004ae8:	08004a8f 	.word	0x08004a8f
 8004aec:	08004a8f 	.word	0x08004a8f
 8004af0:	08004f4f 	.word	0x08004f4f
 8004af4:	08004f35 	.word	0x08004f35
 8004af8:	08004a8f 	.word	0x08004a8f
 8004afc:	08004f1b 	.word	0x08004f1b
 8004b00:	08004edf 	.word	0x08004edf
 8004b04:	08004a8f 	.word	0x08004a8f
 8004b08:	08004a8f 	.word	0x08004a8f
 8004b0c:	08004a8f 	.word	0x08004a8f
 8004b10:	08004a8f 	.word	0x08004a8f
 8004b14:	08004a8f 	.word	0x08004a8f
 8004b18:	08004a8f 	.word	0x08004a8f
 8004b1c:	08004a8f 	.word	0x08004a8f
 8004b20:	08004a8f 	.word	0x08004a8f
 8004b24:	08004a8f 	.word	0x08004a8f
 8004b28:	08004a8f 	.word	0x08004a8f
 8004b2c:	08004a8f 	.word	0x08004a8f
 8004b30:	08004eab 	.word	0x08004eab
 8004b34:	08004a8f 	.word	0x08004a8f
 8004b38:	08004a8f 	.word	0x08004a8f
 8004b3c:	08004a8f 	.word	0x08004a8f
 8004b40:	08004a8f 	.word	0x08004a8f
 8004b44:	08004ef5 	.word	0x08004ef5
 8004b48:	08004a8f 	.word	0x08004a8f
 8004b4c:	08004a8f 	.word	0x08004a8f
 8004b50:	08004a8f 	.word	0x08004a8f
 8004b54:	08004a8f 	.word	0x08004a8f
 8004b58:	08004a8f 	.word	0x08004a8f
 8004b5c:	08004a8f 	.word	0x08004a8f
 8004b60:	08004a8f 	.word	0x08004a8f
 8004b64:	08004a8f 	.word	0x08004a8f
 8004b68:	08004a8f 	.word	0x08004a8f
 8004b6c:	08004a8f 	.word	0x08004a8f
 8004b70:	08004a8f 	.word	0x08004a8f
 8004b74:	08004a8f 	.word	0x08004a8f
 8004b78:	08004a8f 	.word	0x08004a8f
 8004b7c:	08004e85 	.word	0x08004e85
 8004b80:	2100      	movs	r1, #0
 8004b82:	e763      	b.n	8004a4c <d_encoding+0x4c>
 8004b84:	684b      	ldr	r3, [r1, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80f4 	beq.w	8004d74 <d_encoding+0x374>
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	3a01      	subs	r2, #1
 8004b90:	2a32      	cmp	r2, #50	; 0x32
 8004b92:	f200 80ef 	bhi.w	8004d74 <d_encoding+0x374>
 8004b96:	a101      	add	r1, pc, #4	; (adr r1, 8004b9c <d_encoding+0x19c>)
 8004b98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004b9c:	08004d6d 	.word	0x08004d6d
 8004ba0:	08004d6d 	.word	0x08004d6d
 8004ba4:	08004d75 	.word	0x08004d75
 8004ba8:	08004d75 	.word	0x08004d75
 8004bac:	08004d75 	.word	0x08004d75
 8004bb0:	08004d75 	.word	0x08004d75
 8004bb4:	08004b81 	.word	0x08004b81
 8004bb8:	08004b81 	.word	0x08004b81
 8004bbc:	08004d75 	.word	0x08004d75
 8004bc0:	08004d75 	.word	0x08004d75
 8004bc4:	08004d75 	.word	0x08004d75
 8004bc8:	08004d75 	.word	0x08004d75
 8004bcc:	08004d75 	.word	0x08004d75
 8004bd0:	08004d75 	.word	0x08004d75
 8004bd4:	08004d75 	.word	0x08004d75
 8004bd8:	08004d75 	.word	0x08004d75
 8004bdc:	08004d75 	.word	0x08004d75
 8004be0:	08004d75 	.word	0x08004d75
 8004be4:	08004d75 	.word	0x08004d75
 8004be8:	08004d75 	.word	0x08004d75
 8004bec:	08004d75 	.word	0x08004d75
 8004bf0:	08004d75 	.word	0x08004d75
 8004bf4:	08004d75 	.word	0x08004d75
 8004bf8:	08004d75 	.word	0x08004d75
 8004bfc:	08004d75 	.word	0x08004d75
 8004c00:	08004d75 	.word	0x08004d75
 8004c04:	08004d75 	.word	0x08004d75
 8004c08:	08004d75 	.word	0x08004d75
 8004c0c:	08004d75 	.word	0x08004d75
 8004c10:	08004d75 	.word	0x08004d75
 8004c14:	08004d75 	.word	0x08004d75
 8004c18:	08004d75 	.word	0x08004d75
 8004c1c:	08004d75 	.word	0x08004d75
 8004c20:	08004d75 	.word	0x08004d75
 8004c24:	08004d75 	.word	0x08004d75
 8004c28:	08004d75 	.word	0x08004d75
 8004c2c:	08004d75 	.word	0x08004d75
 8004c30:	08004d75 	.word	0x08004d75
 8004c34:	08004d75 	.word	0x08004d75
 8004c38:	08004d75 	.word	0x08004d75
 8004c3c:	08004d75 	.word	0x08004d75
 8004c40:	08004d75 	.word	0x08004d75
 8004c44:	08004d75 	.word	0x08004d75
 8004c48:	08004d75 	.word	0x08004d75
 8004c4c:	08004d75 	.word	0x08004d75
 8004c50:	08004d75 	.word	0x08004d75
 8004c54:	08004d75 	.word	0x08004d75
 8004c58:	08004d75 	.word	0x08004d75
 8004c5c:	08004d75 	.word	0x08004d75
 8004c60:	08004d75 	.word	0x08004d75
 8004c64:	08004b81 	.word	0x08004b81
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	60ea      	str	r2, [r5, #12]
 8004c6c:	785a      	ldrb	r2, [r3, #1]
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	f43f af0d 	beq.w	8004a8e <d_encoding+0x8e>
 8004c74:	1c9a      	adds	r2, r3, #2
 8004c76:	60ea      	str	r2, [r5, #12]
 8004c78:	785a      	ldrb	r2, [r3, #1]
 8004c7a:	3a41      	subs	r2, #65	; 0x41
 8004c7c:	2a31      	cmp	r2, #49	; 0x31
 8004c7e:	f63f af06 	bhi.w	8004a8e <d_encoding+0x8e>
 8004c82:	a101      	add	r1, pc, #4	; (adr r1, 8004c88 <d_encoding+0x288>)
 8004c84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c88:	08004e41 	.word	0x08004e41
 8004c8c:	08004a8f 	.word	0x08004a8f
 8004c90:	08004a8f 	.word	0x08004a8f
 8004c94:	08004a8f 	.word	0x08004a8f
 8004c98:	08004a8f 	.word	0x08004a8f
 8004c9c:	08004a8f 	.word	0x08004a8f
 8004ca0:	08004a8f 	.word	0x08004a8f
 8004ca4:	08004a8f 	.word	0x08004a8f
 8004ca8:	08004a8f 	.word	0x08004a8f
 8004cac:	08004a8f 	.word	0x08004a8f
 8004cb0:	08004a8f 	.word	0x08004a8f
 8004cb4:	08004a8f 	.word	0x08004a8f
 8004cb8:	08004a8f 	.word	0x08004a8f
 8004cbc:	08004a8f 	.word	0x08004a8f
 8004cc0:	08004a8f 	.word	0x08004a8f
 8004cc4:	08004a8f 	.word	0x08004a8f
 8004cc8:	08004a8f 	.word	0x08004a8f
 8004ccc:	08004e23 	.word	0x08004e23
 8004cd0:	08004a8f 	.word	0x08004a8f
 8004cd4:	08004e59 	.word	0x08004e59
 8004cd8:	08004a8f 	.word	0x08004a8f
 8004cdc:	08004e0d 	.word	0x08004e0d
 8004ce0:	08004a8f 	.word	0x08004a8f
 8004ce4:	08004a8f 	.word	0x08004a8f
 8004ce8:	08004a8f 	.word	0x08004a8f
 8004cec:	08004a8f 	.word	0x08004a8f
 8004cf0:	08004a8f 	.word	0x08004a8f
 8004cf4:	08004a8f 	.word	0x08004a8f
 8004cf8:	08004a8f 	.word	0x08004a8f
 8004cfc:	08004a8f 	.word	0x08004a8f
 8004d00:	08004a8f 	.word	0x08004a8f
 8004d04:	08004a8f 	.word	0x08004a8f
 8004d08:	08004a8f 	.word	0x08004a8f
 8004d0c:	08004a8f 	.word	0x08004a8f
 8004d10:	08004a8f 	.word	0x08004a8f
 8004d14:	08004a8f 	.word	0x08004a8f
 8004d18:	08004a8f 	.word	0x08004a8f
 8004d1c:	08004a8f 	.word	0x08004a8f
 8004d20:	08004a8f 	.word	0x08004a8f
 8004d24:	08004a8f 	.word	0x08004a8f
 8004d28:	08004a8f 	.word	0x08004a8f
 8004d2c:	08004a8f 	.word	0x08004a8f
 8004d30:	08004a8f 	.word	0x08004a8f
 8004d34:	08004a8f 	.word	0x08004a8f
 8004d38:	08004a8f 	.word	0x08004a8f
 8004d3c:	08004a8f 	.word	0x08004a8f
 8004d40:	08004a8f 	.word	0x08004a8f
 8004d44:	08004a8f 	.word	0x08004a8f
 8004d48:	08004a8f 	.word	0x08004a8f
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	68a3      	ldr	r3, [r4, #8]
 8004d52:	781a      	ldrb	r2, [r3, #0]
 8004d54:	3a1c      	subs	r2, #28
 8004d56:	2a04      	cmp	r2, #4
 8004d58:	d804      	bhi.n	8004d64 <d_encoding+0x364>
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	3a1c      	subs	r2, #28
 8004d60:	2a04      	cmp	r2, #4
 8004d62:	d9fa      	bls.n	8004d5a <d_encoding+0x35a>
 8004d64:	60a3      	str	r3, [r4, #8]
 8004d66:	4620      	mov	r0, r4
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f47f af0c 	bne.w	8004b8c <d_encoding+0x18c>
 8004d74:	2101      	movs	r1, #1
 8004d76:	e669      	b.n	8004a4c <d_encoding+0x4c>
 8004d78:	f105 000c 	add.w	r0, r5, #12
 8004d7c:	f7fe fe9e 	bl	8003abc <d_number.isra.0>
 8004d80:	2801      	cmp	r0, #1
 8004d82:	f77f ae84 	ble.w	8004a8e <d_encoding+0x8e>
 8004d86:	68eb      	ldr	r3, [r5, #12]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	2a00      	cmp	r2, #0
 8004d8c:	f43f ae7f 	beq.w	8004a8e <d_encoding+0x8e>
 8004d90:	1c5e      	adds	r6, r3, #1
 8004d92:	60ee      	str	r6, [r5, #12]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b5f      	cmp	r3, #95	; 0x5f
 8004d98:	f47f ae79 	bne.w	8004a8e <d_encoding+0x8e>
 8004d9c:	1e47      	subs	r7, r0, #1
 8004d9e:	f04f 0800 	mov.w	r8, #0
 8004da2:	f04f 093f 	mov.w	r9, #63	; 0x3f
 8004da6:	7833      	ldrb	r3, [r6, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f43f ae70 	beq.w	8004a8e <d_encoding+0x8e>
 8004dae:	2b24      	cmp	r3, #36	; 0x24
 8004db0:	f000 8124 	beq.w	8004ffc <d_encoding+0x5fc>
 8004db4:	2400      	movs	r4, #0
 8004db6:	5d33      	ldrb	r3, [r6, r4]
 8004db8:	b123      	cbz	r3, 8004dc4 <d_encoding+0x3c4>
 8004dba:	2b24      	cmp	r3, #36	; 0x24
 8004dbc:	d002      	beq.n	8004dc4 <d_encoding+0x3c4>
 8004dbe:	3401      	adds	r4, #1
 8004dc0:	42bc      	cmp	r4, r7
 8004dc2:	dbf8      	blt.n	8004db6 <d_encoding+0x3b6>
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	4622      	mov	r2, r4
 8004dca:	f7fe fccf 	bl	800376c <d_make_name>
 8004dce:	68ee      	ldr	r6, [r5, #12]
 8004dd0:	1b3f      	subs	r7, r7, r4
 8004dd2:	4426      	add	r6, r4
 8004dd4:	60ee      	str	r6, [r5, #12]
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	f43f ae59 	beq.w	8004a8e <d_encoding+0x8e>
 8004ddc:	f1b8 0f00 	cmp.w	r8, #0
 8004de0:	f000 8129 	beq.w	8005036 <d_encoding+0x636>
 8004de4:	4642      	mov	r2, r8
 8004de6:	4603      	mov	r3, r0
 8004de8:	213e      	movs	r1, #62	; 0x3e
 8004dea:	4628      	mov	r0, r5
 8004dec:	f7fe fc72 	bl	80036d4 <d_make_comp>
 8004df0:	4680      	mov	r8, r0
 8004df2:	2800      	cmp	r0, #0
 8004df4:	f43f ae4b 	beq.w	8004a8e <d_encoding+0x8e>
 8004df8:	2f00      	cmp	r7, #0
 8004dfa:	dcd4      	bgt.n	8004da6 <d_encoding+0x3a6>
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	4642      	mov	r2, r8
 8004e00:	213d      	movs	r1, #61	; 0x3d
 8004e02:	2300      	movs	r3, #0
 8004e04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	f7fe bc64 	b.w	80036d4 <d_make_comp>
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f7ff f8b5 	bl	8003f7c <d_name>
 8004e12:	2113      	movs	r1, #19
 8004e14:	4602      	mov	r2, r0
 8004e16:	2300      	movs	r3, #0
 8004e18:	4628      	mov	r0, r5
 8004e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1e:	f7fe bc59 	b.w	80036d4 <d_make_comp>
 8004e22:	4628      	mov	r0, r5
 8004e24:	f7ff f8aa 	bl	8003f7c <d_name>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7fe fe6c 	bl	8003b08 <d_number_component>
 8004e30:	4622      	mov	r2, r4
 8004e32:	4603      	mov	r3, r0
 8004e34:	2116      	movs	r1, #22
 8004e36:	4628      	mov	r0, r5
 8004e38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	f7fe bc4a 	b.w	80036d4 <d_make_comp>
 8004e40:	4628      	mov	r0, r5
 8004e42:	2100      	movs	r1, #0
 8004e44:	f7ff fddc 	bl	8004a00 <d_encoding>
 8004e48:	2117      	movs	r1, #23
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4628      	mov	r0, r5
 8004e50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	f7fe bc3e 	b.w	80036d4 <d_make_comp>
 8004e58:	789a      	ldrb	r2, [r3, #2]
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	f000 80eb 	beq.w	800503a <d_encoding+0x63a>
 8004e64:	1cda      	adds	r2, r3, #3
 8004e66:	60ea      	str	r2, [r5, #12]
 8004e68:	789b      	ldrb	r3, [r3, #2]
 8004e6a:	2b6e      	cmp	r3, #110	; 0x6e
 8004e6c:	f040 80e5 	bne.w	800503a <d_encoding+0x63a>
 8004e70:	f7ff fdc6 	bl	8004a00 <d_encoding>
 8004e74:	2148      	movs	r1, #72	; 0x48
 8004e76:	4602      	mov	r2, r0
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e80:	f7fe bc28 	b.w	80036d4 <d_make_comp>
 8004e84:	4628      	mov	r0, r5
 8004e86:	2176      	movs	r1, #118	; 0x76
 8004e88:	f7fe fee6 	bl	8003c58 <d_call_offset>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	f43f adfe 	beq.w	8004a8e <d_encoding+0x8e>
 8004e92:	4628      	mov	r0, r5
 8004e94:	2100      	movs	r1, #0
 8004e96:	f7ff fdb3 	bl	8004a00 <d_encoding>
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea6:	f7fe bc15 	b.w	80036d4 <d_make_comp>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	2100      	movs	r1, #0
 8004eae:	f7fe fed3 	bl	8003c58 <d_call_offset>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f43f adeb 	beq.w	8004a8e <d_encoding+0x8e>
 8004eb8:	4628      	mov	r0, r5
 8004eba:	2100      	movs	r1, #0
 8004ebc:	f7fe fecc 	bl	8003c58 <d_call_offset>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f43f ade4 	beq.w	8004a8e <d_encoding+0x8e>
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	2100      	movs	r1, #0
 8004eca:	f7ff fd99 	bl	8004a00 <d_encoding>
 8004ece:	2111      	movs	r1, #17
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eda:	f7fe bbfb 	b.w	80036d4 <d_make_comp>
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f7ff f84c 	bl	8003f7c <d_name>
 8004ee4:	2115      	movs	r1, #21
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4628      	mov	r0, r5
 8004eec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	f7fe bbf0 	b.w	80036d4 <d_make_comp>
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	2168      	movs	r1, #104	; 0x68
 8004ef8:	f7fe feae 	bl	8003c58 <d_call_offset>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	f43f adc6 	beq.w	8004a8e <d_encoding+0x8e>
 8004f02:	4628      	mov	r0, r5
 8004f04:	2100      	movs	r1, #0
 8004f06:	f7ff fd7b 	bl	8004a00 <d_encoding>
 8004f0a:	210f      	movs	r1, #15
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	4628      	mov	r0, r5
 8004f12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f16:	f7fe bbdd 	b.w	80036d4 <d_make_comp>
 8004f1a:	310f      	adds	r1, #15
 8004f1c:	6329      	str	r1, [r5, #48]	; 0x30
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7ff f98c 	bl	800423c <d_type>
 8004f24:	2109      	movs	r1, #9
 8004f26:	4602      	mov	r2, r0
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	f7fe bbd0 	b.w	80036d4 <d_make_comp>
 8004f34:	310a      	adds	r1, #10
 8004f36:	6329      	str	r1, [r5, #48]	; 0x30
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7ff f97f 	bl	800423c <d_type>
 8004f3e:	210a      	movs	r1, #10
 8004f40:	4602      	mov	r2, r0
 8004f42:	2300      	movs	r3, #0
 8004f44:	4628      	mov	r0, r5
 8004f46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4a:	f7fe bbc3 	b.w	80036d4 <d_make_comp>
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7ff f974 	bl	800423c <d_type>
 8004f54:	210d      	movs	r1, #13
 8004f56:	4602      	mov	r2, r0
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	f7fe bbb8 	b.w	80036d4 <d_make_comp>
 8004f64:	4628      	mov	r0, r5
 8004f66:	f7ff f969 	bl	800423c <d_type>
 8004f6a:	2112      	movs	r1, #18
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4628      	mov	r0, r5
 8004f72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f76:	f7fe bbad 	b.w	80036d4 <d_make_comp>
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f7ff f95e 	bl	800423c <d_type>
 8004f80:	210c      	movs	r1, #12
 8004f82:	4602      	mov	r2, r0
 8004f84:	2300      	movs	r3, #0
 8004f86:	4628      	mov	r0, r5
 8004f88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	f7fe bba2 	b.w	80036d4 <d_make_comp>
 8004f90:	4628      	mov	r0, r5
 8004f92:	f7fe fff3 	bl	8003f7c <d_name>
 8004f96:	2114      	movs	r1, #20
 8004f98:	4602      	mov	r2, r0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa2:	f7fe bb97 	b.w	80036d4 <d_make_comp>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f7ff f948 	bl	800423c <d_type>
 8004fac:	210e      	movs	r1, #14
 8004fae:	4602      	mov	r2, r0
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	f7fe bb8c 	b.w	80036d4 <d_make_comp>
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f7ff f93d 	bl	800423c <d_type>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	f105 000c 	add.w	r0, r5, #12
 8004fc8:	f7fe fd78 	bl	8003abc <d_number.isra.0>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	f6ff ad5e 	blt.w	8004a8e <d_encoding+0x8e>
 8004fd2:	68ea      	ldr	r2, [r5, #12]
 8004fd4:	7811      	ldrb	r1, [r2, #0]
 8004fd6:	295f      	cmp	r1, #95	; 0x5f
 8004fd8:	f47f ad59 	bne.w	8004a8e <d_encoding+0x8e>
 8004fdc:	3201      	adds	r2, #1
 8004fde:	60ea      	str	r2, [r5, #12]
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f7ff f92b 	bl	800423c <d_type>
 8004fe6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004fe8:	4602      	mov	r2, r0
 8004fea:	1d59      	adds	r1, r3, #5
 8004fec:	6329      	str	r1, [r5, #48]	; 0x30
 8004fee:	4623      	mov	r3, r4
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	210b      	movs	r1, #11
 8004ff4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	f7fe bb6c 	b.w	80036d4 <d_make_comp>
 8004ffc:	7873      	ldrb	r3, [r6, #1]
 8004ffe:	2b53      	cmp	r3, #83	; 0x53
 8005000:	d027      	beq.n	8005052 <d_encoding+0x652>
 8005002:	2b5f      	cmp	r3, #95	; 0x5f
 8005004:	d023      	beq.n	800504e <d_encoding+0x64e>
 8005006:	2b24      	cmp	r3, #36	; 0x24
 8005008:	f47f ad41 	bne.w	8004a8e <d_encoding+0x8e>
 800500c:	461c      	mov	r4, r3
 800500e:	696b      	ldr	r3, [r5, #20]
 8005010:	69aa      	ldr	r2, [r5, #24]
 8005012:	4293      	cmp	r3, r2
 8005014:	da1f      	bge.n	8005056 <d_encoding+0x656>
 8005016:	692a      	ldr	r2, [r5, #16]
 8005018:	1c58      	adds	r0, r3, #1
 800501a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800501e:	6168      	str	r0, [r5, #20]
 8005020:	eb12 0081 	adds.w	r0, r2, r1, lsl #2
 8005024:	d017      	beq.n	8005056 <d_encoding+0x656>
 8005026:	f802 9021 	strb.w	r9, [r2, r1, lsl #2]
 800502a:	6044      	str	r4, [r0, #4]
 800502c:	68ee      	ldr	r6, [r5, #12]
 800502e:	3f02      	subs	r7, #2
 8005030:	3602      	adds	r6, #2
 8005032:	60ee      	str	r6, [r5, #12]
 8005034:	e6d2      	b.n	8004ddc <d_encoding+0x3dc>
 8005036:	4680      	mov	r8, r0
 8005038:	e6de      	b.n	8004df8 <d_encoding+0x3f8>
 800503a:	f7ff fce1 	bl	8004a00 <d_encoding>
 800503e:	2147      	movs	r1, #71	; 0x47
 8005040:	4602      	mov	r2, r0
 8005042:	2300      	movs	r3, #0
 8005044:	4628      	mov	r0, r5
 8005046:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504a:	f7fe bb43 	b.w	80036d4 <d_make_comp>
 800504e:	242e      	movs	r4, #46	; 0x2e
 8005050:	e7dd      	b.n	800500e <d_encoding+0x60e>
 8005052:	242f      	movs	r4, #47	; 0x2f
 8005054:	e7db      	b.n	800500e <d_encoding+0x60e>
 8005056:	68eb      	ldr	r3, [r5, #12]
 8005058:	2000      	movs	r0, #0
 800505a:	3302      	adds	r3, #2
 800505c:	60eb      	str	r3, [r5, #12]
 800505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005062:	bf00      	nop

08005064 <d_operator_name>:
 8005064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005068:	68c3      	ldr	r3, [r0, #12]
 800506a:	4680      	mov	r8, r0
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	b36a      	cbz	r2, 80050cc <d_operator_name+0x68>
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	60c2      	str	r2, [r0, #12]
 8005074:	7858      	ldrb	r0, [r3, #1]
 8005076:	f893 c000 	ldrb.w	ip, [r3]
 800507a:	b118      	cbz	r0, 8005084 <d_operator_name+0x20>
 800507c:	1c9a      	adds	r2, r3, #2
 800507e:	f8c8 200c 	str.w	r2, [r8, #12]
 8005082:	7858      	ldrb	r0, [r3, #1]
 8005084:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8005088:	d141      	bne.n	800510e <d_operator_name+0xaa>
 800508a:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
 800508e:	b2e3      	uxtb	r3, r4
 8005090:	2b09      	cmp	r3, #9
 8005092:	d81d      	bhi.n	80050d0 <d_operator_name+0x6c>
 8005094:	4640      	mov	r0, r8
 8005096:	f7fe fd9d 	bl	8003bd4 <d_source_name>
 800509a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800509e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80050a2:	4601      	mov	r1, r0
 80050a4:	4293      	cmp	r3, r2
 80050a6:	da2f      	bge.n	8005108 <d_operator_name+0xa4>
 80050a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80050ac:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80050b0:	3301      	adds	r3, #1
 80050b2:	0092      	lsls	r2, r2, #2
 80050b4:	f8c8 3014 	str.w	r3, [r8, #20]
 80050b8:	1883      	adds	r3, r0, r2
 80050ba:	d025      	beq.n	8005108 <d_operator_name+0xa4>
 80050bc:	b321      	cbz	r1, 8005108 <d_operator_name+0xa4>
 80050be:	2532      	movs	r5, #50	; 0x32
 80050c0:	5485      	strb	r5, [r0, r2]
 80050c2:	605c      	str	r4, [r3, #4]
 80050c4:	6099      	str	r1, [r3, #8]
 80050c6:	4618      	mov	r0, r3
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	4694      	mov	ip, r2
 80050ce:	4610      	mov	r0, r2
 80050d0:	4f23      	ldr	r7, [pc, #140]	; (8005160 <d_operator_name+0xfc>)
 80050d2:	253d      	movs	r5, #61	; 0x3d
 80050d4:	2300      	movs	r3, #0
 80050d6:	e004      	b.n	80050e2 <d_operator_name+0x7e>
 80050d8:	4564      	cmp	r4, ip
 80050da:	d912      	bls.n	8005102 <d_operator_name+0x9e>
 80050dc:	460d      	mov	r5, r1
 80050de:	42ab      	cmp	r3, r5
 80050e0:	d012      	beq.n	8005108 <d_operator_name+0xa4>
 80050e2:	1aea      	subs	r2, r5, r3
 80050e4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80050e8:	eb03 0162 	add.w	r1, r3, r2, asr #1
 80050ec:	010a      	lsls	r2, r1, #4
 80050ee:	58be      	ldr	r6, [r7, r2]
 80050f0:	443a      	add	r2, r7
 80050f2:	7834      	ldrb	r4, [r6, #0]
 80050f4:	45a4      	cmp	ip, r4
 80050f6:	d1ef      	bne.n	80050d8 <d_operator_name+0x74>
 80050f8:	7874      	ldrb	r4, [r6, #1]
 80050fa:	42a0      	cmp	r0, r4
 80050fc:	d017      	beq.n	800512e <d_operator_name+0xca>
 80050fe:	4284      	cmp	r4, r0
 8005100:	d8ec      	bhi.n	80050dc <d_operator_name+0x78>
 8005102:	1c4b      	adds	r3, r1, #1
 8005104:	42ab      	cmp	r3, r5
 8005106:	d1ec      	bne.n	80050e2 <d_operator_name+0x7e>
 8005108:	2000      	movs	r0, #0
 800510a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800510e:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 8005112:	d1dd      	bne.n	80050d0 <d_operator_name+0x6c>
 8005114:	2876      	cmp	r0, #118	; 0x76
 8005116:	d1db      	bne.n	80050d0 <d_operator_name+0x6c>
 8005118:	4640      	mov	r0, r8
 800511a:	f7ff f88f 	bl	800423c <d_type>
 800511e:	2133      	movs	r1, #51	; 0x33
 8005120:	4602      	mov	r2, r0
 8005122:	2300      	movs	r3, #0
 8005124:	4640      	mov	r0, r8
 8005126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	f7fe bad3 	b.w	80036d4 <d_make_comp>
 800512e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005132:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8005136:	428b      	cmp	r3, r1
 8005138:	dae6      	bge.n	8005108 <d_operator_name+0xa4>
 800513a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800513e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005142:	3301      	adds	r3, #1
 8005144:	0089      	lsls	r1, r1, #2
 8005146:	f8c8 3014 	str.w	r3, [r8, #20]
 800514a:	1843      	adds	r3, r0, r1
 800514c:	d005      	beq.n	800515a <d_operator_name+0xf6>
 800514e:	2431      	movs	r4, #49	; 0x31
 8005150:	5444      	strb	r4, [r0, r1]
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	4618      	mov	r0, r3
 8005156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800515a:	4618      	mov	r0, r3
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005160:	0800c9c8 	.word	0x0800c9c8

08005164 <d_unqualified_name>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	68c2      	ldr	r2, [r0, #12]
 8005168:	4604      	mov	r4, r0
 800516a:	7813      	ldrb	r3, [r2, #0]
 800516c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005170:	2909      	cmp	r1, #9
 8005172:	d92e      	bls.n	80051d2 <d_unqualified_name+0x6e>
 8005174:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8005178:	2919      	cmp	r1, #25
 800517a:	d933      	bls.n	80051e4 <d_unqualified_name+0x80>
 800517c:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 8005180:	2901      	cmp	r1, #1
 8005182:	d971      	bls.n	8005268 <d_unqualified_name+0x104>
 8005184:	2b4c      	cmp	r3, #76	; 0x4c
 8005186:	f000 8087 	beq.w	8005298 <d_unqualified_name+0x134>
 800518a:	2b55      	cmp	r3, #85	; 0x55
 800518c:	f040 808f 	bne.w	80052ae <d_unqualified_name+0x14a>
 8005190:	7853      	ldrb	r3, [r2, #1]
 8005192:	2b6c      	cmp	r3, #108	; 0x6c
 8005194:	d030      	beq.n	80051f8 <d_unqualified_name+0x94>
 8005196:	2b74      	cmp	r3, #116	; 0x74
 8005198:	f040 8089 	bne.w	80052ae <d_unqualified_name+0x14a>
 800519c:	1c53      	adds	r3, r2, #1
 800519e:	60c3      	str	r3, [r0, #12]
 80051a0:	7851      	ldrb	r1, [r2, #1]
 80051a2:	2974      	cmp	r1, #116	; 0x74
 80051a4:	f000 80c3 	beq.w	800532e <d_unqualified_name+0x1ca>
 80051a8:	2942      	cmp	r1, #66	; 0x42
 80051aa:	f04f 0500 	mov.w	r5, #0
 80051ae:	d117      	bne.n	80051e0 <d_unqualified_name+0x7c>
 80051b0:	3301      	adds	r3, #1
 80051b2:	60e3      	str	r3, [r4, #12]
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7fe fd0d 	bl	8003bd4 <d_source_name>
 80051ba:	462a      	mov	r2, r5
 80051bc:	4603      	mov	r3, r0
 80051be:	214a      	movs	r1, #74	; 0x4a
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7fe fa87 	bl	80036d4 <d_make_comp>
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	4605      	mov	r5, r0
 80051ca:	781a      	ldrb	r2, [r3, #0]
 80051cc:	2a42      	cmp	r2, #66	; 0x42
 80051ce:	d0ef      	beq.n	80051b0 <d_unqualified_name+0x4c>
 80051d0:	e006      	b.n	80051e0 <d_unqualified_name+0x7c>
 80051d2:	f7fe fcff 	bl	8003bd4 <d_source_name>
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	4605      	mov	r5, r0
 80051da:	7819      	ldrb	r1, [r3, #0]
 80051dc:	2942      	cmp	r1, #66	; 0x42
 80051de:	d0e7      	beq.n	80051b0 <d_unqualified_name+0x4c>
 80051e0:	4628      	mov	r0, r5
 80051e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e4:	f7ff ff3e 	bl	8005064 <d_operator_name>
 80051e8:	4605      	mov	r5, r0
 80051ea:	b110      	cbz	r0, 80051f2 <d_unqualified_name+0x8e>
 80051ec:	7803      	ldrb	r3, [r0, #0]
 80051ee:	2b31      	cmp	r3, #49	; 0x31
 80051f0:	d05f      	beq.n	80052b2 <d_unqualified_name+0x14e>
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	7819      	ldrb	r1, [r3, #0]
 80051f6:	e7f1      	b.n	80051dc <d_unqualified_name+0x78>
 80051f8:	1c53      	adds	r3, r2, #1
 80051fa:	60c3      	str	r3, [r0, #12]
 80051fc:	7851      	ldrb	r1, [r2, #1]
 80051fe:	296c      	cmp	r1, #108	; 0x6c
 8005200:	d1d2      	bne.n	80051a8 <d_unqualified_name+0x44>
 8005202:	3202      	adds	r2, #2
 8005204:	60c2      	str	r2, [r0, #12]
 8005206:	f7ff fb99 	bl	800493c <d_parmlist>
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	4606      	mov	r6, r0
 800520e:	2800      	cmp	r0, #0
 8005210:	f000 80e1 	beq.w	80053d6 <d_unqualified_name+0x272>
 8005214:	7819      	ldrb	r1, [r3, #0]
 8005216:	2945      	cmp	r1, #69	; 0x45
 8005218:	d1c6      	bne.n	80051a8 <d_unqualified_name+0x44>
 800521a:	3301      	adds	r3, #1
 800521c:	60e3      	str	r3, [r4, #12]
 800521e:	4620      	mov	r0, r4
 8005220:	f7fe fc8e 	bl	8003b40 <d_compact_number>
 8005224:	2800      	cmp	r0, #0
 8005226:	f2c0 809c 	blt.w	8005362 <d_unqualified_name+0x1fe>
 800522a:	6963      	ldr	r3, [r4, #20]
 800522c:	69a2      	ldr	r2, [r4, #24]
 800522e:	4293      	cmp	r3, r2
 8005230:	f280 8097 	bge.w	8005362 <d_unqualified_name+0x1fe>
 8005234:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005238:	6921      	ldr	r1, [r4, #16]
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	3301      	adds	r3, #1
 800523e:	188d      	adds	r5, r1, r2
 8005240:	6163      	str	r3, [r4, #20]
 8005242:	f000 808e 	beq.w	8005362 <d_unqualified_name+0x1fe>
 8005246:	2344      	movs	r3, #68	; 0x44
 8005248:	548b      	strb	r3, [r1, r2]
 800524a:	606e      	str	r6, [r5, #4]
 800524c:	60a8      	str	r0, [r5, #8]
 800524e:	6a23      	ldr	r3, [r4, #32]
 8005250:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005252:	4293      	cmp	r3, r2
 8005254:	f280 8085 	bge.w	8005362 <d_unqualified_name+0x1fe>
 8005258:	69e2      	ldr	r2, [r4, #28]
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8005260:	68e3      	ldr	r3, [r4, #12]
 8005262:	6221      	str	r1, [r4, #32]
 8005264:	7819      	ldrb	r1, [r3, #0]
 8005266:	e7b9      	b.n	80051dc <d_unqualified_name+0x78>
 8005268:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800526a:	2800      	cmp	r0, #0
 800526c:	d03c      	beq.n	80052e8 <d_unqualified_name+0x184>
 800526e:	7801      	ldrb	r1, [r0, #0]
 8005270:	2900      	cmp	r1, #0
 8005272:	d137      	bne.n	80052e4 <d_unqualified_name+0x180>
 8005274:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005276:	6883      	ldr	r3, [r0, #8]
 8005278:	440b      	add	r3, r1
 800527a:	6323      	str	r3, [r4, #48]	; 0x30
 800527c:	7811      	ldrb	r1, [r2, #0]
 800527e:	2943      	cmp	r1, #67	; 0x43
 8005280:	d078      	beq.n	8005374 <d_unqualified_name+0x210>
 8005282:	2944      	cmp	r1, #68	; 0x44
 8005284:	d173      	bne.n	800536e <d_unqualified_name+0x20a>
 8005286:	7853      	ldrb	r3, [r2, #1]
 8005288:	3b30      	subs	r3, #48	; 0x30
 800528a:	2b05      	cmp	r3, #5
 800528c:	d84d      	bhi.n	800532a <d_unqualified_name+0x1c6>
 800528e:	e8df f003 	tbb	[pc, r3]
 8005292:	2d48      	.short	0x2d48
 8005294:	4a4c4c46 	.word	0x4a4c4c46
 8005298:	3201      	adds	r2, #1
 800529a:	60c2      	str	r2, [r0, #12]
 800529c:	f7fe fc9a 	bl	8003bd4 <d_source_name>
 80052a0:	4605      	mov	r5, r0
 80052a2:	b120      	cbz	r0, 80052ae <d_unqualified_name+0x14a>
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7fe fc85 	bl	8003bb4 <d_discriminator>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d1a1      	bne.n	80051f2 <d_unqualified_name+0x8e>
 80052ae:	2000      	movs	r0, #0
 80052b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b2:	6843      	ldr	r3, [r0, #4]
 80052b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80052b6:	6899      	ldr	r1, [r3, #8]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	440a      	add	r2, r1
 80052bc:	3207      	adds	r2, #7
 80052be:	6322      	str	r2, [r4, #48]	; 0x30
 80052c0:	4946      	ldr	r1, [pc, #280]	; (80053dc <d_unqualified_name+0x278>)
 80052c2:	f005 fe5f 	bl	800af84 <strcmp>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d193      	bne.n	80051f2 <d_unqualified_name+0x8e>
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7fe fc82 	bl	8003bd4 <d_source_name>
 80052d0:	462a      	mov	r2, r5
 80052d2:	4603      	mov	r3, r0
 80052d4:	2135      	movs	r1, #53	; 0x35
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7fe f9fc 	bl	80036d4 <d_make_comp>
 80052dc:	68e3      	ldr	r3, [r4, #12]
 80052de:	4605      	mov	r5, r0
 80052e0:	7819      	ldrb	r1, [r3, #0]
 80052e2:	e77b      	b.n	80051dc <d_unqualified_name+0x78>
 80052e4:	2918      	cmp	r1, #24
 80052e6:	d0c5      	beq.n	8005274 <d_unqualified_name+0x110>
 80052e8:	4619      	mov	r1, r3
 80052ea:	e7c8      	b.n	800527e <d_unqualified_name+0x11a>
 80052ec:	2702      	movs	r7, #2
 80052ee:	6961      	ldr	r1, [r4, #20]
 80052f0:	69a5      	ldr	r5, [r4, #24]
 80052f2:	1c93      	adds	r3, r2, #2
 80052f4:	42a9      	cmp	r1, r5
 80052f6:	60e3      	str	r3, [r4, #12]
 80052f8:	da37      	bge.n	800536a <d_unqualified_name+0x206>
 80052fa:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 80052fe:	6926      	ldr	r6, [r4, #16]
 8005300:	3101      	adds	r1, #1
 8005302:	00ad      	lsls	r5, r5, #2
 8005304:	6161      	str	r1, [r4, #20]
 8005306:	1971      	adds	r1, r6, r5
 8005308:	d02f      	beq.n	800536a <d_unqualified_name+0x206>
 800530a:	b370      	cbz	r0, 800536a <d_unqualified_name+0x206>
 800530c:	f04f 0c08 	mov.w	ip, #8
 8005310:	f806 c005 	strb.w	ip, [r6, r5]
 8005314:	460d      	mov	r5, r1
 8005316:	710f      	strb	r7, [r1, #4]
 8005318:	6088      	str	r0, [r1, #8]
 800531a:	7891      	ldrb	r1, [r2, #2]
 800531c:	e75e      	b.n	80051dc <d_unqualified_name+0x78>
 800531e:	2703      	movs	r7, #3
 8005320:	e7e5      	b.n	80052ee <d_unqualified_name+0x18a>
 8005322:	2701      	movs	r7, #1
 8005324:	e7e3      	b.n	80052ee <d_unqualified_name+0x18a>
 8005326:	2704      	movs	r7, #4
 8005328:	e7e1      	b.n	80052ee <d_unqualified_name+0x18a>
 800532a:	2500      	movs	r5, #0
 800532c:	e758      	b.n	80051e0 <d_unqualified_name+0x7c>
 800532e:	3202      	adds	r2, #2
 8005330:	60c2      	str	r2, [r0, #12]
 8005332:	f7fe fc05 	bl	8003b40 <d_compact_number>
 8005336:	2800      	cmp	r0, #0
 8005338:	db13      	blt.n	8005362 <d_unqualified_name+0x1fe>
 800533a:	6963      	ldr	r3, [r4, #20]
 800533c:	69a2      	ldr	r2, [r4, #24]
 800533e:	4293      	cmp	r3, r2
 8005340:	da0f      	bge.n	8005362 <d_unqualified_name+0x1fe>
 8005342:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005346:	6921      	ldr	r1, [r4, #16]
 8005348:	0092      	lsls	r2, r2, #2
 800534a:	3301      	adds	r3, #1
 800534c:	188d      	adds	r5, r1, r2
 800534e:	6163      	str	r3, [r4, #20]
 8005350:	d007      	beq.n	8005362 <d_unqualified_name+0x1fe>
 8005352:	2346      	movs	r3, #70	; 0x46
 8005354:	548b      	strb	r3, [r1, r2]
 8005356:	6068      	str	r0, [r5, #4]
 8005358:	6a23      	ldr	r3, [r4, #32]
 800535a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800535c:	4293      	cmp	r3, r2
 800535e:	f6ff af7b 	blt.w	8005258 <d_unqualified_name+0xf4>
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	2500      	movs	r5, #0
 8005366:	7819      	ldrb	r1, [r3, #0]
 8005368:	e738      	b.n	80051dc <d_unqualified_name+0x78>
 800536a:	2500      	movs	r5, #0
 800536c:	e7d5      	b.n	800531a <d_unqualified_name+0x1b6>
 800536e:	4613      	mov	r3, r2
 8005370:	2500      	movs	r5, #0
 8005372:	e733      	b.n	80051dc <d_unqualified_name+0x78>
 8005374:	7853      	ldrb	r3, [r2, #1]
 8005376:	3b31      	subs	r3, #49	; 0x31
 8005378:	2b04      	cmp	r3, #4
 800537a:	d8d6      	bhi.n	800532a <d_unqualified_name+0x1c6>
 800537c:	a101      	add	r1, pc, #4	; (adr r1, 8005384 <d_unqualified_name+0x220>)
 800537e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053cb 	.word	0x080053cb
 8005388:	08005399 	.word	0x08005399
 800538c:	080053d3 	.word	0x080053d3
 8005390:	0800532b 	.word	0x0800532b
 8005394:	080053cf 	.word	0x080053cf
 8005398:	2702      	movs	r7, #2
 800539a:	6961      	ldr	r1, [r4, #20]
 800539c:	69a5      	ldr	r5, [r4, #24]
 800539e:	1c93      	adds	r3, r2, #2
 80053a0:	42a9      	cmp	r1, r5
 80053a2:	60e3      	str	r3, [r4, #12]
 80053a4:	dae1      	bge.n	800536a <d_unqualified_name+0x206>
 80053a6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 80053aa:	6926      	ldr	r6, [r4, #16]
 80053ac:	3101      	adds	r1, #1
 80053ae:	00ad      	lsls	r5, r5, #2
 80053b0:	6161      	str	r1, [r4, #20]
 80053b2:	1971      	adds	r1, r6, r5
 80053b4:	d0d9      	beq.n	800536a <d_unqualified_name+0x206>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d0d7      	beq.n	800536a <d_unqualified_name+0x206>
 80053ba:	f04f 0c07 	mov.w	ip, #7
 80053be:	f806 c005 	strb.w	ip, [r6, r5]
 80053c2:	460d      	mov	r5, r1
 80053c4:	710f      	strb	r7, [r1, #4]
 80053c6:	6088      	str	r0, [r1, #8]
 80053c8:	e7a7      	b.n	800531a <d_unqualified_name+0x1b6>
 80053ca:	2701      	movs	r7, #1
 80053cc:	e7e5      	b.n	800539a <d_unqualified_name+0x236>
 80053ce:	2704      	movs	r7, #4
 80053d0:	e7e3      	b.n	800539a <d_unqualified_name+0x236>
 80053d2:	2703      	movs	r7, #3
 80053d4:	e7e1      	b.n	800539a <d_unqualified_name+0x236>
 80053d6:	4605      	mov	r5, r0
 80053d8:	7819      	ldrb	r1, [r3, #0]
 80053da:	e6ff      	b.n	80051dc <d_unqualified_name+0x78>
 80053dc:	0800cde8 	.word	0x0800cde8

080053e0 <d_expression>:
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	68c1      	ldr	r1, [r0, #12]
 80053e6:	4604      	mov	r4, r0
 80053e8:	780b      	ldrb	r3, [r1, #0]
 80053ea:	2b4c      	cmp	r3, #76	; 0x4c
 80053ec:	f000 809e 	beq.w	800552c <d_expression+0x14c>
 80053f0:	2b54      	cmp	r3, #84	; 0x54
 80053f2:	f000 809f 	beq.w	8005534 <d_expression+0x154>
 80053f6:	2b73      	cmp	r3, #115	; 0x73
 80053f8:	d057      	beq.n	80054aa <d_expression+0xca>
 80053fa:	2b66      	cmp	r3, #102	; 0x66
 80053fc:	d02d      	beq.n	800545a <d_expression+0x7a>
 80053fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005402:	2a09      	cmp	r2, #9
 8005404:	d80d      	bhi.n	8005422 <d_expression+0x42>
 8005406:	4620      	mov	r0, r4
 8005408:	f7ff feac 	bl	8005164 <d_unqualified_name>
 800540c:	4605      	mov	r5, r0
 800540e:	2800      	cmp	r0, #0
 8005410:	f000 8083 	beq.w	800551a <d_expression+0x13a>
 8005414:	68e3      	ldr	r3, [r4, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b49      	cmp	r3, #73	; 0x49
 800541a:	f000 80a3 	beq.w	8005564 <d_expression+0x184>
 800541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005422:	2b6f      	cmp	r3, #111	; 0x6f
 8005424:	d07c      	beq.n	8005520 <d_expression+0x140>
 8005426:	2b69      	cmp	r3, #105	; 0x69
 8005428:	f000 80a7 	beq.w	800557a <d_expression+0x19a>
 800542c:	2b74      	cmp	r3, #116	; 0x74
 800542e:	d117      	bne.n	8005460 <d_expression+0x80>
 8005430:	784b      	ldrb	r3, [r1, #1]
 8005432:	2b6c      	cmp	r3, #108	; 0x6c
 8005434:	d114      	bne.n	8005460 <d_expression+0x80>
 8005436:	f7fe ff01 	bl	800423c <d_type>
 800543a:	68e1      	ldr	r1, [r4, #12]
 800543c:	4605      	mov	r5, r0
 800543e:	3102      	adds	r1, #2
 8005440:	60e1      	str	r1, [r4, #12]
 8005442:	4620      	mov	r0, r4
 8005444:	2145      	movs	r1, #69	; 0x45
 8005446:	f000 f9a9 	bl	800579c <d_exprlist>
 800544a:	462a      	mov	r2, r5
 800544c:	4603      	mov	r3, r0
 800544e:	2130      	movs	r1, #48	; 0x30
 8005450:	4620      	mov	r0, r4
 8005452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005456:	f7fe b93d 	b.w	80036d4 <d_make_comp>
 800545a:	784b      	ldrb	r3, [r1, #1]
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d040      	beq.n	80054e2 <d_expression+0x102>
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff fdff 	bl	8005064 <d_operator_name>
 8005466:	4605      	mov	r5, r0
 8005468:	2800      	cmp	r0, #0
 800546a:	d056      	beq.n	800551a <d_expression+0x13a>
 800546c:	7806      	ldrb	r6, [r0, #0]
 800546e:	2e31      	cmp	r6, #49	; 0x31
 8005470:	d064      	beq.n	800553c <d_expression+0x15c>
 8005472:	2e32      	cmp	r6, #50	; 0x32
 8005474:	d02b      	beq.n	80054ce <d_expression+0xee>
 8005476:	2e33      	cmp	r6, #51	; 0x33
 8005478:	d14f      	bne.n	800551a <d_expression+0x13a>
 800547a:	2700      	movs	r7, #0
 800547c:	68e3      	ldr	r3, [r4, #12]
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	2a5f      	cmp	r2, #95	; 0x5f
 8005482:	f000 810d 	beq.w	80056a0 <d_expression+0x2c0>
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff ffaa 	bl	80053e0 <d_expression>
 800548c:	4603      	mov	r3, r0
 800548e:	b12f      	cbz	r7, 800549c <d_expression+0xbc>
 8005490:	461a      	mov	r2, r3
 8005492:	4620      	mov	r0, r4
 8005494:	2137      	movs	r1, #55	; 0x37
 8005496:	f7fe f91d 	bl	80036d4 <d_make_comp>
 800549a:	4603      	mov	r3, r0
 800549c:	4620      	mov	r0, r4
 800549e:	462a      	mov	r2, r5
 80054a0:	2135      	movs	r1, #53	; 0x35
 80054a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	f7fe b915 	b.w	80036d4 <d_make_comp>
 80054aa:	784b      	ldrb	r3, [r1, #1]
 80054ac:	2b72      	cmp	r3, #114	; 0x72
 80054ae:	f000 80de 	beq.w	800566e <d_expression+0x28e>
 80054b2:	2b70      	cmp	r3, #112	; 0x70
 80054b4:	d1d4      	bne.n	8005460 <d_expression+0x80>
 80054b6:	3102      	adds	r1, #2
 80054b8:	60c1      	str	r1, [r0, #12]
 80054ba:	f7ff ff91 	bl	80053e0 <d_expression>
 80054be:	2149      	movs	r1, #73	; 0x49
 80054c0:	4602      	mov	r2, r0
 80054c2:	2300      	movs	r3, #0
 80054c4:	4620      	mov	r0, r4
 80054c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	f7fe b903 	b.w	80036d4 <d_make_comp>
 80054ce:	6843      	ldr	r3, [r0, #4]
 80054d0:	2700      	movs	r7, #0
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d821      	bhi.n	800551a <d_expression+0x13a>
 80054d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054da:	0056      	.short	0x0056
 80054dc:	009a013f 	.word	0x009a013f
 80054e0:	005e      	.short	0x005e
 80054e2:	1c8b      	adds	r3, r1, #2
 80054e4:	60c3      	str	r3, [r0, #12]
 80054e6:	788b      	ldrb	r3, [r1, #2]
 80054e8:	2b54      	cmp	r3, #84	; 0x54
 80054ea:	f000 80d5 	beq.w	8005698 <d_expression+0x2b8>
 80054ee:	f7fe fb27 	bl	8003b40 <d_compact_number>
 80054f2:	1c45      	adds	r5, r0, #1
 80054f4:	d011      	beq.n	800551a <d_expression+0x13a>
 80054f6:	6963      	ldr	r3, [r4, #20]
 80054f8:	69a2      	ldr	r2, [r4, #24]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	da0d      	bge.n	800551a <d_expression+0x13a>
 80054fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005502:	6921      	ldr	r1, [r4, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	6163      	str	r3, [r4, #20]
 800550a:	188b      	adds	r3, r1, r2
 800550c:	d005      	beq.n	800551a <d_expression+0x13a>
 800550e:	2006      	movs	r0, #6
 8005510:	5488      	strb	r0, [r1, r2]
 8005512:	605d      	str	r5, [r3, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800551a:	2000      	movs	r0, #0
 800551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005520:	784b      	ldrb	r3, [r1, #1]
 8005522:	2b6e      	cmp	r3, #110	; 0x6e
 8005524:	d19c      	bne.n	8005460 <d_expression+0x80>
 8005526:	3102      	adds	r1, #2
 8005528:	60c1      	str	r1, [r0, #12]
 800552a:	e76c      	b.n	8005406 <d_expression+0x26>
 800552c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	f7fe bc60 	b.w	8003df4 <d_expr_primary>
 8005534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005538:	f7fe bb1a 	b.w	8003b70 <d_template_param>
 800553c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8005540:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005542:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005546:	f8d8 7000 	ldr.w	r7, [r8]
 800554a:	3a02      	subs	r2, #2
 800554c:	4413      	add	r3, r2
 800554e:	6323      	str	r3, [r4, #48]	; 0x30
 8005550:	4638      	mov	r0, r7
 8005552:	498d      	ldr	r1, [pc, #564]	; (8005788 <d_expression+0x3a8>)
 8005554:	f005 fd16 	bl	800af84 <strcmp>
 8005558:	2800      	cmp	r0, #0
 800555a:	f000 80a9 	beq.w	80056b0 <d_expression+0x2d0>
 800555e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005562:	e7b6      	b.n	80054d2 <d_expression+0xf2>
 8005564:	4620      	mov	r0, r4
 8005566:	f7fe fcab 	bl	8003ec0 <d_template_args>
 800556a:	462a      	mov	r2, r5
 800556c:	4603      	mov	r3, r0
 800556e:	2104      	movs	r1, #4
 8005570:	4620      	mov	r0, r4
 8005572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005576:	f7fe b8ad 	b.w	80036d4 <d_make_comp>
 800557a:	784b      	ldrb	r3, [r1, #1]
 800557c:	2b6c      	cmp	r3, #108	; 0x6c
 800557e:	f47f af6f 	bne.w	8005460 <d_expression+0x80>
 8005582:	2500      	movs	r5, #0
 8005584:	e75b      	b.n	800543e <d_expression+0x5e>
 8005586:	4620      	mov	r0, r4
 8005588:	462a      	mov	r2, r5
 800558a:	2134      	movs	r1, #52	; 0x34
 800558c:	2300      	movs	r3, #0
 800558e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	f7fe b89f 	b.w	80036d4 <d_make_comp>
 8005596:	4638      	mov	r0, r7
 8005598:	497c      	ldr	r1, [pc, #496]	; (800578c <d_expression+0x3ac>)
 800559a:	f005 fcf3 	bl	800af84 <strcmp>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f000 808a 	beq.w	80056b8 <d_expression+0x2d8>
 80055a4:	783b      	ldrb	r3, [r7, #0]
 80055a6:	2b6e      	cmp	r3, #110	; 0x6e
 80055a8:	d1b7      	bne.n	800551a <d_expression+0x13a>
 80055aa:	787b      	ldrb	r3, [r7, #1]
 80055ac:	2b77      	cmp	r3, #119	; 0x77
 80055ae:	d001      	beq.n	80055b4 <d_expression+0x1d4>
 80055b0:	2b61      	cmp	r3, #97	; 0x61
 80055b2:	d1b2      	bne.n	800551a <d_expression+0x13a>
 80055b4:	215f      	movs	r1, #95	; 0x5f
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 f8f0 	bl	800579c <d_exprlist>
 80055bc:	4606      	mov	r6, r0
 80055be:	4620      	mov	r0, r4
 80055c0:	f7fe fe3c 	bl	800423c <d_type>
 80055c4:	68e1      	ldr	r1, [r4, #12]
 80055c6:	4607      	mov	r7, r0
 80055c8:	780b      	ldrb	r3, [r1, #0]
 80055ca:	2b45      	cmp	r3, #69	; 0x45
 80055cc:	f000 80a9 	beq.w	8005722 <d_expression+0x342>
 80055d0:	2b70      	cmp	r3, #112	; 0x70
 80055d2:	f000 80b5 	beq.w	8005740 <d_expression+0x360>
 80055d6:	2b69      	cmp	r3, #105	; 0x69
 80055d8:	d19f      	bne.n	800551a <d_expression+0x13a>
 80055da:	784b      	ldrb	r3, [r1, #1]
 80055dc:	2b6c      	cmp	r3, #108	; 0x6c
 80055de:	d19c      	bne.n	800551a <d_expression+0x13a>
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7ff fefd 	bl	80053e0 <d_expression>
 80055e6:	4603      	mov	r3, r0
 80055e8:	463a      	mov	r2, r7
 80055ea:	4620      	mov	r0, r4
 80055ec:	213a      	movs	r1, #58	; 0x3a
 80055ee:	f7fe f871 	bl	80036d4 <d_make_comp>
 80055f2:	4632      	mov	r2, r6
 80055f4:	4603      	mov	r3, r0
 80055f6:	2139      	movs	r1, #57	; 0x39
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7fe f86b 	bl	80036d4 <d_make_comp>
 80055fe:	462a      	mov	r2, r5
 8005600:	4603      	mov	r3, r0
 8005602:	2138      	movs	r1, #56	; 0x38
 8005604:	4620      	mov	r0, r4
 8005606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800560a:	f7fe b863 	b.w	80036d4 <d_make_comp>
 800560e:	686b      	ldr	r3, [r5, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	785a      	ldrb	r2, [r3, #1]
 8005614:	2a63      	cmp	r2, #99	; 0x63
 8005616:	d062      	beq.n	80056de <d_expression+0x2fe>
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff fee1 	bl	80053e0 <d_expression>
 800561e:	4680      	mov	r8, r0
 8005620:	4638      	mov	r0, r7
 8005622:	495b      	ldr	r1, [pc, #364]	; (8005790 <d_expression+0x3b0>)
 8005624:	f005 fcae 	bl	800af84 <strcmp>
 8005628:	2800      	cmp	r0, #0
 800562a:	d052      	beq.n	80056d2 <d_expression+0x2f2>
 800562c:	4638      	mov	r0, r7
 800562e:	4959      	ldr	r1, [pc, #356]	; (8005794 <d_expression+0x3b4>)
 8005630:	f005 fca8 	bl	800af84 <strcmp>
 8005634:	b128      	cbz	r0, 8005642 <d_expression+0x262>
 8005636:	4638      	mov	r0, r7
 8005638:	4957      	ldr	r1, [pc, #348]	; (8005798 <d_expression+0x3b8>)
 800563a:	f005 fca3 	bl	800af84 <strcmp>
 800563e:	2800      	cmp	r0, #0
 8005640:	d16a      	bne.n	8005718 <d_expression+0x338>
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fd8e 	bl	8005164 <d_unqualified_name>
 8005648:	68e3      	ldr	r3, [r4, #12]
 800564a:	4606      	mov	r6, r0
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b49      	cmp	r3, #73	; 0x49
 8005650:	d06b      	beq.n	800572a <d_expression+0x34a>
 8005652:	4642      	mov	r2, r8
 8005654:	4633      	mov	r3, r6
 8005656:	4620      	mov	r0, r4
 8005658:	2137      	movs	r1, #55	; 0x37
 800565a:	f7fe f83b 	bl	80036d4 <d_make_comp>
 800565e:	462a      	mov	r2, r5
 8005660:	4603      	mov	r3, r0
 8005662:	2136      	movs	r1, #54	; 0x36
 8005664:	4620      	mov	r0, r4
 8005666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	f7fe b833 	b.w	80036d4 <d_make_comp>
 800566e:	3102      	adds	r1, #2
 8005670:	60c1      	str	r1, [r0, #12]
 8005672:	f7fe fde3 	bl	800423c <d_type>
 8005676:	4605      	mov	r5, r0
 8005678:	4620      	mov	r0, r4
 800567a:	f7ff fd73 	bl	8005164 <d_unqualified_name>
 800567e:	68e1      	ldr	r1, [r4, #12]
 8005680:	4606      	mov	r6, r0
 8005682:	7809      	ldrb	r1, [r1, #0]
 8005684:	4620      	mov	r0, r4
 8005686:	2949      	cmp	r1, #73	; 0x49
 8005688:	d036      	beq.n	80056f8 <d_expression+0x318>
 800568a:	462a      	mov	r2, r5
 800568c:	4633      	mov	r3, r6
 800568e:	2101      	movs	r1, #1
 8005690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	f7fe b81e 	b.w	80036d4 <d_make_comp>
 8005698:	3103      	adds	r1, #3
 800569a:	60c1      	str	r1, [r0, #12]
 800569c:	2500      	movs	r5, #0
 800569e:	e72a      	b.n	80054f6 <d_expression+0x116>
 80056a0:	3301      	adds	r3, #1
 80056a2:	60e3      	str	r3, [r4, #12]
 80056a4:	4620      	mov	r0, r4
 80056a6:	2145      	movs	r1, #69	; 0x45
 80056a8:	f000 f878 	bl	800579c <d_exprlist>
 80056ac:	4603      	mov	r3, r0
 80056ae:	e6ee      	b.n	800548e <d_expression+0xae>
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7fe fdc3 	bl	800423c <d_type>
 80056b6:	e6f0      	b.n	800549a <d_expression+0xba>
 80056b8:	4620      	mov	r0, r4
 80056ba:	f7ff fe91 	bl	80053e0 <d_expression>
 80056be:	4606      	mov	r6, r0
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff fe8d 	bl	80053e0 <d_expression>
 80056c6:	4607      	mov	r7, r0
 80056c8:	4620      	mov	r0, r4
 80056ca:	f7ff fe89 	bl	80053e0 <d_expression>
 80056ce:	4603      	mov	r3, r0
 80056d0:	e78a      	b.n	80055e8 <d_expression+0x208>
 80056d2:	4620      	mov	r0, r4
 80056d4:	2145      	movs	r1, #69	; 0x45
 80056d6:	f000 f861 	bl	800579c <d_exprlist>
 80056da:	4606      	mov	r6, r0
 80056dc:	e7b9      	b.n	8005652 <d_expression+0x272>
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80056e4:	2a01      	cmp	r2, #1
 80056e6:	d902      	bls.n	80056ee <d_expression+0x30e>
 80056e8:	3b72      	subs	r3, #114	; 0x72
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d894      	bhi.n	8005618 <d_expression+0x238>
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7fe fda4 	bl	800423c <d_type>
 80056f4:	4680      	mov	r8, r0
 80056f6:	e793      	b.n	8005620 <d_expression+0x240>
 80056f8:	f7fe fbe2 	bl	8003ec0 <d_template_args>
 80056fc:	4632      	mov	r2, r6
 80056fe:	4603      	mov	r3, r0
 8005700:	2104      	movs	r1, #4
 8005702:	4620      	mov	r0, r4
 8005704:	f7fd ffe6 	bl	80036d4 <d_make_comp>
 8005708:	462a      	mov	r2, r5
 800570a:	4603      	mov	r3, r0
 800570c:	2101      	movs	r1, #1
 800570e:	4620      	mov	r0, r4
 8005710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005714:	f7fd bfde 	b.w	80036d4 <d_make_comp>
 8005718:	4620      	mov	r0, r4
 800571a:	f7ff fe61 	bl	80053e0 <d_expression>
 800571e:	4606      	mov	r6, r0
 8005720:	e797      	b.n	8005652 <d_expression+0x272>
 8005722:	3101      	adds	r1, #1
 8005724:	60e1      	str	r1, [r4, #12]
 8005726:	2300      	movs	r3, #0
 8005728:	e75e      	b.n	80055e8 <d_expression+0x208>
 800572a:	4620      	mov	r0, r4
 800572c:	f7fe fbc8 	bl	8003ec0 <d_template_args>
 8005730:	4632      	mov	r2, r6
 8005732:	4603      	mov	r3, r0
 8005734:	2104      	movs	r1, #4
 8005736:	4620      	mov	r0, r4
 8005738:	f7fd ffcc 	bl	80036d4 <d_make_comp>
 800573c:	4606      	mov	r6, r0
 800573e:	e788      	b.n	8005652 <d_expression+0x272>
 8005740:	784b      	ldrb	r3, [r1, #1]
 8005742:	2b69      	cmp	r3, #105	; 0x69
 8005744:	f47f aee9 	bne.w	800551a <d_expression+0x13a>
 8005748:	3102      	adds	r1, #2
 800574a:	60e1      	str	r1, [r4, #12]
 800574c:	4620      	mov	r0, r4
 800574e:	2145      	movs	r1, #69	; 0x45
 8005750:	f000 f824 	bl	800579c <d_exprlist>
 8005754:	4603      	mov	r3, r0
 8005756:	e747      	b.n	80055e8 <d_expression+0x208>
 8005758:	b12f      	cbz	r7, 8005766 <d_expression+0x386>
 800575a:	783b      	ldrb	r3, [r7, #0]
 800575c:	2b70      	cmp	r3, #112	; 0x70
 800575e:	d006      	beq.n	800576e <d_expression+0x38e>
 8005760:	2b6d      	cmp	r3, #109	; 0x6d
 8005762:	d004      	beq.n	800576e <d_expression+0x38e>
 8005764:	2700      	movs	r7, #0
 8005766:	2e33      	cmp	r6, #51	; 0x33
 8005768:	f47f ae8d 	bne.w	8005486 <d_expression+0xa6>
 800576c:	e686      	b.n	800547c <d_expression+0x9c>
 800576e:	787a      	ldrb	r2, [r7, #1]
 8005770:	429a      	cmp	r2, r3
 8005772:	d1f7      	bne.n	8005764 <d_expression+0x384>
 8005774:	68e3      	ldr	r3, [r4, #12]
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	2a5f      	cmp	r2, #95	; 0x5f
 800577a:	d001      	beq.n	8005780 <d_expression+0x3a0>
 800577c:	2701      	movs	r7, #1
 800577e:	e7f2      	b.n	8005766 <d_expression+0x386>
 8005780:	3301      	adds	r3, #1
 8005782:	60e3      	str	r3, [r4, #12]
 8005784:	2700      	movs	r7, #0
 8005786:	e7ee      	b.n	8005766 <d_expression+0x386>
 8005788:	0800d294 	.word	0x0800d294
 800578c:	0800cdf8 	.word	0x0800cdf8
 8005790:	0800cdec 	.word	0x0800cdec
 8005794:	0800cdf0 	.word	0x0800cdf0
 8005798:	0800cdf4 	.word	0x0800cdf4

0800579c <d_exprlist>:
 800579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800579e:	68c3      	ldr	r3, [r0, #12]
 80057a0:	460f      	mov	r7, r1
 80057a2:	7819      	ldrb	r1, [r3, #0]
 80057a4:	b083      	sub	sp, #12
 80057a6:	2200      	movs	r2, #0
 80057a8:	42b9      	cmp	r1, r7
 80057aa:	4604      	mov	r4, r0
 80057ac:	9201      	str	r2, [sp, #4]
 80057ae:	bf18      	it	ne
 80057b0:	ae01      	addne	r6, sp, #4
 80057b2:	d10a      	bne.n	80057ca <d_exprlist+0x2e>
 80057b4:	e01b      	b.n	80057ee <d_exprlist+0x52>
 80057b6:	f7fd ff8d 	bl	80036d4 <d_make_comp>
 80057ba:	6030      	str	r0, [r6, #0]
 80057bc:	f100 0608 	add.w	r6, r0, #8
 80057c0:	b168      	cbz	r0, 80057de <d_exprlist+0x42>
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	42ba      	cmp	r2, r7
 80057c8:	d00c      	beq.n	80057e4 <d_exprlist+0x48>
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7ff fe08 	bl	80053e0 <d_expression>
 80057d0:	4605      	mov	r5, r0
 80057d2:	212e      	movs	r1, #46	; 0x2e
 80057d4:	4620      	mov	r0, r4
 80057d6:	462a      	mov	r2, r5
 80057d8:	2300      	movs	r3, #0
 80057da:	2d00      	cmp	r5, #0
 80057dc:	d1eb      	bne.n	80057b6 <d_exprlist+0x1a>
 80057de:	2000      	movs	r0, #0
 80057e0:	b003      	add	sp, #12
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e4:	9801      	ldr	r0, [sp, #4]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60e3      	str	r3, [r4, #12]
 80057ea:	b003      	add	sp, #12
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ee:	3301      	adds	r3, #1
 80057f0:	60c3      	str	r3, [r0, #12]
 80057f2:	212e      	movs	r1, #46	; 0x2e
 80057f4:	4613      	mov	r3, r2
 80057f6:	b003      	add	sp, #12
 80057f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80057fc:	f7fd bf6a 	b.w	80036d4 <d_make_comp>

08005800 <d_append_string>:
 8005800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005804:	4604      	mov	r4, r0
 8005806:	4608      	mov	r0, r1
 8005808:	460d      	mov	r5, r1
 800580a:	f005 feb1 	bl	800b570 <strlen>
 800580e:	b350      	cbz	r0, 8005866 <d_append_string+0x66>
 8005810:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005814:	182f      	adds	r7, r5, r0
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	e009      	b.n	8005830 <d_append_string+0x30>
 800581c:	460b      	mov	r3, r1
 800581e:	42bd      	cmp	r5, r7
 8005820:	f101 0101 	add.w	r1, r1, #1
 8005824:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005828:	54e6      	strb	r6, [r4, r3]
 800582a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800582e:	d01a      	beq.n	8005866 <d_append_string+0x66>
 8005830:	29ff      	cmp	r1, #255	; 0xff
 8005832:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005836:	d1f1      	bne.n	800581c <d_append_string+0x1c>
 8005838:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800583c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005840:	4620      	mov	r0, r4
 8005842:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005846:	4798      	blx	r3
 8005848:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800584c:	2101      	movs	r1, #1
 800584e:	440b      	add	r3, r1
 8005850:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005854:	42bd      	cmp	r5, r7
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800585e:	54e6      	strb	r6, [r4, r3]
 8005860:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005864:	d1e4      	bne.n	8005830 <d_append_string+0x30>
 8005866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800586a:	bf00      	nop

0800586c <d_print_comp.part.10>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	7813      	ldrb	r3, [r2, #0]
 8005872:	b097      	sub	sp, #92	; 0x5c
 8005874:	4615      	mov	r5, r2
 8005876:	4604      	mov	r4, r0
 8005878:	460e      	mov	r6, r1
 800587a:	2b4b      	cmp	r3, #75	; 0x4b
 800587c:	f201 8190 	bhi.w	8006ba0 <d_print_comp.part.10+0x1334>
 8005880:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005884:	03a60487 	.word	0x03a60487
 8005888:	031d03a6 	.word	0x031d03a6
 800588c:	04df04f7 	.word	0x04df04f7
 8005890:	03180560 	.word	0x03180560
 8005894:	02df0306 	.word	0x02df0306
 8005898:	029102b8 	.word	0x029102b8
 800589c:	022d026a 	.word	0x022d026a
 80058a0:	01df0206 	.word	0x01df0206
 80058a4:	019101b8 	.word	0x019101b8
 80058a8:	0143016a 	.word	0x0143016a
 80058ac:	00f5011c 	.word	0x00f5011c
 80058b0:	00a700ce 	.word	0x00a700ce
 80058b4:	006b007f 	.word	0x006b007f
 80058b8:	006b006b 	.word	0x006b006b
 80058bc:	004c004c 	.word	0x004c004c
 80058c0:	004c004c 	.word	0x004c004c
 80058c4:	004c004c 	.word	0x004c004c
 80058c8:	08f1004c 	.word	0x08f1004c
 80058cc:	004c08f1 	.word	0x004c08f1
 80058d0:	08c3004c 	.word	0x08c3004c
 80058d4:	07b60913 	.word	0x07b60913
 80058d8:	07250742 	.word	0x07250742
 80058dc:	072506e2 	.word	0x072506e2
 80058e0:	06ae06ae 	.word	0x06ae06ae
 80058e4:	09190969 	.word	0x09190969
 80058e8:	089c0942 	.word	0x089c0942
 80058ec:	0546055a 	.word	0x0546055a
 80058f0:	0535053a 	.word	0x0535053a
 80058f4:	06700675 	.word	0x06700675
 80058f8:	06310670 	.word	0x06310670
 80058fc:	05f90631 	.word	0x05f90631
 8005900:	05e005ee 	.word	0x05e005ee
 8005904:	058805af 	.word	0x058805af
 8005908:	08270875 	.word	0x08270875
 800590c:	098e084e 	.word	0x098e084e
 8005910:	07f107cb 	.word	0x07f107cb
 8005914:	040a0460 	.word	0x040a0460
 8005918:	04b403d3 	.word	0x04b403d3
 800591c:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8005920:	ab16      	add	r3, sp, #88	; 0x58
 8005922:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8005926:	f843 1d40 	str.w	r1, [r3, #-64]!
 800592a:	2100      	movs	r1, #0
 800592c:	9507      	str	r5, [sp, #28]
 800592e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005932:	9209      	str	r2, [sp, #36]	; 0x24
 8005934:	9108      	str	r1, [sp, #32]
 8005936:	686a      	ldr	r2, [r5, #4]
 8005938:	4620      	mov	r0, r4
 800593a:	4631      	mov	r1, r6
 800593c:	f002 fa30 	bl	8007da0 <d_print_comp>
 8005940:	9b08      	ldr	r3, [sp, #32]
 8005942:	b923      	cbnz	r3, 800594e <d_print_comp.part.10+0xe2>
 8005944:	4631      	mov	r1, r6
 8005946:	462a      	mov	r2, r5
 8005948:	4620      	mov	r0, r4
 800594a:	f002 fa35 	bl	8007db8 <d_print_mod>
 800594e:	9b06      	ldr	r3, [sp, #24]
 8005950:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005954:	b017      	add	sp, #92	; 0x5c
 8005956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595a:	f8d0 7114 	ldr.w	r7, [r0, #276]	; 0x114
 800595e:	b177      	cbz	r7, 800597e <d_print_comp.part.10+0x112>
 8005960:	463a      	mov	r2, r7
 8005962:	6891      	ldr	r1, [r2, #8]
 8005964:	b941      	cbnz	r1, 8005978 <d_print_comp.part.10+0x10c>
 8005966:	6851      	ldr	r1, [r2, #4]
 8005968:	7809      	ldrb	r1, [r1, #0]
 800596a:	f1a1 0019 	sub.w	r0, r1, #25
 800596e:	2802      	cmp	r0, #2
 8005970:	d805      	bhi.n	800597e <d_print_comp.part.10+0x112>
 8005972:	428b      	cmp	r3, r1
 8005974:	f001 8554 	beq.w	8007420 <d_print_comp.part.10+0x1bb4>
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	2a00      	cmp	r2, #0
 800597c:	d1f1      	bne.n	8005962 <d_print_comp.part.10+0xf6>
 800597e:	4639      	mov	r1, r7
 8005980:	e7ce      	b.n	8005920 <d_print_comp.part.10+0xb4>
 8005982:	6897      	ldr	r7, [r2, #8]
 8005984:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005988:	2f00      	cmp	r7, #0
 800598a:	d0e3      	beq.n	8005954 <d_print_comp.part.10+0xe8>
 800598c:	2500      	movs	r5, #0
 800598e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005992:	46a8      	mov	r8, r5
 8005994:	e009      	b.n	80059aa <d_print_comp.part.10+0x13e>
 8005996:	460b      	mov	r3, r1
 8005998:	3101      	adds	r1, #1
 800599a:	3501      	adds	r5, #1
 800599c:	42af      	cmp	r7, r5
 800599e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80059a2:	54e6      	strb	r6, [r4, r3]
 80059a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80059a8:	d0d4      	beq.n	8005954 <d_print_comp.part.10+0xe8>
 80059aa:	29ff      	cmp	r1, #255	; 0xff
 80059ac:	f819 6005 	ldrb.w	r6, [r9, r5]
 80059b0:	d1f1      	bne.n	8005996 <d_print_comp.part.10+0x12a>
 80059b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80059ba:	4620      	mov	r0, r4
 80059bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059c0:	4798      	blx	r3
 80059c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80059c6:	2101      	movs	r1, #1
 80059c8:	440b      	add	r3, r1
 80059ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80059ce:	2300      	movs	r3, #0
 80059d0:	e7e3      	b.n	800599a <d_print_comp.part.10+0x12e>
 80059d2:	4fd6      	ldr	r7, [pc, #856]	; (8005d2c <d_print_comp.part.10+0x4c0>)
 80059d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80059d8:	f107 0a11 	add.w	sl, r7, #17
 80059dc:	f04f 0900 	mov.w	r9, #0
 80059e0:	e00a      	b.n	80059f8 <d_print_comp.part.10+0x18c>
 80059e2:	460b      	mov	r3, r1
 80059e4:	3101      	adds	r1, #1
 80059e6:	4557      	cmp	r7, sl
 80059e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80059ec:	f804 8003 	strb.w	r8, [r4, r3]
 80059f0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80059f4:	f001 820d 	beq.w	8006e12 <d_print_comp.part.10+0x15a6>
 80059f8:	29ff      	cmp	r1, #255	; 0xff
 80059fa:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80059fe:	d1f0      	bne.n	80059e2 <d_print_comp.part.10+0x176>
 8005a00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a04:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a0e:	4798      	blx	r3
 8005a10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005a14:	2101      	movs	r1, #1
 8005a16:	440b      	add	r3, r1
 8005a18:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e7e2      	b.n	80059e6 <d_print_comp.part.10+0x17a>
 8005a20:	4fc3      	ldr	r7, [pc, #780]	; (8005d30 <d_print_comp.part.10+0x4c4>)
 8005a22:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005a26:	f107 0a15 	add.w	sl, r7, #21
 8005a2a:	f04f 0900 	mov.w	r9, #0
 8005a2e:	e00a      	b.n	8005a46 <d_print_comp.part.10+0x1da>
 8005a30:	460b      	mov	r3, r1
 8005a32:	3101      	adds	r1, #1
 8005a34:	4557      	cmp	r7, sl
 8005a36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005a3a:	f804 8003 	strb.w	r8, [r4, r3]
 8005a3e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a42:	f001 80f1 	beq.w	8006c28 <d_print_comp.part.10+0x13bc>
 8005a46:	29ff      	cmp	r1, #255	; 0xff
 8005a48:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005a4c:	d1f0      	bne.n	8005a30 <d_print_comp.part.10+0x1c4>
 8005a4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a52:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005a56:	4620      	mov	r0, r4
 8005a58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a5c:	4798      	blx	r3
 8005a5e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005a62:	2101      	movs	r1, #1
 8005a64:	440b      	add	r3, r1
 8005a66:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e7e2      	b.n	8005a34 <d_print_comp.part.10+0x1c8>
 8005a6e:	4fb1      	ldr	r7, [pc, #708]	; (8005d34 <d_print_comp.part.10+0x4c8>)
 8005a70:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005a74:	f107 0a19 	add.w	sl, r7, #25
 8005a78:	f04f 0900 	mov.w	r9, #0
 8005a7c:	e00a      	b.n	8005a94 <d_print_comp.part.10+0x228>
 8005a7e:	460b      	mov	r3, r1
 8005a80:	3101      	adds	r1, #1
 8005a82:	4557      	cmp	r7, sl
 8005a84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005a88:	f804 8003 	strb.w	r8, [r4, r3]
 8005a8c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a90:	f001 80b9 	beq.w	8006c06 <d_print_comp.part.10+0x139a>
 8005a94:	29ff      	cmp	r1, #255	; 0xff
 8005a96:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005a9a:	d1f0      	bne.n	8005a7e <d_print_comp.part.10+0x212>
 8005a9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005aa0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005aaa:	4798      	blx	r3
 8005aac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e7e2      	b.n	8005a82 <d_print_comp.part.10+0x216>
 8005abc:	4f9e      	ldr	r7, [pc, #632]	; (8005d38 <d_print_comp.part.10+0x4cc>)
 8005abe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ac2:	f107 0a16 	add.w	sl, r7, #22
 8005ac6:	f04f 0900 	mov.w	r9, #0
 8005aca:	e00a      	b.n	8005ae2 <d_print_comp.part.10+0x276>
 8005acc:	460b      	mov	r3, r1
 8005ace:	3101      	adds	r1, #1
 8005ad0:	4557      	cmp	r7, sl
 8005ad2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ad6:	f804 8003 	strb.w	r8, [r4, r3]
 8005ada:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005ade:	f001 80dc 	beq.w	8006c9a <d_print_comp.part.10+0x142e>
 8005ae2:	29ff      	cmp	r1, #255	; 0xff
 8005ae4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005ae8:	d1f0      	bne.n	8005acc <d_print_comp.part.10+0x260>
 8005aea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005aee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005af2:	4620      	mov	r0, r4
 8005af4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005af8:	4798      	blx	r3
 8005afa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005afe:	2101      	movs	r1, #1
 8005b00:	440b      	add	r3, r1
 8005b02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005b06:	2300      	movs	r3, #0
 8005b08:	e7e2      	b.n	8005ad0 <d_print_comp.part.10+0x264>
 8005b0a:	4f8c      	ldr	r7, [pc, #560]	; (8005d3c <d_print_comp.part.10+0x4d0>)
 8005b0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b10:	f107 0a13 	add.w	sl, r7, #19
 8005b14:	f04f 0900 	mov.w	r9, #0
 8005b18:	e00a      	b.n	8005b30 <d_print_comp.part.10+0x2c4>
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	3101      	adds	r1, #1
 8005b1e:	4557      	cmp	r7, sl
 8005b20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005b24:	f804 8003 	strb.w	r8, [r4, r3]
 8005b28:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005b2c:	f001 80ae 	beq.w	8006c8c <d_print_comp.part.10+0x1420>
 8005b30:	29ff      	cmp	r1, #255	; 0xff
 8005b32:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005b36:	d1f0      	bne.n	8005b1a <d_print_comp.part.10+0x2ae>
 8005b38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005b3c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005b40:	4620      	mov	r0, r4
 8005b42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005b46:	4798      	blx	r3
 8005b48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	440b      	add	r3, r1
 8005b50:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005b54:	2300      	movs	r3, #0
 8005b56:	e7e2      	b.n	8005b1e <d_print_comp.part.10+0x2b2>
 8005b58:	4f79      	ldr	r7, [pc, #484]	; (8005d40 <d_print_comp.part.10+0x4d4>)
 8005b5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b5e:	f107 0a0f 	add.w	sl, r7, #15
 8005b62:	f04f 0900 	mov.w	r9, #0
 8005b66:	e00a      	b.n	8005b7e <d_print_comp.part.10+0x312>
 8005b68:	460b      	mov	r3, r1
 8005b6a:	3101      	adds	r1, #1
 8005b6c:	4557      	cmp	r7, sl
 8005b6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005b72:	f804 8003 	strb.w	r8, [r4, r3]
 8005b76:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005b7a:	f001 8095 	beq.w	8006ca8 <d_print_comp.part.10+0x143c>
 8005b7e:	29ff      	cmp	r1, #255	; 0xff
 8005b80:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005b84:	d1f0      	bne.n	8005b68 <d_print_comp.part.10+0x2fc>
 8005b86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005b8a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005b94:	4798      	blx	r3
 8005b96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	440b      	add	r3, r1
 8005b9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e7e2      	b.n	8005b6c <d_print_comp.part.10+0x300>
 8005ba6:	4f67      	ldr	r7, [pc, #412]	; (8005d44 <d_print_comp.part.10+0x4d8>)
 8005ba8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005bac:	f107 0a1a 	add.w	sl, r7, #26
 8005bb0:	f04f 0900 	mov.w	r9, #0
 8005bb4:	e00a      	b.n	8005bcc <d_print_comp.part.10+0x360>
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	3101      	adds	r1, #1
 8005bba:	4557      	cmp	r7, sl
 8005bbc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005bc0:	f804 8003 	strb.w	r8, [r4, r3]
 8005bc4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005bc8:	f001 8016 	beq.w	8006bf8 <d_print_comp.part.10+0x138c>
 8005bcc:	29ff      	cmp	r1, #255	; 0xff
 8005bce:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005bd2:	d1f0      	bne.n	8005bb6 <d_print_comp.part.10+0x34a>
 8005bd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005bd8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005be2:	4798      	blx	r3
 8005be4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005be8:	2101      	movs	r1, #1
 8005bea:	440b      	add	r3, r1
 8005bec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e7e2      	b.n	8005bba <d_print_comp.part.10+0x34e>
 8005bf4:	4f54      	ldr	r7, [pc, #336]	; (8005d48 <d_print_comp.part.10+0x4dc>)
 8005bf6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005bfa:	f107 0a11 	add.w	sl, r7, #17
 8005bfe:	f04f 0900 	mov.w	r9, #0
 8005c02:	e00a      	b.n	8005c1a <d_print_comp.part.10+0x3ae>
 8005c04:	460b      	mov	r3, r1
 8005c06:	3101      	adds	r1, #1
 8005c08:	4557      	cmp	r7, sl
 8005c0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005c0e:	f804 8003 	strb.w	r8, [r4, r3]
 8005c12:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c16:	f001 80aa 	beq.w	8006d6e <d_print_comp.part.10+0x1502>
 8005c1a:	29ff      	cmp	r1, #255	; 0xff
 8005c1c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005c20:	d1f0      	bne.n	8005c04 <d_print_comp.part.10+0x398>
 8005c22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c26:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c30:	4798      	blx	r3
 8005c32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005c36:	2101      	movs	r1, #1
 8005c38:	440b      	add	r3, r1
 8005c3a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e7e2      	b.n	8005c08 <d_print_comp.part.10+0x39c>
 8005c42:	4f42      	ldr	r7, [pc, #264]	; (8005d4c <d_print_comp.part.10+0x4e0>)
 8005c44:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c48:	f107 0a15 	add.w	sl, r7, #21
 8005c4c:	f04f 0900 	mov.w	r9, #0
 8005c50:	e00a      	b.n	8005c68 <d_print_comp.part.10+0x3fc>
 8005c52:	460b      	mov	r3, r1
 8005c54:	3101      	adds	r1, #1
 8005c56:	4557      	cmp	r7, sl
 8005c58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005c5c:	f804 8003 	strb.w	r8, [r4, r3]
 8005c60:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c64:	f001 807c 	beq.w	8006d60 <d_print_comp.part.10+0x14f4>
 8005c68:	29ff      	cmp	r1, #255	; 0xff
 8005c6a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005c6e:	d1f0      	bne.n	8005c52 <d_print_comp.part.10+0x3e6>
 8005c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c7e:	4798      	blx	r3
 8005c80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005c84:	2101      	movs	r1, #1
 8005c86:	440b      	add	r3, r1
 8005c88:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e7e2      	b.n	8005c56 <d_print_comp.part.10+0x3ea>
 8005c90:	4f2f      	ldr	r7, [pc, #188]	; (8005d50 <d_print_comp.part.10+0x4e4>)
 8005c92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c96:	f107 0a10 	add.w	sl, r7, #16
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	e00a      	b.n	8005cb6 <d_print_comp.part.10+0x44a>
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	3101      	adds	r1, #1
 8005ca4:	4557      	cmp	r7, sl
 8005ca6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005caa:	f804 8003 	strb.w	r8, [r4, r3]
 8005cae:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005cb2:	f001 804e 	beq.w	8006d52 <d_print_comp.part.10+0x14e6>
 8005cb6:	29ff      	cmp	r1, #255	; 0xff
 8005cb8:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005cbc:	d1f0      	bne.n	8005ca0 <d_print_comp.part.10+0x434>
 8005cbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005cc2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ccc:	4798      	blx	r3
 8005cce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	440b      	add	r3, r1
 8005cd6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e7e2      	b.n	8005ca4 <d_print_comp.part.10+0x438>
 8005cde:	4f1d      	ldr	r7, [pc, #116]	; (8005d54 <d_print_comp.part.10+0x4e8>)
 8005ce0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ce4:	f107 0a12 	add.w	sl, r7, #18
 8005ce8:	f04f 0900 	mov.w	r9, #0
 8005cec:	e00a      	b.n	8005d04 <d_print_comp.part.10+0x498>
 8005cee:	460b      	mov	r3, r1
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	4557      	cmp	r7, sl
 8005cf4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005cf8:	f804 8003 	strb.w	r8, [r4, r3]
 8005cfc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d00:	f001 8020 	beq.w	8006d44 <d_print_comp.part.10+0x14d8>
 8005d04:	29ff      	cmp	r1, #255	; 0xff
 8005d06:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005d0a:	d1f0      	bne.n	8005cee <d_print_comp.part.10+0x482>
 8005d0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d10:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d14:	4620      	mov	r0, r4
 8005d16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d1a:	4798      	blx	r3
 8005d1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005d20:	2101      	movs	r1, #1
 8005d22:	440b      	add	r3, r1
 8005d24:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e7e2      	b.n	8005cf2 <d_print_comp.part.10+0x486>
 8005d2c:	0800cf43 	.word	0x0800cf43
 8005d30:	0800cf2b 	.word	0x0800cf2b
 8005d34:	0800cf0f 	.word	0x0800cf0f
 8005d38:	0800cef7 	.word	0x0800cef7
 8005d3c:	0800cee3 	.word	0x0800cee3
 8005d40:	0800ced3 	.word	0x0800ced3
 8005d44:	0800ceb7 	.word	0x0800ceb7
 8005d48:	0800cea3 	.word	0x0800cea3
 8005d4c:	0800ce9f 	.word	0x0800ce9f
 8005d50:	0800ce8b 	.word	0x0800ce8b
 8005d54:	0800ce77 	.word	0x0800ce77
 8005d58:	4fc9      	ldr	r7, [pc, #804]	; (8006080 <d_print_comp.part.10+0x814>)
 8005d5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005d5e:	f107 0a0d 	add.w	sl, r7, #13
 8005d62:	f04f 0900 	mov.w	r9, #0
 8005d66:	e00a      	b.n	8005d7e <d_print_comp.part.10+0x512>
 8005d68:	460b      	mov	r3, r1
 8005d6a:	3101      	adds	r1, #1
 8005d6c:	4557      	cmp	r7, sl
 8005d6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d72:	f804 8003 	strb.w	r8, [r4, r3]
 8005d76:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d7a:	f000 87d5 	beq.w	8006d28 <d_print_comp.part.10+0x14bc>
 8005d7e:	29ff      	cmp	r1, #255	; 0xff
 8005d80:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005d84:	d1f0      	bne.n	8005d68 <d_print_comp.part.10+0x4fc>
 8005d86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d8a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d94:	4798      	blx	r3
 8005d96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	440b      	add	r3, r1
 8005d9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005da2:	2300      	movs	r3, #0
 8005da4:	e7e2      	b.n	8005d6c <d_print_comp.part.10+0x500>
 8005da6:	4fb7      	ldr	r7, [pc, #732]	; (8006084 <d_print_comp.part.10+0x818>)
 8005da8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005dac:	f107 0a18 	add.w	sl, r7, #24
 8005db0:	f04f 0900 	mov.w	r9, #0
 8005db4:	e00a      	b.n	8005dcc <d_print_comp.part.10+0x560>
 8005db6:	460b      	mov	r3, r1
 8005db8:	3101      	adds	r1, #1
 8005dba:	4557      	cmp	r7, sl
 8005dbc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005dc0:	f804 8003 	strb.w	r8, [r4, r3]
 8005dc4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005dc8:	f000 8783 	beq.w	8006cd2 <d_print_comp.part.10+0x1466>
 8005dcc:	29ff      	cmp	r1, #255	; 0xff
 8005dce:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005dd2:	d1f0      	bne.n	8005db6 <d_print_comp.part.10+0x54a>
 8005dd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dd8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005de2:	4798      	blx	r3
 8005de4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005de8:	2101      	movs	r1, #1
 8005dea:	440b      	add	r3, r1
 8005dec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005df0:	2300      	movs	r3, #0
 8005df2:	e7e2      	b.n	8005dba <d_print_comp.part.10+0x54e>
 8005df4:	4fa4      	ldr	r7, [pc, #656]	; (8006088 <d_print_comp.part.10+0x81c>)
 8005df6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005dfa:	f107 0a08 	add.w	sl, r7, #8
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	e00a      	b.n	8005e1a <d_print_comp.part.10+0x5ae>
 8005e04:	460b      	mov	r3, r1
 8005e06:	3101      	adds	r1, #1
 8005e08:	4557      	cmp	r7, sl
 8005e0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e0e:	f804 8003 	strb.w	r8, [r4, r3]
 8005e12:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e16:	f000 8755 	beq.w	8006cc4 <d_print_comp.part.10+0x1458>
 8005e1a:	29ff      	cmp	r1, #255	; 0xff
 8005e1c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005e20:	d1f0      	bne.n	8005e04 <d_print_comp.part.10+0x598>
 8005e22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e26:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e30:	4798      	blx	r3
 8005e32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005e36:	2101      	movs	r1, #1
 8005e38:	440b      	add	r3, r1
 8005e3a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e7e2      	b.n	8005e08 <d_print_comp.part.10+0x59c>
 8005e42:	4f92      	ldr	r7, [pc, #584]	; (800608c <d_print_comp.part.10+0x820>)
 8005e44:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005e48:	f107 0a0b 	add.w	sl, r7, #11
 8005e4c:	f04f 0900 	mov.w	r9, #0
 8005e50:	e00a      	b.n	8005e68 <d_print_comp.part.10+0x5fc>
 8005e52:	460b      	mov	r3, r1
 8005e54:	3101      	adds	r1, #1
 8005e56:	4557      	cmp	r7, sl
 8005e58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e5c:	f804 8003 	strb.w	r8, [r4, r3]
 8005e60:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e64:	f000 8727 	beq.w	8006cb6 <d_print_comp.part.10+0x144a>
 8005e68:	29ff      	cmp	r1, #255	; 0xff
 8005e6a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005e6e:	d1f0      	bne.n	8005e52 <d_print_comp.part.10+0x5e6>
 8005e70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e7e:	4798      	blx	r3
 8005e80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005e84:	2101      	movs	r1, #1
 8005e86:	440b      	add	r3, r1
 8005e88:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e7e2      	b.n	8005e56 <d_print_comp.part.10+0x5ea>
 8005e90:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005e94:	29ff      	cmp	r1, #255	; 0xff
 8005e96:	f001 82ca 	beq.w	800742e <d_print_comp.part.10+0x1bc2>
 8005e9a:	1c4a      	adds	r2, r1, #1
 8005e9c:	237e      	movs	r3, #126	; 0x7e
 8005e9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ea2:	5463      	strb	r3, [r4, r1]
 8005ea4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	68aa      	ldr	r2, [r5, #8]
 8005eac:	4620      	mov	r0, r4
 8005eae:	f001 ff77 	bl	8007da0 <d_print_comp>
 8005eb2:	e54f      	b.n	8005954 <d_print_comp.part.10+0xe8>
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	6892      	ldr	r2, [r2, #8]
 8005eb8:	f001 ff72 	bl	8007da0 <d_print_comp>
 8005ebc:	e54a      	b.n	8005954 <d_print_comp.part.10+0xe8>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8005ec4:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8005ec8:	686f      	ldr	r7, [r5, #4]
 8005eca:	9302      	str	r3, [sp, #8]
 8005ecc:	2f00      	cmp	r7, #0
 8005ece:	f001 8509 	beq.w	80078e4 <d_print_comp.part.10+0x2078>
 8005ed2:	a906      	add	r1, sp, #24
 8005ed4:	f8d0 a110 	ldr.w	sl, [r0, #272]	; 0x110
 8005ed8:	9101      	str	r1, [sp, #4]
 8005eda:	4690      	mov	r8, r2
 8005edc:	4694      	mov	ip, r2
 8005ede:	460b      	mov	r3, r1
 8005ee0:	7839      	ldrb	r1, [r7, #0]
 8005ee2:	f108 0801 	add.w	r8, r8, #1
 8005ee6:	f1a1 001c 	sub.w	r0, r1, #28
 8005eea:	2804      	cmp	r0, #4
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005ef2:	605f      	str	r7, [r3, #4]
 8005ef4:	f8c3 c008 	str.w	ip, [r3, #8]
 8005ef8:	f8c3 a00c 	str.w	sl, [r3, #12]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f103 0310 	add.w	r3, r3, #16
 8005f02:	f240 8652 	bls.w	8006baa <d_print_comp.part.10+0x133e>
 8005f06:	2904      	cmp	r1, #4
 8005f08:	f001 8639 	beq.w	8007b7e <d_print_comp.part.10+0x2312>
 8005f0c:	2902      	cmp	r1, #2
 8005f0e:	d13d      	bne.n	8005f8c <d_print_comp.part.10+0x720>
 8005f10:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8005f14:	f89b 3000 	ldrb.w	r3, [fp]
 8005f18:	2b45      	cmp	r3, #69	; 0x45
 8005f1a:	bf08      	it	eq
 8005f1c:	f8db b004 	ldreq.w	fp, [fp, #4]
 8005f20:	f89b 3000 	ldrb.w	r3, [fp]
 8005f24:	3b1c      	subs	r3, #28
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d830      	bhi.n	8005f8c <d_print_comp.part.10+0x720>
 8005f2a:	f1b8 0f04 	cmp.w	r8, #4
 8005f2e:	f001 867f 	beq.w	8007c30 <d_print_comp.part.10+0x23c4>
 8005f32:	9a01      	ldr	r2, [sp, #4]
 8005f34:	4623      	mov	r3, r4
 8005f36:	eb02 1c08 	add.w	ip, r2, r8, lsl #4
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	465d      	mov	r5, fp
 8005f40:	4656      	mov	r6, sl
 8005f42:	4664      	mov	r4, ip
 8005f44:	468b      	mov	fp, r1
 8005f46:	4692      	mov	sl, r2
 8005f48:	4699      	mov	r9, r3
 8005f4a:	e003      	b.n	8005f54 <d_print_comp.part.10+0x6e8>
 8005f4c:	f1b8 0f04 	cmp.w	r8, #4
 8005f50:	f001 866d 	beq.w	8007c2e <d_print_comp.part.10+0x23c2>
 8005f54:	e91c 000f 	ldmdb	ip, {r0, r1, r2, r3}
 8005f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005f5c:	f1a4 0310 	sub.w	r3, r4, #16
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	2300      	movs	r3, #0
 8005f64:	e90c 0048 	stmdb	ip, {r3, r6}
 8005f68:	f8c9 4114 	str.w	r4, [r9, #276]	; 0x114
 8005f6c:	f84c 5c0c 	str.w	r5, [ip, #-12]
 8005f70:	686d      	ldr	r5, [r5, #4]
 8005f72:	f108 0801 	add.w	r8, r8, #1
 8005f76:	782b      	ldrb	r3, [r5, #0]
 8005f78:	f10c 0c10 	add.w	ip, ip, #16
 8005f7c:	3b1c      	subs	r3, #28
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	f104 0410 	add.w	r4, r4, #16
 8005f84:	d9e2      	bls.n	8005f4c <d_print_comp.part.10+0x6e0>
 8005f86:	464c      	mov	r4, r9
 8005f88:	4656      	mov	r6, sl
 8005f8a:	465d      	mov	r5, fp
 8005f8c:	68aa      	ldr	r2, [r5, #8]
 8005f8e:	4620      	mov	r0, r4
 8005f90:	4631      	mov	r1, r6
 8005f92:	f001 ff05 	bl	8007da0 <d_print_comp>
 8005f96:	783b      	ldrb	r3, [r7, #0]
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	bf04      	itt	eq
 8005f9c:	9b04      	ldreq	r3, [sp, #16]
 8005f9e:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8005fa2:	f1b8 0f00 	cmp.w	r8, #0
 8005fa6:	d00f      	beq.n	8005fc8 <d_print_comp.part.10+0x75c>
 8005fa8:	9a01      	ldr	r2, [sp, #4]
 8005faa:	4647      	mov	r7, r8
 8005fac:	eb02 1508 	add.w	r5, r2, r8, lsl #4
 8005fb0:	f04f 0920 	mov.w	r9, #32
 8005fb4:	46b0      	mov	r8, r6
 8005fb6:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8005fba:	3f01      	subs	r7, #1
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	f001 847d 	beq.w	80078bc <d_print_comp.part.10+0x2050>
 8005fc2:	3d10      	subs	r5, #16
 8005fc4:	2f00      	cmp	r7, #0
 8005fc6:	d1f6      	bne.n	8005fb6 <d_print_comp.part.10+0x74a>
 8005fc8:	9902      	ldr	r1, [sp, #8]
 8005fca:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8005fce:	e4c1      	b.n	8005954 <d_print_comp.part.10+0xe8>
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	6852      	ldr	r2, [r2, #4]
 8005fd4:	f001 fee4 	bl	8007da0 <d_print_comp>
 8005fd8:	f016 0904 	ands.w	r9, r6, #4
 8005fdc:	f040 85f2 	bne.w	8006bc4 <d_print_comp.part.10+0x1358>
 8005fe0:	4f2b      	ldr	r7, [pc, #172]	; (8006090 <d_print_comp.part.10+0x824>)
 8005fe2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fe6:	f107 0a02 	add.w	sl, r7, #2
 8005fea:	e00a      	b.n	8006002 <d_print_comp.part.10+0x796>
 8005fec:	460b      	mov	r3, r1
 8005fee:	3101      	adds	r1, #1
 8005ff0:	4557      	cmp	r7, sl
 8005ff2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ff6:	f804 8003 	strb.w	r8, [r4, r3]
 8005ffa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005ffe:	f000 85ed 	beq.w	8006bdc <d_print_comp.part.10+0x1370>
 8006002:	29ff      	cmp	r1, #255	; 0xff
 8006004:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8006008:	d1f0      	bne.n	8005fec <d_print_comp.part.10+0x780>
 800600a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800600e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006012:	4620      	mov	r0, r4
 8006014:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006018:	4798      	blx	r3
 800601a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800601e:	2101      	movs	r1, #1
 8006020:	440b      	add	r3, r1
 8006022:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006026:	2300      	movs	r3, #0
 8006028:	e7e2      	b.n	8005ff0 <d_print_comp.part.10+0x784>
 800602a:	4f1a      	ldr	r7, [pc, #104]	; (8006094 <d_print_comp.part.10+0x828>)
 800602c:	4631      	mov	r1, r6
 800602e:	6852      	ldr	r2, [r2, #4]
 8006030:	f001 feb6 	bl	8007da0 <d_print_comp>
 8006034:	f107 0a05 	add.w	sl, r7, #5
 8006038:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800603c:	f04f 0900 	mov.w	r9, #0
 8006040:	e00a      	b.n	8006058 <d_print_comp.part.10+0x7ec>
 8006042:	460b      	mov	r3, r1
 8006044:	3101      	adds	r1, #1
 8006046:	4557      	cmp	r7, sl
 8006048:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800604c:	f804 8003 	strb.w	r8, [r4, r3]
 8006050:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006054:	f000 87b8 	beq.w	8006fc8 <d_print_comp.part.10+0x175c>
 8006058:	29ff      	cmp	r1, #255	; 0xff
 800605a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800605e:	d1f0      	bne.n	8006042 <d_print_comp.part.10+0x7d6>
 8006060:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006064:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006068:	4620      	mov	r0, r4
 800606a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800606e:	4798      	blx	r3
 8006070:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006074:	2101      	movs	r1, #1
 8006076:	440b      	add	r3, r1
 8006078:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800607c:	2300      	movs	r3, #0
 800607e:	e7e2      	b.n	8006046 <d_print_comp.part.10+0x7da>
 8006080:	0800ce67 	.word	0x0800ce67
 8006084:	0800ce43 	.word	0x0800ce43
 8006088:	0800ce37 	.word	0x0800ce37
 800608c:	0800ce2b 	.word	0x0800ce2b
 8006090:	0800ce03 	.word	0x0800ce03
 8006094:	0800cdfb 	.word	0x0800cdfb
 8006098:	6851      	ldr	r1, [r2, #4]
 800609a:	f7fd fe29 	bl	8003cf0 <d_find_pack>
 800609e:	2800      	cmp	r0, #0
 80060a0:	f001 8575 	beq.w	8007b8e <d_print_comp.part.10+0x2322>
 80060a4:	f04f 0800 	mov.w	r8, #0
 80060a8:	7803      	ldrb	r3, [r0, #0]
 80060aa:	2b2f      	cmp	r3, #47	; 0x2f
 80060ac:	f040 87d0 	bne.w	8007050 <d_print_comp.part.10+0x17e4>
 80060b0:	6843      	ldr	r3, [r0, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 87cc 	beq.w	8007050 <d_print_comp.part.10+0x17e4>
 80060b8:	6880      	ldr	r0, [r0, #8]
 80060ba:	f108 0801 	add.w	r8, r8, #1
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1f2      	bne.n	80060a8 <d_print_comp.part.10+0x83c>
 80060c2:	686d      	ldr	r5, [r5, #4]
 80060c4:	9501      	str	r5, [sp, #4]
 80060c6:	2700      	movs	r7, #0
 80060c8:	f108 33ff 	add.w	r3, r8, #4294967295
 80060cc:	f8df a3d0 	ldr.w	sl, [pc, #976]	; 80064a0 <d_print_comp.part.10+0xc34>
 80060d0:	46b9      	mov	r9, r7
 80060d2:	9302      	str	r3, [sp, #8]
 80060d4:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
 80060d8:	4620      	mov	r0, r4
 80060da:	4631      	mov	r1, r6
 80060dc:	9a01      	ldr	r2, [sp, #4]
 80060de:	f001 fe5f 	bl	8007da0 <d_print_comp>
 80060e2:	9b02      	ldr	r3, [sp, #8]
 80060e4:	42bb      	cmp	r3, r7
 80060e6:	dd29      	ble.n	800613c <d_print_comp.part.10+0x8d0>
 80060e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80060ec:	f8df b3b4 	ldr.w	fp, [pc, #948]	; 80064a4 <d_print_comp.part.10+0xc38>
 80060f0:	e009      	b.n	8006106 <d_print_comp.part.10+0x89a>
 80060f2:	460b      	mov	r3, r1
 80060f4:	45d3      	cmp	fp, sl
 80060f6:	f101 0101 	add.w	r1, r1, #1
 80060fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80060fe:	54e5      	strb	r5, [r4, r3]
 8006100:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006104:	d01a      	beq.n	800613c <d_print_comp.part.10+0x8d0>
 8006106:	29ff      	cmp	r1, #255	; 0xff
 8006108:	f81b 5f01 	ldrb.w	r5, [fp, #1]!
 800610c:	d1f1      	bne.n	80060f2 <d_print_comp.part.10+0x886>
 800610e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006112:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006116:	4620      	mov	r0, r4
 8006118:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800611c:	4798      	blx	r3
 800611e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006122:	2101      	movs	r1, #1
 8006124:	440b      	add	r3, r1
 8006126:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800612a:	45d3      	cmp	fp, sl
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006134:	54e5      	strb	r5, [r4, r3]
 8006136:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800613a:	d1e4      	bne.n	8006106 <d_print_comp.part.10+0x89a>
 800613c:	3701      	adds	r7, #1
 800613e:	4547      	cmp	r7, r8
 8006140:	d1c8      	bne.n	80060d4 <d_print_comp.part.10+0x868>
 8006142:	e407      	b.n	8005954 <d_print_comp.part.10+0xe8>
 8006144:	4fd0      	ldr	r7, [pc, #832]	; (8006488 <d_print_comp.part.10+0xc1c>)
 8006146:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800614a:	f107 0a1a 	add.w	sl, r7, #26
 800614e:	f04f 0900 	mov.w	r9, #0
 8006152:	e00a      	b.n	800616a <d_print_comp.part.10+0x8fe>
 8006154:	460b      	mov	r3, r1
 8006156:	3101      	adds	r1, #1
 8006158:	4557      	cmp	r7, sl
 800615a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800615e:	f804 8003 	strb.w	r8, [r4, r3]
 8006162:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006166:	f000 8609 	beq.w	8006d7c <d_print_comp.part.10+0x1510>
 800616a:	29ff      	cmp	r1, #255	; 0xff
 800616c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8006170:	d1f0      	bne.n	8006154 <d_print_comp.part.10+0x8e8>
 8006172:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006176:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800617a:	4620      	mov	r0, r4
 800617c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006180:	4798      	blx	r3
 8006182:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006186:	2101      	movs	r1, #1
 8006188:	440b      	add	r3, r1
 800618a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800618e:	2300      	movs	r3, #0
 8006190:	e7e2      	b.n	8006158 <d_print_comp.part.10+0x8ec>
 8006192:	f016 0604 	ands.w	r6, r6, #4
 8006196:	f041 81b3 	bne.w	8007500 <d_print_comp.part.10+0x1c94>
 800619a:	6897      	ldr	r7, [r2, #8]
 800619c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	f43f abd7 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80061a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80061aa:	46b0      	mov	r8, r6
 80061ac:	e00a      	b.n	80061c4 <d_print_comp.part.10+0x958>
 80061ae:	460b      	mov	r3, r1
 80061b0:	3101      	adds	r1, #1
 80061b2:	3601      	adds	r6, #1
 80061b4:	42b7      	cmp	r7, r6
 80061b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80061ba:	54e5      	strb	r5, [r4, r3]
 80061bc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80061c0:	f43f abc8 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80061c4:	29ff      	cmp	r1, #255	; 0xff
 80061c6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80061ca:	d1f0      	bne.n	80061ae <d_print_comp.part.10+0x942>
 80061cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80061d4:	4620      	mov	r0, r4
 80061d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061da:	4798      	blx	r3
 80061dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80061e0:	2101      	movs	r1, #1
 80061e2:	440b      	add	r3, r1
 80061e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80061e8:	2300      	movs	r3, #0
 80061ea:	e7e2      	b.n	80061b2 <d_print_comp.part.10+0x946>
 80061ec:	4fa7      	ldr	r7, [pc, #668]	; (800648c <d_print_comp.part.10+0xc20>)
 80061ee:	4631      	mov	r1, r6
 80061f0:	6852      	ldr	r2, [r2, #4]
 80061f2:	f001 fdd5 	bl	8007da0 <d_print_comp>
 80061f6:	f107 0a08 	add.w	sl, r7, #8
 80061fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80061fe:	f04f 0900 	mov.w	r9, #0
 8006202:	e00a      	b.n	800621a <d_print_comp.part.10+0x9ae>
 8006204:	460b      	mov	r3, r1
 8006206:	3101      	adds	r1, #1
 8006208:	4557      	cmp	r7, sl
 800620a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800620e:	f804 8003 	strb.w	r8, [r4, r3]
 8006212:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006216:	f000 86ea 	beq.w	8006fee <d_print_comp.part.10+0x1782>
 800621a:	29ff      	cmp	r1, #255	; 0xff
 800621c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8006220:	d1f0      	bne.n	8006204 <d_print_comp.part.10+0x998>
 8006222:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006226:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800622a:	4620      	mov	r0, r4
 800622c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006230:	4798      	blx	r3
 8006232:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006236:	2101      	movs	r1, #1
 8006238:	440b      	add	r3, r1
 800623a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800623e:	2300      	movs	r3, #0
 8006240:	e7e2      	b.n	8006208 <d_print_comp.part.10+0x99c>
 8006242:	1d11      	adds	r1, r2, #4
 8006244:	f7fd fd32 	bl	8003cac <d_lookup_template_argument.isra.6>
 8006248:	2800      	cmp	r0, #0
 800624a:	f001 8018 	beq.w	800727e <d_print_comp.part.10+0x1a12>
 800624e:	7803      	ldrb	r3, [r0, #0]
 8006250:	2b2f      	cmp	r3, #47	; 0x2f
 8006252:	f001 8007 	beq.w	8007264 <d_print_comp.part.10+0x19f8>
 8006256:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800625a:	4602      	mov	r2, r0
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	4631      	mov	r1, r6
 8006260:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8006264:	4620      	mov	r0, r4
 8006266:	f001 fd9b 	bl	8007da0 <d_print_comp>
 800626a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800626e:	f7ff bb71 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006272:	2300      	movs	r3, #0
 8006274:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
 8006278:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800627c:	6857      	ldr	r7, [r2, #4]
 800627e:	0772      	lsls	r2, r6, #29
 8006280:	d505      	bpl.n	800628e <d_print_comp.part.10+0xa22>
 8006282:	783b      	ldrb	r3, [r7, #0]
 8006284:	b91b      	cbnz	r3, 800628e <d_print_comp.part.10+0xa22>
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	2a06      	cmp	r2, #6
 800628a:	f001 83c0 	beq.w	8007a0e <d_print_comp.part.10+0x21a2>
 800628e:	463a      	mov	r2, r7
 8006290:	4620      	mov	r0, r4
 8006292:	4631      	mov	r1, r6
 8006294:	f001 fd84 	bl	8007da0 <d_print_comp>
 8006298:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800629c:	2b3c      	cmp	r3, #60	; 0x3c
 800629e:	f001 8334 	beq.w	800790a <d_print_comp.part.10+0x209e>
 80062a2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80062a6:	2bff      	cmp	r3, #255	; 0xff
 80062a8:	f001 822f 	beq.w	800770a <d_print_comp.part.10+0x1e9e>
 80062ac:	1c59      	adds	r1, r3, #1
 80062ae:	223c      	movs	r2, #60	; 0x3c
 80062b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80062b4:	54e2      	strb	r2, [r4, r3]
 80062b6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80062ba:	4631      	mov	r1, r6
 80062bc:	68aa      	ldr	r2, [r5, #8]
 80062be:	4620      	mov	r0, r4
 80062c0:	f001 fd6e 	bl	8007da0 <d_print_comp>
 80062c4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80062c8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ca:	f001 8310 	beq.w	80078ee <d_print_comp.part.10+0x2082>
 80062ce:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80062d2:	2bff      	cmp	r3, #255	; 0xff
 80062d4:	f001 8206 	beq.w	80076e4 <d_print_comp.part.10+0x1e78>
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	223e      	movs	r2, #62	; 0x3e
 80062dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80062e0:	54e2      	strb	r2, [r4, r3]
 80062e2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80062e6:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 80062ea:	f7ff bb33 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80062ee:	2301      	movs	r3, #1
 80062f0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80062f4:	f7ff bb2e 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80062f8:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80062fc:	f898 3000 	ldrb.w	r3, [r8]
 8006300:	2b37      	cmp	r3, #55	; 0x37
 8006302:	f000 8762 	beq.w	80071ca <d_print_comp.part.10+0x195e>
 8006306:	2301      	movs	r3, #1
 8006308:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800630c:	f7ff bb22 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006310:	6857      	ldr	r7, [r2, #4]
 8006312:	6895      	ldr	r5, [r2, #8]
 8006314:	783b      	ldrb	r3, [r7, #0]
 8006316:	2b31      	cmp	r3, #49	; 0x31
 8006318:	f001 8008 	beq.w	800732c <d_print_comp.part.10+0x1ac0>
 800631c:	2b33      	cmp	r3, #51	; 0x33
 800631e:	f001 804b 	beq.w	80073b8 <d_print_comp.part.10+0x1b4c>
 8006322:	463a      	mov	r2, r7
 8006324:	4631      	mov	r1, r6
 8006326:	f002 fb9f 	bl	8008a68 <d_print_expr_op>
 800632a:	4620      	mov	r0, r4
 800632c:	4631      	mov	r1, r6
 800632e:	462a      	mov	r2, r5
 8006330:	f002 fbd4 	bl	8008adc <d_print_subexpr>
 8006334:	f7ff bb0e 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006338:	4631      	mov	r1, r6
 800633a:	6852      	ldr	r2, [r2, #4]
 800633c:	f002 fb94 	bl	8008a68 <d_print_expr_op>
 8006340:	f7ff bb08 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006344:	6857      	ldr	r7, [r2, #4]
 8006346:	2f00      	cmp	r7, #0
 8006348:	f040 86d9 	bne.w	80070fe <d_print_comp.part.10+0x1892>
 800634c:	4d50      	ldr	r5, [pc, #320]	; (8006490 <d_print_comp.part.10+0xc24>)
 800634e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006352:	f105 0804 	add.w	r8, r5, #4
 8006356:	e009      	b.n	800636c <d_print_comp.part.10+0xb00>
 8006358:	460b      	mov	r3, r1
 800635a:	3101      	adds	r1, #1
 800635c:	4545      	cmp	r5, r8
 800635e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006362:	54e6      	strb	r6, [r4, r3]
 8006364:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006368:	f43f aaf4 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 800636c:	29ff      	cmp	r1, #255	; 0xff
 800636e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006372:	d1f1      	bne.n	8006358 <d_print_comp.part.10+0xaec>
 8006374:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006378:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800637c:	4620      	mov	r0, r4
 800637e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006382:	4798      	blx	r3
 8006384:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006388:	2101      	movs	r1, #1
 800638a:	440b      	add	r3, r1
 800638c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006390:	2300      	movs	r3, #0
 8006392:	e7e3      	b.n	800635c <d_print_comp.part.10+0xaf0>
 8006394:	4f3f      	ldr	r7, [pc, #252]	; (8006494 <d_print_comp.part.10+0xc28>)
 8006396:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800639a:	f107 0a0a 	add.w	sl, r7, #10
 800639e:	f04f 0900 	mov.w	r9, #0
 80063a2:	e00a      	b.n	80063ba <d_print_comp.part.10+0xb4e>
 80063a4:	460b      	mov	r3, r1
 80063a6:	3101      	adds	r1, #1
 80063a8:	4557      	cmp	r7, sl
 80063aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063ae:	f804 8003 	strb.w	r8, [r4, r3]
 80063b2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80063b6:	f000 85ed 	beq.w	8006f94 <d_print_comp.part.10+0x1728>
 80063ba:	29ff      	cmp	r1, #255	; 0xff
 80063bc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80063c0:	d1f0      	bne.n	80063a4 <d_print_comp.part.10+0xb38>
 80063c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063c6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80063ca:	4620      	mov	r0, r4
 80063cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063d0:	4798      	blx	r3
 80063d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80063d6:	2101      	movs	r1, #1
 80063d8:	440b      	add	r3, r1
 80063da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80063de:	2300      	movs	r3, #0
 80063e0:	e7e2      	b.n	80063a8 <d_print_comp.part.10+0xb3c>
 80063e2:	6852      	ldr	r2, [r2, #4]
 80063e4:	a806      	add	r0, sp, #24
 80063e6:	492c      	ldr	r1, [pc, #176]	; (8006498 <d_print_comp.part.10+0xc2c>)
 80063e8:	f7fa fc80 	bl	8000cec <sprintf>
 80063ec:	a806      	add	r0, sp, #24
 80063ee:	f005 f8bf 	bl	800b570 <strlen>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f43f aaae 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80063f8:	f10d 0517 	add.w	r5, sp, #23
 80063fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006400:	182f      	adds	r7, r5, r0
 8006402:	f04f 0800 	mov.w	r8, #0
 8006406:	e009      	b.n	800641c <d_print_comp.part.10+0xbb0>
 8006408:	460b      	mov	r3, r1
 800640a:	3101      	adds	r1, #1
 800640c:	42bd      	cmp	r5, r7
 800640e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006412:	54e6      	strb	r6, [r4, r3]
 8006414:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006418:	f43f aa9c 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 800641c:	29ff      	cmp	r1, #255	; 0xff
 800641e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006422:	d1f1      	bne.n	8006408 <d_print_comp.part.10+0xb9c>
 8006424:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006428:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800642c:	4620      	mov	r0, r4
 800642e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006432:	4798      	blx	r3
 8006434:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006438:	2101      	movs	r1, #1
 800643a:	440b      	add	r3, r1
 800643c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006440:	2300      	movs	r3, #0
 8006442:	e7e3      	b.n	800640c <d_print_comp.part.10+0xba0>
 8006444:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006448:	7915      	ldrb	r5, [r2, #4]
 800644a:	29ff      	cmp	r1, #255	; 0xff
 800644c:	f001 80b3 	beq.w	80075b6 <d_print_comp.part.10+0x1d4a>
 8006450:	1c4b      	adds	r3, r1, #1
 8006452:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006456:	5465      	strb	r5, [r4, r1]
 8006458:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800645c:	f7ff ba7a 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006460:	4631      	mov	r1, r6
 8006462:	6852      	ldr	r2, [r2, #4]
 8006464:	f001 fc9c 	bl	8007da0 <d_print_comp>
 8006468:	4620      	mov	r0, r4
 800646a:	4631      	mov	r1, r6
 800646c:	68aa      	ldr	r2, [r5, #8]
 800646e:	f001 fc97 	bl	8007da0 <d_print_comp>
 8006472:	f7ff ba6f 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006476:	4f09      	ldr	r7, [pc, #36]	; (800649c <d_print_comp.part.10+0xc30>)
 8006478:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800647c:	f107 0a0e 	add.w	sl, r7, #14
 8006480:	f04f 0900 	mov.w	r9, #0
 8006484:	e01b      	b.n	80064be <d_print_comp.part.10+0xc52>
 8006486:	bf00      	nop
 8006488:	0800cf57 	.word	0x0800cf57
 800648c:	0800d06b 	.word	0x0800d06b
 8006490:	0800cffb 	.word	0x0800cffb
 8006494:	0800cfeb 	.word	0x0800cfeb
 8006498:	0800ce18 	.word	0x0800ce18
 800649c:	0800cfdb 	.word	0x0800cfdb
 80064a0:	0800cf8d 	.word	0x0800cf8d
 80064a4:	0800cf8b 	.word	0x0800cf8b
 80064a8:	460b      	mov	r3, r1
 80064aa:	3101      	adds	r1, #1
 80064ac:	4557      	cmp	r7, sl
 80064ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80064b2:	f804 8003 	strb.w	r8, [r4, r3]
 80064b6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80064ba:	f000 8564 	beq.w	8006f86 <d_print_comp.part.10+0x171a>
 80064be:	29ff      	cmp	r1, #255	; 0xff
 80064c0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80064c4:	d1f0      	bne.n	80064a8 <d_print_comp.part.10+0xc3c>
 80064c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064ca:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80064ce:	4620      	mov	r0, r4
 80064d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064d4:	4798      	blx	r3
 80064d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80064da:	2101      	movs	r1, #1
 80064dc:	440b      	add	r3, r1
 80064de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80064e2:	2300      	movs	r3, #0
 80064e4:	e7e2      	b.n	80064ac <d_print_comp.part.10+0xc40>
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	7811      	ldrb	r1, [r2, #0]
 80064ea:	2927      	cmp	r1, #39	; 0x27
 80064ec:	f040 85b8 	bne.w	8007060 <d_print_comp.part.10+0x17f4>
 80064f0:	6852      	ldr	r2, [r2, #4]
 80064f2:	7c17      	ldrb	r7, [r2, #16]
 80064f4:	b15f      	cbz	r7, 800650e <d_print_comp.part.10+0xca2>
 80064f6:	2f06      	cmp	r7, #6
 80064f8:	f241 817c 	bls.w	80077f4 <d_print_comp.part.10+0x1f88>
 80064fc:	2f07      	cmp	r7, #7
 80064fe:	d106      	bne.n	800650e <d_print_comp.part.10+0xca2>
 8006500:	68aa      	ldr	r2, [r5, #8]
 8006502:	7811      	ldrb	r1, [r2, #0]
 8006504:	b919      	cbnz	r1, 800650e <d_print_comp.part.10+0xca2>
 8006506:	6891      	ldr	r1, [r2, #8]
 8006508:	2901      	cmp	r1, #1
 800650a:	f001 83b1 	beq.w	8007c70 <d_print_comp.part.10+0x2404>
 800650e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006512:	29ff      	cmp	r1, #255	; 0xff
 8006514:	f001 8154 	beq.w	80077c0 <d_print_comp.part.10+0x1f54>
 8006518:	1c4a      	adds	r2, r1, #1
 800651a:	2328      	movs	r3, #40	; 0x28
 800651c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006520:	5463      	strb	r3, [r4, r1]
 8006522:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006526:	686a      	ldr	r2, [r5, #4]
 8006528:	4620      	mov	r0, r4
 800652a:	4631      	mov	r1, r6
 800652c:	f001 fc38 	bl	8007da0 <d_print_comp>
 8006530:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006534:	2bff      	cmp	r3, #255	; 0xff
 8006536:	f001 8120 	beq.w	800777a <d_print_comp.part.10+0x1f0e>
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	2229      	movs	r2, #41	; 0x29
 800653e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006542:	54e2      	strb	r2, [r4, r3]
 8006544:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006548:	782b      	ldrb	r3, [r5, #0]
 800654a:	2b3c      	cmp	r3, #60	; 0x3c
 800654c:	f001 820a 	beq.w	8007964 <d_print_comp.part.10+0x20f8>
 8006550:	2f08      	cmp	r7, #8
 8006552:	f001 81e8 	beq.w	8007926 <d_print_comp.part.10+0x20ba>
 8006556:	4620      	mov	r0, r4
 8006558:	4631      	mov	r1, r6
 800655a:	68aa      	ldr	r2, [r5, #8]
 800655c:	f001 fc20 	bl	8007da0 <d_print_comp>
 8006560:	f7ff b9f8 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006564:	2301      	movs	r3, #1
 8006566:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800656a:	f7ff b9f3 	b.w	8005954 <d_print_comp.part.10+0xe8>
 800656e:	6893      	ldr	r3, [r2, #8]
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	2a39      	cmp	r2, #57	; 0x39
 8006574:	f47f aec7 	bne.w	8006306 <d_print_comp.part.10+0xa9a>
 8006578:	689f      	ldr	r7, [r3, #8]
 800657a:	783a      	ldrb	r2, [r7, #0]
 800657c:	2a3a      	cmp	r2, #58	; 0x3a
 800657e:	f47f aec2 	bne.w	8006306 <d_print_comp.part.10+0xa9a>
 8006582:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8006586:	49bc      	ldr	r1, [pc, #752]	; (8006878 <d_print_comp.part.10+0x100c>)
 8006588:	f8da 2004 	ldr.w	r2, [sl, #4]
 800658c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006590:	6810      	ldr	r0, [r2, #0]
 8006592:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8006596:	68bd      	ldr	r5, [r7, #8]
 8006598:	f004 fcf4 	bl	800af84 <strcmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	f001 8294 	beq.w	8007aca <d_print_comp.part.10+0x225e>
 80065a2:	4620      	mov	r0, r4
 80065a4:	49b5      	ldr	r1, [pc, #724]	; (800687c <d_print_comp.part.10+0x1010>)
 80065a6:	f7ff f92b 	bl	8005800 <d_append_string>
 80065aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065ae:	b143      	cbz	r3, 80065c2 <d_print_comp.part.10+0xd56>
 80065b0:	4620      	mov	r0, r4
 80065b2:	4631      	mov	r1, r6
 80065b4:	4642      	mov	r2, r8
 80065b6:	f002 fa91 	bl	8008adc <d_print_subexpr>
 80065ba:	4620      	mov	r0, r4
 80065bc:	2120      	movs	r1, #32
 80065be:	f7fd fa59 	bl	8003a74 <d_append_char>
 80065c2:	464a      	mov	r2, r9
 80065c4:	4620      	mov	r0, r4
 80065c6:	4631      	mov	r1, r6
 80065c8:	f001 fbea 	bl	8007da0 <d_print_comp>
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	f43f a9c1 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80065d2:	4620      	mov	r0, r4
 80065d4:	4631      	mov	r1, r6
 80065d6:	462a      	mov	r2, r5
 80065d8:	f002 fa80 	bl	8008adc <d_print_subexpr>
 80065dc:	f7ff b9ba 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80065e0:	6852      	ldr	r2, [r2, #4]
 80065e2:	b112      	cbz	r2, 80065ea <d_print_comp.part.10+0xd7e>
 80065e4:	4631      	mov	r1, r6
 80065e6:	f001 fbdb 	bl	8007da0 <d_print_comp>
 80065ea:	68ab      	ldr	r3, [r5, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f43f a9b1 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80065f2:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80065f6:	2ffd      	cmp	r7, #253	; 0xfd
 80065f8:	f200 86fd 	bhi.w	80073f6 <d_print_comp.part.10+0x1b8a>
 80065fc:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8006890 <d_print_comp.part.10+0x1024>
 8006600:	f04f 0a00 	mov.w	sl, #0
 8006604:	f108 0b02 	add.w	fp, r8, #2
 8006608:	4639      	mov	r1, r7
 800660a:	e009      	b.n	8006620 <d_print_comp.part.10+0xdb4>
 800660c:	460b      	mov	r3, r1
 800660e:	3101      	adds	r1, #1
 8006610:	45d8      	cmp	r8, fp
 8006612:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006616:	54e7      	strb	r7, [r4, r3]
 8006618:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800661c:	f000 8501 	beq.w	8007022 <d_print_comp.part.10+0x17b6>
 8006620:	29ff      	cmp	r1, #255	; 0xff
 8006622:	f818 7f01 	ldrb.w	r7, [r8, #1]!
 8006626:	d1f1      	bne.n	800660c <d_print_comp.part.10+0xda0>
 8006628:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800662c:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8006630:	4620      	mov	r0, r4
 8006632:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006636:	4798      	blx	r3
 8006638:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800663c:	2101      	movs	r1, #1
 800663e:	440b      	add	r3, r1
 8006640:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006644:	2300      	movs	r3, #0
 8006646:	e7e3      	b.n	8006610 <d_print_comp.part.10+0xda4>
 8006648:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f040 862d 	bne.w	80072ac <d_print_comp.part.10+0x1a40>
 8006652:	686a      	ldr	r2, [r5, #4]
 8006654:	498a      	ldr	r1, [pc, #552]	; (8006880 <d_print_comp.part.10+0x1014>)
 8006656:	6853      	ldr	r3, [r2, #4]
 8006658:	428b      	cmp	r3, r1
 800665a:	f000 85ff 	beq.w	800725c <d_print_comp.part.10+0x19f0>
 800665e:	4631      	mov	r1, r6
 8006660:	4620      	mov	r0, r4
 8006662:	f001 fb9d 	bl	8007da0 <d_print_comp>
 8006666:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800666a:	2bff      	cmp	r3, #255	; 0xff
 800666c:	f001 80f8 	beq.w	8007860 <d_print_comp.part.10+0x1ff4>
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	2220      	movs	r2, #32
 8006674:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006678:	54e2      	strb	r2, [r4, r3]
 800667a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800667e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 84ef 	beq.w	8007066 <d_print_comp.part.10+0x17fa>
 8006688:	4d7e      	ldr	r5, [pc, #504]	; (8006884 <d_print_comp.part.10+0x1018>)
 800668a:	f04f 0800 	mov.w	r8, #0
 800668e:	1daf      	adds	r7, r5, #6
 8006690:	e009      	b.n	80066a6 <d_print_comp.part.10+0xe3a>
 8006692:	460b      	mov	r3, r1
 8006694:	3101      	adds	r1, #1
 8006696:	42bd      	cmp	r5, r7
 8006698:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800669c:	54e6      	strb	r6, [r4, r3]
 800669e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80066a2:	f43f a957 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80066a6:	29ff      	cmp	r1, #255	; 0xff
 80066a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80066ac:	d1f1      	bne.n	8006692 <d_print_comp.part.10+0xe26>
 80066ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80066b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80066b6:	4620      	mov	r0, r4
 80066b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80066bc:	4798      	blx	r3
 80066be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80066c2:	2101      	movs	r1, #1
 80066c4:	440b      	add	r3, r1
 80066c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80066ca:	2300      	movs	r3, #0
 80066cc:	e7e3      	b.n	8006696 <d_print_comp.part.10+0xe2a>
 80066ce:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80066d2:	ab16      	add	r3, sp, #88	; 0x58
 80066d4:	f843 2d40 	str.w	r2, [r3, #-64]!
 80066d8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80066dc:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80066e0:	68aa      	ldr	r2, [r5, #8]
 80066e2:	2700      	movs	r7, #0
 80066e4:	4631      	mov	r1, r6
 80066e6:	9309      	str	r3, [sp, #36]	; 0x24
 80066e8:	9507      	str	r5, [sp, #28]
 80066ea:	9708      	str	r7, [sp, #32]
 80066ec:	f001 fb58 	bl	8007da0 <d_print_comp>
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	b923      	cbnz	r3, 80066fe <d_print_comp.part.10+0xe92>
 80066f4:	4631      	mov	r1, r6
 80066f6:	462a      	mov	r2, r5
 80066f8:	4620      	mov	r0, r4
 80066fa:	f001 fb5d 	bl	8007db8 <d_print_mod>
 80066fe:	9b06      	ldr	r3, [sp, #24]
 8006700:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8006704:	f7ff b926 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006708:	ab16      	add	r3, sp, #88	; 0x58
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8006710:	9a01      	ldr	r2, [sp, #4]
 8006712:	f8cd b008 	str.w	fp, [sp, #8]
 8006716:	f842 bd40 	str.w	fp, [r2, #-64]!
 800671a:	9201      	str	r2, [sp, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8006722:	9901      	ldr	r1, [sp, #4]
 8006724:	9208      	str	r2, [sp, #32]
 8006726:	9a02      	ldr	r2, [sp, #8]
 8006728:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
 800672c:	9507      	str	r5, [sp, #28]
 800672e:	9309      	str	r3, [sp, #36]	; 0x24
 8006730:	2a00      	cmp	r2, #0
 8006732:	f001 831e 	beq.w	8007d72 <d_print_comp.part.10+0x2506>
 8006736:	6853      	ldr	r3, [r2, #4]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	3b19      	subs	r3, #25
 800673c:	2b02      	cmp	r3, #2
 800673e:	f201 8318 	bhi.w	8007d72 <d_print_comp.part.10+0x2506>
 8006742:	46ab      	mov	fp, r5
 8006744:	f04f 0801 	mov.w	r8, #1
 8006748:	4617      	mov	r7, r2
 800674a:	9603      	str	r6, [sp, #12]
 800674c:	468a      	mov	sl, r1
 800674e:	460d      	mov	r5, r1
 8006750:	e004      	b.n	800675c <d_print_comp.part.10+0xef0>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	3b19      	subs	r3, #25
 8006758:	2b02      	cmp	r3, #2
 800675a:	d81d      	bhi.n	8006798 <d_print_comp.part.10+0xf2c>
 800675c:	ea4f 1c08 	mov.w	ip, r8, lsl #4
 8006760:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	44e1      	add	r9, ip
 8006768:	f1a9 0640 	sub.w	r6, r9, #64	; 0x40
 800676c:	b98b      	cbnz	r3, 8006792 <d_print_comp.part.10+0xf26>
 800676e:	f1b8 0f03 	cmp.w	r8, #3
 8006772:	f200 87dd 	bhi.w	8007730 <d_print_comp.part.10+0x1ec4>
 8006776:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800677a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800677e:	f849 5c40 	str.w	r5, [r9, #-64]
 8006782:	2301      	movs	r3, #1
 8006784:	eb0a 050c 	add.w	r5, sl, ip
 8006788:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800678c:	f108 0801 	add.w	r8, r8, #1
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	683f      	ldr	r7, [r7, #0]
 8006794:	2f00      	cmp	r7, #0
 8006796:	d1dc      	bne.n	8006752 <d_print_comp.part.10+0xee6>
 8006798:	9e03      	ldr	r6, [sp, #12]
 800679a:	4620      	mov	r0, r4
 800679c:	4631      	mov	r1, r6
 800679e:	f8db 2008 	ldr.w	r2, [fp, #8]
 80067a2:	f001 fafd 	bl	8007da0 <d_print_comp>
 80067a6:	9902      	ldr	r1, [sp, #8]
 80067a8:	9b08      	ldr	r3, [sp, #32]
 80067aa:	465d      	mov	r5, fp
 80067ac:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f47f a8cf 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 80067b6:	f1b8 0f01 	cmp.w	r8, #1
 80067ba:	f001 813a 	beq.w	8007a32 <d_print_comp.part.10+0x21c6>
 80067be:	9a01      	ldr	r2, [sp, #4]
 80067c0:	eb02 1708 	add.w	r7, r2, r8, lsl #4
 80067c4:	f857 2c0c 	ldr.w	r2, [r7, #-12]
 80067c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80067cc:	4620      	mov	r0, r4
 80067ce:	4631      	mov	r1, r6
 80067d0:	f001 faf2 	bl	8007db8 <d_print_mod>
 80067d4:	f1b8 0f01 	cmp.w	r8, #1
 80067d8:	f1a7 0710 	sub.w	r7, r7, #16
 80067dc:	d1f2      	bne.n	80067c4 <d_print_comp.part.10+0xf58>
 80067de:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80067e2:	4620      	mov	r0, r4
 80067e4:	4631      	mov	r1, r6
 80067e6:	1d2a      	adds	r2, r5, #4
 80067e8:	f001 febc 	bl	8008564 <d_print_array_type.isra.9>
 80067ec:	f7ff b8b2 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80067f0:	06b3      	lsls	r3, r6, #26
 80067f2:	f100 8549 	bmi.w	8007288 <d_print_comp.part.10+0x1a1c>
 80067f6:	6853      	ldr	r3, [r2, #4]
 80067f8:	b11b      	cbz	r3, 8006802 <d_print_comp.part.10+0xf96>
 80067fa:	f016 0340 	ands.w	r3, r6, #64	; 0x40
 80067fe:	f000 879c 	beq.w	800773a <d_print_comp.part.10+0x1ece>
 8006802:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8006806:	4620      	mov	r0, r4
 8006808:	4631      	mov	r1, r6
 800680a:	f105 0208 	add.w	r2, r5, #8
 800680e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8006812:	f001 ff79 	bl	8008708 <d_print_function_type.isra.11>
 8006816:	f7ff b89d 	b.w	8005954 <d_print_comp.part.10+0xe8>
 800681a:	4e1b      	ldr	r6, [pc, #108]	; (8006888 <d_print_comp.part.10+0x101c>)
 800681c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006820:	f106 090e 	add.w	r9, r6, #14
 8006824:	f04f 0800 	mov.w	r8, #0
 8006828:	e009      	b.n	800683e <d_print_comp.part.10+0xfd2>
 800682a:	460b      	mov	r3, r1
 800682c:	3101      	adds	r1, #1
 800682e:	454e      	cmp	r6, r9
 8006830:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006834:	54e7      	strb	r7, [r4, r3]
 8006836:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800683a:	f000 82f8 	beq.w	8006e2e <d_print_comp.part.10+0x15c2>
 800683e:	29ff      	cmp	r1, #255	; 0xff
 8006840:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8006844:	d1f1      	bne.n	800682a <d_print_comp.part.10+0xfbe>
 8006846:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800684a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800684e:	4620      	mov	r0, r4
 8006850:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006854:	4798      	blx	r3
 8006856:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800685a:	2101      	movs	r1, #1
 800685c:	440b      	add	r3, r1
 800685e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006862:	2300      	movs	r3, #0
 8006864:	e7e3      	b.n	800682e <d_print_comp.part.10+0xfc2>
 8006866:	4f09      	ldr	r7, [pc, #36]	; (800688c <d_print_comp.part.10+0x1020>)
 8006868:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800686c:	f107 0a16 	add.w	sl, r7, #22
 8006870:	f04f 0900 	mov.w	r9, #0
 8006874:	e019      	b.n	80068aa <d_print_comp.part.10+0x103e>
 8006876:	bf00      	nop
 8006878:	0800cdf8 	.word	0x0800cdf8
 800687c:	0800cfb8 	.word	0x0800cfb8
 8006880:	0800c7d4 	.word	0x0800c7d4
 8006884:	0800cf7b 	.word	0x0800cf7b
 8006888:	0800d05b 	.word	0x0800d05b
 800688c:	0800cf5b 	.word	0x0800cf5b
 8006890:	0800cf8b 	.word	0x0800cf8b
 8006894:	460b      	mov	r3, r1
 8006896:	3101      	adds	r1, #1
 8006898:	4557      	cmp	r7, sl
 800689a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800689e:	f804 8003 	strb.w	r8, [r4, r3]
 80068a2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80068a6:	f000 82bb 	beq.w	8006e20 <d_print_comp.part.10+0x15b4>
 80068aa:	29ff      	cmp	r1, #255	; 0xff
 80068ac:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80068b0:	d1f0      	bne.n	8006894 <d_print_comp.part.10+0x1028>
 80068b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80068b6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80068ba:	4620      	mov	r0, r4
 80068bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80068c0:	4798      	blx	r3
 80068c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80068c6:	2101      	movs	r1, #1
 80068c8:	440b      	add	r3, r1
 80068ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80068ce:	2300      	movs	r3, #0
 80068d0:	e7e2      	b.n	8006898 <d_print_comp.part.10+0x102c>
 80068d2:	4fd0      	ldr	r7, [pc, #832]	; (8006c14 <d_print_comp.part.10+0x13a8>)
 80068d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80068d8:	f107 0a1c 	add.w	sl, r7, #28
 80068dc:	f04f 0900 	mov.w	r9, #0
 80068e0:	e00a      	b.n	80068f8 <d_print_comp.part.10+0x108c>
 80068e2:	460b      	mov	r3, r1
 80068e4:	3101      	adds	r1, #1
 80068e6:	4557      	cmp	r7, sl
 80068e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80068ec:	f804 8003 	strb.w	r8, [r4, r3]
 80068f0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80068f4:	f000 8361 	beq.w	8006fba <d_print_comp.part.10+0x174e>
 80068f8:	29ff      	cmp	r1, #255	; 0xff
 80068fa:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80068fe:	d1f0      	bne.n	80068e2 <d_print_comp.part.10+0x1076>
 8006900:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006904:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006908:	4620      	mov	r0, r4
 800690a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800690e:	4798      	blx	r3
 8006910:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006914:	2101      	movs	r1, #1
 8006916:	440b      	add	r3, r1
 8006918:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800691c:	2300      	movs	r3, #0
 800691e:	e7e2      	b.n	80068e6 <d_print_comp.part.10+0x107a>
 8006920:	4fbd      	ldr	r7, [pc, #756]	; (8006c18 <d_print_comp.part.10+0x13ac>)
 8006922:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006926:	f107 0a08 	add.w	sl, r7, #8
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	e00a      	b.n	8006946 <d_print_comp.part.10+0x10da>
 8006930:	460b      	mov	r3, r1
 8006932:	3101      	adds	r1, #1
 8006934:	4557      	cmp	r7, sl
 8006936:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800693a:	f804 8003 	strb.w	r8, [r4, r3]
 800693e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006942:	f000 82b1 	beq.w	8006ea8 <d_print_comp.part.10+0x163c>
 8006946:	29ff      	cmp	r1, #255	; 0xff
 8006948:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800694c:	d1f0      	bne.n	8006930 <d_print_comp.part.10+0x10c4>
 800694e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006952:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006956:	4620      	mov	r0, r4
 8006958:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800695c:	4798      	blx	r3
 800695e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006962:	2101      	movs	r1, #1
 8006964:	440b      	add	r3, r1
 8006966:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800696a:	2300      	movs	r3, #0
 800696c:	e7e2      	b.n	8006934 <d_print_comp.part.10+0x10c8>
 800696e:	4fab      	ldr	r7, [pc, #684]	; (8006c1c <d_print_comp.part.10+0x13b0>)
 8006970:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006974:	f107 0a1d 	add.w	sl, r7, #29
 8006978:	f04f 0900 	mov.w	r9, #0
 800697c:	e00a      	b.n	8006994 <d_print_comp.part.10+0x1128>
 800697e:	460b      	mov	r3, r1
 8006980:	3101      	adds	r1, #1
 8006982:	4557      	cmp	r7, sl
 8006984:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006988:	f804 8003 	strb.w	r8, [r4, r3]
 800698c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006990:	f000 8340 	beq.w	8007014 <d_print_comp.part.10+0x17a8>
 8006994:	29ff      	cmp	r1, #255	; 0xff
 8006996:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800699a:	d1f0      	bne.n	800697e <d_print_comp.part.10+0x1112>
 800699c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80069a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80069a4:	4620      	mov	r0, r4
 80069a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80069aa:	4798      	blx	r3
 80069ac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80069b0:	2101      	movs	r1, #1
 80069b2:	440b      	add	r3, r1
 80069b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80069b8:	2300      	movs	r3, #0
 80069ba:	e7e2      	b.n	8006982 <d_print_comp.part.10+0x1116>
 80069bc:	4f98      	ldr	r7, [pc, #608]	; (8006c20 <d_print_comp.part.10+0x13b4>)
 80069be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80069c2:	f107 0a09 	add.w	sl, r7, #9
 80069c6:	f04f 0900 	mov.w	r9, #0
 80069ca:	e00a      	b.n	80069e2 <d_print_comp.part.10+0x1176>
 80069cc:	460b      	mov	r3, r1
 80069ce:	3101      	adds	r1, #1
 80069d0:	4557      	cmp	r7, sl
 80069d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80069d6:	f804 8003 	strb.w	r8, [r4, r3]
 80069da:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80069de:	f000 81d4 	beq.w	8006d8a <d_print_comp.part.10+0x151e>
 80069e2:	29ff      	cmp	r1, #255	; 0xff
 80069e4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80069e8:	d1f0      	bne.n	80069cc <d_print_comp.part.10+0x1160>
 80069ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80069ee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80069f2:	4620      	mov	r0, r4
 80069f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80069f8:	4798      	blx	r3
 80069fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80069fe:	2101      	movs	r1, #1
 8006a00:	440b      	add	r3, r1
 8006a02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006a06:	2300      	movs	r3, #0
 8006a08:	e7e2      	b.n	80069d0 <d_print_comp.part.10+0x1164>
 8006a0a:	f016 0604 	ands.w	r6, r6, #4
 8006a0e:	6853      	ldr	r3, [r2, #4]
 8006a10:	f040 834b 	bne.w	80070aa <d_print_comp.part.10+0x183e>
 8006a14:	685f      	ldr	r7, [r3, #4]
 8006a16:	f8d3 9000 	ldr.w	r9, [r3]
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	f43e af9a 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 8006a20:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006a24:	46b0      	mov	r8, r6
 8006a26:	e00a      	b.n	8006a3e <d_print_comp.part.10+0x11d2>
 8006a28:	460b      	mov	r3, r1
 8006a2a:	3101      	adds	r1, #1
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	42b7      	cmp	r7, r6
 8006a30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006a34:	54e5      	strb	r5, [r4, r3]
 8006a36:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006a3a:	f43e af8b 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 8006a3e:	29ff      	cmp	r1, #255	; 0xff
 8006a40:	f819 5006 	ldrb.w	r5, [r9, r6]
 8006a44:	d1f0      	bne.n	8006a28 <d_print_comp.part.10+0x11bc>
 8006a46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006a54:	4798      	blx	r3
 8006a56:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	440b      	add	r3, r1
 8006a5e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006a62:	2300      	movs	r3, #0
 8006a64:	e7e2      	b.n	8006a2c <d_print_comp.part.10+0x11c0>
 8006a66:	6850      	ldr	r0, [r2, #4]
 8006a68:	7803      	ldrb	r3, [r0, #0]
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	f000 870b 	beq.w	8007886 <d_print_comp.part.10+0x201a>
 8006a70:	2b23      	cmp	r3, #35	; 0x23
 8006a72:	f000 83a5 	beq.w	80071c0 <d_print_comp.part.10+0x1954>
 8006a76:	782a      	ldrb	r2, [r5, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	f000 83a1 	beq.w	80071c0 <d_print_comp.part.10+0x1954>
 8006a7e:	2b24      	cmp	r3, #36	; 0x24
 8006a80:	f47e af4c 	bne.w	800591c <d_print_comp.part.10+0xb0>
 8006a84:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
 8006a88:	6842      	ldr	r2, [r0, #4]
 8006a8a:	ab16      	add	r3, sp, #88	; 0x58
 8006a8c:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8006a90:	f843 7d40 	str.w	r7, [r3, #-64]!
 8006a94:	2000      	movs	r0, #0
 8006a96:	9507      	str	r5, [sp, #28]
 8006a98:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8006a9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006a9e:	9008      	str	r0, [sp, #32]
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	f47e af49 	bne.w	8005938 <d_print_comp.part.10+0xcc>
 8006aa6:	f7fe bf46 	b.w	8005936 <d_print_comp.part.10+0xca>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	6852      	ldr	r2, [r2, #4]
 8006aae:	f001 f977 	bl	8007da0 <d_print_comp>
 8006ab2:	f7fe bf4f 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006ab6:	6857      	ldr	r7, [r2, #4]
 8006ab8:	4d5a      	ldr	r5, [pc, #360]	; (8006c24 <d_print_comp.part.10+0x13b8>)
 8006aba:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8006abe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006ac2:	f105 0a08 	add.w	sl, r5, #8
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	e009      	b.n	8006ae0 <d_print_comp.part.10+0x1274>
 8006acc:	460b      	mov	r3, r1
 8006ace:	3101      	adds	r1, #1
 8006ad0:	4555      	cmp	r5, sl
 8006ad2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006ad6:	54e6      	strb	r6, [r4, r3]
 8006ad8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006adc:	f000 8163 	beq.w	8006da6 <d_print_comp.part.10+0x153a>
 8006ae0:	29ff      	cmp	r1, #255	; 0xff
 8006ae2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006ae6:	d1f1      	bne.n	8006acc <d_print_comp.part.10+0x1260>
 8006ae8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006aec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006af0:	4620      	mov	r0, r4
 8006af2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006af6:	4798      	blx	r3
 8006af8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006afc:	2101      	movs	r1, #1
 8006afe:	440b      	add	r3, r1
 8006b00:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006b04:	2300      	movs	r3, #0
 8006b06:	e7e3      	b.n	8006ad0 <d_print_comp.part.10+0x1264>
 8006b08:	4f45      	ldr	r7, [pc, #276]	; (8006c20 <d_print_comp.part.10+0x13b4>)
 8006b0a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006b0e:	f107 0a09 	add.w	sl, r7, #9
 8006b12:	f04f 0900 	mov.w	r9, #0
 8006b16:	e00a      	b.n	8006b2e <d_print_comp.part.10+0x12c2>
 8006b18:	460b      	mov	r3, r1
 8006b1a:	3101      	adds	r1, #1
 8006b1c:	4557      	cmp	r7, sl
 8006b1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006b22:	f804 8003 	strb.w	r8, [r4, r3]
 8006b26:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006b2a:	f000 8135 	beq.w	8006d98 <d_print_comp.part.10+0x152c>
 8006b2e:	29ff      	cmp	r1, #255	; 0xff
 8006b30:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8006b34:	d1f0      	bne.n	8006b18 <d_print_comp.part.10+0x12ac>
 8006b36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006b3a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006b44:	4798      	blx	r3
 8006b46:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	440b      	add	r3, r1
 8006b4e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006b52:	2300      	movs	r3, #0
 8006b54:	e7e2      	b.n	8006b1c <d_print_comp.part.10+0x12b0>
 8006b56:	6852      	ldr	r2, [r2, #4]
 8006b58:	68af      	ldr	r7, [r5, #8]
 8006b5a:	b112      	cbz	r2, 8006b62 <d_print_comp.part.10+0x12f6>
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	f001 f91f 	bl	8007da0 <d_print_comp>
 8006b62:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006b66:	2bff      	cmp	r3, #255	; 0xff
 8006b68:	f000 8484 	beq.w	8007474 <d_print_comp.part.10+0x1c08>
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	257b      	movs	r5, #123	; 0x7b
 8006b70:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006b74:	4631      	mov	r1, r6
 8006b76:	54e5      	strb	r5, [r4, r3]
 8006b78:	463a      	mov	r2, r7
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006b80:	f001 f90e 	bl	8007da0 <d_print_comp>
 8006b84:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006b88:	29ff      	cmp	r1, #255	; 0xff
 8006b8a:	f000 8461 	beq.w	8007450 <d_print_comp.part.10+0x1be4>
 8006b8e:	1c4a      	adds	r2, r1, #1
 8006b90:	237d      	movs	r3, #125	; 0x7d
 8006b92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006b96:	5463      	strb	r3, [r4, r1]
 8006b98:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006b9c:	f7fe beda 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8006ba6:	f7fe bed5 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006baa:	687f      	ldr	r7, [r7, #4]
 8006bac:	2f00      	cmp	r7, #0
 8006bae:	f000 8699 	beq.w	80078e4 <d_print_comp.part.10+0x2078>
 8006bb2:	f1b8 0f04 	cmp.w	r8, #4
 8006bb6:	f47f a993 	bne.w	8005ee0 <d_print_comp.part.10+0x674>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8006bc0:	f7fe bec8 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006bc4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006bc8:	29ff      	cmp	r1, #255	; 0xff
 8006bca:	f000 870e 	beq.w	80079ea <d_print_comp.part.10+0x217e>
 8006bce:	1c4a      	adds	r2, r1, #1
 8006bd0:	232e      	movs	r3, #46	; 0x2e
 8006bd2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006bd6:	5463      	strb	r3, [r4, r1]
 8006bd8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006bdc:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8006be0:	f898 3000 	ldrb.w	r3, [r8]
 8006be4:	2b45      	cmp	r3, #69	; 0x45
 8006be6:	f000 84c1 	beq.w	800756c <d_print_comp.part.10+0x1d00>
 8006bea:	4620      	mov	r0, r4
 8006bec:	4631      	mov	r1, r6
 8006bee:	4642      	mov	r2, r8
 8006bf0:	f001 f8d6 	bl	8007da0 <d_print_comp>
 8006bf4:	f7fe beae 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	686a      	ldr	r2, [r5, #4]
 8006bfe:	f001 f8cf 	bl	8007da0 <d_print_comp>
 8006c02:	f7fe bea7 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006c06:	4620      	mov	r0, r4
 8006c08:	4631      	mov	r1, r6
 8006c0a:	686a      	ldr	r2, [r5, #4]
 8006c0c:	f001 f8c8 	bl	8007da0 <d_print_comp>
 8006c10:	f7fe bea0 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006c14:	0800d02b 	.word	0x0800d02b
 8006c18:	0800d04b 	.word	0x0800d04b
 8006c1c:	0800d00b 	.word	0x0800d00b
 8006c20:	0800cf9b 	.word	0x0800cf9b
 8006c24:	0800cf8f 	.word	0x0800cf8f
 8006c28:	4fbd      	ldr	r7, [pc, #756]	; (8006f20 <d_print_comp.part.10+0x16b4>)
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	68aa      	ldr	r2, [r5, #8]
 8006c30:	f001 f8b6 	bl	8007da0 <d_print_comp>
 8006c34:	f107 0a05 	add.w	sl, r7, #5
 8006c38:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006c3c:	f04f 0900 	mov.w	r9, #0
 8006c40:	e009      	b.n	8006c56 <d_print_comp.part.10+0x13ea>
 8006c42:	460b      	mov	r3, r1
 8006c44:	3101      	adds	r1, #1
 8006c46:	4557      	cmp	r7, sl
 8006c48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006c4c:	f804 8003 	strb.w	r8, [r4, r3]
 8006c50:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006c54:	d013      	beq.n	8006c7e <d_print_comp.part.10+0x1412>
 8006c56:	29ff      	cmp	r1, #255	; 0xff
 8006c58:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8006c5c:	d1f1      	bne.n	8006c42 <d_print_comp.part.10+0x13d6>
 8006c5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006c62:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006c66:	4620      	mov	r0, r4
 8006c68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006c6c:	4798      	blx	r3
 8006c6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006c72:	2101      	movs	r1, #1
 8006c74:	440b      	add	r3, r1
 8006c76:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e7e3      	b.n	8006c46 <d_print_comp.part.10+0x13da>
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4631      	mov	r1, r6
 8006c82:	686a      	ldr	r2, [r5, #4]
 8006c84:	f001 f88c 	bl	8007da0 <d_print_comp>
 8006c88:	f7fe be64 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4631      	mov	r1, r6
 8006c90:	686a      	ldr	r2, [r5, #4]
 8006c92:	f001 f885 	bl	8007da0 <d_print_comp>
 8006c96:	f7fe be5d 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	686a      	ldr	r2, [r5, #4]
 8006ca0:	f001 f87e 	bl	8007da0 <d_print_comp>
 8006ca4:	f7fe be56 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006ca8:	4620      	mov	r0, r4
 8006caa:	4631      	mov	r1, r6
 8006cac:	686a      	ldr	r2, [r5, #4]
 8006cae:	f001 f877 	bl	8007da0 <d_print_comp>
 8006cb2:	f7fe be4f 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4631      	mov	r1, r6
 8006cba:	686a      	ldr	r2, [r5, #4]
 8006cbc:	f001 f870 	bl	8007da0 <d_print_comp>
 8006cc0:	f7fe be48 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	686a      	ldr	r2, [r5, #4]
 8006cca:	f001 f869 	bl	8007da0 <d_print_comp>
 8006cce:	f7fe be41 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006cd2:	4f94      	ldr	r7, [pc, #592]	; (8006f24 <d_print_comp.part.10+0x16b8>)
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	686a      	ldr	r2, [r5, #4]
 8006cda:	f001 f861 	bl	8007da0 <d_print_comp>
 8006cde:	f107 0a04 	add.w	sl, r7, #4
 8006ce2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006ce6:	f04f 0900 	mov.w	r9, #0
 8006cea:	e009      	b.n	8006d00 <d_print_comp.part.10+0x1494>
 8006cec:	460b      	mov	r3, r1
 8006cee:	3101      	adds	r1, #1
 8006cf0:	4557      	cmp	r7, sl
 8006cf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006cf6:	f804 8003 	strb.w	r8, [r4, r3]
 8006cfa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006cfe:	d01a      	beq.n	8006d36 <d_print_comp.part.10+0x14ca>
 8006d00:	29ff      	cmp	r1, #255	; 0xff
 8006d02:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8006d06:	d1f1      	bne.n	8006cec <d_print_comp.part.10+0x1480>
 8006d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006d0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006d10:	4620      	mov	r0, r4
 8006d12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006d16:	4798      	blx	r3
 8006d18:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	440b      	add	r3, r1
 8006d20:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006d24:	2300      	movs	r3, #0
 8006d26:	e7e3      	b.n	8006cf0 <d_print_comp.part.10+0x1484>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	686a      	ldr	r2, [r5, #4]
 8006d2e:	f001 f837 	bl	8007da0 <d_print_comp>
 8006d32:	f7fe be0f 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d36:	4620      	mov	r0, r4
 8006d38:	4631      	mov	r1, r6
 8006d3a:	68aa      	ldr	r2, [r5, #8]
 8006d3c:	f001 f830 	bl	8007da0 <d_print_comp>
 8006d40:	f7fe be08 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d44:	4620      	mov	r0, r4
 8006d46:	4631      	mov	r1, r6
 8006d48:	686a      	ldr	r2, [r5, #4]
 8006d4a:	f001 f829 	bl	8007da0 <d_print_comp>
 8006d4e:	f7fe be01 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d52:	4620      	mov	r0, r4
 8006d54:	4631      	mov	r1, r6
 8006d56:	686a      	ldr	r2, [r5, #4]
 8006d58:	f001 f822 	bl	8007da0 <d_print_comp>
 8006d5c:	f7fe bdfa 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d60:	4620      	mov	r0, r4
 8006d62:	4631      	mov	r1, r6
 8006d64:	686a      	ldr	r2, [r5, #4]
 8006d66:	f001 f81b 	bl	8007da0 <d_print_comp>
 8006d6a:	f7fe bdf3 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4631      	mov	r1, r6
 8006d72:	686a      	ldr	r2, [r5, #4]
 8006d74:	f001 f814 	bl	8007da0 <d_print_comp>
 8006d78:	f7fe bdec 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4631      	mov	r1, r6
 8006d80:	686a      	ldr	r2, [r5, #4]
 8006d82:	f001 f80d 	bl	8007da0 <d_print_comp>
 8006d86:	f7fe bde5 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	1d2a      	adds	r2, r5, #4
 8006d90:	f001 fda6 	bl	80088e0 <d_print_cast.isra.12>
 8006d94:	f7fe bdde 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	68aa      	ldr	r2, [r5, #8]
 8006d9e:	f000 ffff 	bl	8007da0 <d_print_comp>
 8006da2:	f7fe bdd7 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006da6:	687d      	ldr	r5, [r7, #4]
 8006da8:	782b      	ldrb	r3, [r5, #0]
 8006daa:	3b61      	subs	r3, #97	; 0x61
 8006dac:	2b19      	cmp	r3, #25
 8006dae:	f240 82a4 	bls.w	80072fa <d_print_comp.part.10+0x1a8e>
 8006db2:	eb05 0309 	add.w	r3, r5, r9
 8006db6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	bf0c      	ite	eq
 8006dbe:	f109 37ff 	addeq.w	r7, r9, #4294967295
 8006dc2:	464f      	movne	r7, r9
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	f43e adc5 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 8006dca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006dce:	442f      	add	r7, r5
 8006dd0:	f04f 0800 	mov.w	r8, #0
 8006dd4:	e009      	b.n	8006dea <d_print_comp.part.10+0x157e>
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	3101      	adds	r1, #1
 8006dda:	42bd      	cmp	r5, r7
 8006ddc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006de0:	54e6      	strb	r6, [r4, r3]
 8006de2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006de6:	f43e adb5 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 8006dea:	29ff      	cmp	r1, #255	; 0xff
 8006dec:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006df0:	d1f1      	bne.n	8006dd6 <d_print_comp.part.10+0x156a>
 8006df2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006df6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006e00:	4798      	blx	r3
 8006e02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006e06:	2101      	movs	r1, #1
 8006e08:	440b      	add	r3, r1
 8006e0a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e7e3      	b.n	8006dda <d_print_comp.part.10+0x156e>
 8006e12:	4620      	mov	r0, r4
 8006e14:	4631      	mov	r1, r6
 8006e16:	686a      	ldr	r2, [r5, #4]
 8006e18:	f000 ffc2 	bl	8007da0 <d_print_comp>
 8006e1c:	f7fe bd9a 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006e20:	4620      	mov	r0, r4
 8006e22:	4631      	mov	r1, r6
 8006e24:	686a      	ldr	r2, [r5, #4]
 8006e26:	f000 ffbb 	bl	8007da0 <d_print_comp>
 8006e2a:	f7fe bd93 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006e2e:	686a      	ldr	r2, [r5, #4]
 8006e30:	a806      	add	r0, sp, #24
 8006e32:	3201      	adds	r2, #1
 8006e34:	493c      	ldr	r1, [pc, #240]	; (8006f28 <d_print_comp.part.10+0x16bc>)
 8006e36:	f7f9 ff59 	bl	8000cec <sprintf>
 8006e3a:	a806      	add	r0, sp, #24
 8006e3c:	f004 fb98 	bl	800b570 <strlen>
 8006e40:	b320      	cbz	r0, 8006e8c <d_print_comp.part.10+0x1620>
 8006e42:	f10d 0517 	add.w	r5, sp, #23
 8006e46:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006e4a:	182f      	adds	r7, r5, r0
 8006e4c:	f04f 0800 	mov.w	r8, #0
 8006e50:	e008      	b.n	8006e64 <d_print_comp.part.10+0x15f8>
 8006e52:	460b      	mov	r3, r1
 8006e54:	3101      	adds	r1, #1
 8006e56:	42bd      	cmp	r5, r7
 8006e58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006e5c:	54e6      	strb	r6, [r4, r3]
 8006e5e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006e62:	d015      	beq.n	8006e90 <d_print_comp.part.10+0x1624>
 8006e64:	29ff      	cmp	r1, #255	; 0xff
 8006e66:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006e6a:	d1f2      	bne.n	8006e52 <d_print_comp.part.10+0x15e6>
 8006e6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006e70:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006e74:	4620      	mov	r0, r4
 8006e76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006e7a:	4798      	blx	r3
 8006e7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006e80:	2101      	movs	r1, #1
 8006e82:	440b      	add	r3, r1
 8006e84:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e7e4      	b.n	8006e56 <d_print_comp.part.10+0x15ea>
 8006e8c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006e90:	29ff      	cmp	r1, #255	; 0xff
 8006e92:	f000 8302 	beq.w	800749a <d_print_comp.part.10+0x1c2e>
 8006e96:	1c4a      	adds	r2, r1, #1
 8006e98:	237d      	movs	r3, #125	; 0x7d
 8006e9a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006e9e:	5463      	strb	r3, [r4, r1]
 8006ea0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006ea4:	f7fe bd56 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4e20      	ldr	r6, [pc, #128]	; (8006f2c <d_print_comp.part.10+0x16c0>)
 8006eac:	4620      	mov	r0, r4
 8006eae:	686a      	ldr	r2, [r5, #4]
 8006eb0:	f000 ff76 	bl	8007da0 <d_print_comp>
 8006eb4:	f106 0902 	add.w	r9, r6, #2
 8006eb8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006ebc:	f04f 0800 	mov.w	r8, #0
 8006ec0:	e008      	b.n	8006ed4 <d_print_comp.part.10+0x1668>
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	3101      	adds	r1, #1
 8006ec6:	454e      	cmp	r6, r9
 8006ec8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006ecc:	54e7      	strb	r7, [r4, r3]
 8006ece:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8006ed2:	d013      	beq.n	8006efc <d_print_comp.part.10+0x1690>
 8006ed4:	29ff      	cmp	r1, #255	; 0xff
 8006ed6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8006eda:	d1f2      	bne.n	8006ec2 <d_print_comp.part.10+0x1656>
 8006edc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006ee0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006eea:	4798      	blx	r3
 8006eec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	440b      	add	r3, r1
 8006ef4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e7e4      	b.n	8006ec6 <d_print_comp.part.10+0x165a>
 8006efc:	68aa      	ldr	r2, [r5, #8]
 8006efe:	a806      	add	r0, sp, #24
 8006f00:	3201      	adds	r2, #1
 8006f02:	4909      	ldr	r1, [pc, #36]	; (8006f28 <d_print_comp.part.10+0x16bc>)
 8006f04:	f7f9 fef2 	bl	8000cec <sprintf>
 8006f08:	a806      	add	r0, sp, #24
 8006f0a:	f004 fb31 	bl	800b570 <strlen>
 8006f0e:	b360      	cbz	r0, 8006f6a <d_print_comp.part.10+0x16fe>
 8006f10:	f10d 0517 	add.w	r5, sp, #23
 8006f14:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006f18:	182f      	adds	r7, r5, r0
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	e010      	b.n	8006f42 <d_print_comp.part.10+0x16d6>
 8006f20:	0800cf23 	.word	0x0800cf23
 8006f24:	0800ce5f 	.word	0x0800ce5f
 8006f28:	0800ce18 	.word	0x0800ce18
 8006f2c:	0800d057 	.word	0x0800d057
 8006f30:	460b      	mov	r3, r1
 8006f32:	3101      	adds	r1, #1
 8006f34:	42bd      	cmp	r5, r7
 8006f36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006f3a:	54e6      	strb	r6, [r4, r3]
 8006f3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006f40:	d015      	beq.n	8006f6e <d_print_comp.part.10+0x1702>
 8006f42:	29ff      	cmp	r1, #255	; 0xff
 8006f44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006f48:	d1f2      	bne.n	8006f30 <d_print_comp.part.10+0x16c4>
 8006f4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006f4e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006f52:	4620      	mov	r0, r4
 8006f54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006f58:	4798      	blx	r3
 8006f5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006f5e:	2101      	movs	r1, #1
 8006f60:	440b      	add	r3, r1
 8006f62:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006f66:	2300      	movs	r3, #0
 8006f68:	e7e4      	b.n	8006f34 <d_print_comp.part.10+0x16c8>
 8006f6a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006f6e:	29ff      	cmp	r1, #255	; 0xff
 8006f70:	f000 8332 	beq.w	80075d8 <d_print_comp.part.10+0x1d6c>
 8006f74:	1c4a      	adds	r2, r1, #1
 8006f76:	237d      	movs	r3, #125	; 0x7d
 8006f78:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006f7c:	5463      	strb	r3, [r4, r1]
 8006f7e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006f82:	f7fe bce7 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006f86:	4620      	mov	r0, r4
 8006f88:	4631      	mov	r1, r6
 8006f8a:	686a      	ldr	r2, [r5, #4]
 8006f8c:	f000 ff08 	bl	8007da0 <d_print_comp>
 8006f90:	f7fe bce0 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006f94:	4631      	mov	r1, r6
 8006f96:	686a      	ldr	r2, [r5, #4]
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 ff01 	bl	8007da0 <d_print_comp>
 8006f9e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006fa2:	29ff      	cmp	r1, #255	; 0xff
 8006fa4:	f000 828a 	beq.w	80074bc <d_print_comp.part.10+0x1c50>
 8006fa8:	1c4a      	adds	r2, r1, #1
 8006faa:	2329      	movs	r3, #41	; 0x29
 8006fac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006fb0:	5463      	strb	r3, [r4, r1]
 8006fb2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006fb6:	f7fe bccd 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	686a      	ldr	r2, [r5, #4]
 8006fc0:	f000 feee 	bl	8007da0 <d_print_comp>
 8006fc4:	f7fe bcc6 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006fc8:	4631      	mov	r1, r6
 8006fca:	68aa      	ldr	r2, [r5, #8]
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fee7 	bl	8007da0 <d_print_comp>
 8006fd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006fd6:	29ff      	cmp	r1, #255	; 0xff
 8006fd8:	f000 830f 	beq.w	80075fa <d_print_comp.part.10+0x1d8e>
 8006fdc:	1c4a      	adds	r2, r1, #1
 8006fde:	235d      	movs	r3, #93	; 0x5d
 8006fe0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006fe4:	5463      	strb	r3, [r4, r1]
 8006fe6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006fea:	f7fe bcb3 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8006fee:	4631      	mov	r1, r6
 8006ff0:	68aa      	ldr	r2, [r5, #8]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 fed4 	bl	8007da0 <d_print_comp>
 8006ff8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006ffc:	29ff      	cmp	r1, #255	; 0xff
 8006ffe:	f000 826e 	beq.w	80074de <d_print_comp.part.10+0x1c72>
 8007002:	1c4a      	adds	r2, r1, #1
 8007004:	235d      	movs	r3, #93	; 0x5d
 8007006:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800700a:	5463      	strb	r3, [r4, r1]
 800700c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007010:	f7fe bca0 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007014:	4620      	mov	r0, r4
 8007016:	4631      	mov	r1, r6
 8007018:	686a      	ldr	r2, [r5, #4]
 800701a:	f000 fec1 	bl	8007da0 <d_print_comp>
 800701e:	f7fe bc99 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007022:	68aa      	ldr	r2, [r5, #8]
 8007024:	460f      	mov	r7, r1
 8007026:	4620      	mov	r0, r4
 8007028:	4631      	mov	r1, r6
 800702a:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 800702e:	f000 feb7 	bl	8007da0 <d_print_comp>
 8007032:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007036:	429d      	cmp	r5, r3
 8007038:	f47e ac8c 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 800703c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007040:	42bb      	cmp	r3, r7
 8007042:	f47e ac87 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 8007046:	3f02      	subs	r7, #2
 8007048:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 800704c:	f7fe bc82 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007050:	686d      	ldr	r5, [r5, #4]
 8007052:	9501      	str	r5, [sp, #4]
 8007054:	f1b8 0f00 	cmp.w	r8, #0
 8007058:	f47f a835 	bne.w	80060c6 <d_print_comp.part.10+0x85a>
 800705c:	f7fe bc7a 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007060:	2700      	movs	r7, #0
 8007062:	f7ff ba54 	b.w	800650e <d_print_comp.part.10+0xca2>
 8007066:	4dab      	ldr	r5, [pc, #684]	; (8007314 <d_print_comp.part.10+0x1aa8>)
 8007068:	4698      	mov	r8, r3
 800706a:	1daf      	adds	r7, r5, #6
 800706c:	e009      	b.n	8007082 <d_print_comp.part.10+0x1816>
 800706e:	460b      	mov	r3, r1
 8007070:	3101      	adds	r1, #1
 8007072:	42bd      	cmp	r5, r7
 8007074:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007078:	54e6      	strb	r6, [r4, r3]
 800707a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800707e:	f43e ac69 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 8007082:	29ff      	cmp	r1, #255	; 0xff
 8007084:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007088:	d1f1      	bne.n	800706e <d_print_comp.part.10+0x1802>
 800708a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800708e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007092:	4620      	mov	r0, r4
 8007094:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007098:	4798      	blx	r3
 800709a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800709e:	2101      	movs	r1, #1
 80070a0:	440b      	add	r3, r1
 80070a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80070a6:	2300      	movs	r3, #0
 80070a8:	e7e3      	b.n	8007072 <d_print_comp.part.10+0x1806>
 80070aa:	68df      	ldr	r7, [r3, #12]
 80070ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80070b0:	2f00      	cmp	r7, #0
 80070b2:	f43e ac4f 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80070b6:	2500      	movs	r5, #0
 80070b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80070bc:	46a8      	mov	r8, r5
 80070be:	e00a      	b.n	80070d6 <d_print_comp.part.10+0x186a>
 80070c0:	460b      	mov	r3, r1
 80070c2:	3101      	adds	r1, #1
 80070c4:	3501      	adds	r5, #1
 80070c6:	42af      	cmp	r7, r5
 80070c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80070cc:	54e6      	strb	r6, [r4, r3]
 80070ce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80070d2:	f43e ac3f 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80070d6:	29ff      	cmp	r1, #255	; 0xff
 80070d8:	f819 6005 	ldrb.w	r6, [r9, r5]
 80070dc:	d1f0      	bne.n	80070c0 <d_print_comp.part.10+0x1854>
 80070de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80070e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80070e6:	4620      	mov	r0, r4
 80070e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80070ec:	4798      	blx	r3
 80070ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80070f2:	2101      	movs	r1, #1
 80070f4:	440b      	add	r3, r1
 80070f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80070fa:	2300      	movs	r3, #0
 80070fc:	e7e2      	b.n	80070c4 <d_print_comp.part.10+0x1858>
 80070fe:	4d86      	ldr	r5, [pc, #536]	; (8007318 <d_print_comp.part.10+0x1aac>)
 8007100:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007104:	f105 0906 	add.w	r9, r5, #6
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	e008      	b.n	8007120 <d_print_comp.part.10+0x18b4>
 800710e:	460b      	mov	r3, r1
 8007110:	3101      	adds	r1, #1
 8007112:	454d      	cmp	r5, r9
 8007114:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007118:	54e6      	strb	r6, [r4, r3]
 800711a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800711e:	d013      	beq.n	8007148 <d_print_comp.part.10+0x18dc>
 8007120:	29ff      	cmp	r1, #255	; 0xff
 8007122:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007126:	d1f2      	bne.n	800710e <d_print_comp.part.10+0x18a2>
 8007128:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800712c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007130:	4620      	mov	r0, r4
 8007132:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007136:	4798      	blx	r3
 8007138:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800713c:	2101      	movs	r1, #1
 800713e:	440b      	add	r3, r1
 8007140:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007144:	2300      	movs	r3, #0
 8007146:	e7e4      	b.n	8007112 <d_print_comp.part.10+0x18a6>
 8007148:	463a      	mov	r2, r7
 800714a:	a806      	add	r0, sp, #24
 800714c:	4973      	ldr	r1, [pc, #460]	; (800731c <d_print_comp.part.10+0x1ab0>)
 800714e:	f7f9 fdcd 	bl	8000cec <sprintf>
 8007152:	a806      	add	r0, sp, #24
 8007154:	f004 fa0c 	bl	800b570 <strlen>
 8007158:	b320      	cbz	r0, 80071a4 <d_print_comp.part.10+0x1938>
 800715a:	f10d 0517 	add.w	r5, sp, #23
 800715e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007162:	182f      	adds	r7, r5, r0
 8007164:	f04f 0800 	mov.w	r8, #0
 8007168:	e008      	b.n	800717c <d_print_comp.part.10+0x1910>
 800716a:	460b      	mov	r3, r1
 800716c:	3101      	adds	r1, #1
 800716e:	42bd      	cmp	r5, r7
 8007170:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007174:	54e6      	strb	r6, [r4, r3]
 8007176:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800717a:	d015      	beq.n	80071a8 <d_print_comp.part.10+0x193c>
 800717c:	29ff      	cmp	r1, #255	; 0xff
 800717e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007182:	d1f2      	bne.n	800716a <d_print_comp.part.10+0x18fe>
 8007184:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007188:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800718c:	4620      	mov	r0, r4
 800718e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007192:	4798      	blx	r3
 8007194:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007198:	2101      	movs	r1, #1
 800719a:	440b      	add	r3, r1
 800719c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80071a0:	2300      	movs	r3, #0
 80071a2:	e7e4      	b.n	800716e <d_print_comp.part.10+0x1902>
 80071a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80071a8:	29ff      	cmp	r1, #255	; 0xff
 80071aa:	f000 8445 	beq.w	8007a38 <d_print_comp.part.10+0x21cc>
 80071ae:	1c4a      	adds	r2, r1, #1
 80071b0:	237d      	movs	r3, #125	; 0x7d
 80071b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80071b6:	5463      	strb	r3, [r4, r1]
 80071b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80071bc:	f7fe bbca 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80071c0:	4605      	mov	r5, r0
 80071c2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 80071c6:	f7fe bbab 	b.w	8005920 <d_print_comp.part.10+0xb4>
 80071ca:	6852      	ldr	r2, [r2, #4]
 80071cc:	6853      	ldr	r3, [r2, #4]
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	7848      	ldrb	r0, [r1, #1]
 80071d2:	2863      	cmp	r0, #99	; 0x63
 80071d4:	f000 83e2 	beq.w	800799c <d_print_comp.part.10+0x2130>
 80071d8:	7811      	ldrb	r1, [r2, #0]
 80071da:	2931      	cmp	r1, #49	; 0x31
 80071dc:	f000 844e 	beq.w	8007a7c <d_print_comp.part.10+0x2210>
 80071e0:	6853      	ldr	r3, [r2, #4]
 80071e2:	494f      	ldr	r1, [pc, #316]	; (8007320 <d_print_comp.part.10+0x1ab4>)
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f003 fecd 	bl	800af84 <strcmp>
 80071ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80071ee:	b918      	cbnz	r0, 80071f8 <d_print_comp.part.10+0x198c>
 80071f0:	7813      	ldrb	r3, [r2, #0]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	f000 845b 	beq.w	8007aae <d_print_comp.part.10+0x2242>
 80071f8:	4620      	mov	r0, r4
 80071fa:	4631      	mov	r1, r6
 80071fc:	f001 fc6e 	bl	8008adc <d_print_subexpr>
 8007200:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007204:	4947      	ldr	r1, [pc, #284]	; (8007324 <d_print_comp.part.10+0x1ab8>)
 8007206:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800720a:	681f      	ldr	r7, [r3, #0]
 800720c:	4638      	mov	r0, r7
 800720e:	f003 feb9 	bl	800af84 <strcmp>
 8007212:	2800      	cmp	r0, #0
 8007214:	f000 8422 	beq.w	8007a5c <d_print_comp.part.10+0x21f0>
 8007218:	4638      	mov	r0, r7
 800721a:	4941      	ldr	r1, [pc, #260]	; (8007320 <d_print_comp.part.10+0x1ab4>)
 800721c:	f003 feb2 	bl	800af84 <strcmp>
 8007220:	2800      	cmp	r0, #0
 8007222:	f040 843d 	bne.w	8007aa0 <d_print_comp.part.10+0x2234>
 8007226:	68ab      	ldr	r3, [r5, #8]
 8007228:	4631      	mov	r1, r6
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	4620      	mov	r0, r4
 800722e:	f001 fc55 	bl	8008adc <d_print_subexpr>
 8007232:	686b      	ldr	r3, [r5, #4]
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	2a31      	cmp	r2, #49	; 0x31
 8007238:	f47e ab8c 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	2a01      	cmp	r2, #1
 8007242:	f47e ab87 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b3e      	cmp	r3, #62	; 0x3e
 800724c:	f47e ab82 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 8007250:	4620      	mov	r0, r4
 8007252:	2129      	movs	r1, #41	; 0x29
 8007254:	f7fc fc0e 	bl	8003a74 <d_append_char>
 8007258:	f7fe bb7c 	b.w	8005954 <d_print_comp.part.10+0xe8>
 800725c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007260:	f7ff ba0d 	b.w	800667e <d_print_comp.part.10+0xe12>
 8007264:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8007268:	e002      	b.n	8007270 <d_print_comp.part.10+0x1a04>
 800726a:	7802      	ldrb	r2, [r0, #0]
 800726c:	2a2f      	cmp	r2, #47	; 0x2f
 800726e:	d106      	bne.n	800727e <d_print_comp.part.10+0x1a12>
 8007270:	2b00      	cmp	r3, #0
 8007272:	f340 8576 	ble.w	8007d62 <d_print_comp.part.10+0x24f6>
 8007276:	6880      	ldr	r0, [r0, #8]
 8007278:	3b01      	subs	r3, #1
 800727a:	2800      	cmp	r0, #0
 800727c:	d1f5      	bne.n	800726a <d_print_comp.part.10+0x19fe>
 800727e:	2301      	movs	r3, #1
 8007280:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8007284:	f7fe bb66 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007288:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 800728c:	3208      	adds	r2, #8
 800728e:	4631      	mov	r1, r6
 8007290:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007294:	f001 fa38 	bl	8008708 <d_print_function_type.isra.11>
 8007298:	686a      	ldr	r2, [r5, #4]
 800729a:	2a00      	cmp	r2, #0
 800729c:	f43e ab5a 	beq.w	8005954 <d_print_comp.part.10+0xe8>
 80072a0:	4620      	mov	r0, r4
 80072a2:	4631      	mov	r1, r6
 80072a4:	f000 fd7c 	bl	8007da0 <d_print_comp>
 80072a8:	f7fe bb54 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80072ac:	4f1e      	ldr	r7, [pc, #120]	; (8007328 <d_print_comp.part.10+0x1abc>)
 80072ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80072b2:	f107 0a05 	add.w	sl, r7, #5
 80072b6:	f04f 0900 	mov.w	r9, #0
 80072ba:	e00a      	b.n	80072d2 <d_print_comp.part.10+0x1a66>
 80072bc:	460b      	mov	r3, r1
 80072be:	3101      	adds	r1, #1
 80072c0:	4557      	cmp	r7, sl
 80072c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80072c6:	f804 8003 	strb.w	r8, [r4, r3]
 80072ca:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80072ce:	f43f a9c0 	beq.w	8006652 <d_print_comp.part.10+0xde6>
 80072d2:	29ff      	cmp	r1, #255	; 0xff
 80072d4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80072d8:	d1f0      	bne.n	80072bc <d_print_comp.part.10+0x1a50>
 80072da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80072de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80072e2:	4620      	mov	r0, r4
 80072e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80072e8:	4798      	blx	r3
 80072ea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80072ee:	2101      	movs	r1, #1
 80072f0:	440b      	add	r3, r1
 80072f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80072f6:	2300      	movs	r3, #0
 80072f8:	e7e2      	b.n	80072c0 <d_print_comp.part.10+0x1a54>
 80072fa:	29ff      	cmp	r1, #255	; 0xff
 80072fc:	f000 8421 	beq.w	8007b42 <d_print_comp.part.10+0x22d6>
 8007300:	1c4a      	adds	r2, r1, #1
 8007302:	2320      	movs	r3, #32
 8007304:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007308:	5463      	strb	r3, [r4, r1]
 800730a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800730e:	687d      	ldr	r5, [r7, #4]
 8007310:	e54f      	b.n	8006db2 <d_print_comp.part.10+0x1546>
 8007312:	bf00      	nop
 8007314:	0800cf83 	.word	0x0800cf83
 8007318:	0800d003 	.word	0x0800d003
 800731c:	0800ce18 	.word	0x0800ce18
 8007320:	0800cdec 	.word	0x0800cdec
 8007324:	0800cfb0 	.word	0x0800cfb0
 8007328:	0800cf73 	.word	0x0800cf73
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	49c5      	ldr	r1, [pc, #788]	; (8007644 <d_print_comp.part.10+0x1dd8>)
 8007330:	f8d3 8000 	ldr.w	r8, [r3]
 8007334:	4640      	mov	r0, r8
 8007336:	f003 fe25 	bl	800af84 <strcmp>
 800733a:	782b      	ldrb	r3, [r5, #0]
 800733c:	b910      	cbnz	r0, 8007344 <d_print_comp.part.10+0x1ad8>
 800733e:	2b03      	cmp	r3, #3
 8007340:	f000 8411 	beq.w	8007b66 <d_print_comp.part.10+0x22fa>
 8007344:	2b37      	cmp	r3, #55	; 0x37
 8007346:	f000 8487 	beq.w	8007c58 <d_print_comp.part.10+0x23ec>
 800734a:	463a      	mov	r2, r7
 800734c:	4620      	mov	r0, r4
 800734e:	4631      	mov	r1, r6
 8007350:	f001 fb8a 	bl	8008a68 <d_print_expr_op>
 8007354:	f1b8 0f00 	cmp.w	r8, #0
 8007358:	f43e afe7 	beq.w	800632a <d_print_comp.part.10+0xabe>
 800735c:	4640      	mov	r0, r8
 800735e:	49ba      	ldr	r1, [pc, #744]	; (8007648 <d_print_comp.part.10+0x1ddc>)
 8007360:	f003 fe10 	bl	800af84 <strcmp>
 8007364:	2800      	cmp	r0, #0
 8007366:	f000 823e 	beq.w	80077e6 <d_print_comp.part.10+0x1f7a>
 800736a:	4640      	mov	r0, r8
 800736c:	49b7      	ldr	r1, [pc, #732]	; (800764c <d_print_comp.part.10+0x1de0>)
 800736e:	f003 fe09 	bl	800af84 <strcmp>
 8007372:	4607      	mov	r7, r0
 8007374:	2800      	cmp	r0, #0
 8007376:	f47e afd8 	bne.w	800632a <d_print_comp.part.10+0xabe>
 800737a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800737e:	2bff      	cmp	r3, #255	; 0xff
 8007380:	f000 8421 	beq.w	8007bc6 <d_print_comp.part.10+0x235a>
 8007384:	1c58      	adds	r0, r3, #1
 8007386:	2728      	movs	r7, #40	; 0x28
 8007388:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800738c:	4631      	mov	r1, r6
 800738e:	54e7      	strb	r7, [r4, r3]
 8007390:	462a      	mov	r2, r5
 8007392:	4620      	mov	r0, r4
 8007394:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8007398:	f000 fd02 	bl	8007da0 <d_print_comp>
 800739c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80073a0:	29ff      	cmp	r1, #255	; 0xff
 80073a2:	f000 83ff 	beq.w	8007ba4 <d_print_comp.part.10+0x2338>
 80073a6:	2329      	movs	r3, #41	; 0x29
 80073a8:	1c4a      	adds	r2, r1, #1
 80073aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80073ae:	5463      	strb	r3, [r4, r1]
 80073b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80073b4:	f7fe bace 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80073b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80073bc:	29ff      	cmp	r1, #255	; 0xff
 80073be:	f000 83af 	beq.w	8007b20 <d_print_comp.part.10+0x22b4>
 80073c2:	1c4a      	adds	r2, r1, #1
 80073c4:	2328      	movs	r3, #40	; 0x28
 80073c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80073ca:	4620      	mov	r0, r4
 80073cc:	5463      	strb	r3, [r4, r1]
 80073ce:	1d3a      	adds	r2, r7, #4
 80073d0:	4631      	mov	r1, r6
 80073d2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80073d6:	f001 fa83 	bl	80088e0 <d_print_cast.isra.12>
 80073da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80073de:	29ff      	cmp	r1, #255	; 0xff
 80073e0:	f000 838d 	beq.w	8007afe <d_print_comp.part.10+0x2292>
 80073e4:	1c4a      	adds	r2, r1, #1
 80073e6:	2329      	movs	r3, #41	; 0x29
 80073e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80073ec:	5463      	strb	r3, [r4, r1]
 80073ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80073f2:	f7fe bf9a 	b.w	800632a <d_print_comp.part.10+0xabe>
 80073f6:	f04f 0800 	mov.w	r8, #0
 80073fa:	f804 8007 	strb.w	r8, [r4, r7]
 80073fe:	4639      	mov	r1, r7
 8007400:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007404:	4620      	mov	r0, r4
 8007406:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800740a:	4798      	blx	r3
 800740c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007410:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8007414:	3301      	adds	r3, #1
 8007416:	4647      	mov	r7, r8
 8007418:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800741c:	f7ff b8ee 	b.w	80065fc <d_print_comp.part.10+0xd90>
 8007420:	4620      	mov	r0, r4
 8007422:	4631      	mov	r1, r6
 8007424:	686a      	ldr	r2, [r5, #4]
 8007426:	f000 fcbb 	bl	8007da0 <d_print_comp>
 800742a:	f7fe ba93 	b.w	8005954 <d_print_comp.part.10+0xe8>
 800742e:	2700      	movs	r7, #0
 8007430:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8007434:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007438:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 800743c:	4798      	blx	r3
 800743e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007442:	4639      	mov	r1, r7
 8007444:	3301      	adds	r3, #1
 8007446:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800744a:	2201      	movs	r2, #1
 800744c:	f7fe bd26 	b.w	8005e9c <d_print_comp.part.10+0x630>
 8007450:	2500      	movs	r5, #0
 8007452:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007456:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800745a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800745e:	4620      	mov	r0, r4
 8007460:	4798      	blx	r3
 8007462:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007466:	4629      	mov	r1, r5
 8007468:	3301      	adds	r3, #1
 800746a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800746e:	2201      	movs	r2, #1
 8007470:	f7ff bb8e 	b.w	8006b90 <d_print_comp.part.10+0x1324>
 8007474:	2500      	movs	r5, #0
 8007476:	4619      	mov	r1, r3
 8007478:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800747c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007480:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007484:	4620      	mov	r0, r4
 8007486:	4798      	blx	r3
 8007488:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800748c:	462b      	mov	r3, r5
 800748e:	3201      	adds	r2, #1
 8007490:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007494:	2201      	movs	r2, #1
 8007496:	f7ff bb6a 	b.w	8006b6e <d_print_comp.part.10+0x1302>
 800749a:	2500      	movs	r5, #0
 800749c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80074a8:	4620      	mov	r0, r4
 80074aa:	4798      	blx	r3
 80074ac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074b0:	4629      	mov	r1, r5
 80074b2:	3301      	adds	r3, #1
 80074b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074b8:	2201      	movs	r2, #1
 80074ba:	e4ed      	b.n	8006e98 <d_print_comp.part.10+0x162c>
 80074bc:	2500      	movs	r5, #0
 80074be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80074ca:	4620      	mov	r0, r4
 80074cc:	4798      	blx	r3
 80074ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074d2:	4629      	mov	r1, r5
 80074d4:	3301      	adds	r3, #1
 80074d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074da:	2201      	movs	r2, #1
 80074dc:	e565      	b.n	8006faa <d_print_comp.part.10+0x173e>
 80074de:	2500      	movs	r5, #0
 80074e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074e8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80074ec:	4620      	mov	r0, r4
 80074ee:	4798      	blx	r3
 80074f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074f4:	4629      	mov	r1, r5
 80074f6:	3301      	adds	r3, #1
 80074f8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074fc:	2201      	movs	r2, #1
 80074fe:	e581      	b.n	8007004 <d_print_comp.part.10+0x1798>
 8007500:	6856      	ldr	r6, [r2, #4]
 8007502:	6897      	ldr	r7, [r2, #8]
 8007504:	4437      	add	r7, r6
 8007506:	42be      	cmp	r6, r7
 8007508:	f4be aa24 	bcs.w	8005954 <d_print_comp.part.10+0xe8>
 800750c:	f04f 0800 	mov.w	r8, #0
 8007510:	e00d      	b.n	800752e <d_print_comp.part.10+0x1cc2>
 8007512:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007516:	29ff      	cmp	r1, #255	; 0xff
 8007518:	d018      	beq.n	800754c <d_print_comp.part.10+0x1ce0>
 800751a:	1c4b      	adds	r3, r1, #1
 800751c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8007520:	5465      	strb	r5, [r4, r1]
 8007522:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8007526:	3601      	adds	r6, #1
 8007528:	42b7      	cmp	r7, r6
 800752a:	f67e aa13 	bls.w	8005954 <d_print_comp.part.10+0xe8>
 800752e:	1bbb      	subs	r3, r7, r6
 8007530:	2b03      	cmp	r3, #3
 8007532:	7835      	ldrb	r5, [r6, #0]
 8007534:	dded      	ble.n	8007512 <d_print_comp.part.10+0x1ca6>
 8007536:	2d5f      	cmp	r5, #95	; 0x5f
 8007538:	d1eb      	bne.n	8007512 <d_print_comp.part.10+0x1ca6>
 800753a:	7872      	ldrb	r2, [r6, #1]
 800753c:	2a5f      	cmp	r2, #95	; 0x5f
 800753e:	d1e8      	bne.n	8007512 <d_print_comp.part.10+0x1ca6>
 8007540:	78b3      	ldrb	r3, [r6, #2]
 8007542:	2b55      	cmp	r3, #85	; 0x55
 8007544:	f000 8350 	beq.w	8007be8 <d_print_comp.part.10+0x237c>
 8007548:	4615      	mov	r5, r2
 800754a:	e7e2      	b.n	8007512 <d_print_comp.part.10+0x1ca6>
 800754c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007550:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007554:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007558:	4620      	mov	r0, r4
 800755a:	4798      	blx	r3
 800755c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8007560:	2301      	movs	r3, #1
 8007562:	441a      	add	r2, r3
 8007564:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007568:	2100      	movs	r1, #0
 800756a:	e7d7      	b.n	800751c <d_print_comp.part.10+0x1cb0>
 800756c:	4d38      	ldr	r5, [pc, #224]	; (8007650 <d_print_comp.part.10+0x1de4>)
 800756e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007572:	f105 0a0d 	add.w	sl, r5, #13
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	e008      	b.n	800758e <d_print_comp.part.10+0x1d22>
 800757c:	460b      	mov	r3, r1
 800757e:	3101      	adds	r1, #1
 8007580:	4555      	cmp	r5, sl
 8007582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007586:	54e7      	strb	r7, [r4, r3]
 8007588:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800758c:	d046      	beq.n	800761c <d_print_comp.part.10+0x1db0>
 800758e:	29ff      	cmp	r1, #255	; 0xff
 8007590:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8007594:	d1f2      	bne.n	800757c <d_print_comp.part.10+0x1d10>
 8007596:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800759a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800759e:	4620      	mov	r0, r4
 80075a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075a4:	4798      	blx	r3
 80075a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075aa:	2101      	movs	r1, #1
 80075ac:	440b      	add	r3, r1
 80075ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075b2:	2300      	movs	r3, #0
 80075b4:	e7e4      	b.n	8007580 <d_print_comp.part.10+0x1d14>
 80075b6:	2600      	movs	r6, #0
 80075b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80075bc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80075c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075c4:	4798      	blx	r3
 80075c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075ca:	4631      	mov	r1, r6
 80075cc:	3301      	adds	r3, #1
 80075ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075d2:	2301      	movs	r3, #1
 80075d4:	f7fe bf3d 	b.w	8006452 <d_print_comp.part.10+0xbe6>
 80075d8:	2500      	movs	r5, #0
 80075da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80075de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075e2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80075e6:	4620      	mov	r0, r4
 80075e8:	4798      	blx	r3
 80075ea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075ee:	4629      	mov	r1, r5
 80075f0:	3301      	adds	r3, #1
 80075f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075f6:	2201      	movs	r2, #1
 80075f8:	e4bd      	b.n	8006f76 <d_print_comp.part.10+0x170a>
 80075fa:	2500      	movs	r5, #0
 80075fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007600:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007604:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007608:	4620      	mov	r0, r4
 800760a:	4798      	blx	r3
 800760c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007610:	4629      	mov	r1, r5
 8007612:	3301      	adds	r3, #1
 8007614:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007618:	2201      	movs	r2, #1
 800761a:	e4e0      	b.n	8006fde <d_print_comp.part.10+0x1772>
 800761c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007620:	a806      	add	r0, sp, #24
 8007622:	3201      	adds	r2, #1
 8007624:	490b      	ldr	r1, [pc, #44]	; (8007654 <d_print_comp.part.10+0x1de8>)
 8007626:	f7f9 fb61 	bl	8000cec <sprintf>
 800762a:	a806      	add	r0, sp, #24
 800762c:	f003 ffa0 	bl	800b570 <strlen>
 8007630:	b378      	cbz	r0, 8007692 <d_print_comp.part.10+0x1e26>
 8007632:	f10d 0517 	add.w	r5, sp, #23
 8007636:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800763a:	eb05 0a00 	add.w	sl, r5, r0
 800763e:	f04f 0900 	mov.w	r9, #0
 8007642:	e012      	b.n	800766a <d_print_comp.part.10+0x1dfe>
 8007644:	0800cfa8 	.word	0x0800cfa8
 8007648:	0800cfac 	.word	0x0800cfac
 800764c:	0800d294 	.word	0x0800d294
 8007650:	0800ce07 	.word	0x0800ce07
 8007654:	0800ce18 	.word	0x0800ce18
 8007658:	460b      	mov	r3, r1
 800765a:	3101      	adds	r1, #1
 800765c:	4555      	cmp	r5, sl
 800765e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007662:	54e7      	strb	r7, [r4, r3]
 8007664:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8007668:	d015      	beq.n	8007696 <d_print_comp.part.10+0x1e2a>
 800766a:	29ff      	cmp	r1, #255	; 0xff
 800766c:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8007670:	d1f2      	bne.n	8007658 <d_print_comp.part.10+0x1dec>
 8007672:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007676:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800767a:	4620      	mov	r0, r4
 800767c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007680:	4798      	blx	r3
 8007682:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007686:	2101      	movs	r1, #1
 8007688:	440b      	add	r3, r1
 800768a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800768e:	2300      	movs	r3, #0
 8007690:	e7e4      	b.n	800765c <d_print_comp.part.10+0x1df0>
 8007692:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007696:	4dbd      	ldr	r5, [pc, #756]	; (800798c <d_print_comp.part.10+0x2120>)
 8007698:	f04f 0900 	mov.w	r9, #0
 800769c:	f105 0a03 	add.w	sl, r5, #3
 80076a0:	e008      	b.n	80076b4 <d_print_comp.part.10+0x1e48>
 80076a2:	460b      	mov	r3, r1
 80076a4:	3101      	adds	r1, #1
 80076a6:	4555      	cmp	r5, sl
 80076a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80076ac:	54e7      	strb	r7, [r4, r3]
 80076ae:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80076b2:	d013      	beq.n	80076dc <d_print_comp.part.10+0x1e70>
 80076b4:	29ff      	cmp	r1, #255	; 0xff
 80076b6:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 80076ba:	d1f2      	bne.n	80076a2 <d_print_comp.part.10+0x1e36>
 80076bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80076c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80076c4:	4620      	mov	r0, r4
 80076c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80076ca:	4798      	blx	r3
 80076cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80076d0:	2101      	movs	r1, #1
 80076d2:	440b      	add	r3, r1
 80076d4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80076d8:	2300      	movs	r3, #0
 80076da:	e7e4      	b.n	80076a6 <d_print_comp.part.10+0x1e3a>
 80076dc:	f8d8 8004 	ldr.w	r8, [r8, #4]
 80076e0:	f7ff ba83 	b.w	8006bea <d_print_comp.part.10+0x137e>
 80076e4:	2500      	movs	r5, #0
 80076e6:	4619      	mov	r1, r3
 80076e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80076ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80076f0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80076f4:	4620      	mov	r0, r4
 80076f6:	4798      	blx	r3
 80076f8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80076fc:	462b      	mov	r3, r5
 80076fe:	3201      	adds	r2, #1
 8007700:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007704:	2101      	movs	r1, #1
 8007706:	f7fe bde8 	b.w	80062da <d_print_comp.part.10+0xa6e>
 800770a:	2700      	movs	r7, #0
 800770c:	4619      	mov	r1, r3
 800770e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007712:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007716:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800771a:	4620      	mov	r0, r4
 800771c:	4798      	blx	r3
 800771e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8007722:	463b      	mov	r3, r7
 8007724:	3201      	adds	r2, #1
 8007726:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800772a:	2101      	movs	r1, #1
 800772c:	f7fe bdbf 	b.w	80062ae <d_print_comp.part.10+0xa42>
 8007730:	2301      	movs	r3, #1
 8007732:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8007736:	f7fe b90d 	b.w	8005954 <d_print_comp.part.10+0xe8>
 800773a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800773e:	aa16      	add	r2, sp, #88	; 0x58
 8007740:	f842 1d40 	str.w	r1, [r2, #-64]!
 8007744:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8007748:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 800774c:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8007750:	686a      	ldr	r2, [r5, #4]
 8007752:	4631      	mov	r1, r6
 8007754:	4620      	mov	r0, r4
 8007756:	9308      	str	r3, [sp, #32]
 8007758:	9507      	str	r5, [sp, #28]
 800775a:	9709      	str	r7, [sp, #36]	; 0x24
 800775c:	f000 fb20 	bl	8007da0 <d_print_comp>
 8007760:	9a06      	ldr	r2, [sp, #24]
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8007768:	2b00      	cmp	r3, #0
 800776a:	f47e a8f3 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 800776e:	4620      	mov	r0, r4
 8007770:	2120      	movs	r1, #32
 8007772:	f7fc f97f 	bl	8003a74 <d_append_char>
 8007776:	f7ff b846 	b.w	8006806 <d_print_comp.part.10+0xf9a>
 800777a:	2200      	movs	r2, #0
 800777c:	4619      	mov	r1, r3
 800777e:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8007782:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007786:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800778a:	4620      	mov	r0, r4
 800778c:	4798      	blx	r3
 800778e:	2329      	movs	r3, #41	; 0x29
 8007790:	7023      	strb	r3, [r4, #0]
 8007792:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007796:	782a      	ldrb	r2, [r5, #0]
 8007798:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800779c:	2101      	movs	r1, #1
 800779e:	3301      	adds	r3, #1
 80077a0:	2a3c      	cmp	r2, #60	; 0x3c
 80077a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80077a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80077aa:	f47e aed1 	bne.w	8006550 <d_print_comp.part.10+0xce4>
 80077ae:	232d      	movs	r3, #45	; 0x2d
 80077b0:	1c4a      	adds	r2, r1, #1
 80077b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80077b6:	5463      	strb	r3, [r4, r1]
 80077b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80077bc:	f7fe bec8 	b.w	8006550 <d_print_comp.part.10+0xce4>
 80077c0:	f04f 0800 	mov.w	r8, #0
 80077c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80077c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80077cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80077d0:	4620      	mov	r0, r4
 80077d2:	4798      	blx	r3
 80077d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80077d8:	4641      	mov	r1, r8
 80077da:	3301      	adds	r3, #1
 80077dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80077e0:	2201      	movs	r2, #1
 80077e2:	f7fe be9a 	b.w	800651a <d_print_comp.part.10+0xcae>
 80077e6:	4620      	mov	r0, r4
 80077e8:	4631      	mov	r1, r6
 80077ea:	462a      	mov	r2, r5
 80077ec:	f000 fad8 	bl	8007da0 <d_print_comp>
 80077f0:	f7fe b8b0 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80077f4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80077f8:	f898 2000 	ldrb.w	r2, [r8]
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	f47e ae86 	bne.w	800650e <d_print_comp.part.10+0xca2>
 8007802:	2b3c      	cmp	r3, #60	; 0x3c
 8007804:	f000 8290 	beq.w	8007d28 <d_print_comp.part.10+0x24bc>
 8007808:	4631      	mov	r1, r6
 800780a:	4642      	mov	r2, r8
 800780c:	4620      	mov	r0, r4
 800780e:	3f02      	subs	r7, #2
 8007810:	f000 fac6 	bl	8007da0 <d_print_comp>
 8007814:	2f04      	cmp	r7, #4
 8007816:	f63e a89d 	bhi.w	8005954 <d_print_comp.part.10+0xe8>
 800781a:	e8df f007 	tbb	[pc, r7]
 800781e:	151b      	.short	0x151b
 8007820:	090f      	.short	0x090f
 8007822:	03          	.byte	0x03
 8007823:	00          	.byte	0x00
 8007824:	4620      	mov	r0, r4
 8007826:	495a      	ldr	r1, [pc, #360]	; (8007990 <d_print_comp.part.10+0x2124>)
 8007828:	f7fd ffea 	bl	8005800 <d_append_string>
 800782c:	f7fe b892 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007830:	4620      	mov	r0, r4
 8007832:	4958      	ldr	r1, [pc, #352]	; (8007994 <d_print_comp.part.10+0x2128>)
 8007834:	f7fd ffe4 	bl	8005800 <d_append_string>
 8007838:	f7fe b88c 	b.w	8005954 <d_print_comp.part.10+0xe8>
 800783c:	4620      	mov	r0, r4
 800783e:	4956      	ldr	r1, [pc, #344]	; (8007998 <d_print_comp.part.10+0x212c>)
 8007840:	f7fd ffde 	bl	8005800 <d_append_string>
 8007844:	f7fe b886 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007848:	4620      	mov	r0, r4
 800784a:	216c      	movs	r1, #108	; 0x6c
 800784c:	f7fc f912 	bl	8003a74 <d_append_char>
 8007850:	f7fe b880 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007854:	4620      	mov	r0, r4
 8007856:	2175      	movs	r1, #117	; 0x75
 8007858:	f7fc f90c 	bl	8003a74 <d_append_char>
 800785c:	f7fe b87a 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007860:	2600      	movs	r6, #0
 8007862:	4619      	mov	r1, r3
 8007864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007868:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800786c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8007870:	4620      	mov	r0, r4
 8007872:	4798      	blx	r3
 8007874:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8007878:	4633      	mov	r3, r6
 800787a:	3201      	adds	r2, #1
 800787c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007880:	2101      	movs	r1, #1
 8007882:	f7fe bef6 	b.w	8006672 <d_print_comp.part.10+0xe06>
 8007886:	1d01      	adds	r1, r0, #4
 8007888:	4620      	mov	r0, r4
 800788a:	f7fc fa0f 	bl	8003cac <d_lookup_template_argument.isra.6>
 800788e:	b180      	cbz	r0, 80078b2 <d_print_comp.part.10+0x2046>
 8007890:	7803      	ldrb	r3, [r0, #0]
 8007892:	2b2f      	cmp	r3, #47	; 0x2f
 8007894:	f47f a8ec 	bne.w	8006a70 <d_print_comp.part.10+0x1204>
 8007898:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800789c:	e005      	b.n	80078aa <d_print_comp.part.10+0x203e>
 800789e:	6880      	ldr	r0, [r0, #8]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b130      	cbz	r0, 80078b2 <d_print_comp.part.10+0x2046>
 80078a4:	7802      	ldrb	r2, [r0, #0]
 80078a6:	2a2f      	cmp	r2, #47	; 0x2f
 80078a8:	d103      	bne.n	80078b2 <d_print_comp.part.10+0x2046>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dcf7      	bgt.n	800789e <d_print_comp.part.10+0x2032>
 80078ae:	f000 8251 	beq.w	8007d54 <d_print_comp.part.10+0x24e8>
 80078b2:	2301      	movs	r3, #1
 80078b4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80078b8:	f7fe b84c 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80078bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80078c0:	29ff      	cmp	r1, #255	; 0xff
 80078c2:	f000 81ba 	beq.w	8007c3a <d_print_comp.part.10+0x23ce>
 80078c6:	1c4b      	adds	r3, r1, #1
 80078c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80078cc:	4620      	mov	r0, r4
 80078ce:	f804 9001 	strb.w	r9, [r4, r1]
 80078d2:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 80078d6:	4641      	mov	r1, r8
 80078d8:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80078dc:	f000 fa6c 	bl	8007db8 <d_print_mod>
 80078e0:	f7fe bb6f 	b.w	8005fc2 <d_print_comp.part.10+0x756>
 80078e4:	2301      	movs	r3, #1
 80078e6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80078ea:	f7fe b833 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80078ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80078f2:	29ff      	cmp	r1, #255	; 0xff
 80078f4:	f000 81dc 	beq.w	8007cb0 <d_print_comp.part.10+0x2444>
 80078f8:	2220      	movs	r2, #32
 80078fa:	1c4b      	adds	r3, r1, #1
 80078fc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8007900:	5462      	strb	r2, [r4, r1]
 8007902:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007906:	f7fe bce4 	b.w	80062d2 <d_print_comp.part.10+0xa66>
 800790a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800790e:	29ff      	cmp	r1, #255	; 0xff
 8007910:	f000 81ea 	beq.w	8007ce8 <d_print_comp.part.10+0x247c>
 8007914:	2220      	movs	r2, #32
 8007916:	1c4b      	adds	r3, r1, #1
 8007918:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800791c:	5462      	strb	r2, [r4, r1]
 800791e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007922:	f7fe bcc0 	b.w	80062a6 <d_print_comp.part.10+0xa3a>
 8007926:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800792a:	29ff      	cmp	r1, #255	; 0xff
 800792c:	f000 81ec 	beq.w	8007d08 <d_print_comp.part.10+0x249c>
 8007930:	1c4a      	adds	r2, r1, #1
 8007932:	235b      	movs	r3, #91	; 0x5b
 8007934:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007938:	5463      	strb	r3, [r4, r1]
 800793a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800793e:	4631      	mov	r1, r6
 8007940:	68aa      	ldr	r2, [r5, #8]
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fa2c 	bl	8007da0 <d_print_comp>
 8007948:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800794c:	29ff      	cmp	r1, #255	; 0xff
 800794e:	f000 819f 	beq.w	8007c90 <d_print_comp.part.10+0x2424>
 8007952:	235d      	movs	r3, #93	; 0x5d
 8007954:	1c4a      	adds	r2, r1, #1
 8007956:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800795a:	5463      	strb	r3, [r4, r1]
 800795c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007960:	f7fd bff8 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007964:	29ff      	cmp	r1, #255	; 0xff
 8007966:	f47f af22 	bne.w	80077ae <d_print_comp.part.10+0x1f42>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007972:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007976:	4620      	mov	r0, r4
 8007978:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800797c:	4798      	blx	r3
 800797e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007982:	4641      	mov	r1, r8
 8007984:	3301      	adds	r3, #1
 8007986:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800798a:	e710      	b.n	80077ae <d_print_comp.part.10+0x1f42>
 800798c:	0800ce1b 	.word	0x0800ce1b
 8007990:	0800cfc8 	.word	0x0800cfc8
 8007994:	0800cfc4 	.word	0x0800cfc4
 8007998:	0800cfc0 	.word	0x0800cfc0
 800799c:	7809      	ldrb	r1, [r1, #0]
 800799e:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 80079a2:	2801      	cmp	r0, #1
 80079a4:	d903      	bls.n	80079ae <d_print_comp.part.10+0x2142>
 80079a6:	3972      	subs	r1, #114	; 0x72
 80079a8:	2901      	cmp	r1, #1
 80079aa:	f63f ac15 	bhi.w	80071d8 <d_print_comp.part.10+0x196c>
 80079ae:	4620      	mov	r0, r4
 80079b0:	4631      	mov	r1, r6
 80079b2:	f001 f859 	bl	8008a68 <d_print_expr_op>
 80079b6:	4620      	mov	r0, r4
 80079b8:	213c      	movs	r1, #60	; 0x3c
 80079ba:	f7fc f85b 	bl	8003a74 <d_append_char>
 80079be:	68ab      	ldr	r3, [r5, #8]
 80079c0:	4620      	mov	r0, r4
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	4631      	mov	r1, r6
 80079c6:	f000 f9eb 	bl	8007da0 <d_print_comp>
 80079ca:	4620      	mov	r0, r4
 80079cc:	49c0      	ldr	r1, [pc, #768]	; (8007cd0 <d_print_comp.part.10+0x2464>)
 80079ce:	f7fd ff17 	bl	8005800 <d_append_string>
 80079d2:	68ab      	ldr	r3, [r5, #8]
 80079d4:	4631      	mov	r1, r6
 80079d6:	4620      	mov	r0, r4
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	f000 f9e1 	bl	8007da0 <d_print_comp>
 80079de:	4620      	mov	r0, r4
 80079e0:	2129      	movs	r1, #41	; 0x29
 80079e2:	f7fc f847 	bl	8003a74 <d_append_char>
 80079e6:	f7fd bfb5 	b.w	8005954 <d_print_comp.part.10+0xe8>
 80079ea:	2700      	movs	r7, #0
 80079ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80079f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80079f4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80079f8:	4620      	mov	r0, r4
 80079fa:	4798      	blx	r3
 80079fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007a00:	4639      	mov	r1, r7
 8007a02:	3301      	adds	r3, #1
 8007a04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f7ff b8e1 	b.w	8006bd0 <d_print_comp.part.10+0x1364>
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	49b0      	ldr	r1, [pc, #704]	; (8007cd4 <d_print_comp.part.10+0x2468>)
 8007a12:	f003 fddd 	bl	800b5d0 <strncmp>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f47e ac39 	bne.w	800628e <d_print_comp.part.10+0xa22>
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4620      	mov	r0, r4
 8007a20:	68aa      	ldr	r2, [r5, #8]
 8007a22:	f000 f9bd 	bl	8007da0 <d_print_comp>
 8007a26:	4620      	mov	r0, r4
 8007a28:	49ab      	ldr	r1, [pc, #684]	; (8007cd8 <d_print_comp.part.10+0x246c>)
 8007a2a:	f7fd fee9 	bl	8005800 <d_append_string>
 8007a2e:	f7fe bc5a 	b.w	80062e6 <d_print_comp.part.10+0xa7a>
 8007a32:	9b02      	ldr	r3, [sp, #8]
 8007a34:	f7fe bed5 	b.w	80067e2 <d_print_comp.part.10+0xf76>
 8007a38:	2500      	movs	r5, #0
 8007a3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007a3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007a42:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007a46:	4620      	mov	r0, r4
 8007a48:	4798      	blx	r3
 8007a4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007a4e:	4629      	mov	r1, r5
 8007a50:	3301      	adds	r3, #1
 8007a52:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007a56:	2201      	movs	r2, #1
 8007a58:	f7ff bbaa 	b.w	80071b0 <d_print_comp.part.10+0x1944>
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	215b      	movs	r1, #91	; 0x5b
 8007a60:	f7fc f808 	bl	8003a74 <d_append_char>
 8007a64:	68ab      	ldr	r3, [r5, #8]
 8007a66:	4631      	mov	r1, r6
 8007a68:	4620      	mov	r0, r4
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	f000 f998 	bl	8007da0 <d_print_comp>
 8007a70:	4620      	mov	r0, r4
 8007a72:	215d      	movs	r1, #93	; 0x5d
 8007a74:	f7fb fffe 	bl	8003a74 <d_append_char>
 8007a78:	f7ff bbdb 	b.w	8007232 <d_print_comp.part.10+0x19c6>
 8007a7c:	6899      	ldr	r1, [r3, #8]
 8007a7e:	2901      	cmp	r1, #1
 8007a80:	f47f abae 	bne.w	80071e0 <d_print_comp.part.10+0x1974>
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b3e      	cmp	r3, #62	; 0x3e
 8007a8a:	f47f aba9 	bne.w	80071e0 <d_print_comp.part.10+0x1974>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	2128      	movs	r1, #40	; 0x28
 8007a92:	f7fb ffef 	bl	8003a74 <d_append_char>
 8007a96:	686a      	ldr	r2, [r5, #4]
 8007a98:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8007a9c:	f7ff bba0 	b.w	80071e0 <d_print_comp.part.10+0x1974>
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	f000 ffdf 	bl	8008a68 <d_print_expr_op>
 8007aaa:	f7ff bbbc 	b.w	8007226 <d_print_comp.part.10+0x19ba>
 8007aae:	6893      	ldr	r3, [r2, #8]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	2b29      	cmp	r3, #41	; 0x29
 8007ab8:	bf1c      	itt	ne
 8007aba:	2301      	movne	r3, #1
 8007abc:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8007ac0:	6852      	ldr	r2, [r2, #4]
 8007ac2:	f001 f80b 	bl	8008adc <d_print_subexpr>
 8007ac6:	f7ff bb9b 	b.w	8007200 <d_print_comp.part.10+0x1994>
 8007aca:	4642      	mov	r2, r8
 8007acc:	4620      	mov	r0, r4
 8007ace:	4631      	mov	r1, r6
 8007ad0:	f001 f804 	bl	8008adc <d_print_subexpr>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4652      	mov	r2, sl
 8007ada:	f000 ffc5 	bl	8008a68 <d_print_expr_op>
 8007ade:	464a      	mov	r2, r9
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	f000 fffa 	bl	8008adc <d_print_subexpr>
 8007ae8:	4620      	mov	r0, r4
 8007aea:	497c      	ldr	r1, [pc, #496]	; (8007cdc <d_print_comp.part.10+0x2470>)
 8007aec:	f7fd fe88 	bl	8005800 <d_append_string>
 8007af0:	4620      	mov	r0, r4
 8007af2:	4631      	mov	r1, r6
 8007af4:	462a      	mov	r2, r5
 8007af6:	f000 fff1 	bl	8008adc <d_print_subexpr>
 8007afa:	f7fd bf2b 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007afe:	2700      	movs	r7, #0
 8007b00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007b04:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007b08:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	4798      	blx	r3
 8007b10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007b14:	4639      	mov	r1, r7
 8007b16:	3301      	adds	r3, #1
 8007b18:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	e462      	b.n	80073e6 <d_print_comp.part.10+0x1b7a>
 8007b20:	f04f 0800 	mov.w	r8, #0
 8007b24:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8007b28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007b2c:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8007b30:	4798      	blx	r3
 8007b32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007b36:	4641      	mov	r1, r8
 8007b38:	3301      	adds	r3, #1
 8007b3a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b3e:	2201      	movs	r2, #1
 8007b40:	e440      	b.n	80073c4 <d_print_comp.part.10+0x1b58>
 8007b42:	2500      	movs	r5, #0
 8007b44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007b48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007b4c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007b50:	4620      	mov	r0, r4
 8007b52:	4798      	blx	r3
 8007b54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007b58:	4629      	mov	r1, r5
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b60:	2201      	movs	r2, #1
 8007b62:	f7ff bbce 	b.w	8007302 <d_print_comp.part.10+0x1a96>
 8007b66:	686b      	ldr	r3, [r5, #4]
 8007b68:	781a      	ldrb	r2, [r3, #0]
 8007b6a:	2a01      	cmp	r2, #1
 8007b6c:	f47f abed 	bne.w	800734a <d_print_comp.part.10+0x1ade>
 8007b70:	68aa      	ldr	r2, [r5, #8]
 8007b72:	7812      	ldrb	r2, [r2, #0]
 8007b74:	2a29      	cmp	r2, #41	; 0x29
 8007b76:	bf08      	it	eq
 8007b78:	461d      	moveq	r5, r3
 8007b7a:	f7ff bbe6 	b.w	800734a <d_print_comp.part.10+0x1ade>
 8007b7e:	ab16      	add	r3, sp, #88	; 0x58
 8007b80:	f843 ad48 	str.w	sl, [r3, #-72]!
 8007b84:	9705      	str	r7, [sp, #20]
 8007b86:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8007b8a:	f7fe b9ff 	b.w	8005f8c <d_print_comp.part.10+0x720>
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4620      	mov	r0, r4
 8007b92:	686a      	ldr	r2, [r5, #4]
 8007b94:	f000 ffa2 	bl	8008adc <d_print_subexpr>
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4951      	ldr	r1, [pc, #324]	; (8007ce0 <d_print_comp.part.10+0x2474>)
 8007b9c:	f7fd fe30 	bl	8005800 <d_append_string>
 8007ba0:	f7fd bed8 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007ba4:	2500      	movs	r5, #0
 8007ba6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007baa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007bb4:	4798      	blx	r3
 8007bb6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007bba:	4629      	mov	r1, r5
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007bc2:	f7ff bbf0 	b.w	80073a6 <d_print_comp.part.10+0x1b3a>
 8007bc6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007bd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	4798      	blx	r3
 8007bd8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8007bdc:	463b      	mov	r3, r7
 8007bde:	3201      	adds	r2, #1
 8007be0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007be4:	f7ff bbce 	b.w	8007384 <d_print_comp.part.10+0x1b18>
 8007be8:	1cf3      	adds	r3, r6, #3
 8007bea:	429f      	cmp	r7, r3
 8007bec:	f67f acac 	bls.w	8007548 <d_print_comp.part.10+0x1cdc>
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	e004      	b.n	8007bfe <d_print_comp.part.10+0x2392>
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	42bb      	cmp	r3, r7
 8007bf8:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 8007bfc:	d015      	beq.n	8007c2a <d_print_comp.part.10+0x23be>
 8007bfe:	469c      	mov	ip, r3
 8007c00:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007c04:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8007c08:	b2d0      	uxtb	r0, r2
 8007c0a:	2809      	cmp	r0, #9
 8007c0c:	f1a5 0941 	sub.w	r9, r5, #65	; 0x41
 8007c10:	d9f0      	bls.n	8007bf4 <d_print_comp.part.10+0x2388>
 8007c12:	f1b9 0f05 	cmp.w	r9, #5
 8007c16:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8007c1a:	d801      	bhi.n	8007c20 <d_print_comp.part.10+0x23b4>
 8007c1c:	3d37      	subs	r5, #55	; 0x37
 8007c1e:	e7ea      	b.n	8007bf6 <d_print_comp.part.10+0x238a>
 8007c20:	2a05      	cmp	r2, #5
 8007c22:	f200 8087 	bhi.w	8007d34 <d_print_comp.part.10+0x24c8>
 8007c26:	3d57      	subs	r5, #87	; 0x57
 8007c28:	e7e5      	b.n	8007bf6 <d_print_comp.part.10+0x238a>
 8007c2a:	255f      	movs	r5, #95	; 0x5f
 8007c2c:	e471      	b.n	8007512 <d_print_comp.part.10+0x1ca6>
 8007c2e:	464c      	mov	r4, r9
 8007c30:	2301      	movs	r3, #1
 8007c32:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8007c36:	f7fd be8d 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007c3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007c3e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8007c42:	4620      	mov	r0, r4
 8007c44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007c48:	4798      	blx	r3
 8007c4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007c4e:	4631      	mov	r1, r6
 8007c50:	3301      	adds	r3, #1
 8007c52:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007c56:	e636      	b.n	80078c6 <d_print_comp.part.10+0x205a>
 8007c58:	686a      	ldr	r2, [r5, #4]
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	f000 ff3d 	bl	8008adc <d_print_subexpr>
 8007c62:	4620      	mov	r0, r4
 8007c64:	4631      	mov	r1, r6
 8007c66:	463a      	mov	r2, r7
 8007c68:	f000 fefe 	bl	8008a68 <d_print_expr_op>
 8007c6c:	f7fd be72 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007c70:	2b3b      	cmp	r3, #59	; 0x3b
 8007c72:	f47e ac4c 	bne.w	800650e <d_print_comp.part.10+0xca2>
 8007c76:	6853      	ldr	r3, [r2, #4]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b30      	cmp	r3, #48	; 0x30
 8007c7c:	f000 8088 	beq.w	8007d90 <d_print_comp.part.10+0x2524>
 8007c80:	2b31      	cmp	r3, #49	; 0x31
 8007c82:	f47e ac44 	bne.w	800650e <d_print_comp.part.10+0xca2>
 8007c86:	4917      	ldr	r1, [pc, #92]	; (8007ce4 <d_print_comp.part.10+0x2478>)
 8007c88:	f7fd fdba 	bl	8005800 <d_append_string>
 8007c8c:	f7fd be62 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007c90:	2500      	movs	r5, #0
 8007c92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007c96:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ca0:	4798      	blx	r3
 8007ca2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007cae:	e650      	b.n	8007952 <d_print_comp.part.10+0x20e6>
 8007cb0:	2500      	movs	r5, #0
 8007cb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007cb6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007cc0:	4798      	blx	r3
 8007cc2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007cce:	e613      	b.n	80078f8 <d_print_comp.part.10+0x208c>
 8007cd0:	0800d078 	.word	0x0800d078
 8007cd4:	0800ce20 	.word	0x0800ce20
 8007cd8:	0800ce28 	.word	0x0800ce28
 8007cdc:	0800cfb4 	.word	0x0800cfb4
 8007ce0:	0800cff8 	.word	0x0800cff8
 8007ce4:	0800cfd4 	.word	0x0800cfd4
 8007ce8:	2700      	movs	r7, #0
 8007cea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007cee:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007cf8:	4798      	blx	r3
 8007cfa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007cfe:	4639      	mov	r1, r7
 8007d00:	3301      	adds	r3, #1
 8007d02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007d06:	e605      	b.n	8007914 <d_print_comp.part.10+0x20a8>
 8007d08:	2700      	movs	r7, #0
 8007d0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007d0e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8007d12:	4620      	mov	r0, r4
 8007d14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007d18:	4798      	blx	r3
 8007d1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007d1e:	4639      	mov	r1, r7
 8007d20:	3301      	adds	r3, #1
 8007d22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007d26:	e603      	b.n	8007930 <d_print_comp.part.10+0x20c4>
 8007d28:	212d      	movs	r1, #45	; 0x2d
 8007d2a:	f7fb fea3 	bl	8003a74 <d_append_char>
 8007d2e:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8007d32:	e569      	b.n	8007808 <d_print_comp.part.10+0x1f9c>
 8007d34:	4567      	cmp	r7, ip
 8007d36:	f67f af78 	bls.w	8007c2a <d_print_comp.part.10+0x23be>
 8007d3a:	2d5f      	cmp	r5, #95	; 0x5f
 8007d3c:	f47f af75 	bne.w	8007c2a <d_print_comp.part.10+0x23be>
 8007d40:	29ff      	cmp	r1, #255	; 0xff
 8007d42:	f63f abe6 	bhi.w	8007512 <d_print_comp.part.10+0x1ca6>
 8007d46:	b2c9      	uxtb	r1, r1
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4666      	mov	r6, ip
 8007d4c:	f7fb fe92 	bl	8003a74 <d_append_char>
 8007d50:	f7ff bbe9 	b.w	8007526 <d_print_comp.part.10+0x1cba>
 8007d54:	6840      	ldr	r0, [r0, #4]
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f43f adab 	beq.w	80078b2 <d_print_comp.part.10+0x2046>
 8007d5c:	7803      	ldrb	r3, [r0, #0]
 8007d5e:	f7fe be87 	b.w	8006a70 <d_print_comp.part.10+0x1204>
 8007d62:	f47f aa8c 	bne.w	800727e <d_print_comp.part.10+0x1a12>
 8007d66:	6840      	ldr	r0, [r0, #4]
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f47e aa74 	bne.w	8006256 <d_print_comp.part.10+0x9ea>
 8007d6e:	f7ff ba86 	b.w	800727e <d_print_comp.part.10+0x1a12>
 8007d72:	4631      	mov	r1, r6
 8007d74:	4620      	mov	r0, r4
 8007d76:	68aa      	ldr	r2, [r5, #8]
 8007d78:	f000 f812 	bl	8007da0 <d_print_comp>
 8007d7c:	9902      	ldr	r1, [sp, #8]
 8007d7e:	9b08      	ldr	r3, [sp, #32]
 8007d80:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f47d ade5 	bne.w	8005954 <d_print_comp.part.10+0xe8>
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	f7fe bd29 	b.w	80067e2 <d_print_comp.part.10+0xf76>
 8007d90:	4902      	ldr	r1, [pc, #8]	; (8007d9c <d_print_comp.part.10+0x2530>)
 8007d92:	f7fd fd35 	bl	8005800 <d_append_string>
 8007d96:	f7fd bddd 	b.w	8005954 <d_print_comp.part.10+0xe8>
 8007d9a:	bf00      	nop
 8007d9c:	0800cfcc 	.word	0x0800cfcc

08007da0 <d_print_comp>:
 8007da0:	b12a      	cbz	r2, 8007dae <d_print_comp+0xe>
 8007da2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8007da6:	b90b      	cbnz	r3, 8007dac <d_print_comp+0xc>
 8007da8:	f7fd bd60 	b.w	800586c <d_print_comp.part.10>
 8007dac:	4770      	bx	lr
 8007dae:	2201      	movs	r2, #1
 8007db0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop

08007db8 <d_print_mod>:
 8007db8:	7813      	ldrb	r3, [r2, #0]
 8007dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbe:	3b03      	subs	r3, #3
 8007dc0:	4615      	mov	r5, r2
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc8:	f200 81d4 	bhi.w	8008174 <d_print_mod+0x3bc>
 8007dcc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007dd0:	01d20052 	.word	0x01d20052
 8007dd4:	01d201d2 	.word	0x01d201d2
 8007dd8:	01d201d2 	.word	0x01d201d2
 8007ddc:	01d201d2 	.word	0x01d201d2
 8007de0:	01d201d2 	.word	0x01d201d2
 8007de4:	01d201d2 	.word	0x01d201d2
 8007de8:	01d201d2 	.word	0x01d201d2
 8007dec:	01d201d2 	.word	0x01d201d2
 8007df0:	01d201d2 	.word	0x01d201d2
 8007df4:	01d201d2 	.word	0x01d201d2
 8007df8:	01d201d2 	.word	0x01d201d2
 8007dfc:	0083005d 	.word	0x0083005d
 8007e00:	005d00a9 	.word	0x005d00a9
 8007e04:	00a90083 	.word	0x00a90083
 8007e08:	00e600ce 	.word	0x00e600ce
 8007e0c:	0133011e 	.word	0x0133011e
 8007e10:	01480145 	.word	0x01480145
 8007e14:	0171014b 	.word	0x0171014b
 8007e18:	01d201d2 	.word	0x01d201d2
 8007e1c:	01d201d2 	.word	0x01d201d2
 8007e20:	01d20196 	.word	0x01d20196
 8007e24:	002b      	.short	0x002b
 8007e26:	4ed8      	ldr	r6, [pc, #864]	; (8008188 <d_print_mod+0x3d0>)
 8007e28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007e2c:	f106 0a0a 	add.w	sl, r6, #10
 8007e30:	f04f 0800 	mov.w	r8, #0
 8007e34:	e009      	b.n	8007e4a <d_print_mod+0x92>
 8007e36:	461a      	mov	r2, r3
 8007e38:	3301      	adds	r3, #1
 8007e3a:	4556      	cmp	r6, sl
 8007e3c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8007e40:	54a7      	strb	r7, [r4, r2]
 8007e42:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8007e46:	f000 81b9 	beq.w	80081bc <d_print_mod+0x404>
 8007e4a:	2bff      	cmp	r3, #255	; 0xff
 8007e4c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8007e50:	d1f1      	bne.n	8007e36 <d_print_mod+0x7e>
 8007e52:	4619      	mov	r1, r3
 8007e54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e5c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007e60:	4620      	mov	r0, r4
 8007e62:	4798      	blx	r3
 8007e64:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8007e68:	2301      	movs	r3, #1
 8007e6a:	441a      	add	r2, r3
 8007e6c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007e70:	2200      	movs	r2, #0
 8007e72:	e7e2      	b.n	8007e3a <d_print_mod+0x82>
 8007e74:	686a      	ldr	r2, [r5, #4]
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	f000 80d8 	beq.w	800802c <d_print_mod+0x274>
 8007e7c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 81ba 	beq.w	80081fa <d_print_mod+0x442>
 8007e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8a:	4dc0      	ldr	r5, [pc, #768]	; (800818c <d_print_mod+0x3d4>)
 8007e8c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e90:	f105 0709 	add.w	r7, r5, #9
 8007e94:	f04f 0800 	mov.w	r8, #0
 8007e98:	e009      	b.n	8007eae <d_print_mod+0xf6>
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	3101      	adds	r1, #1
 8007e9e:	42bd      	cmp	r5, r7
 8007ea0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ea4:	54e6      	strb	r6, [r4, r3]
 8007ea6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007eaa:	f000 8183 	beq.w	80081b4 <d_print_mod+0x3fc>
 8007eae:	29ff      	cmp	r1, #255	; 0xff
 8007eb0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007eb4:	d1f1      	bne.n	8007e9a <d_print_mod+0xe2>
 8007eb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007eba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ec4:	4798      	blx	r3
 8007ec6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007eca:	2101      	movs	r1, #1
 8007ecc:	440b      	add	r3, r1
 8007ece:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e7e3      	b.n	8007e9e <d_print_mod+0xe6>
 8007ed6:	4dae      	ldr	r5, [pc, #696]	; (8008190 <d_print_mod+0x3d8>)
 8007ed8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007edc:	f105 0709 	add.w	r7, r5, #9
 8007ee0:	f04f 0800 	mov.w	r8, #0
 8007ee4:	e009      	b.n	8007efa <d_print_mod+0x142>
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	3101      	adds	r1, #1
 8007eea:	42bd      	cmp	r5, r7
 8007eec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ef0:	54e6      	strb	r6, [r4, r3]
 8007ef2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007ef6:	f000 815f 	beq.w	80081b8 <d_print_mod+0x400>
 8007efa:	29ff      	cmp	r1, #255	; 0xff
 8007efc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007f00:	d1f1      	bne.n	8007ee6 <d_print_mod+0x12e>
 8007f02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f06:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f10:	4798      	blx	r3
 8007f12:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f16:	2101      	movs	r1, #1
 8007f18:	440b      	add	r3, r1
 8007f1a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e7e3      	b.n	8007eea <d_print_mod+0x132>
 8007f22:	4d9c      	ldr	r5, [pc, #624]	; (8008194 <d_print_mod+0x3dc>)
 8007f24:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f28:	1daf      	adds	r7, r5, #6
 8007f2a:	f04f 0800 	mov.w	r8, #0
 8007f2e:	e009      	b.n	8007f44 <d_print_mod+0x18c>
 8007f30:	460b      	mov	r3, r1
 8007f32:	3101      	adds	r1, #1
 8007f34:	42bd      	cmp	r5, r7
 8007f36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f3a:	54e6      	strb	r6, [r4, r3]
 8007f3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007f40:	f000 8132 	beq.w	80081a8 <d_print_mod+0x3f0>
 8007f44:	29ff      	cmp	r1, #255	; 0xff
 8007f46:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007f4a:	d1f1      	bne.n	8007f30 <d_print_mod+0x178>
 8007f4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f50:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007f54:	4620      	mov	r0, r4
 8007f56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f5a:	4798      	blx	r3
 8007f5c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f60:	2101      	movs	r1, #1
 8007f62:	440b      	add	r3, r1
 8007f64:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e7e3      	b.n	8007f34 <d_print_mod+0x17c>
 8007f6c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007f70:	2bff      	cmp	r3, #255	; 0xff
 8007f72:	f000 8159 	beq.w	8008228 <d_print_mod+0x470>
 8007f76:	1c59      	adds	r1, r3, #1
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f7e:	54e2      	strb	r2, [r4, r3]
 8007f80:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007f84:	29ff      	cmp	r1, #255	; 0xff
 8007f86:	f000 813e 	beq.w	8008206 <d_print_mod+0x44e>
 8007f8a:	1c4a      	adds	r2, r1, #1
 8007f8c:	2326      	movs	r3, #38	; 0x26
 8007f8e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007f92:	5463      	strb	r3, [r4, r1]
 8007f94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007fa0:	2bff      	cmp	r3, #255	; 0xff
 8007fa2:	f000 8162 	beq.w	800826a <d_print_mod+0x4b2>
 8007fa6:	1c59      	adds	r1, r3, #1
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007fae:	54e2      	strb	r2, [r4, r3]
 8007fb0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007fb4:	4d78      	ldr	r5, [pc, #480]	; (8008198 <d_print_mod+0x3e0>)
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	1caf      	adds	r7, r5, #2
 8007fbc:	e009      	b.n	8007fd2 <d_print_mod+0x21a>
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	42bd      	cmp	r5, r7
 8007fc2:	f101 0101 	add.w	r1, r1, #1
 8007fc6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007fca:	54e6      	strb	r6, [r4, r3]
 8007fcc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007fd0:	d01a      	beq.n	8008008 <d_print_mod+0x250>
 8007fd2:	29ff      	cmp	r1, #255	; 0xff
 8007fd4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007fd8:	d1f1      	bne.n	8007fbe <d_print_mod+0x206>
 8007fda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007fde:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007fe8:	4798      	blx	r3
 8007fea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007fee:	2101      	movs	r1, #1
 8007ff0:	440b      	add	r3, r1
 8007ff2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ff6:	42bd      	cmp	r5, r7
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008000:	54e6      	strb	r6, [r4, r3]
 8008002:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008006:	d1e4      	bne.n	8007fd2 <d_print_mod+0x21a>
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008010:	29ff      	cmp	r1, #255	; 0xff
 8008012:	f000 811a 	beq.w	800824a <d_print_mod+0x492>
 8008016:	1c4a      	adds	r2, r1, #1
 8008018:	2320      	movs	r3, #32
 800801a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800801e:	5463      	strb	r3, [r4, r1]
 8008020:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008024:	68aa      	ldr	r2, [r5, #8]
 8008026:	2a00      	cmp	r2, #0
 8008028:	f47f af28 	bne.w	8007e7c <d_print_mod+0xc4>
 800802c:	2301      	movs	r3, #1
 800802e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8008032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008036:	f011 0904 	ands.w	r9, r1, #4
 800803a:	f47f af24 	bne.w	8007e86 <d_print_mod+0xce>
 800803e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008042:	29ff      	cmp	r1, #255	; 0xff
 8008044:	f000 814c 	beq.w	80082e0 <d_print_mod+0x528>
 8008048:	1c4a      	adds	r2, r1, #1
 800804a:	232a      	movs	r3, #42	; 0x2a
 800804c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008050:	5463      	strb	r3, [r4, r1]
 8008052:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800805e:	e791      	b.n	8007f84 <d_print_mod+0x1cc>
 8008060:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008064:	e7a6      	b.n	8007fb4 <d_print_mod+0x1fc>
 8008066:	4d4d      	ldr	r5, [pc, #308]	; (800819c <d_print_mod+0x3e4>)
 8008068:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800806c:	f105 0708 	add.w	r7, r5, #8
 8008070:	f04f 0800 	mov.w	r8, #0
 8008074:	e009      	b.n	800808a <d_print_mod+0x2d2>
 8008076:	460b      	mov	r3, r1
 8008078:	3101      	adds	r1, #1
 800807a:	42bd      	cmp	r5, r7
 800807c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008080:	54e6      	strb	r6, [r4, r3]
 8008082:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008086:	f000 8093 	beq.w	80081b0 <d_print_mod+0x3f8>
 800808a:	29ff      	cmp	r1, #255	; 0xff
 800808c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008090:	d1f1      	bne.n	8008076 <d_print_mod+0x2be>
 8008092:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008096:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800809a:	4620      	mov	r0, r4
 800809c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80080a0:	4798      	blx	r3
 80080a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80080a6:	2101      	movs	r1, #1
 80080a8:	440b      	add	r3, r1
 80080aa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80080ae:	2300      	movs	r3, #0
 80080b0:	e7e3      	b.n	800807a <d_print_mod+0x2c2>
 80080b2:	4d3b      	ldr	r5, [pc, #236]	; (80081a0 <d_print_mod+0x3e8>)
 80080b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80080b8:	f105 070a 	add.w	r7, r5, #10
 80080bc:	f04f 0800 	mov.w	r8, #0
 80080c0:	e008      	b.n	80080d4 <d_print_mod+0x31c>
 80080c2:	460b      	mov	r3, r1
 80080c4:	3101      	adds	r1, #1
 80080c6:	42bd      	cmp	r5, r7
 80080c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80080cc:	54e6      	strb	r6, [r4, r3]
 80080ce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80080d2:	d06b      	beq.n	80081ac <d_print_mod+0x3f4>
 80080d4:	29ff      	cmp	r1, #255	; 0xff
 80080d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80080da:	d1f2      	bne.n	80080c2 <d_print_mod+0x30a>
 80080dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80080e0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80080e4:	4620      	mov	r0, r4
 80080e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80080ea:	4798      	blx	r3
 80080ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80080f0:	2101      	movs	r1, #1
 80080f2:	440b      	add	r3, r1
 80080f4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80080f8:	2300      	movs	r3, #0
 80080fa:	e7e4      	b.n	80080c6 <d_print_mod+0x30e>
 80080fc:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8008100:	2b28      	cmp	r3, #40	; 0x28
 8008102:	d00b      	beq.n	800811c <d_print_mod+0x364>
 8008104:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008108:	29ff      	cmp	r1, #255	; 0xff
 800810a:	f000 80d9 	beq.w	80082c0 <d_print_mod+0x508>
 800810e:	1c4a      	adds	r2, r1, #1
 8008110:	2320      	movs	r3, #32
 8008112:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008116:	5463      	strb	r3, [r4, r1]
 8008118:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800811c:	686a      	ldr	r2, [r5, #4]
 800811e:	2a00      	cmp	r2, #0
 8008120:	f000 80c6 	beq.w	80082b0 <d_print_mod+0x4f8>
 8008124:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008128:	2b00      	cmp	r3, #0
 800812a:	d061      	beq.n	80081f0 <d_print_mod+0x438>
 800812c:	4d1d      	ldr	r5, [pc, #116]	; (80081a4 <d_print_mod+0x3ec>)
 800812e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008132:	1cef      	adds	r7, r5, #3
 8008134:	f04f 0800 	mov.w	r8, #0
 8008138:	e008      	b.n	800814c <d_print_mod+0x394>
 800813a:	460b      	mov	r3, r1
 800813c:	3101      	adds	r1, #1
 800813e:	42bd      	cmp	r5, r7
 8008140:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008144:	54e6      	strb	r6, [r4, r3]
 8008146:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800814a:	d048      	beq.n	80081de <d_print_mod+0x426>
 800814c:	29ff      	cmp	r1, #255	; 0xff
 800814e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008152:	d1f2      	bne.n	800813a <d_print_mod+0x382>
 8008154:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008158:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800815c:	4620      	mov	r0, r4
 800815e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008162:	4798      	blx	r3
 8008164:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008168:	2101      	movs	r1, #1
 800816a:	440b      	add	r3, r1
 800816c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008170:	2300      	movs	r3, #0
 8008172:	e7e4      	b.n	800813e <d_print_mod+0x386>
 8008174:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8008178:	2b00      	cmp	r3, #0
 800817a:	f47f ae84 	bne.w	8007e86 <d_print_mod+0xce>
 800817e:	462a      	mov	r2, r5
 8008180:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008184:	f7fd bb72 	b.w	800586c <d_print_comp.part.10>
 8008188:	0800d0bb 	.word	0x0800d0bb
 800818c:	0800d07b 	.word	0x0800d07b
 8008190:	0800d087 	.word	0x0800d087
 8008194:	0800d093 	.word	0x0800d093
 8008198:	0800d09b 	.word	0x0800d09b
 800819c:	0800d09f 	.word	0x0800d09f
 80081a0:	0800d0ab 	.word	0x0800d0ab
 80081a4:	0800d0b7 	.word	0x0800d0b7
 80081a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081bc:	686a      	ldr	r2, [r5, #4]
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d07a      	beq.n	80082b8 <d_print_mod+0x500>
 80081c2:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
 80081c6:	b161      	cbz	r1, 80081e2 <d_print_mod+0x42a>
 80081c8:	2bff      	cmp	r3, #255	; 0xff
 80081ca:	d05f      	beq.n	800828c <d_print_mod+0x4d4>
 80081cc:	1c59      	adds	r1, r3, #1
 80081ce:	2229      	movs	r2, #41	; 0x29
 80081d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80081d4:	54e2      	strb	r2, [r4, r3]
 80081d6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80081da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e2:	4649      	mov	r1, r9
 80081e4:	4620      	mov	r0, r4
 80081e6:	f7fd fb41 	bl	800586c <d_print_comp.part.10>
 80081ea:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80081ee:	e7eb      	b.n	80081c8 <d_print_mod+0x410>
 80081f0:	4649      	mov	r1, r9
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7fd fb3a 	bl	800586c <d_print_comp.part.10>
 80081f8:	e798      	b.n	800812c <d_print_mod+0x374>
 80081fa:	4620      	mov	r0, r4
 80081fc:	4649      	mov	r1, r9
 80081fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008202:	f7fd bb33 	b.w	800586c <d_print_comp.part.10>
 8008206:	2500      	movs	r5, #0
 8008208:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800820c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008210:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8008214:	4620      	mov	r0, r4
 8008216:	4798      	blx	r3
 8008218:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800821c:	4629      	mov	r1, r5
 800821e:	3301      	adds	r3, #1
 8008220:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008224:	2201      	movs	r2, #1
 8008226:	e6b1      	b.n	8007f8c <d_print_mod+0x1d4>
 8008228:	2500      	movs	r5, #0
 800822a:	4619      	mov	r1, r3
 800822c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008230:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8008234:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8008238:	4798      	blx	r3
 800823a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800823e:	462b      	mov	r3, r5
 8008240:	3201      	adds	r2, #1
 8008242:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008246:	2101      	movs	r1, #1
 8008248:	e696      	b.n	8007f78 <d_print_mod+0x1c0>
 800824a:	2600      	movs	r6, #0
 800824c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8008250:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008254:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8008258:	4798      	blx	r3
 800825a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800825e:	4631      	mov	r1, r6
 8008260:	3301      	adds	r3, #1
 8008262:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008266:	2201      	movs	r2, #1
 8008268:	e6d6      	b.n	8008018 <d_print_mod+0x260>
 800826a:	2500      	movs	r5, #0
 800826c:	4619      	mov	r1, r3
 800826e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008272:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8008276:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800827a:	4798      	blx	r3
 800827c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008280:	462b      	mov	r3, r5
 8008282:	3201      	adds	r2, #1
 8008284:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008288:	2101      	movs	r1, #1
 800828a:	e68d      	b.n	8007fa8 <d_print_mod+0x1f0>
 800828c:	2500      	movs	r5, #0
 800828e:	4619      	mov	r1, r3
 8008290:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008294:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008298:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800829c:	4620      	mov	r0, r4
 800829e:	4798      	blx	r3
 80082a0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80082a4:	462b      	mov	r3, r5
 80082a6:	3201      	adds	r2, #1
 80082a8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80082ac:	2101      	movs	r1, #1
 80082ae:	e78e      	b.n	80081ce <d_print_mod+0x416>
 80082b0:	2301      	movs	r3, #1
 80082b2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80082b6:	e739      	b.n	800812c <d_print_mod+0x374>
 80082b8:	2201      	movs	r2, #1
 80082ba:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
 80082be:	e783      	b.n	80081c8 <d_print_mod+0x410>
 80082c0:	2600      	movs	r6, #0
 80082c2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80082c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80082ca:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80082ce:	4798      	blx	r3
 80082d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80082d4:	4631      	mov	r1, r6
 80082d6:	3301      	adds	r3, #1
 80082d8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80082dc:	2201      	movs	r2, #1
 80082de:	e717      	b.n	8008110 <d_print_mod+0x358>
 80082e0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80082e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80082e8:	f880 90ff 	strb.w	r9, [r0, #255]	; 0xff
 80082ec:	4798      	blx	r3
 80082ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80082f2:	4649      	mov	r1, r9
 80082f4:	3301      	adds	r3, #1
 80082f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80082fa:	2201      	movs	r2, #1
 80082fc:	e6a5      	b.n	800804a <d_print_mod+0x292>
 80082fe:	bf00      	nop

08008300 <d_print_mod_list>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	4614      	mov	r4, r2
 8008306:	b089      	sub	sp, #36	; 0x24
 8008308:	4605      	mov	r5, r0
 800830a:	460f      	mov	r7, r1
 800830c:	461e      	mov	r6, r3
 800830e:	b33a      	cbz	r2, 8008360 <d_print_mod_list+0x60>
 8008310:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8008314:	bb23      	cbnz	r3, 8008360 <d_print_mod_list+0x60>
 8008316:	f04f 0801 	mov.w	r8, #1
 800831a:	e002      	b.n	8008322 <d_print_mod_list+0x22>
 800831c:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8008320:	b9f2      	cbnz	r2, 8008360 <d_print_mod_list+0x60>
 8008322:	68a2      	ldr	r2, [r4, #8]
 8008324:	b9ca      	cbnz	r2, 800835a <d_print_mod_list+0x5a>
 8008326:	6862      	ldr	r2, [r4, #4]
 8008328:	7810      	ldrb	r0, [r2, #0]
 800832a:	b91e      	cbnz	r6, 8008334 <d_print_mod_list+0x34>
 800832c:	f1a0 031c 	sub.w	r3, r0, #28
 8008330:	2b04      	cmp	r3, #4
 8008332:	d912      	bls.n	800835a <d_print_mod_list+0x5a>
 8008334:	68e3      	ldr	r3, [r4, #12]
 8008336:	2829      	cmp	r0, #41	; 0x29
 8008338:	f8c4 8008 	str.w	r8, [r4, #8]
 800833c:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8008340:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8008344:	d00f      	beq.n	8008366 <d_print_mod_list+0x66>
 8008346:	282a      	cmp	r0, #42	; 0x2a
 8008348:	d018      	beq.n	800837c <d_print_mod_list+0x7c>
 800834a:	2802      	cmp	r0, #2
 800834c:	d021      	beq.n	8008392 <d_print_mod_list+0x92>
 800834e:	4628      	mov	r0, r5
 8008350:	4639      	mov	r1, r7
 8008352:	f7ff fd31 	bl	8007db8 <d_print_mod>
 8008356:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800835a:	6824      	ldr	r4, [r4, #0]
 800835c:	2c00      	cmp	r4, #0
 800835e:	d1dd      	bne.n	800831c <d_print_mod_list+0x1c>
 8008360:	b009      	add	sp, #36	; 0x24
 8008362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008366:	4639      	mov	r1, r7
 8008368:	3208      	adds	r2, #8
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	4628      	mov	r0, r5
 800836e:	f000 f9cb 	bl	8008708 <d_print_function_type.isra.11>
 8008372:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8008376:	b009      	add	sp, #36	; 0x24
 8008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	4639      	mov	r1, r7
 800837e:	3204      	adds	r2, #4
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	4628      	mov	r0, r5
 8008384:	f000 f8ee 	bl	8008564 <d_print_array_type.isra.9>
 8008388:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800838c:	b009      	add	sp, #36	; 0x24
 800838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008392:	2600      	movs	r6, #0
 8008394:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8008398:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 800839c:	6852      	ldr	r2, [r2, #4]
 800839e:	4628      	mov	r0, r5
 80083a0:	4639      	mov	r1, r7
 80083a2:	f7ff fcfd 	bl	8007da0 <d_print_comp>
 80083a6:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 80083aa:	f017 0804 	ands.w	r8, r7, #4
 80083ae:	d123      	bne.n	80083f8 <d_print_mod_list+0xf8>
 80083b0:	4e68      	ldr	r6, [pc, #416]	; (8008554 <d_print_mod_list+0x254>)
 80083b2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80083b6:	f106 0b02 	add.w	fp, r6, #2
 80083ba:	e009      	b.n	80083d0 <d_print_mod_list+0xd0>
 80083bc:	460b      	mov	r3, r1
 80083be:	3101      	adds	r1, #1
 80083c0:	455e      	cmp	r6, fp
 80083c2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80083c6:	f805 a003 	strb.w	sl, [r5, r3]
 80083ca:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80083ce:	d01e      	beq.n	800840e <d_print_mod_list+0x10e>
 80083d0:	29ff      	cmp	r1, #255	; 0xff
 80083d2:	f816 af01 	ldrb.w	sl, [r6, #1]!
 80083d6:	d1f1      	bne.n	80083bc <d_print_mod_list+0xbc>
 80083d8:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80083dc:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
 80083e0:	4628      	mov	r0, r5
 80083e2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80083e6:	4798      	blx	r3
 80083e8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80083ec:	2101      	movs	r1, #1
 80083ee:	440b      	add	r3, r1
 80083f0:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80083f4:	2300      	movs	r3, #0
 80083f6:	e7e3      	b.n	80083c0 <d_print_mod_list+0xc0>
 80083f8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80083fc:	29ff      	cmp	r1, #255	; 0xff
 80083fe:	d01b      	beq.n	8008438 <d_print_mod_list+0x138>
 8008400:	1c4a      	adds	r2, r1, #1
 8008402:	232e      	movs	r3, #46	; 0x2e
 8008404:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8008408:	546b      	strb	r3, [r5, r1]
 800840a:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 800840e:	6863      	ldr	r3, [r4, #4]
 8008410:	689c      	ldr	r4, [r3, #8]
 8008412:	7823      	ldrb	r3, [r4, #0]
 8008414:	2b45      	cmp	r3, #69	; 0x45
 8008416:	d102      	bne.n	800841e <d_print_mod_list+0x11e>
 8008418:	e01e      	b.n	8008458 <d_print_mod_list+0x158>
 800841a:	6864      	ldr	r4, [r4, #4]
 800841c:	7823      	ldrb	r3, [r4, #0]
 800841e:	3b1c      	subs	r3, #28
 8008420:	2b04      	cmp	r3, #4
 8008422:	d9fa      	bls.n	800841a <d_print_mod_list+0x11a>
 8008424:	4639      	mov	r1, r7
 8008426:	4622      	mov	r2, r4
 8008428:	4628      	mov	r0, r5
 800842a:	f7ff fcb9 	bl	8007da0 <d_print_comp>
 800842e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8008432:	b009      	add	sp, #36	; 0x24
 8008434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008438:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800843c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8008440:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8008444:	4628      	mov	r0, r5
 8008446:	4798      	blx	r3
 8008448:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800844c:	4631      	mov	r1, r6
 800844e:	3301      	adds	r3, #1
 8008450:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8008454:	2201      	movs	r2, #1
 8008456:	e7d4      	b.n	8008402 <d_print_mod_list+0x102>
 8008458:	4e3f      	ldr	r6, [pc, #252]	; (8008558 <d_print_mod_list+0x258>)
 800845a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800845e:	f106 0a0d 	add.w	sl, r6, #13
 8008462:	f04f 0b00 	mov.w	fp, #0
 8008466:	e009      	b.n	800847c <d_print_mod_list+0x17c>
 8008468:	460b      	mov	r3, r1
 800846a:	3101      	adds	r1, #1
 800846c:	4556      	cmp	r6, sl
 800846e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8008472:	f805 8003 	strb.w	r8, [r5, r3]
 8008476:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800847a:	d013      	beq.n	80084a4 <d_print_mod_list+0x1a4>
 800847c:	29ff      	cmp	r1, #255	; 0xff
 800847e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008482:	d1f1      	bne.n	8008468 <d_print_mod_list+0x168>
 8008484:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8008488:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800848c:	4628      	mov	r0, r5
 800848e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8008492:	4798      	blx	r3
 8008494:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8008498:	2101      	movs	r1, #1
 800849a:	440b      	add	r3, r1
 800849c:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80084a0:	2300      	movs	r3, #0
 80084a2:	e7e3      	b.n	800846c <d_print_mod_list+0x16c>
 80084a4:	68a2      	ldr	r2, [r4, #8]
 80084a6:	a801      	add	r0, sp, #4
 80084a8:	3201      	adds	r2, #1
 80084aa:	492c      	ldr	r1, [pc, #176]	; (800855c <d_print_mod_list+0x25c>)
 80084ac:	f7f8 fc1e 	bl	8000cec <sprintf>
 80084b0:	a801      	add	r0, sp, #4
 80084b2:	f003 f85d 	bl	800b570 <strlen>
 80084b6:	b330      	cbz	r0, 8008506 <d_print_mod_list+0x206>
 80084b8:	f10d 0603 	add.w	r6, sp, #3
 80084bc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80084c0:	eb06 0a00 	add.w	sl, r6, r0
 80084c4:	f04f 0b00 	mov.w	fp, #0
 80084c8:	e009      	b.n	80084de <d_print_mod_list+0x1de>
 80084ca:	460b      	mov	r3, r1
 80084cc:	3101      	adds	r1, #1
 80084ce:	4556      	cmp	r6, sl
 80084d0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80084d4:	f805 8003 	strb.w	r8, [r5, r3]
 80084d8:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 80084dc:	d015      	beq.n	800850a <d_print_mod_list+0x20a>
 80084de:	29ff      	cmp	r1, #255	; 0xff
 80084e0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80084e4:	d1f1      	bne.n	80084ca <d_print_mod_list+0x1ca>
 80084e6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80084ea:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 80084ee:	4628      	mov	r0, r5
 80084f0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80084f4:	4798      	blx	r3
 80084f6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80084fa:	2101      	movs	r1, #1
 80084fc:	440b      	add	r3, r1
 80084fe:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8008502:	2300      	movs	r3, #0
 8008504:	e7e3      	b.n	80084ce <d_print_mod_list+0x1ce>
 8008506:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800850a:	4e15      	ldr	r6, [pc, #84]	; (8008560 <d_print_mod_list+0x260>)
 800850c:	f04f 0b00 	mov.w	fp, #0
 8008510:	f106 0a03 	add.w	sl, r6, #3
 8008514:	e00a      	b.n	800852c <d_print_mod_list+0x22c>
 8008516:	460b      	mov	r3, r1
 8008518:	3101      	adds	r1, #1
 800851a:	4556      	cmp	r6, sl
 800851c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8008520:	f805 8003 	strb.w	r8, [r5, r3]
 8008524:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8008528:	f43f af77 	beq.w	800841a <d_print_mod_list+0x11a>
 800852c:	29ff      	cmp	r1, #255	; 0xff
 800852e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008532:	d1f0      	bne.n	8008516 <d_print_mod_list+0x216>
 8008534:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8008538:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800853c:	4628      	mov	r0, r5
 800853e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8008542:	4798      	blx	r3
 8008544:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8008548:	2101      	movs	r1, #1
 800854a:	440b      	add	r3, r1
 800854c:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8008550:	2300      	movs	r3, #0
 8008552:	e7e2      	b.n	800851a <d_print_mod_list+0x21a>
 8008554:	0800ce03 	.word	0x0800ce03
 8008558:	0800ce07 	.word	0x0800ce07
 800855c:	0800ce18 	.word	0x0800ce18
 8008560:	0800ce1b 	.word	0x0800ce1b

08008564 <d_print_array_type.isra.9>:
 8008564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	4699      	mov	r9, r3
 800856a:	4605      	mov	r5, r0
 800856c:	460f      	mov	r7, r1
 800856e:	4690      	mov	r8, r2
 8008570:	b14b      	cbz	r3, 8008586 <d_print_array_type.isra.9+0x22>
 8008572:	6898      	ldr	r0, [r3, #8]
 8008574:	b380      	cbz	r0, 80085d8 <d_print_array_type.isra.9+0x74>
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1fa      	bne.n	8008572 <d_print_array_type.isra.9+0xe>
 800857c:	464a      	mov	r2, r9
 800857e:	4628      	mov	r0, r5
 8008580:	4639      	mov	r1, r7
 8008582:	f7ff febd 	bl	8008300 <d_print_mod_list>
 8008586:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800858a:	2bff      	cmp	r3, #255	; 0xff
 800858c:	d06a      	beq.n	8008664 <d_print_array_type.isra.9+0x100>
 800858e:	1c59      	adds	r1, r3, #1
 8008590:	2220      	movs	r2, #32
 8008592:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8008596:	54ea      	strb	r2, [r5, r3]
 8008598:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 800859c:	29ff      	cmp	r1, #255	; 0xff
 800859e:	f000 8096 	beq.w	80086ce <d_print_array_type.isra.9+0x16a>
 80085a2:	1c4b      	adds	r3, r1, #1
 80085a4:	225b      	movs	r2, #91	; 0x5b
 80085a6:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80085aa:	546a      	strb	r2, [r5, r1]
 80085ac:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 80085b0:	f8d8 2000 	ldr.w	r2, [r8]
 80085b4:	b12a      	cbz	r2, 80085c2 <d_print_array_type.isra.9+0x5e>
 80085b6:	4639      	mov	r1, r7
 80085b8:	4628      	mov	r0, r5
 80085ba:	f7ff fbf1 	bl	8007da0 <d_print_comp>
 80085be:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80085c2:	2bff      	cmp	r3, #255	; 0xff
 80085c4:	d071      	beq.n	80086aa <d_print_array_type.isra.9+0x146>
 80085c6:	1c59      	adds	r1, r3, #1
 80085c8:	225d      	movs	r2, #93	; 0x5d
 80085ca:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80085ce:	54ea      	strb	r2, [r5, r3]
 80085d0:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 80085d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b2a      	cmp	r3, #42	; 0x2a
 80085de:	f000 8087 	beq.w	80086f0 <d_print_array_type.isra.9+0x18c>
 80085e2:	4e48      	ldr	r6, [pc, #288]	; (8008704 <d_print_array_type.isra.9+0x1a0>)
 80085e4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80085e8:	f106 0a02 	add.w	sl, r6, #2
 80085ec:	e00a      	b.n	8008604 <d_print_array_type.isra.9+0xa0>
 80085ee:	460a      	mov	r2, r1
 80085f0:	4556      	cmp	r6, sl
 80085f2:	f101 0101 	add.w	r1, r1, #1
 80085f6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80085fa:	f805 b002 	strb.w	fp, [r5, r2]
 80085fe:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
 8008602:	d01d      	beq.n	8008640 <d_print_array_type.isra.9+0xdc>
 8008604:	29ff      	cmp	r1, #255	; 0xff
 8008606:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 800860a:	d1f0      	bne.n	80085ee <d_print_array_type.isra.9+0x8a>
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8008614:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
 8008618:	f8d5 4108 	ldr.w	r4, [r5, #264]	; 0x108
 800861c:	4628      	mov	r0, r5
 800861e:	47a0      	blx	r4
 8008620:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 8008624:	2101      	movs	r1, #1
 8008626:	440a      	add	r2, r1
 8008628:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
 800862c:	4556      	cmp	r6, sl
 800862e:	f04f 0200 	mov.w	r2, #0
 8008632:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8008636:	f805 b002 	strb.w	fp, [r5, r2]
 800863a:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
 800863e:	d1e1      	bne.n	8008604 <d_print_array_type.isra.9+0xa0>
 8008640:	4639      	mov	r1, r7
 8008642:	464a      	mov	r2, r9
 8008644:	4628      	mov	r0, r5
 8008646:	2300      	movs	r3, #0
 8008648:	f7ff fe5a 	bl	8008300 <d_print_mod_list>
 800864c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8008650:	29ff      	cmp	r1, #255	; 0xff
 8008652:	d019      	beq.n	8008688 <d_print_array_type.isra.9+0x124>
 8008654:	1c4b      	adds	r3, r1, #1
 8008656:	2229      	movs	r2, #41	; 0x29
 8008658:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800865c:	546a      	strb	r2, [r5, r1]
 800865e:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 8008662:	e792      	b.n	800858a <d_print_array_type.isra.9+0x26>
 8008664:	2400      	movs	r4, #0
 8008666:	4619      	mov	r1, r3
 8008668:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800866c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8008670:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 8008674:	4628      	mov	r0, r5
 8008676:	4798      	blx	r3
 8008678:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 800867c:	4623      	mov	r3, r4
 800867e:	3201      	adds	r2, #1
 8008680:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
 8008684:	2101      	movs	r1, #1
 8008686:	e783      	b.n	8008590 <d_print_array_type.isra.9+0x2c>
 8008688:	2400      	movs	r4, #0
 800868a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800868e:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 8008692:	4628      	mov	r0, r5
 8008694:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8008698:	4798      	blx	r3
 800869a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800869e:	4621      	mov	r1, r4
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80086a6:	2301      	movs	r3, #1
 80086a8:	e7d5      	b.n	8008656 <d_print_array_type.isra.9+0xf2>
 80086aa:	2400      	movs	r4, #0
 80086ac:	4619      	mov	r1, r3
 80086ae:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80086b2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80086b6:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 80086ba:	4628      	mov	r0, r5
 80086bc:	4798      	blx	r3
 80086be:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 80086c2:	4623      	mov	r3, r4
 80086c4:	3201      	adds	r2, #1
 80086c6:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
 80086ca:	2101      	movs	r1, #1
 80086cc:	e77c      	b.n	80085c8 <d_print_array_type.isra.9+0x64>
 80086ce:	2400      	movs	r4, #0
 80086d0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80086d4:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 80086d8:	4628      	mov	r0, r5
 80086da:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80086de:	4798      	blx	r3
 80086e0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80086e4:	4621      	mov	r1, r4
 80086e6:	3301      	adds	r3, #1
 80086e8:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80086ec:	2301      	movs	r3, #1
 80086ee:	e759      	b.n	80085a4 <d_print_array_type.isra.9+0x40>
 80086f0:	4603      	mov	r3, r0
 80086f2:	4639      	mov	r1, r7
 80086f4:	464a      	mov	r2, r9
 80086f6:	4628      	mov	r0, r5
 80086f8:	f7ff fe02 	bl	8008300 <d_print_mod_list>
 80086fc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8008700:	e74c      	b.n	800859c <d_print_array_type.isra.9+0x38>
 8008702:	bf00      	nop
 8008704:	0800cff3 	.word	0x0800cff3

08008708 <d_print_function_type.isra.11>:
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	469a      	mov	sl, r3
 800870e:	4607      	mov	r7, r0
 8008710:	4688      	mov	r8, r1
 8008712:	4691      	mov	r9, r2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d03b      	beq.n	8008790 <d_print_function_type.isra.11+0x88>
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d138      	bne.n	8008790 <d_print_function_type.isra.11+0x88>
 800871e:	4654      	mov	r4, sl
 8008720:	2201      	movs	r2, #1
 8008722:	e006      	b.n	8008732 <d_print_function_type.isra.11+0x2a>
 8008724:	f416 6f60 	tst.w	r6, #3584	; 0xe00
 8008728:	d17b      	bne.n	8008822 <d_print_function_type.isra.11+0x11a>
 800872a:	6824      	ldr	r4, [r4, #0]
 800872c:	b384      	cbz	r4, 8008790 <d_print_function_type.isra.11+0x88>
 800872e:	68a3      	ldr	r3, [r4, #8]
 8008730:	bb73      	cbnz	r3, 8008790 <d_print_function_type.isra.11+0x88>
 8008732:	6860      	ldr	r0, [r4, #4]
 8008734:	4d69      	ldr	r5, [pc, #420]	; (80088dc <d_print_function_type.isra.11+0x1d4>)
 8008736:	7806      	ldrb	r6, [r0, #0]
 8008738:	3e19      	subs	r6, #25
 800873a:	b2f6      	uxtb	r6, r6
 800873c:	2e12      	cmp	r6, #18
 800873e:	d8f4      	bhi.n	800872a <d_print_function_type.isra.11+0x22>
 8008740:	fa02 f606 	lsl.w	r6, r2, r6
 8008744:	4035      	ands	r5, r6
 8008746:	2d00      	cmp	r5, #0
 8008748:	d0ec      	beq.n	8008724 <d_print_function_type.isra.11+0x1c>
 800874a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800874e:	2b20      	cmp	r3, #32
 8008750:	d06d      	beq.n	800882e <d_print_function_type.isra.11+0x126>
 8008752:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008756:	2bff      	cmp	r3, #255	; 0xff
 8008758:	f000 80ae 	beq.w	80088b8 <d_print_function_type.isra.11+0x1b0>
 800875c:	1c59      	adds	r1, r3, #1
 800875e:	2220      	movs	r2, #32
 8008760:	29ff      	cmp	r1, #255	; 0xff
 8008762:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8008766:	54fa      	strb	r2, [r7, r3]
 8008768:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 800876c:	d163      	bne.n	8008836 <d_print_function_type.isra.11+0x12e>
 800876e:	2400      	movs	r4, #0
 8008770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008774:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 8008778:	4638      	mov	r0, r7
 800877a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800877e:	4798      	blx	r3
 8008780:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008784:	4621      	mov	r1, r4
 8008786:	3301      	adds	r3, #1
 8008788:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800878c:	2301      	movs	r3, #1
 800878e:	e053      	b.n	8008838 <d_print_function_type.isra.11+0x130>
 8008790:	2200      	movs	r2, #0
 8008792:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 8008796:	4613      	mov	r3, r2
 8008798:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800879c:	4641      	mov	r1, r8
 800879e:	4638      	mov	r0, r7
 80087a0:	4652      	mov	r2, sl
 80087a2:	f7ff fdad 	bl	8008300 <d_print_mod_list>
 80087a6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80087aa:	29ff      	cmp	r1, #255	; 0xff
 80087ac:	d062      	beq.n	8008874 <d_print_function_type.isra.11+0x16c>
 80087ae:	1c4b      	adds	r3, r1, #1
 80087b0:	2228      	movs	r2, #40	; 0x28
 80087b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087b6:	547a      	strb	r2, [r7, r1]
 80087b8:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 80087bc:	f8d9 2000 	ldr.w	r2, [r9]
 80087c0:	b112      	cbz	r2, 80087c8 <d_print_function_type.isra.11+0xc0>
 80087c2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80087c6:	b191      	cbz	r1, 80087ee <d_print_function_type.isra.11+0xe6>
 80087c8:	2bff      	cmp	r3, #255	; 0xff
 80087ca:	d018      	beq.n	80087fe <d_print_function_type.isra.11+0xf6>
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	2429      	movs	r4, #41	; 0x29
 80087d0:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80087d4:	4641      	mov	r1, r8
 80087d6:	54fc      	strb	r4, [r7, r3]
 80087d8:	4652      	mov	r2, sl
 80087da:	4638      	mov	r0, r7
 80087dc:	f887 4104 	strb.w	r4, [r7, #260]	; 0x104
 80087e0:	2301      	movs	r3, #1
 80087e2:	f7ff fd8d 	bl	8008300 <d_print_mod_list>
 80087e6:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
 80087ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ee:	4638      	mov	r0, r7
 80087f0:	4641      	mov	r1, r8
 80087f2:	f7fd f83b 	bl	800586c <d_print_comp.part.10>
 80087f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087fa:	2bff      	cmp	r3, #255	; 0xff
 80087fc:	d1e6      	bne.n	80087cc <d_print_function_type.isra.11+0xc4>
 80087fe:	2400      	movs	r4, #0
 8008800:	4619      	mov	r1, r3
 8008802:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008806:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800880a:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 800880e:	4638      	mov	r0, r7
 8008810:	4798      	blx	r3
 8008812:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008816:	4623      	mov	r3, r4
 8008818:	3201      	adds	r2, #1
 800881a:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800881e:	2201      	movs	r2, #1
 8008820:	e7d5      	b.n	80087ce <d_print_function_type.isra.11+0xc6>
 8008822:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8008826:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800882a:	2a28      	cmp	r2, #40	; 0x28
 800882c:	d18f      	bne.n	800874e <d_print_function_type.isra.11+0x46>
 800882e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008832:	29ff      	cmp	r1, #255	; 0xff
 8008834:	d09b      	beq.n	800876e <d_print_function_type.isra.11+0x66>
 8008836:	1c4b      	adds	r3, r1, #1
 8008838:	2228      	movs	r2, #40	; 0x28
 800883a:	2400      	movs	r4, #0
 800883c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008840:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 8008844:	4623      	mov	r3, r4
 8008846:	547a      	strb	r2, [r7, r1]
 8008848:	4638      	mov	r0, r7
 800884a:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 800884e:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8008852:	4652      	mov	r2, sl
 8008854:	4641      	mov	r1, r8
 8008856:	f7ff fd53 	bl	8008300 <d_print_mod_list>
 800885a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800885e:	2aff      	cmp	r2, #255	; 0xff
 8008860:	d019      	beq.n	8008896 <d_print_function_type.isra.11+0x18e>
 8008862:	1c51      	adds	r1, r2, #1
 8008864:	2329      	movs	r3, #41	; 0x29
 8008866:	29ff      	cmp	r1, #255	; 0xff
 8008868:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800886c:	54bb      	strb	r3, [r7, r2]
 800886e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8008872:	d19c      	bne.n	80087ae <d_print_function_type.isra.11+0xa6>
 8008874:	2400      	movs	r4, #0
 8008876:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800887a:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 800887e:	4638      	mov	r0, r7
 8008880:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008884:	4798      	blx	r3
 8008886:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800888a:	4621      	mov	r1, r4
 800888c:	3301      	adds	r3, #1
 800888e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008892:	2301      	movs	r3, #1
 8008894:	e78c      	b.n	80087b0 <d_print_function_type.isra.11+0xa8>
 8008896:	4611      	mov	r1, r2
 8008898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800889c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80088a0:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 80088a4:	4638      	mov	r0, r7
 80088a6:	4798      	blx	r3
 80088a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088ac:	4622      	mov	r2, r4
 80088ae:	3301      	adds	r3, #1
 80088b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80088b4:	2101      	movs	r1, #1
 80088b6:	e7d5      	b.n	8008864 <d_print_function_type.isra.11+0x15c>
 80088b8:	2400      	movs	r4, #0
 80088ba:	4619      	mov	r1, r3
 80088bc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80088c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80088c4:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 80088c8:	4638      	mov	r0, r7
 80088ca:	4798      	blx	r3
 80088cc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80088d0:	4623      	mov	r3, r4
 80088d2:	3201      	adds	r2, #1
 80088d4:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80088d8:	2101      	movs	r1, #1
 80088da:	e740      	b.n	800875e <d_print_function_type.isra.11+0x56>
 80088dc:	00043107 	.word	0x00043107

080088e0 <d_print_cast.isra.12>:
 80088e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e4:	4615      	mov	r5, r2
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	b082      	sub	sp, #8
 80088ea:	7813      	ldrb	r3, [r2, #0]
 80088ec:	4604      	mov	r4, r0
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	460e      	mov	r6, r1
 80088f2:	d006      	beq.n	8008902 <d_print_cast.isra.12+0x22>
 80088f4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d03d      	beq.n	8008978 <d_print_cast.isra.12+0x98>
 80088fc:	b002      	add	sp, #8
 80088fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008902:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
 8008906:	ab02      	add	r3, sp, #8
 8008908:	f843 7d08 	str.w	r7, [r3, #-8]!
 800890c:	2200      	movs	r2, #0
 800890e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8008912:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
 8008916:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	2a00      	cmp	r2, #0
 8008922:	d06f      	beq.n	8008a04 <d_print_cast.isra.12+0x124>
 8008924:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8008928:	2b00      	cmp	r3, #0
 800892a:	d03f      	beq.n	80089ac <d_print_cast.isra.12+0xcc>
 800892c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8008930:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8008934:	2b3c      	cmp	r3, #60	; 0x3c
 8008936:	d069      	beq.n	8008a0c <d_print_cast.isra.12+0x12c>
 8008938:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800893c:	2aff      	cmp	r2, #255	; 0xff
 800893e:	d04b      	beq.n	80089d8 <d_print_cast.isra.12+0xf8>
 8008940:	1c53      	adds	r3, r2, #1
 8008942:	213c      	movs	r1, #60	; 0x3c
 8008944:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008948:	54a1      	strb	r1, [r4, r2]
 800894a:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800894e:	682a      	ldr	r2, [r5, #0]
 8008950:	6892      	ldr	r2, [r2, #8]
 8008952:	2a00      	cmp	r2, #0
 8008954:	d052      	beq.n	80089fc <d_print_cast.isra.12+0x11c>
 8008956:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 800895a:	b195      	cbz	r5, 8008982 <d_print_cast.isra.12+0xa2>
 800895c:	2bff      	cmp	r3, #255	; 0xff
 800895e:	d029      	beq.n	80089b4 <d_print_cast.isra.12+0xd4>
 8008960:	1c59      	adds	r1, r3, #1
 8008962:	223e      	movs	r2, #62	; 0x3e
 8008964:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008968:	54e2      	strb	r2, [r4, r3]
 800896a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800896e:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8008972:	b002      	add	sp, #8
 8008974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008978:	f7fc ff78 	bl	800586c <d_print_comp.part.10>
 800897c:	b002      	add	sp, #8
 800897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008982:	4631      	mov	r1, r6
 8008984:	4620      	mov	r0, r4
 8008986:	f7fc ff71 	bl	800586c <d_print_comp.part.10>
 800898a:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
 800898e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008992:	2a3e      	cmp	r2, #62	; 0x3e
 8008994:	d1e2      	bne.n	800895c <d_print_cast.isra.12+0x7c>
 8008996:	2bff      	cmp	r3, #255	; 0xff
 8008998:	d044      	beq.n	8008a24 <d_print_cast.isra.12+0x144>
 800899a:	461d      	mov	r5, r3
 800899c:	3301      	adds	r3, #1
 800899e:	2220      	movs	r2, #32
 80089a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80089a4:	5562      	strb	r2, [r4, r5]
 80089a6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80089aa:	e7d7      	b.n	800895c <d_print_cast.isra.12+0x7c>
 80089ac:	f7fc ff5e 	bl	800586c <d_print_comp.part.10>
 80089b0:	9f00      	ldr	r7, [sp, #0]
 80089b2:	e7bb      	b.n	800892c <d_print_cast.isra.12+0x4c>
 80089b4:	2500      	movs	r5, #0
 80089b6:	4619      	mov	r1, r3
 80089b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80089bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80089c0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80089c4:	4620      	mov	r0, r4
 80089c6:	4798      	blx	r3
 80089c8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80089cc:	462b      	mov	r3, r5
 80089ce:	3201      	adds	r2, #1
 80089d0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80089d4:	2101      	movs	r1, #1
 80089d6:	e7c4      	b.n	8008962 <d_print_cast.isra.12+0x82>
 80089d8:	2700      	movs	r7, #0
 80089da:	4611      	mov	r1, r2
 80089dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80089e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80089e4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80089e8:	4620      	mov	r0, r4
 80089ea:	4798      	blx	r3
 80089ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80089f0:	463a      	mov	r2, r7
 80089f2:	3301      	adds	r3, #1
 80089f4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80089f8:	2301      	movs	r3, #1
 80089fa:	e7a2      	b.n	8008942 <d_print_cast.isra.12+0x62>
 80089fc:	2201      	movs	r2, #1
 80089fe:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
 8008a02:	e7ab      	b.n	800895c <d_print_cast.isra.12+0x7c>
 8008a04:	2301      	movs	r3, #1
 8008a06:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8008a0a:	e78f      	b.n	800892c <d_print_cast.isra.12+0x4c>
 8008a0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008a10:	29ff      	cmp	r1, #255	; 0xff
 8008a12:	d017      	beq.n	8008a44 <d_print_cast.isra.12+0x164>
 8008a14:	1c4a      	adds	r2, r1, #1
 8008a16:	2320      	movs	r3, #32
 8008a18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008a1c:	5463      	strb	r3, [r4, r1]
 8008a1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008a22:	e78b      	b.n	800893c <d_print_cast.isra.12+0x5c>
 8008a24:	4619      	mov	r1, r3
 8008a26:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8008a2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008a34:	4798      	blx	r3
 8008a36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7ac      	b.n	800899e <d_print_cast.isra.12+0xbe>
 8008a44:	2700      	movs	r7, #0
 8008a46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008a4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008a4e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8008a52:	4620      	mov	r0, r4
 8008a54:	4798      	blx	r3
 8008a56:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008a62:	2201      	movs	r2, #1
 8008a64:	e7d7      	b.n	8008a16 <d_print_cast.isra.12+0x136>
 8008a66:	bf00      	nop

08008a68 <d_print_expr_op>:
 8008a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	7815      	ldrb	r5, [r2, #0]
 8008a6e:	4604      	mov	r4, r0
 8008a70:	2d31      	cmp	r5, #49	; 0x31
 8008a72:	d008      	beq.n	8008a86 <d_print_expr_op+0x1e>
 8008a74:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8008a78:	b10b      	cbz	r3, 8008a7e <d_print_expr_op+0x16>
 8008a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a82:	f7fc bef3 	b.w	800586c <d_print_comp.part.10>
 8008a86:	6853      	ldr	r3, [r2, #4]
 8008a88:	689f      	ldr	r7, [r3, #8]
 8008a8a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	d0f3      	beq.n	8008a7a <d_print_expr_op+0x12>
 8008a92:	2500      	movs	r5, #0
 8008a94:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008a98:	46a8      	mov	r8, r5
 8008a9a:	e009      	b.n	8008ab0 <d_print_expr_op+0x48>
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	3101      	adds	r1, #1
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	42af      	cmp	r7, r5
 8008aa4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008aa8:	54e6      	strb	r6, [r4, r3]
 8008aaa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008aae:	d013      	beq.n	8008ad8 <d_print_expr_op+0x70>
 8008ab0:	29ff      	cmp	r1, #255	; 0xff
 8008ab2:	f819 6005 	ldrb.w	r6, [r9, r5]
 8008ab6:	d1f1      	bne.n	8008a9c <d_print_expr_op+0x34>
 8008ab8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008abc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008ac6:	4798      	blx	r3
 8008ac8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008acc:	2101      	movs	r1, #1
 8008ace:	440b      	add	r3, r1
 8008ad0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e7e3      	b.n	8008aa0 <d_print_expr_op+0x38>
 8008ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008adc <d_print_subexpr>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	7813      	ldrb	r3, [r2, #0]
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	d914      	bls.n	8008b14 <d_print_subexpr+0x38>
 8008aea:	2b30      	cmp	r3, #48	; 0x30
 8008aec:	d012      	beq.n	8008b14 <d_print_subexpr+0x38>
 8008aee:	2b06      	cmp	r3, #6
 8008af0:	d010      	beq.n	8008b14 <d_print_subexpr+0x38>
 8008af2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8008af6:	2bff      	cmp	r3, #255	; 0xff
 8008af8:	d034      	beq.n	8008b64 <d_print_subexpr+0x88>
 8008afa:	1c59      	adds	r1, r3, #1
 8008afc:	2228      	movs	r2, #40	; 0x28
 8008afe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008b02:	54e2      	strb	r2, [r4, r3]
 8008b04:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008b08:	2600      	movs	r6, #0
 8008b0a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8008b0e:	b133      	cbz	r3, 8008b1e <d_print_subexpr+0x42>
 8008b10:	b166      	cbz	r6, 8008b2c <d_print_subexpr+0x50>
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b14:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008b18:	2601      	movs	r6, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1f8      	bne.n	8008b10 <d_print_subexpr+0x34>
 8008b1e:	4639      	mov	r1, r7
 8008b20:	462a      	mov	r2, r5
 8008b22:	4620      	mov	r0, r4
 8008b24:	f7fc fea2 	bl	800586c <d_print_comp.part.10>
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	d1f2      	bne.n	8008b12 <d_print_subexpr+0x36>
 8008b2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008b30:	29ff      	cmp	r1, #255	; 0xff
 8008b32:	d007      	beq.n	8008b44 <d_print_subexpr+0x68>
 8008b34:	1c4a      	adds	r2, r1, #1
 8008b36:	2329      	movs	r3, #41	; 0x29
 8008b38:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008b3c:	5463      	strb	r3, [r4, r1]
 8008b3e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008b48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008b4c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8008b50:	4620      	mov	r0, r4
 8008b52:	4798      	blx	r3
 8008b54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b58:	4631      	mov	r1, r6
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008b60:	2201      	movs	r2, #1
 8008b62:	e7e8      	b.n	8008b36 <d_print_subexpr+0x5a>
 8008b64:	2600      	movs	r6, #0
 8008b66:	4619      	mov	r1, r3
 8008b68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008b6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008b70:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8008b74:	4798      	blx	r3
 8008b76:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008b7a:	4633      	mov	r3, r6
 8008b7c:	3201      	adds	r2, #1
 8008b7e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008b82:	2101      	movs	r1, #1
 8008b84:	e7ba      	b.n	8008afc <d_print_subexpr+0x20>
 8008b86:	bf00      	nop

08008b88 <d_demangle_callback.constprop.16>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	b0d7      	sub	sp, #348	; 0x15c
 8008b8e:	7805      	ldrb	r5, [r0, #0]
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	2d5f      	cmp	r5, #95	; 0x5f
 8008b94:	4604      	mov	r4, r0
 8008b96:	460e      	mov	r6, r1
 8008b98:	4690      	mov	r8, r2
 8008b9a:	d072      	beq.n	8008c82 <d_demangle_callback.constprop.16+0xfa>
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	497c      	ldr	r1, [pc, #496]	; (8008d90 <d_demangle_callback.constprop.16+0x208>)
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	f002 fd15 	bl	800b5d0 <strncmp>
 8008ba6:	b978      	cbnz	r0, 8008bc8 <d_demangle_callback.constprop.16+0x40>
 8008ba8:	7a23      	ldrb	r3, [r4, #8]
 8008baa:	2b2e      	cmp	r3, #46	; 0x2e
 8008bac:	d005      	beq.n	8008bba <d_demangle_callback.constprop.16+0x32>
 8008bae:	2b5f      	cmp	r3, #95	; 0x5f
 8008bb0:	d003      	beq.n	8008bba <d_demangle_callback.constprop.16+0x32>
 8008bb2:	2b24      	cmp	r3, #36	; 0x24
 8008bb4:	d001      	beq.n	8008bba <d_demangle_callback.constprop.16+0x32>
 8008bb6:	4681      	mov	r9, r0
 8008bb8:	e008      	b.n	8008bcc <d_demangle_callback.constprop.16+0x44>
 8008bba:	7a63      	ldrb	r3, [r4, #9]
 8008bbc:	2b44      	cmp	r3, #68	; 0x44
 8008bbe:	f000 80df 	beq.w	8008d80 <d_demangle_callback.constprop.16+0x1f8>
 8008bc2:	2b49      	cmp	r3, #73	; 0x49
 8008bc4:	f000 8098 	beq.w	8008cf8 <d_demangle_callback.constprop.16+0x170>
 8008bc8:	f04f 0900 	mov.w	r9, #0
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f002 fccf 	bl	800b570 <strlen>
 8008bd2:	0042      	lsls	r2, r0, #1
 8008bd4:	0083      	lsls	r3, r0, #2
 8008bd6:	1899      	adds	r1, r3, r2
 8008bd8:	0089      	lsls	r1, r1, #2
 8008bda:	3108      	adds	r1, #8
 8008bdc:	330a      	adds	r3, #10
 8008bde:	ebad 0d01 	sub.w	sp, sp, r1
 8008be2:	f023 0307 	bic.w	r3, r3, #7
 8008be6:	46ea      	mov	sl, sp
 8008be8:	eb04 0c00 	add.w	ip, r4, r0
 8008bec:	ebad 0d03 	sub.w	sp, sp, r3
 8008bf0:	f04f 0b11 	mov.w	fp, #17
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f1b9 0f01 	cmp.w	r9, #1
 8008bfa:	f8c7 a010 	str.w	sl, [r7, #16]
 8008bfe:	f8c7 d01c 	str.w	sp, [r7, #28]
 8008c02:	61ba      	str	r2, [r7, #24]
 8008c04:	603c      	str	r4, [r7, #0]
 8008c06:	60fc      	str	r4, [r7, #12]
 8008c08:	6278      	str	r0, [r7, #36]	; 0x24
 8008c0a:	f8c7 c004 	str.w	ip, [r7, #4]
 8008c0e:	f8c7 b008 	str.w	fp, [r7, #8]
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	623b      	str	r3, [r7, #32]
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c1c:	d037      	beq.n	8008c8e <d_demangle_callback.constprop.16+0x106>
 8008c1e:	d373      	bcc.n	8008d08 <d_demangle_callback.constprop.16+0x180>
 8008c20:	f1b9 0f03 	cmp.w	r9, #3
 8008c24:	d870      	bhi.n	8008d08 <d_demangle_callback.constprop.16+0x180>
 8008c26:	7ae2      	ldrb	r2, [r4, #11]
 8008c28:	f1b9 0f02 	cmp.w	r9, #2
 8008c2c:	f104 050b 	add.w	r5, r4, #11
 8008c30:	bf14      	ite	ne
 8008c32:	f04f 0943 	movne.w	r9, #67	; 0x43
 8008c36:	f04f 0942 	moveq.w	r9, #66	; 0x42
 8008c3a:	2a5f      	cmp	r2, #95	; 0x5f
 8008c3c:	60fd      	str	r5, [r7, #12]
 8008c3e:	d103      	bne.n	8008c48 <d_demangle_callback.constprop.16+0xc0>
 8008c40:	7b22      	ldrb	r2, [r4, #12]
 8008c42:	2a5a      	cmp	r2, #90	; 0x5a
 8008c44:	f000 8091 	beq.w	8008d6a <d_demangle_callback.constprop.16+0x1e2>
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f002 fc91 	bl	800b570 <strlen>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4602      	mov	r2, r0
 8008c52:	4638      	mov	r0, r7
 8008c54:	f7fa fd8a 	bl	800376c <d_make_name>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7fa fd38 	bl	80036d4 <d_make_comp>
 8008c64:	68fc      	ldr	r4, [r7, #12]
 8008c66:	4681      	mov	r9, r0
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f002 fc81 	bl	800b570 <strlen>
 8008c6e:	1823      	adds	r3, r4, r0
 8008c70:	60fb      	str	r3, [r7, #12]
 8008c72:	5c25      	ldrb	r5, [r4, r0]
 8008c74:	b185      	cbz	r5, 8008c98 <d_demangle_callback.constprop.16+0x110>
 8008c76:	2000      	movs	r0, #0
 8008c78:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	7843      	ldrb	r3, [r0, #1]
 8008c84:	2b5a      	cmp	r3, #90	; 0x5a
 8008c86:	d189      	bne.n	8008b9c <d_demangle_callback.constprop.16+0x14>
 8008c88:	f04f 0901 	mov.w	r9, #1
 8008c8c:	e79e      	b.n	8008bcc <d_demangle_callback.constprop.16+0x44>
 8008c8e:	2d5f      	cmp	r5, #95	; 0x5f
 8008c90:	d041      	beq.n	8008d16 <d_demangle_callback.constprop.16+0x18e>
 8008c92:	4699      	mov	r9, r3
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	d1ee      	bne.n	8008c76 <d_demangle_callback.constprop.16+0xee>
 8008c98:	f1b9 0f00 	cmp.w	r9, #0
 8008c9c:	d063      	beq.n	8008d66 <d_demangle_callback.constprop.16+0x1de>
 8008c9e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8008ca2:	464a      	mov	r2, r9
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	2111      	movs	r1, #17
 8008ca8:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134
 8008cac:	f887 5138 	strb.w	r5, [r7, #312]	; 0x138
 8008cb0:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
 8008cb4:	f8c7 5148 	str.w	r5, [r7, #328]	; 0x148
 8008cb8:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8008cbc:	f8c7 5154 	str.w	r5, [r7, #340]	; 0x154
 8008cc0:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
 8008cc4:	f8c7 8140 	str.w	r8, [r7, #320]	; 0x140
 8008cc8:	f8c7 514c 	str.w	r5, [r7, #332]	; 0x14c
 8008ccc:	f7fc fdce 	bl	800586c <d_print_comp.part.10>
 8008cd0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8008cd4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008cde:	5465      	strb	r5, [r4, r1]
 8008ce0:	4798      	blx	r3
 8008ce2:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008ce6:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008cea:	f1d0 0001 	rsbs	r0, r0, #1
 8008cee:	bf38      	it	cc
 8008cf0:	2000      	movcc	r0, #0
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf8:	7aa3      	ldrb	r3, [r4, #10]
 8008cfa:	2b5f      	cmp	r3, #95	; 0x5f
 8008cfc:	bf14      	ite	ne
 8008cfe:	f04f 0900 	movne.w	r9, #0
 8008d02:	f04f 0902 	moveq.w	r9, #2
 8008d06:	e761      	b.n	8008bcc <d_demangle_callback.constprop.16+0x44>
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7fb fa97 	bl	800423c <d_type>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4681      	mov	r9, r0
 8008d12:	781d      	ldrb	r5, [r3, #0]
 8008d14:	e7ae      	b.n	8008c74 <d_demangle_callback.constprop.16+0xec>
 8008d16:	7865      	ldrb	r5, [r4, #1]
 8008d18:	1c62      	adds	r2, r4, #1
 8008d1a:	2d5a      	cmp	r5, #90	; 0x5a
 8008d1c:	60fa      	str	r2, [r7, #12]
 8008d1e:	d1b8      	bne.n	8008c92 <d_demangle_callback.constprop.16+0x10a>
 8008d20:	4649      	mov	r1, r9
 8008d22:	3402      	adds	r4, #2
 8008d24:	4638      	mov	r0, r7
 8008d26:	60fc      	str	r4, [r7, #12]
 8008d28:	f7fb fe6a 	bl	8004a00 <d_encoding>
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4681      	mov	r9, r0
 8008d30:	f013 0f01 	tst.w	r3, #1
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	781d      	ldrb	r5, [r3, #0]
 8008d38:	d112      	bne.n	8008d60 <d_demangle_callback.constprop.16+0x1d8>
 8008d3a:	e79b      	b.n	8008c74 <d_demangle_callback.constprop.16+0xec>
 8008d3c:	785b      	ldrb	r3, [r3, #1]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d44:	2a19      	cmp	r2, #25
 8008d46:	4649      	mov	r1, r9
 8008d48:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8008d4c:	d903      	bls.n	8008d56 <d_demangle_callback.constprop.16+0x1ce>
 8008d4e:	2b5f      	cmp	r3, #95	; 0x5f
 8008d50:	d001      	beq.n	8008d56 <d_demangle_callback.constprop.16+0x1ce>
 8008d52:	2c09      	cmp	r4, #9
 8008d54:	d811      	bhi.n	8008d7a <d_demangle_callback.constprop.16+0x1f2>
 8008d56:	f7fa fd99 	bl	800388c <d_clone_suffix>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4681      	mov	r9, r0
 8008d5e:	781d      	ldrb	r5, [r3, #0]
 8008d60:	2d2e      	cmp	r5, #46	; 0x2e
 8008d62:	d0eb      	beq.n	8008d3c <d_demangle_callback.constprop.16+0x1b4>
 8008d64:	e786      	b.n	8008c74 <d_demangle_callback.constprop.16+0xec>
 8008d66:	4648      	mov	r0, r9
 8008d68:	e786      	b.n	8008c78 <d_demangle_callback.constprop.16+0xf0>
 8008d6a:	340d      	adds	r4, #13
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4638      	mov	r0, r7
 8008d70:	60fc      	str	r4, [r7, #12]
 8008d72:	f7fb fe45 	bl	8004a00 <d_encoding>
 8008d76:	4602      	mov	r2, r0
 8008d78:	e76f      	b.n	8008c5a <d_demangle_callback.constprop.16+0xd2>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	781d      	ldrb	r5, [r3, #0]
 8008d7e:	e779      	b.n	8008c74 <d_demangle_callback.constprop.16+0xec>
 8008d80:	7aa3      	ldrb	r3, [r4, #10]
 8008d82:	2b5f      	cmp	r3, #95	; 0x5f
 8008d84:	bf0c      	ite	eq
 8008d86:	f04f 0903 	moveq.w	r9, #3
 8008d8a:	f04f 0900 	movne.w	r9, #0
 8008d8e:	e71d      	b.n	8008bcc <d_demangle_callback.constprop.16+0x44>
 8008d90:	0800cda8 	.word	0x0800cda8

08008d94 <__cxa_demangle>:
 8008d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d98:	460d      	mov	r5, r1
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	4617      	mov	r7, r2
 8008d9e:	461e      	mov	r6, r3
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d02e      	beq.n	8008e02 <__cxa_demangle+0x6e>
 8008da4:	b109      	cbz	r1, 8008daa <__cxa_demangle+0x16>
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d02b      	beq.n	8008e02 <__cxa_demangle+0x6e>
 8008daa:	2400      	movs	r4, #0
 8008dac:	4929      	ldr	r1, [pc, #164]	; (8008e54 <__cxa_demangle+0xc0>)
 8008dae:	466a      	mov	r2, sp
 8008db0:	9400      	str	r4, [sp, #0]
 8008db2:	9401      	str	r4, [sp, #4]
 8008db4:	9402      	str	r4, [sp, #8]
 8008db6:	9403      	str	r4, [sp, #12]
 8008db8:	f7ff fee6 	bl	8008b88 <d_demangle_callback.constprop.16>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d03e      	beq.n	8008e3e <__cxa_demangle+0xaa>
 8008dc0:	9b03      	ldr	r3, [sp, #12]
 8008dc2:	b1db      	cbz	r3, 8008dfc <__cxa_demangle+0x68>
 8008dc4:	f04f 0801 	mov.w	r8, #1
 8008dc8:	9c00      	ldr	r4, [sp, #0]
 8008dca:	b344      	cbz	r4, 8008e1e <__cxa_demangle+0x8a>
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	d033      	beq.n	8008e38 <__cxa_demangle+0xa4>
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f002 fbcd 	bl	800b570 <strlen>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	4298      	cmp	r0, r3
 8008dda:	d21a      	bcs.n	8008e12 <__cxa_demangle+0x7e>
 8008ddc:	1c42      	adds	r2, r0, #1
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f001 fd5d 	bl	800a8a0 <memcpy>
 8008de6:	4620      	mov	r0, r4
 8008de8:	f001 fa38 	bl	800a25c <free>
 8008dec:	462c      	mov	r4, r5
 8008dee:	b30e      	cbz	r6, 8008e34 <__cxa_demangle+0xa0>
 8008df0:	2300      	movs	r3, #0
 8008df2:	4620      	mov	r0, r4
 8008df4:	6033      	str	r3, [r6, #0]
 8008df6:	b004      	add	sp, #16
 8008df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dfc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008e00:	e7e2      	b.n	8008dc8 <__cxa_demangle+0x34>
 8008e02:	b19e      	cbz	r6, 8008e2c <__cxa_demangle+0x98>
 8008e04:	f06f 0302 	mvn.w	r3, #2
 8008e08:	2000      	movs	r0, #0
 8008e0a:	6033      	str	r3, [r6, #0]
 8008e0c:	b004      	add	sp, #16
 8008e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e12:	4628      	mov	r0, r5
 8008e14:	f001 fa22 	bl	800a25c <free>
 8008e18:	f8c7 8000 	str.w	r8, [r7]
 8008e1c:	e7e7      	b.n	8008dee <__cxa_demangle+0x5a>
 8008e1e:	b12e      	cbz	r6, 8008e2c <__cxa_demangle+0x98>
 8008e20:	f1b8 0f01 	cmp.w	r8, #1
 8008e24:	d011      	beq.n	8008e4a <__cxa_demangle+0xb6>
 8008e26:	f06f 0301 	mvn.w	r3, #1
 8008e2a:	6033      	str	r3, [r6, #0]
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	b004      	add	sp, #16
 8008e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e34:	4620      	mov	r0, r4
 8008e36:	e7de      	b.n	8008df6 <__cxa_demangle+0x62>
 8008e38:	2f00      	cmp	r7, #0
 8008e3a:	d1ed      	bne.n	8008e18 <__cxa_demangle+0x84>
 8008e3c:	e7d7      	b.n	8008dee <__cxa_demangle+0x5a>
 8008e3e:	9800      	ldr	r0, [sp, #0]
 8008e40:	f001 fa0c 	bl	800a25c <free>
 8008e44:	2e00      	cmp	r6, #0
 8008e46:	d1ee      	bne.n	8008e26 <__cxa_demangle+0x92>
 8008e48:	e7f0      	b.n	8008e2c <__cxa_demangle+0x98>
 8008e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4e:	4620      	mov	r0, r4
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	e7d0      	b.n	8008df6 <__cxa_demangle+0x62>
 8008e54:	08003d79 	.word	0x08003d79

08008e58 <__gcclibcxx_demangle_callback>:
 8008e58:	b508      	push	{r3, lr}
 8008e5a:	b140      	cbz	r0, 8008e6e <__gcclibcxx_demangle_callback+0x16>
 8008e5c:	b139      	cbz	r1, 8008e6e <__gcclibcxx_demangle_callback+0x16>
 8008e5e:	f7ff fe93 	bl	8008b88 <d_demangle_callback.constprop.16>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	bf14      	ite	ne
 8008e66:	2000      	movne	r0, #0
 8008e68:	f06f 0001 	mvneq.w	r0, #1
 8008e6c:	bd08      	pop	{r3, pc}
 8008e6e:	f06f 0002 	mvn.w	r0, #2
 8008e72:	bd08      	pop	{r3, pc}

08008e74 <selfrel_offset31>:
 8008e74:	6803      	ldr	r3, [r0, #0]
 8008e76:	005a      	lsls	r2, r3, #1
 8008e78:	bf4c      	ite	mi
 8008e7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008e7e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8008e82:	4418      	add	r0, r3
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop

08008e88 <search_EIT_table>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	b083      	sub	sp, #12
 8008e90:	4691      	mov	r9, r2
 8008e92:	b321      	cbz	r1, 8008ede <search_EIT_table+0x56>
 8008e94:	3901      	subs	r1, #1
 8008e96:	9101      	str	r1, [sp, #4]
 8008e98:	4688      	mov	r8, r1
 8008e9a:	2700      	movs	r7, #0
 8008e9c:	eb07 0408 	add.w	r4, r7, r8
 8008ea0:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8008ea4:	1064      	asrs	r4, r4, #1
 8008ea6:	00e5      	lsls	r5, r4, #3
 8008ea8:	eb06 0b05 	add.w	fp, r6, r5
 8008eac:	4658      	mov	r0, fp
 8008eae:	f7ff ffe1 	bl	8008e74 <selfrel_offset31>
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	4682      	mov	sl, r0
 8008eb6:	42a3      	cmp	r3, r4
 8008eb8:	f105 0008 	add.w	r0, r5, #8
 8008ebc:	4430      	add	r0, r6
 8008ebe:	d019      	beq.n	8008ef4 <search_EIT_table+0x6c>
 8008ec0:	f7ff ffd8 	bl	8008e74 <selfrel_offset31>
 8008ec4:	45ca      	cmp	sl, r9
 8008ec6:	f100 30ff 	add.w	r0, r0, #4294967295
 8008eca:	d904      	bls.n	8008ed6 <search_EIT_table+0x4e>
 8008ecc:	42bc      	cmp	r4, r7
 8008ece:	d00b      	beq.n	8008ee8 <search_EIT_table+0x60>
 8008ed0:	f104 38ff 	add.w	r8, r4, #4294967295
 8008ed4:	e7e2      	b.n	8008e9c <search_EIT_table+0x14>
 8008ed6:	4548      	cmp	r0, r9
 8008ed8:	d202      	bcs.n	8008ee0 <search_EIT_table+0x58>
 8008eda:	1c67      	adds	r7, r4, #1
 8008edc:	e7de      	b.n	8008e9c <search_EIT_table+0x14>
 8008ede:	468b      	mov	fp, r1
 8008ee0:	4658      	mov	r0, fp
 8008ee2:	b003      	add	sp, #12
 8008ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee8:	f04f 0b00 	mov.w	fp, #0
 8008eec:	4658      	mov	r0, fp
 8008eee:	b003      	add	sp, #12
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	45ca      	cmp	sl, r9
 8008ef6:	d8e9      	bhi.n	8008ecc <search_EIT_table+0x44>
 8008ef8:	e7f2      	b.n	8008ee0 <search_EIT_table+0x58>
 8008efa:	bf00      	nop

08008efc <__gnu_unwind_get_pr_addr>:
 8008efc:	2801      	cmp	r0, #1
 8008efe:	d007      	beq.n	8008f10 <__gnu_unwind_get_pr_addr+0x14>
 8008f00:	2802      	cmp	r0, #2
 8008f02:	d007      	beq.n	8008f14 <__gnu_unwind_get_pr_addr+0x18>
 8008f04:	4b04      	ldr	r3, [pc, #16]	; (8008f18 <__gnu_unwind_get_pr_addr+0x1c>)
 8008f06:	2800      	cmp	r0, #0
 8008f08:	bf0c      	ite	eq
 8008f0a:	4618      	moveq	r0, r3
 8008f0c:	2000      	movne	r0, #0
 8008f0e:	4770      	bx	lr
 8008f10:	4802      	ldr	r0, [pc, #8]	; (8008f1c <__gnu_unwind_get_pr_addr+0x20>)
 8008f12:	4770      	bx	lr
 8008f14:	4802      	ldr	r0, [pc, #8]	; (8008f20 <__gnu_unwind_get_pr_addr+0x24>)
 8008f16:	4770      	bx	lr
 8008f18:	08009639 	.word	0x08009639
 8008f1c:	08009641 	.word	0x08009641
 8008f20:	08009649 	.word	0x08009649

08008f24 <get_eit_entry>:
 8008f24:	b530      	push	{r4, r5, lr}
 8008f26:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <get_eit_entry+0xa0>)
 8008f28:	b083      	sub	sp, #12
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	1e8d      	subs	r5, r1, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d042      	beq.n	8008fb8 <get_eit_entry+0x94>
 8008f32:	4628      	mov	r0, r5
 8008f34:	a901      	add	r1, sp, #4
 8008f36:	f3af 8000 	nop.w
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	b323      	cbz	r3, 8008f88 <get_eit_entry+0x64>
 8008f3e:	462a      	mov	r2, r5
 8008f40:	9901      	ldr	r1, [sp, #4]
 8008f42:	f7ff ffa1 	bl	8008e88 <search_EIT_table>
 8008f46:	4605      	mov	r5, r0
 8008f48:	b318      	cbz	r0, 8008f92 <get_eit_entry+0x6e>
 8008f4a:	f7ff ff93 	bl	8008e74 <selfrel_offset31>
 8008f4e:	686b      	ldr	r3, [r5, #4]
 8008f50:	64a0      	str	r0, [r4, #72]	; 0x48
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d012      	beq.n	8008f7c <get_eit_entry+0x58>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f105 0004 	add.w	r0, r5, #4
 8008f5c:	db28      	blt.n	8008fb0 <get_eit_entry+0x8c>
 8008f5e:	f7ff ff89 	bl	8008e74 <selfrel_offset31>
 8008f62:	2300      	movs	r3, #0
 8008f64:	64e0      	str	r0, [r4, #76]	; 0x4c
 8008f66:	6523      	str	r3, [r4, #80]	; 0x50
 8008f68:	6803      	ldr	r3, [r0, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	db16      	blt.n	8008f9c <get_eit_entry+0x78>
 8008f6e:	f7ff ff81 	bl	8008e74 <selfrel_offset31>
 8008f72:	2300      	movs	r3, #0
 8008f74:	6120      	str	r0, [r4, #16]
 8008f76:	4618      	mov	r0, r3
 8008f78:	b003      	add	sp, #12
 8008f7a:	bd30      	pop	{r4, r5, pc}
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	2305      	movs	r3, #5
 8008f82:	4618      	mov	r0, r3
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	2309      	movs	r3, #9
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	b003      	add	sp, #12
 8008f90:	bd30      	pop	{r4, r5, pc}
 8008f92:	2309      	movs	r3, #9
 8008f94:	6120      	str	r0, [r4, #16]
 8008f96:	4618      	mov	r0, r3
 8008f98:	b003      	add	sp, #12
 8008f9a:	bd30      	pop	{r4, r5, pc}
 8008f9c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8008fa0:	f7ff ffac 	bl	8008efc <__gnu_unwind_get_pr_addr>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	6120      	str	r0, [r4, #16]
 8008fa8:	bf14      	ite	ne
 8008faa:	2300      	movne	r3, #0
 8008fac:	2309      	moveq	r3, #9
 8008fae:	e7e2      	b.n	8008f76 <get_eit_entry+0x52>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	64e0      	str	r0, [r4, #76]	; 0x4c
 8008fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8008fb6:	e7d7      	b.n	8008f68 <get_eit_entry+0x44>
 8008fb8:	4b03      	ldr	r3, [pc, #12]	; (8008fc8 <get_eit_entry+0xa4>)
 8008fba:	4804      	ldr	r0, [pc, #16]	; (8008fcc <get_eit_entry+0xa8>)
 8008fbc:	1a1b      	subs	r3, r3, r0
 8008fbe:	10db      	asrs	r3, r3, #3
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	e7bc      	b.n	8008f3e <get_eit_entry+0x1a>
 8008fc4:	00000000 	.word	0x00000000
 8008fc8:	0800df94 	.word	0x0800df94
 8008fcc:	0800dd74 	.word	0x0800dd74

08008fd0 <restore_non_core_regs>:
 8008fd0:	6803      	ldr	r3, [r0, #0]
 8008fd2:	b510      	push	{r4, lr}
 8008fd4:	07da      	lsls	r2, r3, #31
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	d406      	bmi.n	8008fe8 <restore_non_core_regs+0x18>
 8008fda:	079b      	lsls	r3, r3, #30
 8008fdc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8008fe0:	d509      	bpl.n	8008ff6 <restore_non_core_regs+0x26>
 8008fe2:	f000 fc6f 	bl	80098c4 <__gnu_Unwind_Restore_VFP_D>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	0759      	lsls	r1, r3, #29
 8008fea:	d509      	bpl.n	8009000 <restore_non_core_regs+0x30>
 8008fec:	071a      	lsls	r2, r3, #28
 8008fee:	d50e      	bpl.n	800900e <restore_non_core_regs+0x3e>
 8008ff0:	06db      	lsls	r3, r3, #27
 8008ff2:	d513      	bpl.n	800901c <restore_non_core_regs+0x4c>
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	f000 fc5d 	bl	80098b4 <__gnu_Unwind_Restore_VFP>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	0759      	lsls	r1, r3, #29
 8008ffe:	d4f5      	bmi.n	8008fec <restore_non_core_regs+0x1c>
 8009000:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009004:	f000 fc66 	bl	80098d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	071a      	lsls	r2, r3, #28
 800900c:	d4f0      	bmi.n	8008ff0 <restore_non_core_regs+0x20>
 800900e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8009012:	f000 fc67 	bl	80098e4 <__gnu_Unwind_Restore_WMMXD>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	06db      	lsls	r3, r3, #27
 800901a:	d4eb      	bmi.n	8008ff4 <restore_non_core_regs+0x24>
 800901c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8009020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009024:	f000 bca2 	b.w	800996c <__gnu_Unwind_Restore_WMMXC>

08009028 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8009028:	6803      	ldr	r3, [r0, #0]
 800902a:	b10b      	cbz	r3, 8009030 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800902c:	4418      	add	r0, r3
 800902e:	4770      	bx	lr
 8009030:	4618      	mov	r0, r3
 8009032:	4770      	bx	lr

08009034 <__gnu_unwind_24bit.isra.1>:
 8009034:	2009      	movs	r0, #9
 8009036:	4770      	bx	lr

08009038 <_Unwind_DebugHook>:
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop

0800903c <unwind_phase2>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	e008      	b.n	8009056 <unwind_phase2+0x1a>
 8009044:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	6162      	str	r2, [r4, #20]
 800904a:	2001      	movs	r0, #1
 800904c:	4621      	mov	r1, r4
 800904e:	462a      	mov	r2, r5
 8009050:	4798      	blx	r3
 8009052:	2808      	cmp	r0, #8
 8009054:	d108      	bne.n	8009068 <unwind_phase2+0x2c>
 8009056:	4620      	mov	r0, r4
 8009058:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800905a:	f7ff ff63 	bl	8008f24 <get_eit_entry>
 800905e:	4606      	mov	r6, r0
 8009060:	2800      	cmp	r0, #0
 8009062:	d0ef      	beq.n	8009044 <unwind_phase2+0x8>
 8009064:	f000 fe8e 	bl	8009d84 <abort>
 8009068:	2807      	cmp	r0, #7
 800906a:	d1fb      	bne.n	8009064 <unwind_phase2+0x28>
 800906c:	4630      	mov	r0, r6
 800906e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8009070:	f7ff ffe2 	bl	8009038 <_Unwind_DebugHook>
 8009074:	1d28      	adds	r0, r5, #4
 8009076:	f000 fc11 	bl	800989c <__restore_core_regs>
 800907a:	bf00      	nop

0800907c <unwind_phase2_forced>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8009084:	1d0c      	adds	r4, r1, #4
 8009086:	ae03      	add	r6, sp, #12
 8009088:	4605      	mov	r5, r0
 800908a:	4617      	mov	r7, r2
 800908c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800908e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009092:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009096:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009098:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800909c:	ac02      	add	r4, sp, #8
 800909e:	f04f 0e00 	mov.w	lr, #0
 80090a2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80090a6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80090aa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80090ae:	4628      	mov	r0, r5
 80090b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80090b2:	f8c4 e000 	str.w	lr, [r4]
 80090b6:	f7ff ff35 	bl	8008f24 <get_eit_entry>
 80090ba:	2f00      	cmp	r7, #0
 80090bc:	4606      	mov	r6, r0
 80090be:	bf14      	ite	ne
 80090c0:	270a      	movne	r7, #10
 80090c2:	2709      	moveq	r7, #9
 80090c4:	b186      	cbz	r6, 80090e8 <unwind_phase2_forced+0x6c>
 80090c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090c8:	462a      	mov	r2, r5
 80090ca:	e88d 0210 	stmia.w	sp, {r4, r9}
 80090ce:	f047 0110 	orr.w	r1, r7, #16
 80090d2:	6460      	str	r0, [r4, #68]	; 0x44
 80090d4:	462b      	mov	r3, r5
 80090d6:	2001      	movs	r0, #1
 80090d8:	47c0      	blx	r8
 80090da:	2800      	cmp	r0, #0
 80090dc:	d12f      	bne.n	800913e <unwind_phase2_forced+0xc2>
 80090de:	4630      	mov	r0, r6
 80090e0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80090e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090ea:	4621      	mov	r1, r4
 80090ec:	616b      	str	r3, [r5, #20]
 80090ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80090f2:	a87a      	add	r0, sp, #488	; 0x1e8
 80090f4:	f001 fbd4 	bl	800a8a0 <memcpy>
 80090f8:	692b      	ldr	r3, [r5, #16]
 80090fa:	4629      	mov	r1, r5
 80090fc:	aa7a      	add	r2, sp, #488	; 0x1e8
 80090fe:	4638      	mov	r0, r7
 8009100:	4798      	blx	r3
 8009102:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8009104:	4682      	mov	sl, r0
 8009106:	e88d 0210 	stmia.w	sp, {r4, r9}
 800910a:	4639      	mov	r1, r7
 800910c:	6463      	str	r3, [r4, #68]	; 0x44
 800910e:	2001      	movs	r0, #1
 8009110:	462a      	mov	r2, r5
 8009112:	462b      	mov	r3, r5
 8009114:	47c0      	blx	r8
 8009116:	b990      	cbnz	r0, 800913e <unwind_phase2_forced+0xc2>
 8009118:	4620      	mov	r0, r4
 800911a:	a97a      	add	r1, sp, #488	; 0x1e8
 800911c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009120:	f001 fbbe 	bl	800a8a0 <memcpy>
 8009124:	f1ba 0f08 	cmp.w	sl, #8
 8009128:	d106      	bne.n	8009138 <unwind_phase2_forced+0xbc>
 800912a:	4628      	mov	r0, r5
 800912c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800912e:	f7ff fef9 	bl	8008f24 <get_eit_entry>
 8009132:	2709      	movs	r7, #9
 8009134:	4606      	mov	r6, r0
 8009136:	e7c5      	b.n	80090c4 <unwind_phase2_forced+0x48>
 8009138:	f1ba 0f07 	cmp.w	sl, #7
 800913c:	d004      	beq.n	8009148 <unwind_phase2_forced+0xcc>
 800913e:	2009      	movs	r0, #9
 8009140:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8009144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009148:	4630      	mov	r0, r6
 800914a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800914c:	f7ff ff74 	bl	8009038 <_Unwind_DebugHook>
 8009150:	a803      	add	r0, sp, #12
 8009152:	f000 fba3 	bl	800989c <__restore_core_regs>
 8009156:	bf00      	nop

08009158 <_Unwind_GetCFA>:
 8009158:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800915a:	4770      	bx	lr

0800915c <__gnu_Unwind_RaiseException>:
 800915c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800915e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009160:	b0f9      	sub	sp, #484	; 0x1e4
 8009162:	640b      	str	r3, [r1, #64]	; 0x40
 8009164:	1d0e      	adds	r6, r1, #4
 8009166:	ad01      	add	r5, sp, #4
 8009168:	460f      	mov	r7, r1
 800916a:	4604      	mov	r4, r0
 800916c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800916e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009170:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009174:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009178:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800917c:	f04f 36ff 	mov.w	r6, #4294967295
 8009180:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009184:	9600      	str	r6, [sp, #0]
 8009186:	e006      	b.n	8009196 <__gnu_Unwind_RaiseException+0x3a>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	4621      	mov	r1, r4
 800918c:	466a      	mov	r2, sp
 800918e:	4798      	blx	r3
 8009190:	2808      	cmp	r0, #8
 8009192:	4605      	mov	r5, r0
 8009194:	d108      	bne.n	80091a8 <__gnu_Unwind_RaiseException+0x4c>
 8009196:	4620      	mov	r0, r4
 8009198:	9910      	ldr	r1, [sp, #64]	; 0x40
 800919a:	f7ff fec3 	bl	8008f24 <get_eit_entry>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d0f2      	beq.n	8009188 <__gnu_Unwind_RaiseException+0x2c>
 80091a2:	2009      	movs	r0, #9
 80091a4:	b079      	add	sp, #484	; 0x1e4
 80091a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a8:	4668      	mov	r0, sp
 80091aa:	f7ff ff11 	bl	8008fd0 <restore_non_core_regs>
 80091ae:	2d06      	cmp	r5, #6
 80091b0:	d1f7      	bne.n	80091a2 <__gnu_Unwind_RaiseException+0x46>
 80091b2:	4620      	mov	r0, r4
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7ff ff41 	bl	800903c <unwind_phase2>
 80091ba:	bf00      	nop

080091bc <__gnu_Unwind_ForcedUnwind>:
 80091bc:	b430      	push	{r4, r5}
 80091be:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80091c0:	60c1      	str	r1, [r0, #12]
 80091c2:	6182      	str	r2, [r0, #24]
 80091c4:	4619      	mov	r1, r3
 80091c6:	641d      	str	r5, [r3, #64]	; 0x40
 80091c8:	2200      	movs	r2, #0
 80091ca:	bc30      	pop	{r4, r5}
 80091cc:	f7ff bf56 	b.w	800907c <unwind_phase2_forced>

080091d0 <__gnu_Unwind_Resume>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	6943      	ldr	r3, [r0, #20]
 80091d4:	68c6      	ldr	r6, [r0, #12]
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	640b      	str	r3, [r1, #64]	; 0x40
 80091dc:	b126      	cbz	r6, 80091e8 <__gnu_Unwind_Resume+0x18>
 80091de:	2201      	movs	r2, #1
 80091e0:	f7ff ff4c 	bl	800907c <unwind_phase2_forced>
 80091e4:	f000 fdce 	bl	8009d84 <abort>
 80091e8:	6903      	ldr	r3, [r0, #16]
 80091ea:	4621      	mov	r1, r4
 80091ec:	2002      	movs	r0, #2
 80091ee:	462a      	mov	r2, r5
 80091f0:	4798      	blx	r3
 80091f2:	2807      	cmp	r0, #7
 80091f4:	d007      	beq.n	8009206 <__gnu_Unwind_Resume+0x36>
 80091f6:	2808      	cmp	r0, #8
 80091f8:	d103      	bne.n	8009202 <__gnu_Unwind_Resume+0x32>
 80091fa:	4620      	mov	r0, r4
 80091fc:	4629      	mov	r1, r5
 80091fe:	f7ff ff1d 	bl	800903c <unwind_phase2>
 8009202:	f000 fdbf 	bl	8009d84 <abort>
 8009206:	4630      	mov	r0, r6
 8009208:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800920a:	f7ff ff15 	bl	8009038 <_Unwind_DebugHook>
 800920e:	1d28      	adds	r0, r5, #4
 8009210:	f000 fb44 	bl	800989c <__restore_core_regs>

08009214 <__gnu_Unwind_Resume_or_Rethrow>:
 8009214:	68c2      	ldr	r2, [r0, #12]
 8009216:	b410      	push	{r4}
 8009218:	b132      	cbz	r2, 8009228 <__gnu_Unwind_Resume_or_Rethrow+0x14>
 800921a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800921c:	2200      	movs	r2, #0
 800921e:	640c      	str	r4, [r1, #64]	; 0x40
 8009220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009224:	f7ff bf2a 	b.w	800907c <unwind_phase2_forced>
 8009228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800922c:	e796      	b.n	800915c <__gnu_Unwind_RaiseException>
 800922e:	bf00      	nop

08009230 <_Unwind_Complete>:
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop

08009234 <_Unwind_DeleteException>:
 8009234:	b508      	push	{r3, lr}
 8009236:	6883      	ldr	r3, [r0, #8]
 8009238:	b113      	cbz	r3, 8009240 <_Unwind_DeleteException+0xc>
 800923a:	4601      	mov	r1, r0
 800923c:	2001      	movs	r0, #1
 800923e:	4798      	blx	r3
 8009240:	bd08      	pop	{r3, pc}
 8009242:	bf00      	nop

08009244 <_Unwind_VRS_Get>:
 8009244:	b410      	push	{r4}
 8009246:	2904      	cmp	r1, #4
 8009248:	d809      	bhi.n	800925e <_Unwind_VRS_Get+0x1a>
 800924a:	e8df f001 	tbb	[pc, r1]
 800924e:	0307      	.short	0x0307
 8009250:	0308      	.short	0x0308
 8009252:	03          	.byte	0x03
 8009253:	00          	.byte	0x00
 8009254:	2001      	movs	r0, #1
 8009256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	b11b      	cbz	r3, 8009266 <_Unwind_VRS_Get+0x22>
 800925e:	2002      	movs	r0, #2
 8009260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	2a0f      	cmp	r2, #15
 8009268:	d8f9      	bhi.n	800925e <_Unwind_VRS_Get+0x1a>
 800926a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800926e:	6852      	ldr	r2, [r2, #4]
 8009270:	4618      	mov	r0, r3
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	e7ee      	b.n	8009256 <_Unwind_VRS_Get+0x12>

08009278 <_Unwind_GetGR>:
 8009278:	b500      	push	{lr}
 800927a:	b085      	sub	sp, #20
 800927c:	460a      	mov	r2, r1
 800927e:	ab03      	add	r3, sp, #12
 8009280:	2100      	movs	r1, #0
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	460b      	mov	r3, r1
 8009286:	f7ff ffdd 	bl	8009244 <_Unwind_VRS_Get>
 800928a:	9803      	ldr	r0, [sp, #12]
 800928c:	b005      	add	sp, #20
 800928e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009292:	bf00      	nop

08009294 <_Unwind_VRS_Set>:
 8009294:	b410      	push	{r4}
 8009296:	2904      	cmp	r1, #4
 8009298:	d809      	bhi.n	80092ae <_Unwind_VRS_Set+0x1a>
 800929a:	e8df f001 	tbb	[pc, r1]
 800929e:	0307      	.short	0x0307
 80092a0:	0308      	.short	0x0308
 80092a2:	03          	.byte	0x03
 80092a3:	00          	.byte	0x00
 80092a4:	2001      	movs	r0, #1
 80092a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	b11b      	cbz	r3, 80092b6 <_Unwind_VRS_Set+0x22>
 80092ae:	2002      	movs	r0, #2
 80092b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	2a0f      	cmp	r2, #15
 80092b8:	d8f9      	bhi.n	80092ae <_Unwind_VRS_Set+0x1a>
 80092ba:	9c01      	ldr	r4, [sp, #4]
 80092bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80092c0:	6821      	ldr	r1, [r4, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	6051      	str	r1, [r2, #4]
 80092c6:	e7ee      	b.n	80092a6 <_Unwind_VRS_Set+0x12>

080092c8 <_Unwind_SetGR>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	ab04      	add	r3, sp, #16
 80092ce:	f843 2d04 	str.w	r2, [r3, #-4]!
 80092d2:	460c      	mov	r4, r1
 80092d4:	2100      	movs	r1, #0
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4622      	mov	r2, r4
 80092da:	460b      	mov	r3, r1
 80092dc:	f7ff ffda 	bl	8009294 <_Unwind_VRS_Set>
 80092e0:	b004      	add	sp, #16
 80092e2:	bd10      	pop	{r4, pc}

080092e4 <__gnu_Unwind_Backtrace>:
 80092e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80092e8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80092ec:	6413      	str	r3, [r2, #64]	; 0x40
 80092ee:	1d15      	adds	r5, r2, #4
 80092f0:	ac17      	add	r4, sp, #92	; 0x5c
 80092f2:	4607      	mov	r7, r0
 80092f4:	460e      	mov	r6, r1
 80092f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009302:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009306:	f04f 35ff 	mov.w	r5, #4294967295
 800930a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800930e:	9516      	str	r5, [sp, #88]	; 0x58
 8009310:	e010      	b.n	8009334 <__gnu_Unwind_Backtrace+0x50>
 8009312:	a816      	add	r0, sp, #88	; 0x58
 8009314:	f7ff ffd8 	bl	80092c8 <_Unwind_SetGR>
 8009318:	4631      	mov	r1, r6
 800931a:	a816      	add	r0, sp, #88	; 0x58
 800931c:	47b8      	blx	r7
 800931e:	4669      	mov	r1, sp
 8009320:	aa16      	add	r2, sp, #88	; 0x58
 8009322:	b978      	cbnz	r0, 8009344 <__gnu_Unwind_Backtrace+0x60>
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	2008      	movs	r0, #8
 8009328:	4798      	blx	r3
 800932a:	2805      	cmp	r0, #5
 800932c:	4604      	mov	r4, r0
 800932e:	d00a      	beq.n	8009346 <__gnu_Unwind_Backtrace+0x62>
 8009330:	2809      	cmp	r0, #9
 8009332:	d007      	beq.n	8009344 <__gnu_Unwind_Backtrace+0x60>
 8009334:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009336:	4668      	mov	r0, sp
 8009338:	f7ff fdf4 	bl	8008f24 <get_eit_entry>
 800933c:	466a      	mov	r2, sp
 800933e:	210c      	movs	r1, #12
 8009340:	2800      	cmp	r0, #0
 8009342:	d0e6      	beq.n	8009312 <__gnu_Unwind_Backtrace+0x2e>
 8009344:	2409      	movs	r4, #9
 8009346:	a816      	add	r0, sp, #88	; 0x58
 8009348:	f7ff fe42 	bl	8008fd0 <restore_non_core_regs>
 800934c:	4620      	mov	r0, r4
 800934e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8009352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009354 <__gnu_unwind_pr_common>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	6cce      	ldr	r6, [r1, #76]	; 0x4c
 800935a:	460c      	mov	r4, r1
 800935c:	6831      	ldr	r1, [r6, #0]
 800935e:	b08b      	sub	sp, #44	; 0x2c
 8009360:	3604      	adds	r6, #4
 8009362:	461d      	mov	r5, r3
 8009364:	4690      	mov	r8, r2
 8009366:	9107      	str	r1, [sp, #28]
 8009368:	9608      	str	r6, [sp, #32]
 800936a:	f000 0903 	and.w	r9, r0, #3
 800936e:	2b00      	cmp	r3, #0
 8009370:	f040 8089 	bne.w	8009486 <__gnu_unwind_pr_common+0x132>
 8009374:	0209      	lsls	r1, r1, #8
 8009376:	2303      	movs	r3, #3
 8009378:	9107      	str	r1, [sp, #28]
 800937a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800937e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009382:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009384:	f1b9 0f02 	cmp.w	r9, #2
 8009388:	bf08      	it	eq
 800938a:	6ba6      	ldreq	r6, [r4, #56]	; 0x38
 800938c:	f013 0301 	ands.w	r3, r3, #1
 8009390:	d142      	bne.n	8009418 <__gnu_unwind_pr_common+0xc4>
 8009392:	f000 0008 	and.w	r0, r0, #8
 8009396:	b2c0      	uxtb	r0, r0
 8009398:	9003      	str	r0, [sp, #12]
 800939a:	9302      	str	r3, [sp, #8]
 800939c:	6837      	ldr	r7, [r6, #0]
 800939e:	2f00      	cmp	r7, #0
 80093a0:	d03c      	beq.n	800941c <__gnu_unwind_pr_common+0xc8>
 80093a2:	2d02      	cmp	r5, #2
 80093a4:	d06b      	beq.n	800947e <__gnu_unwind_pr_common+0x12a>
 80093a6:	8837      	ldrh	r7, [r6, #0]
 80093a8:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 80093ac:	3604      	adds	r6, #4
 80093ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80093b0:	f02a 0b01 	bic.w	fp, sl, #1
 80093b4:	4640      	mov	r0, r8
 80093b6:	210f      	movs	r1, #15
 80093b8:	449b      	add	fp, r3
 80093ba:	f7ff ff5d 	bl	8009278 <_Unwind_GetGR>
 80093be:	4583      	cmp	fp, r0
 80093c0:	d836      	bhi.n	8009430 <__gnu_unwind_pr_common+0xdc>
 80093c2:	f027 0301 	bic.w	r3, r7, #1
 80093c6:	449b      	add	fp, r3
 80093c8:	f00a 0a01 	and.w	sl, sl, #1
 80093cc:	f007 0701 	and.w	r7, r7, #1
 80093d0:	4558      	cmp	r0, fp
 80093d2:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
 80093d6:	bf2c      	ite	cs
 80093d8:	2000      	movcs	r0, #0
 80093da:	2001      	movcc	r0, #1
 80093dc:	2f01      	cmp	r7, #1
 80093de:	d031      	beq.n	8009444 <__gnu_unwind_pr_common+0xf0>
 80093e0:	d360      	bcc.n	80094a4 <__gnu_unwind_pr_common+0x150>
 80093e2:	2f02      	cmp	r7, #2
 80093e4:	d120      	bne.n	8009428 <__gnu_unwind_pr_common+0xd4>
 80093e6:	6833      	ldr	r3, [r6, #0]
 80093e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80093ec:	9101      	str	r1, [sp, #4]
 80093ee:	f1b9 0f00 	cmp.w	r9, #0
 80093f2:	f040 8085 	bne.w	8009500 <__gnu_unwind_pr_common+0x1ac>
 80093f6:	b130      	cbz	r0, 8009406 <__gnu_unwind_pr_common+0xb2>
 80093f8:	9a03      	ldr	r2, [sp, #12]
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	f000 808d 	beq.w	800951a <__gnu_unwind_pr_common+0x1c6>
 8009400:	2900      	cmp	r1, #0
 8009402:	f000 80b0 	beq.w	8009566 <__gnu_unwind_pr_common+0x212>
 8009406:	2b00      	cmp	r3, #0
 8009408:	f2c0 8085 	blt.w	8009516 <__gnu_unwind_pr_common+0x1c2>
 800940c:	9b01      	ldr	r3, [sp, #4]
 800940e:	f103 0a01 	add.w	sl, r3, #1
 8009412:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8009416:	e7c1      	b.n	800939c <__gnu_unwind_pr_common+0x48>
 8009418:	2100      	movs	r1, #0
 800941a:	9102      	str	r1, [sp, #8]
 800941c:	2d02      	cmp	r5, #2
 800941e:	dd49      	ble.n	80094b4 <__gnu_unwind_pr_common+0x160>
 8009420:	f7ff fe08 	bl	8009034 <__gnu_unwind_24bit.isra.1>
 8009424:	2800      	cmp	r0, #0
 8009426:	d04b      	beq.n	80094c0 <__gnu_unwind_pr_common+0x16c>
 8009428:	2009      	movs	r0, #9
 800942a:	b00b      	add	sp, #44	; 0x2c
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009430:	f00a 0a01 	and.w	sl, sl, #1
 8009434:	f007 0701 	and.w	r7, r7, #1
 8009438:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
 800943c:	2f01      	cmp	r7, #1
 800943e:	f04f 0000 	mov.w	r0, #0
 8009442:	d1cd      	bne.n	80093e0 <__gnu_unwind_pr_common+0x8c>
 8009444:	f1b9 0f00 	cmp.w	r9, #0
 8009448:	d141      	bne.n	80094ce <__gnu_unwind_pr_common+0x17a>
 800944a:	b1b0      	cbz	r0, 800947a <__gnu_unwind_pr_common+0x126>
 800944c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009450:	0fd7      	lsrs	r7, r2, #31
 8009452:	1c9a      	adds	r2, r3, #2
 8009454:	d0e8      	beq.n	8009428 <__gnu_unwind_pr_common+0xd4>
 8009456:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800945a:	3301      	adds	r3, #1
 800945c:	9106      	str	r1, [sp, #24]
 800945e:	f000 80ad 	beq.w	80095bc <__gnu_unwind_pr_common+0x268>
 8009462:	1d30      	adds	r0, r6, #4
 8009464:	f7ff fde0 	bl	8009028 <_Unwind_decode_typeinfo_ptr.isra.0>
 8009468:	463a      	mov	r2, r7
 800946a:	4601      	mov	r1, r0
 800946c:	ab06      	add	r3, sp, #24
 800946e:	4620      	mov	r0, r4
 8009470:	f7f9 fbd2 	bl	8002c18 <__cxa_type_match>
 8009474:	2800      	cmp	r0, #0
 8009476:	f040 80cf 	bne.w	8009618 <__gnu_unwind_pr_common+0x2c4>
 800947a:	3608      	adds	r6, #8
 800947c:	e78e      	b.n	800939c <__gnu_unwind_pr_common+0x48>
 800947e:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8009482:	3608      	adds	r6, #8
 8009484:	e793      	b.n	80093ae <__gnu_unwind_pr_common+0x5a>
 8009486:	2b02      	cmp	r3, #2
 8009488:	f73f af7b 	bgt.w	8009382 <__gnu_unwind_pr_common+0x2e>
 800948c:	0c0b      	lsrs	r3, r1, #16
 800948e:	b2df      	uxtb	r7, r3
 8009490:	0409      	lsls	r1, r1, #16
 8009492:	2202      	movs	r2, #2
 8009494:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8009498:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800949c:	9107      	str	r1, [sp, #28]
 800949e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80094a2:	e76e      	b.n	8009382 <__gnu_unwind_pr_common+0x2e>
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	d002      	beq.n	80094b0 <__gnu_unwind_pr_common+0x15c>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f040 8090 	bne.w	80095d0 <__gnu_unwind_pr_common+0x27c>
 80094b0:	3604      	adds	r6, #4
 80094b2:	e773      	b.n	800939c <__gnu_unwind_pr_common+0x48>
 80094b4:	4640      	mov	r0, r8
 80094b6:	a907      	add	r1, sp, #28
 80094b8:	f000 faf0 	bl	8009a9c <__gnu_unwind_execute>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d1b3      	bne.n	8009428 <__gnu_unwind_pr_common+0xd4>
 80094c0:	9a02      	ldr	r2, [sp, #8]
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	d159      	bne.n	800957a <__gnu_unwind_pr_common+0x226>
 80094c6:	2008      	movs	r0, #8
 80094c8:	b00b      	add	sp, #44	; 0x2c
 80094ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ce:	4640      	mov	r0, r8
 80094d0:	210d      	movs	r1, #13
 80094d2:	6a27      	ldr	r7, [r4, #32]
 80094d4:	f7ff fed0 	bl	8009278 <_Unwind_GetGR>
 80094d8:	4287      	cmp	r7, r0
 80094da:	d1ce      	bne.n	800947a <__gnu_unwind_pr_common+0x126>
 80094dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094de:	429e      	cmp	r6, r3
 80094e0:	d1cb      	bne.n	800947a <__gnu_unwind_pr_common+0x126>
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7ff fcc6 	bl	8008e74 <selfrel_offset31>
 80094e8:	210f      	movs	r1, #15
 80094ea:	4602      	mov	r2, r0
 80094ec:	4640      	mov	r0, r8
 80094ee:	f7ff feeb 	bl	80092c8 <_Unwind_SetGR>
 80094f2:	4640      	mov	r0, r8
 80094f4:	4622      	mov	r2, r4
 80094f6:	2100      	movs	r1, #0
 80094f8:	f7ff fee6 	bl	80092c8 <_Unwind_SetGR>
 80094fc:	2007      	movs	r0, #7
 80094fe:	e794      	b.n	800942a <__gnu_unwind_pr_common+0xd6>
 8009500:	4640      	mov	r0, r8
 8009502:	210d      	movs	r1, #13
 8009504:	6a27      	ldr	r7, [r4, #32]
 8009506:	f7ff feb7 	bl	8009278 <_Unwind_GetGR>
 800950a:	4287      	cmp	r7, r0
 800950c:	d045      	beq.n	800959a <__gnu_unwind_pr_common+0x246>
 800950e:	6833      	ldr	r3, [r6, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f6bf af7b 	bge.w	800940c <__gnu_unwind_pr_common+0xb8>
 8009516:	3604      	adds	r6, #4
 8009518:	e778      	b.n	800940c <__gnu_unwind_pr_common+0xb8>
 800951a:	9901      	ldr	r1, [sp, #4]
 800951c:	b319      	cbz	r1, 8009566 <__gnu_unwind_pr_common+0x212>
 800951e:	f104 0c58 	add.w	ip, r4, #88	; 0x58
 8009522:	f8cd 9010 	str.w	r9, [sp, #16]
 8009526:	9505      	str	r5, [sp, #20]
 8009528:	1d37      	adds	r7, r6, #4
 800952a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800952e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009532:	4665      	mov	r5, ip
 8009534:	e002      	b.n	800953c <__gnu_unwind_pr_common+0x1e8>
 8009536:	45ca      	cmp	sl, r9
 8009538:	d015      	beq.n	8009566 <__gnu_unwind_pr_common+0x212>
 800953a:	46d3      	mov	fp, sl
 800953c:	4638      	mov	r0, r7
 800953e:	9506      	str	r5, [sp, #24]
 8009540:	f7ff fd72 	bl	8009028 <_Unwind_decode_typeinfo_ptr.isra.0>
 8009544:	2200      	movs	r2, #0
 8009546:	4601      	mov	r1, r0
 8009548:	ab06      	add	r3, sp, #24
 800954a:	4620      	mov	r0, r4
 800954c:	f7f9 fb64 	bl	8002c18 <__cxa_type_match>
 8009550:	f10b 0a01 	add.w	sl, fp, #1
 8009554:	3704      	adds	r7, #4
 8009556:	2800      	cmp	r0, #0
 8009558:	d0ed      	beq.n	8009536 <__gnu_unwind_pr_common+0x1e2>
 800955a:	9b01      	ldr	r3, [sp, #4]
 800955c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8009560:	455b      	cmp	r3, fp
 8009562:	9d05      	ldr	r5, [sp, #20]
 8009564:	d1d3      	bne.n	800950e <__gnu_unwind_pr_common+0x1ba>
 8009566:	4640      	mov	r0, r8
 8009568:	210d      	movs	r1, #13
 800956a:	f7ff fe85 	bl	8009278 <_Unwind_GetGR>
 800956e:	9b06      	ldr	r3, [sp, #24]
 8009570:	6220      	str	r0, [r4, #32]
 8009572:	62a6      	str	r6, [r4, #40]	; 0x28
 8009574:	6263      	str	r3, [r4, #36]	; 0x24
 8009576:	2006      	movs	r0, #6
 8009578:	e757      	b.n	800942a <__gnu_unwind_pr_common+0xd6>
 800957a:	210f      	movs	r1, #15
 800957c:	4640      	mov	r0, r8
 800957e:	f7ff fe7b 	bl	8009278 <_Unwind_GetGR>
 8009582:	210e      	movs	r1, #14
 8009584:	4602      	mov	r2, r0
 8009586:	4640      	mov	r0, r8
 8009588:	f7ff fe9e 	bl	80092c8 <_Unwind_SetGR>
 800958c:	4640      	mov	r0, r8
 800958e:	210f      	movs	r1, #15
 8009590:	4a28      	ldr	r2, [pc, #160]	; (8009634 <__gnu_unwind_pr_common+0x2e0>)
 8009592:	f7ff fe99 	bl	80092c8 <_Unwind_SetGR>
 8009596:	2007      	movs	r0, #7
 8009598:	e747      	b.n	800942a <__gnu_unwind_pr_common+0xd6>
 800959a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800959c:	429e      	cmp	r6, r3
 800959e:	d1b6      	bne.n	800950e <__gnu_unwind_pr_common+0x1ba>
 80095a0:	2204      	movs	r2, #4
 80095a2:	9901      	ldr	r1, [sp, #4]
 80095a4:	2700      	movs	r7, #0
 80095a6:	18b3      	adds	r3, r6, r2
 80095a8:	62a1      	str	r1, [r4, #40]	; 0x28
 80095aa:	62e7      	str	r7, [r4, #44]	; 0x2c
 80095ac:	6322      	str	r2, [r4, #48]	; 0x30
 80095ae:	6363      	str	r3, [r4, #52]	; 0x34
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	42bb      	cmp	r3, r7
 80095b4:	db1f      	blt.n	80095f6 <__gnu_unwind_pr_common+0x2a2>
 80095b6:	2201      	movs	r2, #1
 80095b8:	9202      	str	r2, [sp, #8]
 80095ba:	e727      	b.n	800940c <__gnu_unwind_pr_common+0xb8>
 80095bc:	4640      	mov	r0, r8
 80095be:	210d      	movs	r1, #13
 80095c0:	f7ff fe5a 	bl	8009278 <_Unwind_GetGR>
 80095c4:	6220      	str	r0, [r4, #32]
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	6263      	str	r3, [r4, #36]	; 0x24
 80095ca:	62a6      	str	r6, [r4, #40]	; 0x28
 80095cc:	2006      	movs	r0, #6
 80095ce:	e72c      	b.n	800942a <__gnu_unwind_pr_common+0xd6>
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff fc4f 	bl	8008e74 <selfrel_offset31>
 80095d6:	3604      	adds	r6, #4
 80095d8:	4605      	mov	r5, r0
 80095da:	63a6      	str	r6, [r4, #56]	; 0x38
 80095dc:	4620      	mov	r0, r4
 80095de:	f7f9 fb71 	bl	8002cc4 <__cxa_begin_cleanup>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f43f af20 	beq.w	8009428 <__gnu_unwind_pr_common+0xd4>
 80095e8:	4640      	mov	r0, r8
 80095ea:	462a      	mov	r2, r5
 80095ec:	210f      	movs	r1, #15
 80095ee:	f7ff fe6b 	bl	80092c8 <_Unwind_SetGR>
 80095f2:	2007      	movs	r0, #7
 80095f4:	e719      	b.n	800942a <__gnu_unwind_pr_common+0xd6>
 80095f6:	1c48      	adds	r0, r1, #1
 80095f8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80095fc:	f7ff fc3a 	bl	8008e74 <selfrel_offset31>
 8009600:	210f      	movs	r1, #15
 8009602:	4602      	mov	r2, r0
 8009604:	4640      	mov	r0, r8
 8009606:	f7ff fe5f 	bl	80092c8 <_Unwind_SetGR>
 800960a:	4640      	mov	r0, r8
 800960c:	4639      	mov	r1, r7
 800960e:	4622      	mov	r2, r4
 8009610:	f7ff fe5a 	bl	80092c8 <_Unwind_SetGR>
 8009614:	2007      	movs	r0, #7
 8009616:	e708      	b.n	800942a <__gnu_unwind_pr_common+0xd6>
 8009618:	4607      	mov	r7, r0
 800961a:	210d      	movs	r1, #13
 800961c:	4640      	mov	r0, r8
 800961e:	f7ff fe2b 	bl	8009278 <_Unwind_GetGR>
 8009622:	2f02      	cmp	r7, #2
 8009624:	6220      	str	r0, [r4, #32]
 8009626:	d1ce      	bne.n	80095c6 <__gnu_unwind_pr_common+0x272>
 8009628:	9a06      	ldr	r2, [sp, #24]
 800962a:	4623      	mov	r3, r4
 800962c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8009630:	6263      	str	r3, [r4, #36]	; 0x24
 8009632:	e7ca      	b.n	80095ca <__gnu_unwind_pr_common+0x276>
 8009634:	08002e3d 	.word	0x08002e3d

08009638 <__aeabi_unwind_cpp_pr0>:
 8009638:	2300      	movs	r3, #0
 800963a:	f7ff be8b 	b.w	8009354 <__gnu_unwind_pr_common>
 800963e:	bf00      	nop

08009640 <__aeabi_unwind_cpp_pr1>:
 8009640:	2301      	movs	r3, #1
 8009642:	f7ff be87 	b.w	8009354 <__gnu_unwind_pr_common>
 8009646:	bf00      	nop

08009648 <__aeabi_unwind_cpp_pr2>:
 8009648:	2302      	movs	r3, #2
 800964a:	f7ff be83 	b.w	8009354 <__gnu_unwind_pr_common>
 800964e:	bf00      	nop

08009650 <_Unwind_VRS_Pop>:
 8009650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009654:	4604      	mov	r4, r0
 8009656:	b0c4      	sub	sp, #272	; 0x110
 8009658:	2904      	cmp	r1, #4
 800965a:	d80b      	bhi.n	8009674 <_Unwind_VRS_Pop+0x24>
 800965c:	e8df f001 	tbb	[pc, r1]
 8009660:	300a0359 	.word	0x300a0359
 8009664:	0e          	.byte	0x0e
 8009665:	00          	.byte	0x00
 8009666:	2b01      	cmp	r3, #1
 8009668:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800966c:	b296      	uxth	r6, r2
 800966e:	d066      	beq.n	800973e <_Unwind_VRS_Pop+0xee>
 8009670:	2b05      	cmp	r3, #5
 8009672:	d06b      	beq.n	800974c <_Unwind_VRS_Pop+0xfc>
 8009674:	2002      	movs	r0, #2
 8009676:	b044      	add	sp, #272	; 0x110
 8009678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1f9      	bne.n	8009674 <_Unwind_VRS_Pop+0x24>
 8009680:	2a10      	cmp	r2, #16
 8009682:	d8f7      	bhi.n	8009674 <_Unwind_VRS_Pop+0x24>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	06d9      	lsls	r1, r3, #27
 8009688:	f100 80d3 	bmi.w	8009832 <_Unwind_VRS_Pop+0x1e2>
 800968c:	ae22      	add	r6, sp, #136	; 0x88
 800968e:	4630      	mov	r0, r6
 8009690:	9201      	str	r2, [sp, #4]
 8009692:	f000 f975 	bl	8009980 <__gnu_Unwind_Save_WMMXC>
 8009696:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009698:	9a01      	ldr	r2, [sp, #4]
 800969a:	2300      	movs	r3, #0
 800969c:	2001      	movs	r0, #1
 800969e:	fa00 f103 	lsl.w	r1, r0, r3
 80096a2:	4211      	tst	r1, r2
 80096a4:	d003      	beq.n	80096ae <_Unwind_VRS_Pop+0x5e>
 80096a6:	6829      	ldr	r1, [r5, #0]
 80096a8:	3504      	adds	r5, #4
 80096aa:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80096ae:	3301      	adds	r3, #1
 80096b0:	2b04      	cmp	r3, #4
 80096b2:	d1f4      	bne.n	800969e <_Unwind_VRS_Pop+0x4e>
 80096b4:	4630      	mov	r0, r6
 80096b6:	63a5      	str	r5, [r4, #56]	; 0x38
 80096b8:	f000 f958 	bl	800996c <__gnu_Unwind_Restore_WMMXC>
 80096bc:	2000      	movs	r0, #0
 80096be:	e7da      	b.n	8009676 <_Unwind_VRS_Pop+0x26>
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d1d7      	bne.n	8009674 <_Unwind_VRS_Pop+0x24>
 80096c4:	0c15      	lsrs	r5, r2, #16
 80096c6:	b297      	uxth	r7, r2
 80096c8:	197b      	adds	r3, r7, r5
 80096ca:	2b10      	cmp	r3, #16
 80096cc:	d8d2      	bhi.n	8009674 <_Unwind_VRS_Pop+0x24>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	071e      	lsls	r6, r3, #28
 80096d2:	f100 80bf 	bmi.w	8009854 <_Unwind_VRS_Pop+0x204>
 80096d6:	ae22      	add	r6, sp, #136	; 0x88
 80096d8:	4630      	mov	r0, r6
 80096da:	f000 f925 	bl	8009928 <__gnu_Unwind_Save_WMMXD>
 80096de:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 80096e2:	007f      	lsls	r7, r7, #1
 80096e4:	eb06 00c5 	add.w	r0, r6, r5, lsl #3
 80096e8:	1e7b      	subs	r3, r7, #1
 80096ea:	4672      	mov	r2, lr
 80096ec:	b15f      	cbz	r7, 8009706 <_Unwind_VRS_Pop+0xb6>
 80096ee:	ebce 0000 	rsb	r0, lr, r0
 80096f2:	f1ae 0204 	sub.w	r2, lr, #4
 80096f6:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80096fa:	3b01      	subs	r3, #1
 80096fc:	1c5d      	adds	r5, r3, #1
 80096fe:	5081      	str	r1, [r0, r2]
 8009700:	d1f9      	bne.n	80096f6 <_Unwind_VRS_Pop+0xa6>
 8009702:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 8009706:	4630      	mov	r0, r6
 8009708:	63a2      	str	r2, [r4, #56]	; 0x38
 800970a:	f000 f8eb 	bl	80098e4 <__gnu_Unwind_Restore_WMMXD>
 800970e:	2000      	movs	r0, #0
 8009710:	e7b1      	b.n	8009676 <_Unwind_VRS_Pop+0x26>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1ae      	bne.n	8009674 <_Unwind_VRS_Pop+0x24>
 8009716:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009718:	b296      	uxth	r6, r2
 800971a:	2001      	movs	r0, #1
 800971c:	fa00 f103 	lsl.w	r1, r0, r3
 8009720:	4231      	tst	r1, r6
 8009722:	d004      	beq.n	800972e <_Unwind_VRS_Pop+0xde>
 8009724:	682f      	ldr	r7, [r5, #0]
 8009726:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800972a:	3504      	adds	r5, #4
 800972c:	604f      	str	r7, [r1, #4]
 800972e:	3301      	adds	r3, #1
 8009730:	2b10      	cmp	r3, #16
 8009732:	d1f3      	bne.n	800971c <_Unwind_VRS_Pop+0xcc>
 8009734:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8009738:	d175      	bne.n	8009826 <_Unwind_VRS_Pop+0x1d6>
 800973a:	63a5      	str	r5, [r4, #56]	; 0x38
 800973c:	e79b      	b.n	8009676 <_Unwind_VRS_Pop+0x26>
 800973e:	1972      	adds	r2, r6, r5
 8009740:	2a10      	cmp	r2, #16
 8009742:	d897      	bhi.n	8009674 <_Unwind_VRS_Pop+0x24>
 8009744:	2d0f      	cmp	r5, #15
 8009746:	d895      	bhi.n	8009674 <_Unwind_VRS_Pop+0x24>
 8009748:	2700      	movs	r7, #0
 800974a:	e008      	b.n	800975e <_Unwind_VRS_Pop+0x10e>
 800974c:	1977      	adds	r7, r6, r5
 800974e:	2f20      	cmp	r7, #32
 8009750:	d890      	bhi.n	8009674 <_Unwind_VRS_Pop+0x24>
 8009752:	2d0f      	cmp	r5, #15
 8009754:	d969      	bls.n	800982a <_Unwind_VRS_Pop+0x1da>
 8009756:	4637      	mov	r7, r6
 8009758:	b346      	cbz	r6, 80097ac <_Unwind_VRS_Pop+0x15c>
 800975a:	2d0f      	cmp	r5, #15
 800975c:	d811      	bhi.n	8009782 <_Unwind_VRS_Pop+0x132>
 800975e:	6822      	ldr	r2, [r4, #0]
 8009760:	07d0      	lsls	r0, r2, #31
 8009762:	d50e      	bpl.n	8009782 <_Unwind_VRS_Pop+0x132>
 8009764:	f022 0101 	bic.w	r1, r2, #1
 8009768:	2b05      	cmp	r3, #5
 800976a:	6021      	str	r1, [r4, #0]
 800976c:	f000 808c 	beq.w	8009888 <_Unwind_VRS_Pop+0x238>
 8009770:	f022 0203 	bic.w	r2, r2, #3
 8009774:	4620      	mov	r0, r4
 8009776:	f840 2b48 	str.w	r2, [r0], #72
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	f000 f89e 	bl	80098bc <__gnu_Unwind_Save_VFP>
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	b117      	cbz	r7, 800978a <_Unwind_VRS_Pop+0x13a>
 8009784:	6822      	ldr	r2, [r4, #0]
 8009786:	0751      	lsls	r1, r2, #29
 8009788:	d46c      	bmi.n	8009864 <_Unwind_VRS_Pop+0x214>
 800978a:	2b01      	cmp	r3, #1
 800978c:	d074      	beq.n	8009878 <_Unwind_VRS_Pop+0x228>
 800978e:	2d0f      	cmp	r5, #15
 8009790:	d804      	bhi.n	800979c <_Unwind_VRS_Pop+0x14c>
 8009792:	a822      	add	r0, sp, #136	; 0x88
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	f000 f899 	bl	80098cc <__gnu_Unwind_Save_VFP_D>
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	b137      	cbz	r7, 80097ac <_Unwind_VRS_Pop+0x15c>
 800979e:	a802      	add	r0, sp, #8
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	f000 f89b 	bl	80098dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	f1c5 0610 	rsb	r6, r5, #16
 80097ac:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 80097b0:	2e00      	cmp	r6, #0
 80097b2:	46c4      	mov	ip, r8
 80097b4:	dd12      	ble.n	80097dc <_Unwind_VRS_Pop+0x18c>
 80097b6:	aa22      	add	r2, sp, #136	; 0x88
 80097b8:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 80097bc:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
 80097c0:	ebc8 0606 	rsb	r6, r8, r6
 80097c4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80097c8:	f1a8 0204 	sub.w	r2, r8, #4
 80097cc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80097d0:	3901      	subs	r1, #1
 80097d2:	50b0      	str	r0, [r6, r2]
 80097d4:	1c48      	adds	r0, r1, #1
 80097d6:	d1f9      	bne.n	80097cc <_Unwind_VRS_Pop+0x17c>
 80097d8:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 80097dc:	b1b7      	cbz	r7, 800980c <_Unwind_VRS_Pop+0x1bc>
 80097de:	aa44      	add	r2, sp, #272	; 0x110
 80097e0:	2d10      	cmp	r5, #16
 80097e2:	bf2c      	ite	cs
 80097e4:	4628      	movcs	r0, r5
 80097e6:	2010      	movcc	r0, #16
 80097e8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80097ec:	ea4f 0847 	mov.w	r8, r7, lsl #1
 80097f0:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 80097f4:	f108 32ff 	add.w	r2, r8, #4294967295
 80097f8:	4661      	mov	r1, ip
 80097fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80097fe:	3a01      	subs	r2, #1
 8009800:	f840 6b04 	str.w	r6, [r0], #4
 8009804:	1c56      	adds	r6, r2, #1
 8009806:	d1f8      	bne.n	80097fa <_Unwind_VRS_Pop+0x1aa>
 8009808:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 800980c:	2b01      	cmp	r3, #1
 800980e:	d01a      	beq.n	8009846 <_Unwind_VRS_Pop+0x1f6>
 8009810:	2d0f      	cmp	r5, #15
 8009812:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
 8009816:	d802      	bhi.n	800981e <_Unwind_VRS_Pop+0x1ce>
 8009818:	a822      	add	r0, sp, #136	; 0x88
 800981a:	f000 f853 	bl	80098c4 <__gnu_Unwind_Restore_VFP_D>
 800981e:	b117      	cbz	r7, 8009826 <_Unwind_VRS_Pop+0x1d6>
 8009820:	a802      	add	r0, sp, #8
 8009822:	f000 f857 	bl	80098d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8009826:	2000      	movs	r0, #0
 8009828:	e725      	b.n	8009676 <_Unwind_VRS_Pop+0x26>
 800982a:	2f10      	cmp	r7, #16
 800982c:	d98c      	bls.n	8009748 <_Unwind_VRS_Pop+0xf8>
 800982e:	3f10      	subs	r7, #16
 8009830:	e793      	b.n	800975a <_Unwind_VRS_Pop+0x10a>
 8009832:	f023 0310 	bic.w	r3, r3, #16
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800983c:	9201      	str	r2, [sp, #4]
 800983e:	f000 f89f 	bl	8009980 <__gnu_Unwind_Save_WMMXC>
 8009842:	9a01      	ldr	r2, [sp, #4]
 8009844:	e722      	b.n	800968c <_Unwind_VRS_Pop+0x3c>
 8009846:	f10c 0304 	add.w	r3, ip, #4
 800984a:	63a3      	str	r3, [r4, #56]	; 0x38
 800984c:	a822      	add	r0, sp, #136	; 0x88
 800984e:	f000 f831 	bl	80098b4 <__gnu_Unwind_Restore_VFP>
 8009852:	e7e8      	b.n	8009826 <_Unwind_VRS_Pop+0x1d6>
 8009854:	f023 0308 	bic.w	r3, r3, #8
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800985e:	f000 f863 	bl	8009928 <__gnu_Unwind_Save_WMMXD>
 8009862:	e738      	b.n	80096d6 <_Unwind_VRS_Pop+0x86>
 8009864:	f022 0204 	bic.w	r2, r2, #4
 8009868:	4620      	mov	r0, r4
 800986a:	f840 2bd0 	str.w	r2, [r0], #208
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	f000 f834 	bl	80098dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8009874:	9b01      	ldr	r3, [sp, #4]
 8009876:	e788      	b.n	800978a <_Unwind_VRS_Pop+0x13a>
 8009878:	a822      	add	r0, sp, #136	; 0x88
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	f000 f81e 	bl	80098bc <__gnu_Unwind_Save_VFP>
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	2f00      	cmp	r7, #0
 8009884:	d190      	bne.n	80097a8 <_Unwind_VRS_Pop+0x158>
 8009886:	e791      	b.n	80097ac <_Unwind_VRS_Pop+0x15c>
 8009888:	f041 0102 	orr.w	r1, r1, #2
 800988c:	4620      	mov	r0, r4
 800988e:	f840 1b48 	str.w	r1, [r0], #72
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f000 f81a 	bl	80098cc <__gnu_Unwind_Save_VFP_D>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	e772      	b.n	8009782 <_Unwind_VRS_Pop+0x132>

0800989c <__restore_core_regs>:
 800989c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80098a0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80098a4:	469c      	mov	ip, r3
 80098a6:	46a6      	mov	lr, r4
 80098a8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80098ac:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80098b0:	46e5      	mov	sp, ip
 80098b2:	bd00      	pop	{pc}

080098b4 <__gnu_Unwind_Restore_VFP>:
 80098b4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop

080098bc <__gnu_Unwind_Save_VFP>:
 80098bc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop

080098c4 <__gnu_Unwind_Restore_VFP_D>:
 80098c4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop

080098cc <__gnu_Unwind_Save_VFP_D>:
 80098cc:	ec80 0b20 	vstmia	r0, {d0-d15}
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop

080098d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80098d4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop

080098dc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80098dc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop

080098e4 <__gnu_Unwind_Restore_WMMXD>:
 80098e4:	ecf0 0102 	ldfe	f0, [r0], #8
 80098e8:	ecf0 1102 	ldfe	f1, [r0], #8
 80098ec:	ecf0 2102 	ldfe	f2, [r0], #8
 80098f0:	ecf0 3102 	ldfe	f3, [r0], #8
 80098f4:	ecf0 4102 	ldfe	f4, [r0], #8
 80098f8:	ecf0 5102 	ldfe	f5, [r0], #8
 80098fc:	ecf0 6102 	ldfe	f6, [r0], #8
 8009900:	ecf0 7102 	ldfe	f7, [r0], #8
 8009904:	ecf0 8102 	ldfp	f0, [r0], #8
 8009908:	ecf0 9102 	ldfp	f1, [r0], #8
 800990c:	ecf0 a102 	ldfp	f2, [r0], #8
 8009910:	ecf0 b102 	ldfp	f3, [r0], #8
 8009914:	ecf0 c102 	ldfp	f4, [r0], #8
 8009918:	ecf0 d102 	ldfp	f5, [r0], #8
 800991c:	ecf0 e102 	ldfp	f6, [r0], #8
 8009920:	ecf0 f102 	ldfp	f7, [r0], #8
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop

08009928 <__gnu_Unwind_Save_WMMXD>:
 8009928:	ece0 0102 	stfe	f0, [r0], #8
 800992c:	ece0 1102 	stfe	f1, [r0], #8
 8009930:	ece0 2102 	stfe	f2, [r0], #8
 8009934:	ece0 3102 	stfe	f3, [r0], #8
 8009938:	ece0 4102 	stfe	f4, [r0], #8
 800993c:	ece0 5102 	stfe	f5, [r0], #8
 8009940:	ece0 6102 	stfe	f6, [r0], #8
 8009944:	ece0 7102 	stfe	f7, [r0], #8
 8009948:	ece0 8102 	stfp	f0, [r0], #8
 800994c:	ece0 9102 	stfp	f1, [r0], #8
 8009950:	ece0 a102 	stfp	f2, [r0], #8
 8009954:	ece0 b102 	stfp	f3, [r0], #8
 8009958:	ece0 c102 	stfp	f4, [r0], #8
 800995c:	ece0 d102 	stfp	f5, [r0], #8
 8009960:	ece0 e102 	stfp	f6, [r0], #8
 8009964:	ece0 f102 	stfp	f7, [r0], #8
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop

0800996c <__gnu_Unwind_Restore_WMMXC>:
 800996c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8009970:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8009974:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8009978:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <__gnu_Unwind_Save_WMMXC>:
 8009980:	fca0 8101 	stc2	1, cr8, [r0], #4
 8009984:	fca0 9101 	stc2	1, cr9, [r0], #4
 8009988:	fca0 a101 	stc2	1, cr10, [r0], #4
 800998c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop

08009994 <_Unwind_RaiseException>:
 8009994:	46ec      	mov	ip, sp
 8009996:	b500      	push	{lr}
 8009998:	e92d 5000 	stmdb	sp!, {ip, lr}
 800999c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80099a8:	a901      	add	r1, sp, #4
 80099aa:	f7ff fbd7 	bl	800915c <__gnu_Unwind_RaiseException>
 80099ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80099b2:	b012      	add	sp, #72	; 0x48
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop

080099b8 <_Unwind_Resume>:
 80099b8:	46ec      	mov	ip, sp
 80099ba:	b500      	push	{lr}
 80099bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80099c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80099c4:	f04f 0300 	mov.w	r3, #0
 80099c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80099cc:	a901      	add	r1, sp, #4
 80099ce:	f7ff fbff 	bl	80091d0 <__gnu_Unwind_Resume>
 80099d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80099d6:	b012      	add	sp, #72	; 0x48
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop

080099dc <_Unwind_Resume_or_Rethrow>:
 80099dc:	46ec      	mov	ip, sp
 80099de:	b500      	push	{lr}
 80099e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80099e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80099f0:	a901      	add	r1, sp, #4
 80099f2:	f7ff fc0f 	bl	8009214 <__gnu_Unwind_Resume_or_Rethrow>
 80099f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80099fa:	b012      	add	sp, #72	; 0x48
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop

08009a00 <_Unwind_ForcedUnwind>:
 8009a00:	46ec      	mov	ip, sp
 8009a02:	b500      	push	{lr}
 8009a04:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009a08:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009a14:	ab01      	add	r3, sp, #4
 8009a16:	f7ff fbd1 	bl	80091bc <__gnu_Unwind_ForcedUnwind>
 8009a1a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009a1e:	b012      	add	sp, #72	; 0x48
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop

08009a24 <_Unwind_Backtrace>:
 8009a24:	46ec      	mov	ip, sp
 8009a26:	b500      	push	{lr}
 8009a28:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009a2c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009a30:	f04f 0300 	mov.w	r3, #0
 8009a34:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009a38:	aa01      	add	r2, sp, #4
 8009a3a:	f7ff fc53 	bl	80092e4 <__gnu_Unwind_Backtrace>
 8009a3e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009a42:	b012      	add	sp, #72	; 0x48
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <next_unwind_byte>:
 8009a48:	7a03      	ldrb	r3, [r0, #8]
 8009a4a:	b91b      	cbnz	r3, 8009a54 <next_unwind_byte+0xc>
 8009a4c:	7a43      	ldrb	r3, [r0, #9]
 8009a4e:	b943      	cbnz	r3, 8009a62 <next_unwind_byte+0x1a>
 8009a50:	20b0      	movs	r0, #176	; 0xb0
 8009a52:	4770      	bx	lr
 8009a54:	6802      	ldr	r2, [r0, #0]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	7203      	strb	r3, [r0, #8]
 8009a5a:	0213      	lsls	r3, r2, #8
 8009a5c:	6003      	str	r3, [r0, #0]
 8009a5e:	0e10      	lsrs	r0, r2, #24
 8009a60:	4770      	bx	lr
 8009a62:	6842      	ldr	r2, [r0, #4]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	7243      	strb	r3, [r0, #9]
 8009a68:	1d11      	adds	r1, r2, #4
 8009a6a:	6812      	ldr	r2, [r2, #0]
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	7203      	strb	r3, [r0, #8]
 8009a70:	0213      	lsls	r3, r2, #8
 8009a72:	6041      	str	r1, [r0, #4]
 8009a74:	6003      	str	r3, [r0, #0]
 8009a76:	0e10      	lsrs	r0, r2, #24
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop

08009a7c <_Unwind_GetGR.constprop.0>:
 8009a7c:	b500      	push	{lr}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	ab03      	add	r3, sp, #12
 8009a82:	2100      	movs	r1, #0
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	220c      	movs	r2, #12
 8009a88:	460b      	mov	r3, r1
 8009a8a:	f7ff fbdb 	bl	8009244 <_Unwind_VRS_Get>
 8009a8e:	9803      	ldr	r0, [sp, #12]
 8009a90:	b005      	add	sp, #20
 8009a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a96:	bf00      	nop

08009a98 <unwind_UCB_from_context>:
 8009a98:	f7ff bff0 	b.w	8009a7c <_Unwind_GetGR.constprop.0>

08009a9c <__gnu_unwind_execute>:
 8009a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	f04f 0800 	mov.w	r8, #0
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f7ff ffcc 	bl	8009a48 <next_unwind_byte>
 8009ab0:	28b0      	cmp	r0, #176	; 0xb0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	f000 80ac 	beq.w	8009c10 <__gnu_unwind_execute+0x174>
 8009ab8:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
 8009abc:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
 8009ac0:	d020      	beq.n	8009b04 <__gnu_unwind_execute+0x68>
 8009ac2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009ac6:	2a80      	cmp	r2, #128	; 0x80
 8009ac8:	d073      	beq.n	8009bb2 <__gnu_unwind_execute+0x116>
 8009aca:	2a90      	cmp	r2, #144	; 0x90
 8009acc:	d036      	beq.n	8009b3c <__gnu_unwind_execute+0xa0>
 8009ace:	2aa0      	cmp	r2, #160	; 0xa0
 8009ad0:	d042      	beq.n	8009b58 <__gnu_unwind_execute+0xbc>
 8009ad2:	2ab0      	cmp	r2, #176	; 0xb0
 8009ad4:	d056      	beq.n	8009b84 <__gnu_unwind_execute+0xe8>
 8009ad6:	2ac0      	cmp	r2, #192	; 0xc0
 8009ad8:	f000 8082 	beq.w	8009be0 <__gnu_unwind_execute+0x144>
 8009adc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009ae0:	2bd0      	cmp	r3, #208	; 0xd0
 8009ae2:	d10b      	bne.n	8009afc <__gnu_unwind_execute+0x60>
 8009ae4:	f000 0407 	and.w	r4, r0, #7
 8009ae8:	1c62      	adds	r2, r4, #1
 8009aea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009aee:	4630      	mov	r0, r6
 8009af0:	2101      	movs	r1, #1
 8009af2:	2305      	movs	r3, #5
 8009af4:	f7ff fdac 	bl	8009650 <_Unwind_VRS_Pop>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d0d6      	beq.n	8009aaa <__gnu_unwind_execute+0xe>
 8009afc:	2009      	movs	r0, #9
 8009afe:	b005      	add	sp, #20
 8009b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b04:	af03      	add	r7, sp, #12
 8009b06:	ea4f 0980 	mov.w	r9, r0, lsl #2
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	9700      	str	r7, [sp, #0]
 8009b0e:	4630      	mov	r0, r6
 8009b10:	220d      	movs	r2, #13
 8009b12:	f7ff fb97 	bl	8009244 <_Unwind_VRS_Get>
 8009b16:	fa5f f989 	uxtb.w	r9, r9
 8009b1a:	9b03      	ldr	r3, [sp, #12]
 8009b1c:	f109 0904 	add.w	r9, r9, #4
 8009b20:	0660      	lsls	r0, r4, #25
 8009b22:	bf4c      	ite	mi
 8009b24:	ebc9 0303 	rsbmi	r3, r9, r3
 8009b28:	444b      	addpl	r3, r9
 8009b2a:	9303      	str	r3, [sp, #12]
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	9700      	str	r7, [sp, #0]
 8009b30:	460b      	mov	r3, r1
 8009b32:	4630      	mov	r0, r6
 8009b34:	220d      	movs	r2, #13
 8009b36:	f7ff fbad 	bl	8009294 <_Unwind_VRS_Set>
 8009b3a:	e7b6      	b.n	8009aaa <__gnu_unwind_execute+0xe>
 8009b3c:	f000 030d 	and.w	r3, r0, #13
 8009b40:	2b0d      	cmp	r3, #13
 8009b42:	d0db      	beq.n	8009afc <__gnu_unwind_execute+0x60>
 8009b44:	af03      	add	r7, sp, #12
 8009b46:	2100      	movs	r1, #0
 8009b48:	f000 020f 	and.w	r2, r0, #15
 8009b4c:	9700      	str	r7, [sp, #0]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4630      	mov	r0, r6
 8009b52:	f7ff fb77 	bl	8009244 <_Unwind_VRS_Get>
 8009b56:	e7e9      	b.n	8009b2c <__gnu_unwind_execute+0x90>
 8009b58:	43c2      	mvns	r2, r0
 8009b5a:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8009b5e:	f002 0207 	and.w	r2, r2, #7
 8009b62:	fa43 f202 	asr.w	r2, r3, r2
 8009b66:	0701      	lsls	r1, r0, #28
 8009b68:	ea02 0203 	and.w	r2, r2, r3
 8009b6c:	f04f 0100 	mov.w	r1, #0
 8009b70:	bf48      	it	mi
 8009b72:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8009b76:	460b      	mov	r3, r1
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7ff fd69 	bl	8009650 <_Unwind_VRS_Pop>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d1bc      	bne.n	8009afc <__gnu_unwind_execute+0x60>
 8009b82:	e792      	b.n	8009aaa <__gnu_unwind_execute+0xe>
 8009b84:	28b1      	cmp	r0, #177	; 0xb1
 8009b86:	d048      	beq.n	8009c1a <__gnu_unwind_execute+0x17e>
 8009b88:	28b2      	cmp	r0, #178	; 0xb2
 8009b8a:	d051      	beq.n	8009c30 <__gnu_unwind_execute+0x194>
 8009b8c:	28b3      	cmp	r0, #179	; 0xb3
 8009b8e:	d07d      	beq.n	8009c8c <__gnu_unwind_execute+0x1f0>
 8009b90:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8009b94:	2bb4      	cmp	r3, #180	; 0xb4
 8009b96:	d0b1      	beq.n	8009afc <__gnu_unwind_execute+0x60>
 8009b98:	f000 0207 	and.w	r2, r0, #7
 8009b9c:	3201      	adds	r2, #1
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7ff fd52 	bl	8009650 <_Unwind_VRS_Pop>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d1a5      	bne.n	8009afc <__gnu_unwind_execute+0x60>
 8009bb0:	e77b      	b.n	8009aaa <__gnu_unwind_execute+0xe>
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f7ff ff48 	bl	8009a48 <next_unwind_byte>
 8009bb8:	0224      	lsls	r4, r4, #8
 8009bba:	4320      	orrs	r0, r4
 8009bbc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009bc0:	d09c      	beq.n	8009afc <__gnu_unwind_execute+0x60>
 8009bc2:	0104      	lsls	r4, r0, #4
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	b2a2      	uxth	r2, r4
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7ff fd40 	bl	8009650 <_Unwind_VRS_Pop>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d193      	bne.n	8009afc <__gnu_unwind_execute+0x60>
 8009bd4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8009bd8:	bf18      	it	ne
 8009bda:	f04f 0801 	movne.w	r8, #1
 8009bde:	e764      	b.n	8009aaa <__gnu_unwind_execute+0xe>
 8009be0:	28c6      	cmp	r0, #198	; 0xc6
 8009be2:	d05f      	beq.n	8009ca4 <__gnu_unwind_execute+0x208>
 8009be4:	28c7      	cmp	r0, #199	; 0xc7
 8009be6:	d069      	beq.n	8009cbc <__gnu_unwind_execute+0x220>
 8009be8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009bec:	2bc0      	cmp	r3, #192	; 0xc0
 8009bee:	d078      	beq.n	8009ce2 <__gnu_unwind_execute+0x246>
 8009bf0:	28c8      	cmp	r0, #200	; 0xc8
 8009bf2:	f000 808e 	beq.w	8009d12 <__gnu_unwind_execute+0x276>
 8009bf6:	28c9      	cmp	r0, #201	; 0xc9
 8009bf8:	d180      	bne.n	8009afc <__gnu_unwind_execute+0x60>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f7ff ff24 	bl	8009a48 <next_unwind_byte>
 8009c00:	f000 030f 	and.w	r3, r0, #15
 8009c04:	3301      	adds	r3, #1
 8009c06:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009c0a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8009c0e:	e76e      	b.n	8009aee <__gnu_unwind_execute+0x52>
 8009c10:	f1b8 0f00 	cmp.w	r8, #0
 8009c14:	d06c      	beq.n	8009cf0 <__gnu_unwind_execute+0x254>
 8009c16:	2000      	movs	r0, #0
 8009c18:	e771      	b.n	8009afe <__gnu_unwind_execute+0x62>
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f7ff ff14 	bl	8009a48 <next_unwind_byte>
 8009c20:	4602      	mov	r2, r0
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f43f af6a 	beq.w	8009afc <__gnu_unwind_execute+0x60>
 8009c28:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 8009c2c:	d0ba      	beq.n	8009ba4 <__gnu_unwind_execute+0x108>
 8009c2e:	e765      	b.n	8009afc <__gnu_unwind_execute+0x60>
 8009c30:	2100      	movs	r1, #0
 8009c32:	af03      	add	r7, sp, #12
 8009c34:	220d      	movs	r2, #13
 8009c36:	460b      	mov	r3, r1
 8009c38:	9700      	str	r7, [sp, #0]
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f7ff fb02 	bl	8009244 <_Unwind_VRS_Get>
 8009c40:	4628      	mov	r0, r5
 8009c42:	f7ff ff01 	bl	8009a48 <next_unwind_byte>
 8009c46:	0602      	lsls	r2, r0, #24
 8009c48:	f04f 0402 	mov.w	r4, #2
 8009c4c:	d50d      	bpl.n	8009c6a <__gnu_unwind_execute+0x1ce>
 8009c4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009c52:	fa00 f204 	lsl.w	r2, r0, r4
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	4628      	mov	r0, r5
 8009c5a:	4413      	add	r3, r2
 8009c5c:	9303      	str	r3, [sp, #12]
 8009c5e:	f7ff fef3 	bl	8009a48 <next_unwind_byte>
 8009c62:	0603      	lsls	r3, r0, #24
 8009c64:	f104 0407 	add.w	r4, r4, #7
 8009c68:	d4f1      	bmi.n	8009c4e <__gnu_unwind_execute+0x1b2>
 8009c6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009c6e:	fa00 f404 	lsl.w	r4, r0, r4
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	2100      	movs	r1, #0
 8009c76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009c7a:	441c      	add	r4, r3
 8009c7c:	9700      	str	r7, [sp, #0]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4630      	mov	r0, r6
 8009c82:	220d      	movs	r2, #13
 8009c84:	9403      	str	r4, [sp, #12]
 8009c86:	f7ff fb05 	bl	8009294 <_Unwind_VRS_Set>
 8009c8a:	e70e      	b.n	8009aaa <__gnu_unwind_execute+0xe>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7ff fedb 	bl	8009a48 <next_unwind_byte>
 8009c92:	f000 030f 	and.w	r3, r0, #15
 8009c96:	3301      	adds	r3, #1
 8009c98:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8009ca2:	e77f      	b.n	8009ba4 <__gnu_unwind_execute+0x108>
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f7ff fecf 	bl	8009a48 <next_unwind_byte>
 8009caa:	f000 030f 	and.w	r3, r0, #15
 8009cae:	3301      	adds	r3, #1
 8009cb0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009cb4:	2103      	movs	r1, #3
 8009cb6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8009cba:	e773      	b.n	8009ba4 <__gnu_unwind_execute+0x108>
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f7ff fec3 	bl	8009a48 <next_unwind_byte>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f43f af19 	beq.w	8009afc <__gnu_unwind_execute+0x60>
 8009cca:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009cce:	f47f af15 	bne.w	8009afc <__gnu_unwind_execute+0x60>
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	2104      	movs	r1, #4
 8009cd6:	f7ff fcbb 	bl	8009650 <_Unwind_VRS_Pop>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	f47f af0e 	bne.w	8009afc <__gnu_unwind_execute+0x60>
 8009ce0:	e6e3      	b.n	8009aaa <__gnu_unwind_execute+0xe>
 8009ce2:	f000 020f 	and.w	r2, r0, #15
 8009ce6:	3201      	adds	r2, #1
 8009ce8:	2103      	movs	r1, #3
 8009cea:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8009cee:	e759      	b.n	8009ba4 <__gnu_unwind_execute+0x108>
 8009cf0:	ac03      	add	r4, sp, #12
 8009cf2:	4641      	mov	r1, r8
 8009cf4:	220e      	movs	r2, #14
 8009cf6:	4643      	mov	r3, r8
 8009cf8:	9400      	str	r4, [sp, #0]
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7ff faa2 	bl	8009244 <_Unwind_VRS_Get>
 8009d00:	9400      	str	r4, [sp, #0]
 8009d02:	4630      	mov	r0, r6
 8009d04:	4641      	mov	r1, r8
 8009d06:	220f      	movs	r2, #15
 8009d08:	4643      	mov	r3, r8
 8009d0a:	f7ff fac3 	bl	8009294 <_Unwind_VRS_Set>
 8009d0e:	4640      	mov	r0, r8
 8009d10:	e6f5      	b.n	8009afe <__gnu_unwind_execute+0x62>
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7ff fe98 	bl	8009a48 <next_unwind_byte>
 8009d18:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009d1c:	f000 030f 	and.w	r3, r0, #15
 8009d20:	3210      	adds	r2, #16
 8009d22:	3301      	adds	r3, #1
 8009d24:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8009d28:	e6e1      	b.n	8009aee <__gnu_unwind_execute+0x52>
 8009d2a:	bf00      	nop

08009d2c <__gnu_unwind_frame>:
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009d30:	b084      	sub	sp, #16
 8009d32:	2203      	movs	r2, #3
 8009d34:	685c      	ldr	r4, [r3, #4]
 8009d36:	f88d 200c 	strb.w	r2, [sp, #12]
 8009d3a:	79da      	ldrb	r2, [r3, #7]
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	3308      	adds	r3, #8
 8009d40:	0224      	lsls	r4, r4, #8
 8009d42:	a901      	add	r1, sp, #4
 8009d44:	9401      	str	r4, [sp, #4]
 8009d46:	f88d 200d 	strb.w	r2, [sp, #13]
 8009d4a:	9302      	str	r3, [sp, #8]
 8009d4c:	f7ff fea6 	bl	8009a9c <__gnu_unwind_execute>
 8009d50:	b004      	add	sp, #16
 8009d52:	bd10      	pop	{r4, pc}

08009d54 <_Unwind_GetRegionStart>:
 8009d54:	b508      	push	{r3, lr}
 8009d56:	f7ff fe9f 	bl	8009a98 <unwind_UCB_from_context>
 8009d5a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8009d5c:	bd08      	pop	{r3, pc}
 8009d5e:	bf00      	nop

08009d60 <_Unwind_GetLanguageSpecificData>:
 8009d60:	b508      	push	{r3, lr}
 8009d62:	f7ff fe99 	bl	8009a98 <unwind_UCB_from_context>
 8009d66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009d68:	79da      	ldrb	r2, [r3, #7]
 8009d6a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8009d6e:	3008      	adds	r0, #8
 8009d70:	bd08      	pop	{r3, pc}
 8009d72:	bf00      	nop

08009d74 <_Unwind_GetDataRelBase>:
 8009d74:	b508      	push	{r3, lr}
 8009d76:	f000 f805 	bl	8009d84 <abort>
 8009d7a:	bf00      	nop

08009d7c <_Unwind_GetTextRelBase>:
 8009d7c:	b508      	push	{r3, lr}
 8009d7e:	f000 f801 	bl	8009d84 <abort>
 8009d82:	bf00      	nop

08009d84 <abort>:
 8009d84:	b508      	push	{r3, lr}
 8009d86:	2006      	movs	r0, #6
 8009d88:	f001 f8f4 	bl	800af74 <raise>
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	f7f6 ffd1 	bl	8000d34 <_exit>
 8009d92:	bf00      	nop

08009d94 <__cxa_atexit>:
 8009d94:	b410      	push	{r4}
 8009d96:	460c      	mov	r4, r1
 8009d98:	4613      	mov	r3, r2
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	2002      	movs	r0, #2
 8009da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da4:	f001 bd26 	b.w	800b7f4 <__register_exitproc>

08009da8 <__libc_fini_array>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d09      	ldr	r5, [pc, #36]	; (8009dd0 <__libc_fini_array+0x28>)
 8009dac:	4c09      	ldr	r4, [pc, #36]	; (8009dd4 <__libc_fini_array+0x2c>)
 8009dae:	1b64      	subs	r4, r4, r5
 8009db0:	10a4      	asrs	r4, r4, #2
 8009db2:	bf18      	it	ne
 8009db4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8009db8:	d005      	beq.n	8009dc6 <__libc_fini_array+0x1e>
 8009dba:	3c01      	subs	r4, #1
 8009dbc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009dc0:	4798      	blx	r3
 8009dc2:	2c00      	cmp	r4, #0
 8009dc4:	d1f9      	bne.n	8009dba <__libc_fini_array+0x12>
 8009dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dca:	f003 bfcb 	b.w	800dd64 <_fini>
 8009dce:	bf00      	nop
 8009dd0:	0800dd70 	.word	0x0800dd70
 8009dd4:	0800dd74 	.word	0x0800dd74

08009dd8 <fputc>:
 8009dd8:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <fputc+0x24>)
 8009dda:	b570      	push	{r4, r5, r6, lr}
 8009ddc:	681c      	ldr	r4, [r3, #0]
 8009dde:	4606      	mov	r6, r0
 8009de0:	460d      	mov	r5, r1
 8009de2:	b124      	cbz	r4, 8009dee <fputc+0x16>
 8009de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009de6:	b913      	cbnz	r3, 8009dee <fputc+0x16>
 8009de8:	4620      	mov	r0, r4
 8009dea:	f001 fe27 	bl	800ba3c <__sinit>
 8009dee:	4620      	mov	r0, r4
 8009df0:	4631      	mov	r1, r6
 8009df2:	462a      	mov	r2, r5
 8009df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009df8:	f000 be7c 	b.w	800aaf4 <_putc_r>
 8009dfc:	20000448 	.word	0x20000448

08009e00 <_fputs_r>:
 8009e00:	b530      	push	{r4, r5, lr}
 8009e02:	4605      	mov	r5, r0
 8009e04:	b087      	sub	sp, #28
 8009e06:	4608      	mov	r0, r1
 8009e08:	4614      	mov	r4, r2
 8009e0a:	9101      	str	r1, [sp, #4]
 8009e0c:	f001 fbb0 	bl	800b570 <strlen>
 8009e10:	aa01      	add	r2, sp, #4
 8009e12:	2301      	movs	r3, #1
 8009e14:	9005      	str	r0, [sp, #20]
 8009e16:	9002      	str	r0, [sp, #8]
 8009e18:	9203      	str	r2, [sp, #12]
 8009e1a:	9304      	str	r3, [sp, #16]
 8009e1c:	b10d      	cbz	r5, 8009e22 <_fputs_r+0x22>
 8009e1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009e20:	b183      	cbz	r3, 8009e44 <_fputs_r+0x44>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	049a      	lsls	r2, r3, #18
 8009e26:	d406      	bmi.n	8009e36 <_fputs_r+0x36>
 8009e28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	6662      	str	r2, [r4, #100]	; 0x64
 8009e36:	4628      	mov	r0, r5
 8009e38:	4621      	mov	r1, r4
 8009e3a:	aa03      	add	r2, sp, #12
 8009e3c:	f000 f80e 	bl	8009e5c <__sfvwrite_r>
 8009e40:	b007      	add	sp, #28
 8009e42:	bd30      	pop	{r4, r5, pc}
 8009e44:	4628      	mov	r0, r5
 8009e46:	f001 fdf9 	bl	800ba3c <__sinit>
 8009e4a:	e7ea      	b.n	8009e22 <_fputs_r+0x22>

08009e4c <fputs>:
 8009e4c:	4b02      	ldr	r3, [pc, #8]	; (8009e58 <fputs+0xc>)
 8009e4e:	460a      	mov	r2, r1
 8009e50:	4601      	mov	r1, r0
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	f7ff bfd4 	b.w	8009e00 <_fputs_r>
 8009e58:	20000448 	.word	0x20000448

08009e5c <__sfvwrite_r>:
 8009e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	6893      	ldr	r3, [r2, #8]
 8009e62:	b083      	sub	sp, #12
 8009e64:	4616      	mov	r6, r2
 8009e66:	4681      	mov	r9, r0
 8009e68:	460c      	mov	r4, r1
 8009e6a:	b32b      	cbz	r3, 8009eb8 <__sfvwrite_r+0x5c>
 8009e6c:	898b      	ldrh	r3, [r1, #12]
 8009e6e:	0719      	lsls	r1, r3, #28
 8009e70:	d526      	bpl.n	8009ec0 <__sfvwrite_r+0x64>
 8009e72:	6922      	ldr	r2, [r4, #16]
 8009e74:	b322      	cbz	r2, 8009ec0 <__sfvwrite_r+0x64>
 8009e76:	f003 0202 	and.w	r2, r3, #2
 8009e7a:	b292      	uxth	r2, r2
 8009e7c:	6835      	ldr	r5, [r6, #0]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	d02c      	beq.n	8009edc <__sfvwrite_r+0x80>
 8009e82:	f04f 0a00 	mov.w	sl, #0
 8009e86:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 800a170 <__sfvwrite_r+0x314>
 8009e8a:	46d0      	mov	r8, sl
 8009e8c:	45d8      	cmp	r8, fp
 8009e8e:	bf34      	ite	cc
 8009e90:	4643      	movcc	r3, r8
 8009e92:	465b      	movcs	r3, fp
 8009e94:	4652      	mov	r2, sl
 8009e96:	4648      	mov	r0, r9
 8009e98:	f1b8 0f00 	cmp.w	r8, #0
 8009e9c:	d04f      	beq.n	8009f3e <__sfvwrite_r+0xe2>
 8009e9e:	69e1      	ldr	r1, [r4, #28]
 8009ea0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8009ea2:	47b8      	blx	r7
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	dd56      	ble.n	8009f56 <__sfvwrite_r+0xfa>
 8009ea8:	68b3      	ldr	r3, [r6, #8]
 8009eaa:	4482      	add	sl, r0
 8009eac:	1a1b      	subs	r3, r3, r0
 8009eae:	ebc0 0808 	rsb	r8, r0, r8
 8009eb2:	60b3      	str	r3, [r6, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e9      	bne.n	8009e8c <__sfvwrite_r+0x30>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	b003      	add	sp, #12
 8009ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec0:	4648      	mov	r0, r9
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	f001 fc34 	bl	800b730 <__swsetup_r>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f040 8148 	bne.w	800a15e <__sfvwrite_r+0x302>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	6835      	ldr	r5, [r6, #0]
 8009ed2:	f003 0202 	and.w	r2, r3, #2
 8009ed6:	b292      	uxth	r2, r2
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	d1d2      	bne.n	8009e82 <__sfvwrite_r+0x26>
 8009edc:	f013 0a01 	ands.w	sl, r3, #1
 8009ee0:	d142      	bne.n	8009f68 <__sfvwrite_r+0x10c>
 8009ee2:	46d0      	mov	r8, sl
 8009ee4:	f1b8 0f00 	cmp.w	r8, #0
 8009ee8:	d023      	beq.n	8009f32 <__sfvwrite_r+0xd6>
 8009eea:	059a      	lsls	r2, r3, #22
 8009eec:	68a7      	ldr	r7, [r4, #8]
 8009eee:	d576      	bpl.n	8009fde <__sfvwrite_r+0x182>
 8009ef0:	45b8      	cmp	r8, r7
 8009ef2:	f0c0 80a4 	bcc.w	800a03e <__sfvwrite_r+0x1e2>
 8009ef6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009efa:	f040 80b2 	bne.w	800a062 <__sfvwrite_r+0x206>
 8009efe:	6820      	ldr	r0, [r4, #0]
 8009f00:	46bb      	mov	fp, r7
 8009f02:	4651      	mov	r1, sl
 8009f04:	465a      	mov	r2, fp
 8009f06:	f000 fd41 	bl	800a98c <memmove>
 8009f0a:	68a2      	ldr	r2, [r4, #8]
 8009f0c:	6821      	ldr	r1, [r4, #0]
 8009f0e:	1bd2      	subs	r2, r2, r7
 8009f10:	eb01 030b 	add.w	r3, r1, fp
 8009f14:	60a2      	str	r2, [r4, #8]
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	4642      	mov	r2, r8
 8009f1a:	68b3      	ldr	r3, [r6, #8]
 8009f1c:	4492      	add	sl, r2
 8009f1e:	1a9b      	subs	r3, r3, r2
 8009f20:	ebc2 0808 	rsb	r8, r2, r8
 8009f24:	60b3      	str	r3, [r6, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0c6      	beq.n	8009eb8 <__sfvwrite_r+0x5c>
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f1b8 0f00 	cmp.w	r8, #0
 8009f30:	d1db      	bne.n	8009eea <__sfvwrite_r+0x8e>
 8009f32:	f8d5 a000 	ldr.w	sl, [r5]
 8009f36:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8009f3a:	3508      	adds	r5, #8
 8009f3c:	e7d2      	b.n	8009ee4 <__sfvwrite_r+0x88>
 8009f3e:	f8d5 a000 	ldr.w	sl, [r5]
 8009f42:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8009f46:	3508      	adds	r5, #8
 8009f48:	e7a0      	b.n	8009e8c <__sfvwrite_r+0x30>
 8009f4a:	4648      	mov	r0, r9
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f001 fd59 	bl	800ba04 <_fflush_r>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d059      	beq.n	800a00a <__sfvwrite_r+0x1ae>
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	b003      	add	sp, #12
 8009f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f68:	4692      	mov	sl, r2
 8009f6a:	9201      	str	r2, [sp, #4]
 8009f6c:	4693      	mov	fp, r2
 8009f6e:	4690      	mov	r8, r2
 8009f70:	f1b8 0f00 	cmp.w	r8, #0
 8009f74:	d02b      	beq.n	8009fce <__sfvwrite_r+0x172>
 8009f76:	9f01      	ldr	r7, [sp, #4]
 8009f78:	2f00      	cmp	r7, #0
 8009f7a:	d064      	beq.n	800a046 <__sfvwrite_r+0x1ea>
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	6921      	ldr	r1, [r4, #16]
 8009f80:	45c2      	cmp	sl, r8
 8009f82:	bf34      	ite	cc
 8009f84:	4653      	movcc	r3, sl
 8009f86:	4643      	movcs	r3, r8
 8009f88:	4288      	cmp	r0, r1
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009f90:	6962      	ldr	r2, [r4, #20]
 8009f92:	d903      	bls.n	8009f9c <__sfvwrite_r+0x140>
 8009f94:	4494      	add	ip, r2
 8009f96:	4563      	cmp	r3, ip
 8009f98:	f300 80ae 	bgt.w	800a0f8 <__sfvwrite_r+0x29c>
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	db36      	blt.n	800a00e <__sfvwrite_r+0x1b2>
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8009fa4:	4648      	mov	r0, r9
 8009fa6:	69e1      	ldr	r1, [r4, #28]
 8009fa8:	465a      	mov	r2, fp
 8009faa:	47b8      	blx	r7
 8009fac:	1e07      	subs	r7, r0, #0
 8009fae:	ddd2      	ble.n	8009f56 <__sfvwrite_r+0xfa>
 8009fb0:	ebba 0a07 	subs.w	sl, sl, r7
 8009fb4:	d03a      	beq.n	800a02c <__sfvwrite_r+0x1d0>
 8009fb6:	68b3      	ldr	r3, [r6, #8]
 8009fb8:	44bb      	add	fp, r7
 8009fba:	1bdb      	subs	r3, r3, r7
 8009fbc:	ebc7 0808 	rsb	r8, r7, r8
 8009fc0:	60b3      	str	r3, [r6, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f43f af78 	beq.w	8009eb8 <__sfvwrite_r+0x5c>
 8009fc8:	f1b8 0f00 	cmp.w	r8, #0
 8009fcc:	d1d3      	bne.n	8009f76 <__sfvwrite_r+0x11a>
 8009fce:	2700      	movs	r7, #0
 8009fd0:	f8d5 b000 	ldr.w	fp, [r5]
 8009fd4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8009fd8:	9701      	str	r7, [sp, #4]
 8009fda:	3508      	adds	r5, #8
 8009fdc:	e7c8      	b.n	8009f70 <__sfvwrite_r+0x114>
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	4298      	cmp	r0, r3
 8009fe4:	d802      	bhi.n	8009fec <__sfvwrite_r+0x190>
 8009fe6:	6963      	ldr	r3, [r4, #20]
 8009fe8:	4598      	cmp	r8, r3
 8009fea:	d272      	bcs.n	800a0d2 <__sfvwrite_r+0x276>
 8009fec:	45b8      	cmp	r8, r7
 8009fee:	bf38      	it	cc
 8009ff0:	4647      	movcc	r7, r8
 8009ff2:	463a      	mov	r2, r7
 8009ff4:	4651      	mov	r1, sl
 8009ff6:	f000 fcc9 	bl	800a98c <memmove>
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	1bdb      	subs	r3, r3, r7
 800a000:	443a      	add	r2, r7
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	6022      	str	r2, [r4, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d09f      	beq.n	8009f4a <__sfvwrite_r+0xee>
 800a00a:	463a      	mov	r2, r7
 800a00c:	e785      	b.n	8009f1a <__sfvwrite_r+0xbe>
 800a00e:	461a      	mov	r2, r3
 800a010:	4659      	mov	r1, fp
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	f000 fcba 	bl	800a98c <memmove>
 800a018:	9b00      	ldr	r3, [sp, #0]
 800a01a:	68a1      	ldr	r1, [r4, #8]
 800a01c:	6822      	ldr	r2, [r4, #0]
 800a01e:	1ac9      	subs	r1, r1, r3
 800a020:	ebba 0a07 	subs.w	sl, sl, r7
 800a024:	4413      	add	r3, r2
 800a026:	60a1      	str	r1, [r4, #8]
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	d1c4      	bne.n	8009fb6 <__sfvwrite_r+0x15a>
 800a02c:	4648      	mov	r0, r9
 800a02e:	4621      	mov	r1, r4
 800a030:	f001 fce8 	bl	800ba04 <_fflush_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	d18e      	bne.n	8009f56 <__sfvwrite_r+0xfa>
 800a038:	f8cd a004 	str.w	sl, [sp, #4]
 800a03c:	e7bb      	b.n	8009fb6 <__sfvwrite_r+0x15a>
 800a03e:	6820      	ldr	r0, [r4, #0]
 800a040:	4647      	mov	r7, r8
 800a042:	46c3      	mov	fp, r8
 800a044:	e75d      	b.n	8009f02 <__sfvwrite_r+0xa6>
 800a046:	4658      	mov	r0, fp
 800a048:	210a      	movs	r1, #10
 800a04a:	4642      	mov	r2, r8
 800a04c:	f000 fbaa 	bl	800a7a4 <memchr>
 800a050:	2800      	cmp	r0, #0
 800a052:	d07f      	beq.n	800a154 <__sfvwrite_r+0x2f8>
 800a054:	f100 0a01 	add.w	sl, r0, #1
 800a058:	2701      	movs	r7, #1
 800a05a:	ebcb 0a0a 	rsb	sl, fp, sl
 800a05e:	9701      	str	r7, [sp, #4]
 800a060:	e78c      	b.n	8009f7c <__sfvwrite_r+0x120>
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	6921      	ldr	r1, [r4, #16]
 800a066:	6967      	ldr	r7, [r4, #20]
 800a068:	ebc1 0c02 	rsb	ip, r1, r2
 800a06c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800a070:	f10c 0201 	add.w	r2, ip, #1
 800a074:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800a078:	4442      	add	r2, r8
 800a07a:	107f      	asrs	r7, r7, #1
 800a07c:	4297      	cmp	r7, r2
 800a07e:	bf34      	ite	cc
 800a080:	4617      	movcc	r7, r2
 800a082:	463a      	movcs	r2, r7
 800a084:	055b      	lsls	r3, r3, #21
 800a086:	d54f      	bpl.n	800a128 <__sfvwrite_r+0x2cc>
 800a088:	4611      	mov	r1, r2
 800a08a:	4648      	mov	r0, r9
 800a08c:	f8cd c000 	str.w	ip, [sp]
 800a090:	f000 f8ec 	bl	800a26c <_malloc_r>
 800a094:	f8dd c000 	ldr.w	ip, [sp]
 800a098:	4683      	mov	fp, r0
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d062      	beq.n	800a164 <__sfvwrite_r+0x308>
 800a09e:	4662      	mov	r2, ip
 800a0a0:	6921      	ldr	r1, [r4, #16]
 800a0a2:	f8cd c000 	str.w	ip, [sp]
 800a0a6:	f000 fbfb 	bl	800a8a0 <memcpy>
 800a0aa:	89a2      	ldrh	r2, [r4, #12]
 800a0ac:	f8dd c000 	ldr.w	ip, [sp]
 800a0b0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a0b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0b8:	81a2      	strh	r2, [r4, #12]
 800a0ba:	eb0b 000c 	add.w	r0, fp, ip
 800a0be:	ebcc 0207 	rsb	r2, ip, r7
 800a0c2:	f8c4 b010 	str.w	fp, [r4, #16]
 800a0c6:	6167      	str	r7, [r4, #20]
 800a0c8:	6020      	str	r0, [r4, #0]
 800a0ca:	60a2      	str	r2, [r4, #8]
 800a0cc:	4647      	mov	r7, r8
 800a0ce:	46c3      	mov	fp, r8
 800a0d0:	e717      	b.n	8009f02 <__sfvwrite_r+0xa6>
 800a0d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a0d6:	4590      	cmp	r8, r2
 800a0d8:	bf38      	it	cc
 800a0da:	4642      	movcc	r2, r8
 800a0dc:	fb92 f2f3 	sdiv	r2, r2, r3
 800a0e0:	fb02 f303 	mul.w	r3, r2, r3
 800a0e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800a0e6:	4648      	mov	r0, r9
 800a0e8:	69e1      	ldr	r1, [r4, #28]
 800a0ea:	4652      	mov	r2, sl
 800a0ec:	47b8      	blx	r7
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f77f af31 	ble.w	8009f56 <__sfvwrite_r+0xfa>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	e710      	b.n	8009f1a <__sfvwrite_r+0xbe>
 800a0f8:	4662      	mov	r2, ip
 800a0fa:	4659      	mov	r1, fp
 800a0fc:	f8cd c000 	str.w	ip, [sp]
 800a100:	f000 fc44 	bl	800a98c <memmove>
 800a104:	f8dd c000 	ldr.w	ip, [sp]
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	4648      	mov	r0, r9
 800a10c:	4463      	add	r3, ip
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	4621      	mov	r1, r4
 800a112:	f8cd c000 	str.w	ip, [sp]
 800a116:	f001 fc75 	bl	800ba04 <_fflush_r>
 800a11a:	f8dd c000 	ldr.w	ip, [sp]
 800a11e:	2800      	cmp	r0, #0
 800a120:	f47f af19 	bne.w	8009f56 <__sfvwrite_r+0xfa>
 800a124:	4667      	mov	r7, ip
 800a126:	e743      	b.n	8009fb0 <__sfvwrite_r+0x154>
 800a128:	4648      	mov	r0, r9
 800a12a:	f8cd c000 	str.w	ip, [sp]
 800a12e:	f000 fd15 	bl	800ab5c <_realloc_r>
 800a132:	f8dd c000 	ldr.w	ip, [sp]
 800a136:	4683      	mov	fp, r0
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1be      	bne.n	800a0ba <__sfvwrite_r+0x25e>
 800a13c:	4648      	mov	r0, r9
 800a13e:	6921      	ldr	r1, [r4, #16]
 800a140:	f001 fd48 	bl	800bbd4 <_free_r>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	220c      	movs	r2, #12
 800a148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f8c9 2000 	str.w	r2, [r9]
 800a152:	e701      	b.n	8009f58 <__sfvwrite_r+0xfc>
 800a154:	2701      	movs	r7, #1
 800a156:	f108 0a01 	add.w	sl, r8, #1
 800a15a:	9701      	str	r7, [sp, #4]
 800a15c:	e70e      	b.n	8009f7c <__sfvwrite_r+0x120>
 800a15e:	f04f 30ff 	mov.w	r0, #4294967295
 800a162:	e6aa      	b.n	8009eba <__sfvwrite_r+0x5e>
 800a164:	230c      	movs	r3, #12
 800a166:	f8c9 3000 	str.w	r3, [r9]
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	e6f4      	b.n	8009f58 <__sfvwrite_r+0xfc>
 800a16e:	bf00      	nop
 800a170:	7ffffc00 	.word	0x7ffffc00

0800a174 <_fwrite_r>:
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a178:	fb02 f503 	mul.w	r5, r2, r3
 800a17c:	b086      	sub	sp, #24
 800a17e:	4617      	mov	r7, r2
 800a180:	4698      	mov	r8, r3
 800a182:	aa01      	add	r2, sp, #4
 800a184:	2301      	movs	r3, #1
 800a186:	9101      	str	r1, [sp, #4]
 800a188:	9502      	str	r5, [sp, #8]
 800a18a:	9505      	str	r5, [sp, #20]
 800a18c:	9203      	str	r2, [sp, #12]
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a192:	4606      	mov	r6, r0
 800a194:	b108      	cbz	r0, 800a19a <_fwrite_r+0x26>
 800a196:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a198:	b1d3      	cbz	r3, 800a1d0 <_fwrite_r+0x5c>
 800a19a:	89a2      	ldrh	r2, [r4, #12]
 800a19c:	0493      	lsls	r3, r2, #18
 800a19e:	d406      	bmi.n	800a1ae <_fwrite_r+0x3a>
 800a1a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1aa:	81a2      	strh	r2, [r4, #12]
 800a1ac:	6663      	str	r3, [r4, #100]	; 0x64
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	aa03      	add	r2, sp, #12
 800a1b4:	f7ff fe52 	bl	8009e5c <__sfvwrite_r>
 800a1b8:	b130      	cbz	r0, 800a1c8 <_fwrite_r+0x54>
 800a1ba:	9805      	ldr	r0, [sp, #20]
 800a1bc:	1a28      	subs	r0, r5, r0
 800a1be:	fbb0 f0f7 	udiv	r0, r0, r7
 800a1c2:	b006      	add	sp, #24
 800a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	b006      	add	sp, #24
 800a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d0:	f001 fc34 	bl	800ba3c <__sinit>
 800a1d4:	e7e1      	b.n	800a19a <_fwrite_r+0x26>
 800a1d6:	bf00      	nop

0800a1d8 <fwrite>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	4c07      	ldr	r4, [pc, #28]	; (800a1f8 <fwrite+0x20>)
 800a1dc:	b082      	sub	sp, #8
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460d      	mov	r5, r1
 800a1e2:	6820      	ldr	r0, [r4, #0]
 800a1e4:	4614      	mov	r4, r2
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	f7ff ffc1 	bl	800a174 <_fwrite_r>
 800a1f2:	b002      	add	sp, #8
 800a1f4:	bd70      	pop	{r4, r5, r6, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000448 	.word	0x20000448

0800a1fc <__libc_init_array>:
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	4e0f      	ldr	r6, [pc, #60]	; (800a23c <__libc_init_array+0x40>)
 800a200:	4d0f      	ldr	r5, [pc, #60]	; (800a240 <__libc_init_array+0x44>)
 800a202:	1b76      	subs	r6, r6, r5
 800a204:	10b6      	asrs	r6, r6, #2
 800a206:	d007      	beq.n	800a218 <__libc_init_array+0x1c>
 800a208:	3d04      	subs	r5, #4
 800a20a:	2400      	movs	r4, #0
 800a20c:	3401      	adds	r4, #1
 800a20e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800a212:	4798      	blx	r3
 800a214:	42a6      	cmp	r6, r4
 800a216:	d1f9      	bne.n	800a20c <__libc_init_array+0x10>
 800a218:	4e0a      	ldr	r6, [pc, #40]	; (800a244 <__libc_init_array+0x48>)
 800a21a:	4d0b      	ldr	r5, [pc, #44]	; (800a248 <__libc_init_array+0x4c>)
 800a21c:	f003 fd94 	bl	800dd48 <_init>
 800a220:	1b76      	subs	r6, r6, r5
 800a222:	10b6      	asrs	r6, r6, #2
 800a224:	d008      	beq.n	800a238 <__libc_init_array+0x3c>
 800a226:	3d04      	subs	r5, #4
 800a228:	2400      	movs	r4, #0
 800a22a:	3401      	adds	r4, #1
 800a22c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800a230:	4798      	blx	r3
 800a232:	42a6      	cmp	r6, r4
 800a234:	d1f9      	bne.n	800a22a <__libc_init_array+0x2e>
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	bd70      	pop	{r4, r5, r6, pc}
 800a23a:	bf00      	nop
 800a23c:	0800dd54 	.word	0x0800dd54
 800a240:	0800dd54 	.word	0x0800dd54
 800a244:	0800dd64 	.word	0x0800dd64
 800a248:	0800dd54 	.word	0x0800dd54

0800a24c <malloc>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	; (800a258 <malloc+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f000 b80b 	b.w	800a26c <_malloc_r>
 800a256:	bf00      	nop
 800a258:	20000448 	.word	0x20000448

0800a25c <free>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	; (800a268 <free+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f001 bcb7 	b.w	800bbd4 <_free_r>
 800a266:	bf00      	nop
 800a268:	20000448 	.word	0x20000448

0800a26c <_malloc_r>:
 800a26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	f101 050b 	add.w	r5, r1, #11
 800a274:	2d16      	cmp	r5, #22
 800a276:	b083      	sub	sp, #12
 800a278:	4606      	mov	r6, r0
 800a27a:	d927      	bls.n	800a2cc <_malloc_r+0x60>
 800a27c:	f035 0507 	bics.w	r5, r5, #7
 800a280:	d427      	bmi.n	800a2d2 <_malloc_r+0x66>
 800a282:	42a9      	cmp	r1, r5
 800a284:	d825      	bhi.n	800a2d2 <_malloc_r+0x66>
 800a286:	4630      	mov	r0, r6
 800a288:	f000 fc30 	bl	800aaec <__malloc_lock>
 800a28c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800a290:	d226      	bcs.n	800a2e0 <_malloc_r+0x74>
 800a292:	4fc1      	ldr	r7, [pc, #772]	; (800a598 <_malloc_r+0x32c>)
 800a294:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800a298:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 800a29c:	68dc      	ldr	r4, [r3, #12]
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	f000 81d2 	beq.w	800a648 <_malloc_r+0x3dc>
 800a2a4:	6863      	ldr	r3, [r4, #4]
 800a2a6:	68e2      	ldr	r2, [r4, #12]
 800a2a8:	f023 0303 	bic.w	r3, r3, #3
 800a2ac:	4423      	add	r3, r4
 800a2ae:	6858      	ldr	r0, [r3, #4]
 800a2b0:	68a1      	ldr	r1, [r4, #8]
 800a2b2:	f040 0501 	orr.w	r5, r0, #1
 800a2b6:	60ca      	str	r2, [r1, #12]
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	6091      	str	r1, [r2, #8]
 800a2bc:	605d      	str	r5, [r3, #4]
 800a2be:	f000 fc17 	bl	800aaf0 <__malloc_unlock>
 800a2c2:	3408      	adds	r4, #8
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	b003      	add	sp, #12
 800a2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2cc:	2510      	movs	r5, #16
 800a2ce:	42a9      	cmp	r1, r5
 800a2d0:	d9d9      	bls.n	800a286 <_malloc_r+0x1a>
 800a2d2:	2400      	movs	r4, #0
 800a2d4:	230c      	movs	r3, #12
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	6033      	str	r3, [r6, #0]
 800a2da:	b003      	add	sp, #12
 800a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 800a2e4:	f000 8089 	beq.w	800a3fa <_malloc_r+0x18e>
 800a2e8:	f1bc 0f04 	cmp.w	ip, #4
 800a2ec:	f200 8160 	bhi.w	800a5b0 <_malloc_r+0x344>
 800a2f0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 800a2f4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800a2f8:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800a2fc:	4fa6      	ldr	r7, [pc, #664]	; (800a598 <_malloc_r+0x32c>)
 800a2fe:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800a302:	68cc      	ldr	r4, [r1, #12]
 800a304:	42a1      	cmp	r1, r4
 800a306:	d105      	bne.n	800a314 <_malloc_r+0xa8>
 800a308:	e00c      	b.n	800a324 <_malloc_r+0xb8>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da79      	bge.n	800a402 <_malloc_r+0x196>
 800a30e:	68e4      	ldr	r4, [r4, #12]
 800a310:	42a1      	cmp	r1, r4
 800a312:	d007      	beq.n	800a324 <_malloc_r+0xb8>
 800a314:	6862      	ldr	r2, [r4, #4]
 800a316:	f022 0203 	bic.w	r2, r2, #3
 800a31a:	1b53      	subs	r3, r2, r5
 800a31c:	2b0f      	cmp	r3, #15
 800a31e:	ddf4      	ble.n	800a30a <_malloc_r+0x9e>
 800a320:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a324:	f10c 0c01 	add.w	ip, ip, #1
 800a328:	4b9b      	ldr	r3, [pc, #620]	; (800a598 <_malloc_r+0x32c>)
 800a32a:	693c      	ldr	r4, [r7, #16]
 800a32c:	f103 0e08 	add.w	lr, r3, #8
 800a330:	4574      	cmp	r4, lr
 800a332:	f000 817e 	beq.w	800a632 <_malloc_r+0x3c6>
 800a336:	6861      	ldr	r1, [r4, #4]
 800a338:	f021 0103 	bic.w	r1, r1, #3
 800a33c:	1b4a      	subs	r2, r1, r5
 800a33e:	2a0f      	cmp	r2, #15
 800a340:	f300 8164 	bgt.w	800a60c <_malloc_r+0x3a0>
 800a344:	2a00      	cmp	r2, #0
 800a346:	f8c3 e014 	str.w	lr, [r3, #20]
 800a34a:	f8c3 e010 	str.w	lr, [r3, #16]
 800a34e:	da69      	bge.n	800a424 <_malloc_r+0x1b8>
 800a350:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a354:	f080 813a 	bcs.w	800a5cc <_malloc_r+0x360>
 800a358:	08c9      	lsrs	r1, r1, #3
 800a35a:	108a      	asrs	r2, r1, #2
 800a35c:	f04f 0801 	mov.w	r8, #1
 800a360:	fa08 f802 	lsl.w	r8, r8, r2
 800a364:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	6888      	ldr	r0, [r1, #8]
 800a36c:	ea48 0202 	orr.w	r2, r8, r2
 800a370:	60a0      	str	r0, [r4, #8]
 800a372:	60e1      	str	r1, [r4, #12]
 800a374:	605a      	str	r2, [r3, #4]
 800a376:	608c      	str	r4, [r1, #8]
 800a378:	60c4      	str	r4, [r0, #12]
 800a37a:	ea4f 03ac 	mov.w	r3, ip, asr #2
 800a37e:	2001      	movs	r0, #1
 800a380:	4098      	lsls	r0, r3
 800a382:	4290      	cmp	r0, r2
 800a384:	d85b      	bhi.n	800a43e <_malloc_r+0x1d2>
 800a386:	4202      	tst	r2, r0
 800a388:	d106      	bne.n	800a398 <_malloc_r+0x12c>
 800a38a:	f02c 0c03 	bic.w	ip, ip, #3
 800a38e:	0040      	lsls	r0, r0, #1
 800a390:	4202      	tst	r2, r0
 800a392:	f10c 0c04 	add.w	ip, ip, #4
 800a396:	d0fa      	beq.n	800a38e <_malloc_r+0x122>
 800a398:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 800a39c:	4644      	mov	r4, r8
 800a39e:	46e1      	mov	r9, ip
 800a3a0:	68e3      	ldr	r3, [r4, #12]
 800a3a2:	429c      	cmp	r4, r3
 800a3a4:	d107      	bne.n	800a3b6 <_malloc_r+0x14a>
 800a3a6:	e146      	b.n	800a636 <_malloc_r+0x3ca>
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	f280 8157 	bge.w	800a65c <_malloc_r+0x3f0>
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	f000 8140 	beq.w	800a636 <_malloc_r+0x3ca>
 800a3b6:	6859      	ldr	r1, [r3, #4]
 800a3b8:	f021 0103 	bic.w	r1, r1, #3
 800a3bc:	1b4a      	subs	r2, r1, r5
 800a3be:	2a0f      	cmp	r2, #15
 800a3c0:	ddf2      	ble.n	800a3a8 <_malloc_r+0x13c>
 800a3c2:	461c      	mov	r4, r3
 800a3c4:	f854 cf08 	ldr.w	ip, [r4, #8]!
 800a3c8:	68d9      	ldr	r1, [r3, #12]
 800a3ca:	f045 0901 	orr.w	r9, r5, #1
 800a3ce:	f042 0801 	orr.w	r8, r2, #1
 800a3d2:	441d      	add	r5, r3
 800a3d4:	f8c3 9004 	str.w	r9, [r3, #4]
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f8cc 100c 	str.w	r1, [ip, #12]
 800a3de:	f8c1 c008 	str.w	ip, [r1, #8]
 800a3e2:	617d      	str	r5, [r7, #20]
 800a3e4:	613d      	str	r5, [r7, #16]
 800a3e6:	f8c5 e00c 	str.w	lr, [r5, #12]
 800a3ea:	f8c5 e008 	str.w	lr, [r5, #8]
 800a3ee:	f8c5 8004 	str.w	r8, [r5, #4]
 800a3f2:	50aa      	str	r2, [r5, r2]
 800a3f4:	f000 fb7c 	bl	800aaf0 <__malloc_unlock>
 800a3f8:	e764      	b.n	800a2c4 <_malloc_r+0x58>
 800a3fa:	217e      	movs	r1, #126	; 0x7e
 800a3fc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800a400:	e77c      	b.n	800a2fc <_malloc_r+0x90>
 800a402:	4422      	add	r2, r4
 800a404:	6850      	ldr	r0, [r2, #4]
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	68a1      	ldr	r1, [r4, #8]
 800a40a:	f040 0501 	orr.w	r5, r0, #1
 800a40e:	60cb      	str	r3, [r1, #12]
 800a410:	4630      	mov	r0, r6
 800a412:	6099      	str	r1, [r3, #8]
 800a414:	6055      	str	r5, [r2, #4]
 800a416:	f000 fb6b 	bl	800aaf0 <__malloc_unlock>
 800a41a:	3408      	adds	r4, #8
 800a41c:	4620      	mov	r0, r4
 800a41e:	b003      	add	sp, #12
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	4421      	add	r1, r4
 800a426:	684b      	ldr	r3, [r1, #4]
 800a428:	4630      	mov	r0, r6
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	604b      	str	r3, [r1, #4]
 800a430:	f000 fb5e 	bl	800aaf0 <__malloc_unlock>
 800a434:	3408      	adds	r4, #8
 800a436:	4620      	mov	r0, r4
 800a438:	b003      	add	sp, #12
 800a43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43e:	68bc      	ldr	r4, [r7, #8]
 800a440:	6863      	ldr	r3, [r4, #4]
 800a442:	f023 0903 	bic.w	r9, r3, #3
 800a446:	45a9      	cmp	r9, r5
 800a448:	d304      	bcc.n	800a454 <_malloc_r+0x1e8>
 800a44a:	ebc5 0309 	rsb	r3, r5, r9
 800a44e:	2b0f      	cmp	r3, #15
 800a450:	f300 8091 	bgt.w	800a576 <_malloc_r+0x30a>
 800a454:	4b51      	ldr	r3, [pc, #324]	; (800a59c <_malloc_r+0x330>)
 800a456:	4a52      	ldr	r2, [pc, #328]	; (800a5a0 <_malloc_r+0x334>)
 800a458:	6819      	ldr	r1, [r3, #0]
 800a45a:	6813      	ldr	r3, [r2, #0]
 800a45c:	eb05 0a01 	add.w	sl, r5, r1
 800a460:	3301      	adds	r3, #1
 800a462:	eb04 0b09 	add.w	fp, r4, r9
 800a466:	f000 8161 	beq.w	800a72c <_malloc_r+0x4c0>
 800a46a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 800a46e:	f10a 0a0f 	add.w	sl, sl, #15
 800a472:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 800a476:	f02a 0a0f 	bic.w	sl, sl, #15
 800a47a:	4630      	mov	r0, r6
 800a47c:	4651      	mov	r1, sl
 800a47e:	9201      	str	r2, [sp, #4]
 800a480:	f7f6 fcb8 	bl	8000df4 <_sbrk_r>
 800a484:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a488:	4680      	mov	r8, r0
 800a48a:	9a01      	ldr	r2, [sp, #4]
 800a48c:	f000 8101 	beq.w	800a692 <_malloc_r+0x426>
 800a490:	4583      	cmp	fp, r0
 800a492:	f200 80fb 	bhi.w	800a68c <_malloc_r+0x420>
 800a496:	f8df c114 	ldr.w	ip, [pc, #276]	; 800a5ac <_malloc_r+0x340>
 800a49a:	45c3      	cmp	fp, r8
 800a49c:	f8dc 3000 	ldr.w	r3, [ip]
 800a4a0:	4453      	add	r3, sl
 800a4a2:	f8cc 3000 	str.w	r3, [ip]
 800a4a6:	f000 814a 	beq.w	800a73e <_malloc_r+0x4d2>
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	493c      	ldr	r1, [pc, #240]	; (800a5a0 <_malloc_r+0x334>)
 800a4ae:	3201      	adds	r2, #1
 800a4b0:	bf1b      	ittet	ne
 800a4b2:	ebcb 0b08 	rsbne	fp, fp, r8
 800a4b6:	445b      	addne	r3, fp
 800a4b8:	f8c1 8000 	streq.w	r8, [r1]
 800a4bc:	f8cc 3000 	strne.w	r3, [ip]
 800a4c0:	f018 0307 	ands.w	r3, r8, #7
 800a4c4:	f000 8114 	beq.w	800a6f0 <_malloc_r+0x484>
 800a4c8:	f1c3 0208 	rsb	r2, r3, #8
 800a4cc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800a4d0:	4490      	add	r8, r2
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	44c2      	add	sl, r8
 800a4d6:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 800a4da:	ebca 0a03 	rsb	sl, sl, r3
 800a4de:	4651      	mov	r1, sl
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f8cd c004 	str.w	ip, [sp, #4]
 800a4e6:	f7f6 fc85 	bl	8000df4 <_sbrk_r>
 800a4ea:	1c43      	adds	r3, r0, #1
 800a4ec:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a4f0:	f000 8135 	beq.w	800a75e <_malloc_r+0x4f2>
 800a4f4:	ebc8 0200 	rsb	r2, r8, r0
 800a4f8:	4452      	add	r2, sl
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	f8dc 3000 	ldr.w	r3, [ip]
 800a502:	42bc      	cmp	r4, r7
 800a504:	4453      	add	r3, sl
 800a506:	f8c7 8008 	str.w	r8, [r7, #8]
 800a50a:	f8cc 3000 	str.w	r3, [ip]
 800a50e:	f8c8 2004 	str.w	r2, [r8, #4]
 800a512:	f8df a098 	ldr.w	sl, [pc, #152]	; 800a5ac <_malloc_r+0x340>
 800a516:	d015      	beq.n	800a544 <_malloc_r+0x2d8>
 800a518:	f1b9 0f0f 	cmp.w	r9, #15
 800a51c:	f240 80eb 	bls.w	800a6f6 <_malloc_r+0x48a>
 800a520:	6861      	ldr	r1, [r4, #4]
 800a522:	f1a9 020c 	sub.w	r2, r9, #12
 800a526:	f022 0207 	bic.w	r2, r2, #7
 800a52a:	f001 0101 	and.w	r1, r1, #1
 800a52e:	ea42 0e01 	orr.w	lr, r2, r1
 800a532:	2005      	movs	r0, #5
 800a534:	18a1      	adds	r1, r4, r2
 800a536:	2a0f      	cmp	r2, #15
 800a538:	f8c4 e004 	str.w	lr, [r4, #4]
 800a53c:	6048      	str	r0, [r1, #4]
 800a53e:	6088      	str	r0, [r1, #8]
 800a540:	f200 8111 	bhi.w	800a766 <_malloc_r+0x4fa>
 800a544:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <_malloc_r+0x338>)
 800a546:	68bc      	ldr	r4, [r7, #8]
 800a548:	6811      	ldr	r1, [r2, #0]
 800a54a:	428b      	cmp	r3, r1
 800a54c:	bf88      	it	hi
 800a54e:	6013      	strhi	r3, [r2, #0]
 800a550:	4a15      	ldr	r2, [pc, #84]	; (800a5a8 <_malloc_r+0x33c>)
 800a552:	6811      	ldr	r1, [r2, #0]
 800a554:	428b      	cmp	r3, r1
 800a556:	bf88      	it	hi
 800a558:	6013      	strhi	r3, [r2, #0]
 800a55a:	6862      	ldr	r2, [r4, #4]
 800a55c:	f022 0203 	bic.w	r2, r2, #3
 800a560:	4295      	cmp	r5, r2
 800a562:	ebc5 0302 	rsb	r3, r5, r2
 800a566:	d801      	bhi.n	800a56c <_malloc_r+0x300>
 800a568:	2b0f      	cmp	r3, #15
 800a56a:	dc04      	bgt.n	800a576 <_malloc_r+0x30a>
 800a56c:	4630      	mov	r0, r6
 800a56e:	f000 fabf 	bl	800aaf0 <__malloc_unlock>
 800a572:	2400      	movs	r4, #0
 800a574:	e6a6      	b.n	800a2c4 <_malloc_r+0x58>
 800a576:	f045 0201 	orr.w	r2, r5, #1
 800a57a:	f043 0301 	orr.w	r3, r3, #1
 800a57e:	4425      	add	r5, r4
 800a580:	6062      	str	r2, [r4, #4]
 800a582:	4630      	mov	r0, r6
 800a584:	60bd      	str	r5, [r7, #8]
 800a586:	606b      	str	r3, [r5, #4]
 800a588:	f000 fab2 	bl	800aaf0 <__malloc_unlock>
 800a58c:	3408      	adds	r4, #8
 800a58e:	4620      	mov	r0, r4
 800a590:	b003      	add	sp, #12
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a596:	bf00      	nop
 800a598:	2000044c 	.word	0x2000044c
 800a59c:	20001180 	.word	0x20001180
 800a5a0:	20000858 	.word	0x20000858
 800a5a4:	2000117c 	.word	0x2000117c
 800a5a8:	20001178 	.word	0x20001178
 800a5ac:	20001184 	.word	0x20001184
 800a5b0:	f1bc 0f14 	cmp.w	ip, #20
 800a5b4:	d961      	bls.n	800a67a <_malloc_r+0x40e>
 800a5b6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800a5ba:	f200 808f 	bhi.w	800a6dc <_malloc_r+0x470>
 800a5be:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 800a5c2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 800a5c6:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800a5ca:	e697      	b.n	800a2fc <_malloc_r+0x90>
 800a5cc:	0a4b      	lsrs	r3, r1, #9
 800a5ce:	2b04      	cmp	r3, #4
 800a5d0:	d958      	bls.n	800a684 <_malloc_r+0x418>
 800a5d2:	2b14      	cmp	r3, #20
 800a5d4:	f200 80ad 	bhi.w	800a732 <_malloc_r+0x4c6>
 800a5d8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800a5dc:	0050      	lsls	r0, r2, #1
 800a5de:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800a5e2:	6883      	ldr	r3, [r0, #8]
 800a5e4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a7a0 <_malloc_r+0x534>
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	f000 808a 	beq.w	800a702 <_malloc_r+0x496>
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	f022 0203 	bic.w	r2, r2, #3
 800a5f4:	4291      	cmp	r1, r2
 800a5f6:	d202      	bcs.n	800a5fe <_malloc_r+0x392>
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	4298      	cmp	r0, r3
 800a5fc:	d1f7      	bne.n	800a5ee <_malloc_r+0x382>
 800a5fe:	68d9      	ldr	r1, [r3, #12]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	60e1      	str	r1, [r4, #12]
 800a604:	60a3      	str	r3, [r4, #8]
 800a606:	608c      	str	r4, [r1, #8]
 800a608:	60dc      	str	r4, [r3, #12]
 800a60a:	e6b6      	b.n	800a37a <_malloc_r+0x10e>
 800a60c:	f045 0701 	orr.w	r7, r5, #1
 800a610:	f042 0101 	orr.w	r1, r2, #1
 800a614:	4425      	add	r5, r4
 800a616:	6067      	str	r7, [r4, #4]
 800a618:	4630      	mov	r0, r6
 800a61a:	615d      	str	r5, [r3, #20]
 800a61c:	611d      	str	r5, [r3, #16]
 800a61e:	f8c5 e00c 	str.w	lr, [r5, #12]
 800a622:	f8c5 e008 	str.w	lr, [r5, #8]
 800a626:	6069      	str	r1, [r5, #4]
 800a628:	50aa      	str	r2, [r5, r2]
 800a62a:	3408      	adds	r4, #8
 800a62c:	f000 fa60 	bl	800aaf0 <__malloc_unlock>
 800a630:	e648      	b.n	800a2c4 <_malloc_r+0x58>
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	e6a1      	b.n	800a37a <_malloc_r+0x10e>
 800a636:	f109 0901 	add.w	r9, r9, #1
 800a63a:	f019 0f03 	tst.w	r9, #3
 800a63e:	f104 0408 	add.w	r4, r4, #8
 800a642:	f47f aead 	bne.w	800a3a0 <_malloc_r+0x134>
 800a646:	e02d      	b.n	800a6a4 <_malloc_r+0x438>
 800a648:	f104 0308 	add.w	r3, r4, #8
 800a64c:	6964      	ldr	r4, [r4, #20]
 800a64e:	42a3      	cmp	r3, r4
 800a650:	bf08      	it	eq
 800a652:	f10c 0c02 	addeq.w	ip, ip, #2
 800a656:	f43f ae67 	beq.w	800a328 <_malloc_r+0xbc>
 800a65a:	e623      	b.n	800a2a4 <_malloc_r+0x38>
 800a65c:	4419      	add	r1, r3
 800a65e:	6848      	ldr	r0, [r1, #4]
 800a660:	461c      	mov	r4, r3
 800a662:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f040 0501 	orr.w	r5, r0, #1
 800a66c:	604d      	str	r5, [r1, #4]
 800a66e:	4630      	mov	r0, r6
 800a670:	60d3      	str	r3, [r2, #12]
 800a672:	609a      	str	r2, [r3, #8]
 800a674:	f000 fa3c 	bl	800aaf0 <__malloc_unlock>
 800a678:	e624      	b.n	800a2c4 <_malloc_r+0x58>
 800a67a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 800a67e:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800a682:	e63b      	b.n	800a2fc <_malloc_r+0x90>
 800a684:	098a      	lsrs	r2, r1, #6
 800a686:	3238      	adds	r2, #56	; 0x38
 800a688:	0050      	lsls	r0, r2, #1
 800a68a:	e7a8      	b.n	800a5de <_malloc_r+0x372>
 800a68c:	42bc      	cmp	r4, r7
 800a68e:	f43f af02 	beq.w	800a496 <_malloc_r+0x22a>
 800a692:	68bc      	ldr	r4, [r7, #8]
 800a694:	6862      	ldr	r2, [r4, #4]
 800a696:	f022 0203 	bic.w	r2, r2, #3
 800a69a:	e761      	b.n	800a560 <_malloc_r+0x2f4>
 800a69c:	f8d8 8000 	ldr.w	r8, [r8]
 800a6a0:	4598      	cmp	r8, r3
 800a6a2:	d17a      	bne.n	800a79a <_malloc_r+0x52e>
 800a6a4:	f01c 0f03 	tst.w	ip, #3
 800a6a8:	f1a8 0308 	sub.w	r3, r8, #8
 800a6ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a6b0:	d1f4      	bne.n	800a69c <_malloc_r+0x430>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	ea23 0300 	bic.w	r3, r3, r0
 800a6b8:	607b      	str	r3, [r7, #4]
 800a6ba:	0040      	lsls	r0, r0, #1
 800a6bc:	4298      	cmp	r0, r3
 800a6be:	f63f aebe 	bhi.w	800a43e <_malloc_r+0x1d2>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f43f aebb 	beq.w	800a43e <_malloc_r+0x1d2>
 800a6c8:	4203      	tst	r3, r0
 800a6ca:	46cc      	mov	ip, r9
 800a6cc:	f47f ae64 	bne.w	800a398 <_malloc_r+0x12c>
 800a6d0:	0040      	lsls	r0, r0, #1
 800a6d2:	4203      	tst	r3, r0
 800a6d4:	f10c 0c04 	add.w	ip, ip, #4
 800a6d8:	d0fa      	beq.n	800a6d0 <_malloc_r+0x464>
 800a6da:	e65d      	b.n	800a398 <_malloc_r+0x12c>
 800a6dc:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800a6e0:	d819      	bhi.n	800a716 <_malloc_r+0x4aa>
 800a6e2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 800a6e6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 800a6ea:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800a6ee:	e605      	b.n	800a2fc <_malloc_r+0x90>
 800a6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6f4:	e6ee      	b.n	800a4d4 <_malloc_r+0x268>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	f8c8 3004 	str.w	r3, [r8, #4]
 800a6fc:	4644      	mov	r4, r8
 800a6fe:	2200      	movs	r2, #0
 800a700:	e72e      	b.n	800a560 <_malloc_r+0x2f4>
 800a702:	1092      	asrs	r2, r2, #2
 800a704:	2001      	movs	r0, #1
 800a706:	4090      	lsls	r0, r2
 800a708:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a70c:	4619      	mov	r1, r3
 800a70e:	4302      	orrs	r2, r0
 800a710:	f8c8 2004 	str.w	r2, [r8, #4]
 800a714:	e775      	b.n	800a602 <_malloc_r+0x396>
 800a716:	f240 5354 	movw	r3, #1364	; 0x554
 800a71a:	459c      	cmp	ip, r3
 800a71c:	d81b      	bhi.n	800a756 <_malloc_r+0x4ea>
 800a71e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 800a722:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 800a726:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800a72a:	e5e7      	b.n	800a2fc <_malloc_r+0x90>
 800a72c:	f10a 0a10 	add.w	sl, sl, #16
 800a730:	e6a3      	b.n	800a47a <_malloc_r+0x20e>
 800a732:	2b54      	cmp	r3, #84	; 0x54
 800a734:	d81f      	bhi.n	800a776 <_malloc_r+0x50a>
 800a736:	0b0a      	lsrs	r2, r1, #12
 800a738:	326e      	adds	r2, #110	; 0x6e
 800a73a:	0050      	lsls	r0, r2, #1
 800a73c:	e74f      	b.n	800a5de <_malloc_r+0x372>
 800a73e:	f3cb 010b 	ubfx	r1, fp, #0, #12
 800a742:	2900      	cmp	r1, #0
 800a744:	f47f aeb1 	bne.w	800a4aa <_malloc_r+0x23e>
 800a748:	eb0a 0109 	add.w	r1, sl, r9
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	f041 0101 	orr.w	r1, r1, #1
 800a752:	6051      	str	r1, [r2, #4]
 800a754:	e6f6      	b.n	800a544 <_malloc_r+0x2d8>
 800a756:	21fc      	movs	r1, #252	; 0xfc
 800a758:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800a75c:	e5ce      	b.n	800a2fc <_malloc_r+0x90>
 800a75e:	2201      	movs	r2, #1
 800a760:	f04f 0a00 	mov.w	sl, #0
 800a764:	e6cb      	b.n	800a4fe <_malloc_r+0x292>
 800a766:	f104 0108 	add.w	r1, r4, #8
 800a76a:	4630      	mov	r0, r6
 800a76c:	f001 fa32 	bl	800bbd4 <_free_r>
 800a770:	f8da 3000 	ldr.w	r3, [sl]
 800a774:	e6e6      	b.n	800a544 <_malloc_r+0x2d8>
 800a776:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a77a:	d803      	bhi.n	800a784 <_malloc_r+0x518>
 800a77c:	0bca      	lsrs	r2, r1, #15
 800a77e:	3277      	adds	r2, #119	; 0x77
 800a780:	0050      	lsls	r0, r2, #1
 800a782:	e72c      	b.n	800a5de <_malloc_r+0x372>
 800a784:	f240 5254 	movw	r2, #1364	; 0x554
 800a788:	4293      	cmp	r3, r2
 800a78a:	d803      	bhi.n	800a794 <_malloc_r+0x528>
 800a78c:	0c8a      	lsrs	r2, r1, #18
 800a78e:	327c      	adds	r2, #124	; 0x7c
 800a790:	0050      	lsls	r0, r2, #1
 800a792:	e724      	b.n	800a5de <_malloc_r+0x372>
 800a794:	20fc      	movs	r0, #252	; 0xfc
 800a796:	227e      	movs	r2, #126	; 0x7e
 800a798:	e721      	b.n	800a5de <_malloc_r+0x372>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	e78d      	b.n	800a6ba <_malloc_r+0x44e>
 800a79e:	bf00      	nop
 800a7a0:	2000044c 	.word	0x2000044c

0800a7a4 <memchr>:
 800a7a4:	0783      	lsls	r3, r0, #30
 800a7a6:	b470      	push	{r4, r5, r6}
 800a7a8:	b2c9      	uxtb	r1, r1
 800a7aa:	d040      	beq.n	800a82e <memchr+0x8a>
 800a7ac:	1e54      	subs	r4, r2, #1
 800a7ae:	b32a      	cbz	r2, 800a7fc <memchr+0x58>
 800a7b0:	7803      	ldrb	r3, [r0, #0]
 800a7b2:	428b      	cmp	r3, r1
 800a7b4:	d023      	beq.n	800a7fe <memchr+0x5a>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	e004      	b.n	800a7c4 <memchr+0x20>
 800a7ba:	b1fc      	cbz	r4, 800a7fc <memchr+0x58>
 800a7bc:	7805      	ldrb	r5, [r0, #0]
 800a7be:	4614      	mov	r4, r2
 800a7c0:	428d      	cmp	r5, r1
 800a7c2:	d01c      	beq.n	800a7fe <memchr+0x5a>
 800a7c4:	f013 0f03 	tst.w	r3, #3
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f104 32ff 	add.w	r2, r4, #4294967295
 800a7ce:	f103 0301 	add.w	r3, r3, #1
 800a7d2:	d1f2      	bne.n	800a7ba <memchr+0x16>
 800a7d4:	2c03      	cmp	r4, #3
 800a7d6:	d814      	bhi.n	800a802 <memchr+0x5e>
 800a7d8:	1e65      	subs	r5, r4, #1
 800a7da:	b354      	cbz	r4, 800a832 <memchr+0x8e>
 800a7dc:	7803      	ldrb	r3, [r0, #0]
 800a7de:	428b      	cmp	r3, r1
 800a7e0:	d00d      	beq.n	800a7fe <memchr+0x5a>
 800a7e2:	1c42      	adds	r2, r0, #1
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	e002      	b.n	800a7ee <memchr+0x4a>
 800a7e8:	7804      	ldrb	r4, [r0, #0]
 800a7ea:	428c      	cmp	r4, r1
 800a7ec:	d007      	beq.n	800a7fe <memchr+0x5a>
 800a7ee:	42ab      	cmp	r3, r5
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f103 0301 	add.w	r3, r3, #1
 800a7f6:	f102 0201 	add.w	r2, r2, #1
 800a7fa:	d1f5      	bne.n	800a7e8 <memchr+0x44>
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	bc70      	pop	{r4, r5, r6}
 800a800:	4770      	bx	lr
 800a802:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800a806:	4603      	mov	r3, r0
 800a808:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	4618      	mov	r0, r3
 800a810:	4072      	eors	r2, r6
 800a812:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 800a816:	ea25 0202 	bic.w	r2, r5, r2
 800a81a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800a81e:	f103 0304 	add.w	r3, r3, #4
 800a822:	d1d9      	bne.n	800a7d8 <memchr+0x34>
 800a824:	3c04      	subs	r4, #4
 800a826:	2c03      	cmp	r4, #3
 800a828:	4618      	mov	r0, r3
 800a82a:	d8ef      	bhi.n	800a80c <memchr+0x68>
 800a82c:	e7d4      	b.n	800a7d8 <memchr+0x34>
 800a82e:	4614      	mov	r4, r2
 800a830:	e7d0      	b.n	800a7d4 <memchr+0x30>
 800a832:	4620      	mov	r0, r4
 800a834:	e7e3      	b.n	800a7fe <memchr+0x5a>
 800a836:	bf00      	nop

0800a838 <memcmp>:
 800a838:	2a03      	cmp	r2, #3
 800a83a:	b470      	push	{r4, r5, r6}
 800a83c:	d928      	bls.n	800a890 <memcmp+0x58>
 800a83e:	ea40 0301 	orr.w	r3, r0, r1
 800a842:	079b      	lsls	r3, r3, #30
 800a844:	d013      	beq.n	800a86e <memcmp+0x36>
 800a846:	7805      	ldrb	r5, [r0, #0]
 800a848:	780c      	ldrb	r4, [r1, #0]
 800a84a:	42a5      	cmp	r5, r4
 800a84c:	d124      	bne.n	800a898 <memcmp+0x60>
 800a84e:	3a01      	subs	r2, #1
 800a850:	2300      	movs	r3, #0
 800a852:	e005      	b.n	800a860 <memcmp+0x28>
 800a854:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a858:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a85c:	42a5      	cmp	r5, r4
 800a85e:	d11b      	bne.n	800a898 <memcmp+0x60>
 800a860:	4293      	cmp	r3, r2
 800a862:	f103 0301 	add.w	r3, r3, #1
 800a866:	d1f5      	bne.n	800a854 <memcmp+0x1c>
 800a868:	2000      	movs	r0, #0
 800a86a:	bc70      	pop	{r4, r5, r6}
 800a86c:	4770      	bx	lr
 800a86e:	460c      	mov	r4, r1
 800a870:	4603      	mov	r3, r0
 800a872:	6825      	ldr	r5, [r4, #0]
 800a874:	681e      	ldr	r6, [r3, #0]
 800a876:	4621      	mov	r1, r4
 800a878:	42ae      	cmp	r6, r5
 800a87a:	4618      	mov	r0, r3
 800a87c:	f104 0404 	add.w	r4, r4, #4
 800a880:	f103 0304 	add.w	r3, r3, #4
 800a884:	d104      	bne.n	800a890 <memcmp+0x58>
 800a886:	3a04      	subs	r2, #4
 800a888:	2a03      	cmp	r2, #3
 800a88a:	4618      	mov	r0, r3
 800a88c:	4621      	mov	r1, r4
 800a88e:	d8f0      	bhi.n	800a872 <memcmp+0x3a>
 800a890:	2a00      	cmp	r2, #0
 800a892:	d1d8      	bne.n	800a846 <memcmp+0xe>
 800a894:	4610      	mov	r0, r2
 800a896:	e7e8      	b.n	800a86a <memcmp+0x32>
 800a898:	1b28      	subs	r0, r5, r4
 800a89a:	bc70      	pop	{r4, r5, r6}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop

0800a8a0 <memcpy>:
 800a8a0:	4684      	mov	ip, r0
 800a8a2:	ea41 0300 	orr.w	r3, r1, r0
 800a8a6:	f013 0303 	ands.w	r3, r3, #3
 800a8aa:	d149      	bne.n	800a940 <memcpy+0xa0>
 800a8ac:	3a40      	subs	r2, #64	; 0x40
 800a8ae:	d323      	bcc.n	800a8f8 <memcpy+0x58>
 800a8b0:	680b      	ldr	r3, [r1, #0]
 800a8b2:	6003      	str	r3, [r0, #0]
 800a8b4:	684b      	ldr	r3, [r1, #4]
 800a8b6:	6043      	str	r3, [r0, #4]
 800a8b8:	688b      	ldr	r3, [r1, #8]
 800a8ba:	6083      	str	r3, [r0, #8]
 800a8bc:	68cb      	ldr	r3, [r1, #12]
 800a8be:	60c3      	str	r3, [r0, #12]
 800a8c0:	690b      	ldr	r3, [r1, #16]
 800a8c2:	6103      	str	r3, [r0, #16]
 800a8c4:	694b      	ldr	r3, [r1, #20]
 800a8c6:	6143      	str	r3, [r0, #20]
 800a8c8:	698b      	ldr	r3, [r1, #24]
 800a8ca:	6183      	str	r3, [r0, #24]
 800a8cc:	69cb      	ldr	r3, [r1, #28]
 800a8ce:	61c3      	str	r3, [r0, #28]
 800a8d0:	6a0b      	ldr	r3, [r1, #32]
 800a8d2:	6203      	str	r3, [r0, #32]
 800a8d4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a8d6:	6243      	str	r3, [r0, #36]	; 0x24
 800a8d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a8da:	6283      	str	r3, [r0, #40]	; 0x28
 800a8dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a8de:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a8e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a8e2:	6303      	str	r3, [r0, #48]	; 0x30
 800a8e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a8e6:	6343      	str	r3, [r0, #52]	; 0x34
 800a8e8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a8ea:	6383      	str	r3, [r0, #56]	; 0x38
 800a8ec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a8ee:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a8f0:	3040      	adds	r0, #64	; 0x40
 800a8f2:	3140      	adds	r1, #64	; 0x40
 800a8f4:	3a40      	subs	r2, #64	; 0x40
 800a8f6:	d2db      	bcs.n	800a8b0 <memcpy+0x10>
 800a8f8:	3230      	adds	r2, #48	; 0x30
 800a8fa:	d30b      	bcc.n	800a914 <memcpy+0x74>
 800a8fc:	680b      	ldr	r3, [r1, #0]
 800a8fe:	6003      	str	r3, [r0, #0]
 800a900:	684b      	ldr	r3, [r1, #4]
 800a902:	6043      	str	r3, [r0, #4]
 800a904:	688b      	ldr	r3, [r1, #8]
 800a906:	6083      	str	r3, [r0, #8]
 800a908:	68cb      	ldr	r3, [r1, #12]
 800a90a:	60c3      	str	r3, [r0, #12]
 800a90c:	3010      	adds	r0, #16
 800a90e:	3110      	adds	r1, #16
 800a910:	3a10      	subs	r2, #16
 800a912:	d2f3      	bcs.n	800a8fc <memcpy+0x5c>
 800a914:	320c      	adds	r2, #12
 800a916:	d305      	bcc.n	800a924 <memcpy+0x84>
 800a918:	f851 3b04 	ldr.w	r3, [r1], #4
 800a91c:	f840 3b04 	str.w	r3, [r0], #4
 800a920:	3a04      	subs	r2, #4
 800a922:	d2f9      	bcs.n	800a918 <memcpy+0x78>
 800a924:	3204      	adds	r2, #4
 800a926:	d008      	beq.n	800a93a <memcpy+0x9a>
 800a928:	07d2      	lsls	r2, r2, #31
 800a92a:	bf1c      	itt	ne
 800a92c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800a930:	f800 3b01 	strbne.w	r3, [r0], #1
 800a934:	d301      	bcc.n	800a93a <memcpy+0x9a>
 800a936:	880b      	ldrh	r3, [r1, #0]
 800a938:	8003      	strh	r3, [r0, #0]
 800a93a:	4660      	mov	r0, ip
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	2a08      	cmp	r2, #8
 800a942:	d313      	bcc.n	800a96c <memcpy+0xcc>
 800a944:	078b      	lsls	r3, r1, #30
 800a946:	d0b1      	beq.n	800a8ac <memcpy+0xc>
 800a948:	f010 0303 	ands.w	r3, r0, #3
 800a94c:	d0ae      	beq.n	800a8ac <memcpy+0xc>
 800a94e:	f1c3 0304 	rsb	r3, r3, #4
 800a952:	1ad2      	subs	r2, r2, r3
 800a954:	07db      	lsls	r3, r3, #31
 800a956:	bf1c      	itt	ne
 800a958:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800a95c:	f800 3b01 	strbne.w	r3, [r0], #1
 800a960:	d3a4      	bcc.n	800a8ac <memcpy+0xc>
 800a962:	f831 3b02 	ldrh.w	r3, [r1], #2
 800a966:	f820 3b02 	strh.w	r3, [r0], #2
 800a96a:	e79f      	b.n	800a8ac <memcpy+0xc>
 800a96c:	3a04      	subs	r2, #4
 800a96e:	d3d9      	bcc.n	800a924 <memcpy+0x84>
 800a970:	3a01      	subs	r2, #1
 800a972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a976:	f800 3b01 	strb.w	r3, [r0], #1
 800a97a:	d2f9      	bcs.n	800a970 <memcpy+0xd0>
 800a97c:	780b      	ldrb	r3, [r1, #0]
 800a97e:	7003      	strb	r3, [r0, #0]
 800a980:	784b      	ldrb	r3, [r1, #1]
 800a982:	7043      	strb	r3, [r0, #1]
 800a984:	788b      	ldrb	r3, [r1, #2]
 800a986:	7083      	strb	r3, [r0, #2]
 800a988:	4660      	mov	r0, ip
 800a98a:	4770      	bx	lr

0800a98c <memmove>:
 800a98c:	4288      	cmp	r0, r1
 800a98e:	b4f0      	push	{r4, r5, r6, r7}
 800a990:	d910      	bls.n	800a9b4 <memmove+0x28>
 800a992:	188c      	adds	r4, r1, r2
 800a994:	42a0      	cmp	r0, r4
 800a996:	d20d      	bcs.n	800a9b4 <memmove+0x28>
 800a998:	1885      	adds	r5, r0, r2
 800a99a:	1e53      	subs	r3, r2, #1
 800a99c:	b142      	cbz	r2, 800a9b0 <memmove+0x24>
 800a99e:	4621      	mov	r1, r4
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ac:	1c5c      	adds	r4, r3, #1
 800a9ae:	d1f8      	bne.n	800a9a2 <memmove+0x16>
 800a9b0:	bcf0      	pop	{r4, r5, r6, r7}
 800a9b2:	4770      	bx	lr
 800a9b4:	2a0f      	cmp	r2, #15
 800a9b6:	d944      	bls.n	800aa42 <memmove+0xb6>
 800a9b8:	ea40 0301 	orr.w	r3, r0, r1
 800a9bc:	079b      	lsls	r3, r3, #30
 800a9be:	d144      	bne.n	800aa4a <memmove+0xbe>
 800a9c0:	f1a2 0710 	sub.w	r7, r2, #16
 800a9c4:	093f      	lsrs	r7, r7, #4
 800a9c6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800a9ca:	3610      	adds	r6, #16
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6825      	ldr	r5, [r4, #0]
 800a9d2:	3310      	adds	r3, #16
 800a9d4:	f843 5c10 	str.w	r5, [r3, #-16]
 800a9d8:	6865      	ldr	r5, [r4, #4]
 800a9da:	3410      	adds	r4, #16
 800a9dc:	f843 5c0c 	str.w	r5, [r3, #-12]
 800a9e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a9e4:	f843 5c08 	str.w	r5, [r3, #-8]
 800a9e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a9ec:	f843 5c04 	str.w	r5, [r3, #-4]
 800a9f0:	42b3      	cmp	r3, r6
 800a9f2:	d1ed      	bne.n	800a9d0 <memmove+0x44>
 800a9f4:	1c7b      	adds	r3, r7, #1
 800a9f6:	f002 0c0f 	and.w	ip, r2, #15
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	f1bc 0f03 	cmp.w	ip, #3
 800aa00:	4419      	add	r1, r3
 800aa02:	4403      	add	r3, r0
 800aa04:	d923      	bls.n	800aa4e <memmove+0xc2>
 800aa06:	460e      	mov	r6, r1
 800aa08:	461d      	mov	r5, r3
 800aa0a:	4664      	mov	r4, ip
 800aa0c:	f856 7b04 	ldr.w	r7, [r6], #4
 800aa10:	3c04      	subs	r4, #4
 800aa12:	2c03      	cmp	r4, #3
 800aa14:	f845 7b04 	str.w	r7, [r5], #4
 800aa18:	d8f8      	bhi.n	800aa0c <memmove+0x80>
 800aa1a:	f1ac 0404 	sub.w	r4, ip, #4
 800aa1e:	f024 0403 	bic.w	r4, r4, #3
 800aa22:	3404      	adds	r4, #4
 800aa24:	f002 0203 	and.w	r2, r2, #3
 800aa28:	4423      	add	r3, r4
 800aa2a:	4421      	add	r1, r4
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	d0bf      	beq.n	800a9b0 <memmove+0x24>
 800aa30:	441a      	add	r2, r3
 800aa32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa36:	f803 4b01 	strb.w	r4, [r3], #1
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d1f9      	bne.n	800aa32 <memmove+0xa6>
 800aa3e:	bcf0      	pop	{r4, r5, r6, r7}
 800aa40:	4770      	bx	lr
 800aa42:	4603      	mov	r3, r0
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	d1f3      	bne.n	800aa30 <memmove+0xa4>
 800aa48:	e7b2      	b.n	800a9b0 <memmove+0x24>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	e7f0      	b.n	800aa30 <memmove+0xa4>
 800aa4e:	4662      	mov	r2, ip
 800aa50:	2a00      	cmp	r2, #0
 800aa52:	d1ed      	bne.n	800aa30 <memmove+0xa4>
 800aa54:	e7ac      	b.n	800a9b0 <memmove+0x24>
 800aa56:	bf00      	nop

0800aa58 <memset>:
 800aa58:	b4f0      	push	{r4, r5, r6, r7}
 800aa5a:	0784      	lsls	r4, r0, #30
 800aa5c:	d043      	beq.n	800aae6 <memset+0x8e>
 800aa5e:	1e54      	subs	r4, r2, #1
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d03e      	beq.n	800aae2 <memset+0x8a>
 800aa64:	b2cd      	uxtb	r5, r1
 800aa66:	4603      	mov	r3, r0
 800aa68:	e003      	b.n	800aa72 <memset+0x1a>
 800aa6a:	1e62      	subs	r2, r4, #1
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	d038      	beq.n	800aae2 <memset+0x8a>
 800aa70:	4614      	mov	r4, r2
 800aa72:	f803 5b01 	strb.w	r5, [r3], #1
 800aa76:	079a      	lsls	r2, r3, #30
 800aa78:	d1f7      	bne.n	800aa6a <memset+0x12>
 800aa7a:	2c03      	cmp	r4, #3
 800aa7c:	d92a      	bls.n	800aad4 <memset+0x7c>
 800aa7e:	b2cd      	uxtb	r5, r1
 800aa80:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800aa84:	2c0f      	cmp	r4, #15
 800aa86:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800aa8a:	d915      	bls.n	800aab8 <memset+0x60>
 800aa8c:	f1a4 0710 	sub.w	r7, r4, #16
 800aa90:	093f      	lsrs	r7, r7, #4
 800aa92:	f103 0610 	add.w	r6, r3, #16
 800aa96:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6015      	str	r5, [r2, #0]
 800aa9e:	6055      	str	r5, [r2, #4]
 800aaa0:	6095      	str	r5, [r2, #8]
 800aaa2:	60d5      	str	r5, [r2, #12]
 800aaa4:	3210      	adds	r2, #16
 800aaa6:	42b2      	cmp	r2, r6
 800aaa8:	d1f8      	bne.n	800aa9c <memset+0x44>
 800aaaa:	f004 040f 	and.w	r4, r4, #15
 800aaae:	3701      	adds	r7, #1
 800aab0:	2c03      	cmp	r4, #3
 800aab2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800aab6:	d90d      	bls.n	800aad4 <memset+0x7c>
 800aab8:	461e      	mov	r6, r3
 800aaba:	4622      	mov	r2, r4
 800aabc:	3a04      	subs	r2, #4
 800aabe:	2a03      	cmp	r2, #3
 800aac0:	f846 5b04 	str.w	r5, [r6], #4
 800aac4:	d8fa      	bhi.n	800aabc <memset+0x64>
 800aac6:	1f22      	subs	r2, r4, #4
 800aac8:	f022 0203 	bic.w	r2, r2, #3
 800aacc:	3204      	adds	r2, #4
 800aace:	4413      	add	r3, r2
 800aad0:	f004 0403 	and.w	r4, r4, #3
 800aad4:	b12c      	cbz	r4, 800aae2 <memset+0x8a>
 800aad6:	b2c9      	uxtb	r1, r1
 800aad8:	441c      	add	r4, r3
 800aada:	f803 1b01 	strb.w	r1, [r3], #1
 800aade:	42a3      	cmp	r3, r4
 800aae0:	d1fb      	bne.n	800aada <memset+0x82>
 800aae2:	bcf0      	pop	{r4, r5, r6, r7}
 800aae4:	4770      	bx	lr
 800aae6:	4614      	mov	r4, r2
 800aae8:	4603      	mov	r3, r0
 800aaea:	e7c6      	b.n	800aa7a <memset+0x22>

0800aaec <__malloc_lock>:
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop

0800aaf0 <__malloc_unlock>:
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop

0800aaf4 <_putc_r>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	460d      	mov	r5, r1
 800aaf8:	4614      	mov	r4, r2
 800aafa:	4606      	mov	r6, r0
 800aafc:	b108      	cbz	r0, 800ab02 <_putc_r+0xe>
 800aafe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ab00:	b1d3      	cbz	r3, 800ab38 <_putc_r+0x44>
 800ab02:	68a3      	ldr	r3, [r4, #8]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	60a3      	str	r3, [r4, #8]
 800ab0a:	db06      	blt.n	800ab1a <_putc_r+0x26>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	701d      	strb	r5, [r3, #0]
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	6022      	str	r2, [r4, #0]
 800ab16:	7818      	ldrb	r0, [r3, #0]
 800ab18:	bd70      	pop	{r4, r5, r6, pc}
 800ab1a:	69a2      	ldr	r2, [r4, #24]
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	db0e      	blt.n	800ab3e <_putc_r+0x4a>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	701d      	strb	r5, [r3, #0]
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	7819      	ldrb	r1, [r3, #0]
 800ab28:	290a      	cmp	r1, #10
 800ab2a:	d1f2      	bne.n	800ab12 <_putc_r+0x1e>
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4622      	mov	r2, r4
 800ab30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab34:	f000 bda8 	b.w	800b688 <__swbuf_r>
 800ab38:	f000 ff80 	bl	800ba3c <__sinit>
 800ab3c:	e7e1      	b.n	800ab02 <_putc_r+0xe>
 800ab3e:	4630      	mov	r0, r6
 800ab40:	4629      	mov	r1, r5
 800ab42:	4622      	mov	r2, r4
 800ab44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab48:	f000 bd9e 	b.w	800b688 <__swbuf_r>

0800ab4c <realloc>:
 800ab4c:	4b02      	ldr	r3, [pc, #8]	; (800ab58 <realloc+0xc>)
 800ab4e:	460a      	mov	r2, r1
 800ab50:	4601      	mov	r1, r0
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	f000 b802 	b.w	800ab5c <_realloc_r>
 800ab58:	20000448 	.word	0x20000448

0800ab5c <_realloc_r>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	460c      	mov	r4, r1
 800ab62:	b083      	sub	sp, #12
 800ab64:	4690      	mov	r8, r2
 800ab66:	4681      	mov	r9, r0
 800ab68:	2900      	cmp	r1, #0
 800ab6a:	f000 80ba 	beq.w	800ace2 <_realloc_r+0x186>
 800ab6e:	f7ff ffbd 	bl	800aaec <__malloc_lock>
 800ab72:	f108 060b 	add.w	r6, r8, #11
 800ab76:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ab7a:	2e16      	cmp	r6, #22
 800ab7c:	f023 0503 	bic.w	r5, r3, #3
 800ab80:	f1a4 0708 	sub.w	r7, r4, #8
 800ab84:	d84b      	bhi.n	800ac1e <_realloc_r+0xc2>
 800ab86:	2110      	movs	r1, #16
 800ab88:	460e      	mov	r6, r1
 800ab8a:	45b0      	cmp	r8, r6
 800ab8c:	d84c      	bhi.n	800ac28 <_realloc_r+0xcc>
 800ab8e:	428d      	cmp	r5, r1
 800ab90:	da51      	bge.n	800ac36 <_realloc_r+0xda>
 800ab92:	f8df b384 	ldr.w	fp, [pc, #900]	; 800af18 <_realloc_r+0x3bc>
 800ab96:	1978      	adds	r0, r7, r5
 800ab98:	f8db e008 	ldr.w	lr, [fp, #8]
 800ab9c:	4586      	cmp	lr, r0
 800ab9e:	f000 80a6 	beq.w	800acee <_realloc_r+0x192>
 800aba2:	6842      	ldr	r2, [r0, #4]
 800aba4:	f022 0c01 	bic.w	ip, r2, #1
 800aba8:	4484      	add	ip, r0
 800abaa:	f8dc c004 	ldr.w	ip, [ip, #4]
 800abae:	f01c 0f01 	tst.w	ip, #1
 800abb2:	d054      	beq.n	800ac5e <_realloc_r+0x102>
 800abb4:	2200      	movs	r2, #0
 800abb6:	4610      	mov	r0, r2
 800abb8:	07db      	lsls	r3, r3, #31
 800abba:	d46f      	bmi.n	800ac9c <_realloc_r+0x140>
 800abbc:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800abc0:	ebc3 0a07 	rsb	sl, r3, r7
 800abc4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800abc8:	f023 0303 	bic.w	r3, r3, #3
 800abcc:	442b      	add	r3, r5
 800abce:	2800      	cmp	r0, #0
 800abd0:	d062      	beq.n	800ac98 <_realloc_r+0x13c>
 800abd2:	4570      	cmp	r0, lr
 800abd4:	f000 80e9 	beq.w	800adaa <_realloc_r+0x24e>
 800abd8:	eb02 0e03 	add.w	lr, r2, r3
 800abdc:	458e      	cmp	lr, r1
 800abde:	db5b      	blt.n	800ac98 <_realloc_r+0x13c>
 800abe0:	68c3      	ldr	r3, [r0, #12]
 800abe2:	6882      	ldr	r2, [r0, #8]
 800abe4:	46d0      	mov	r8, sl
 800abe6:	60d3      	str	r3, [r2, #12]
 800abe8:	609a      	str	r2, [r3, #8]
 800abea:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800abee:	f8da 300c 	ldr.w	r3, [sl, #12]
 800abf2:	1f2a      	subs	r2, r5, #4
 800abf4:	2a24      	cmp	r2, #36	; 0x24
 800abf6:	60cb      	str	r3, [r1, #12]
 800abf8:	6099      	str	r1, [r3, #8]
 800abfa:	f200 8123 	bhi.w	800ae44 <_realloc_r+0x2e8>
 800abfe:	2a13      	cmp	r2, #19
 800ac00:	f240 80b0 	bls.w	800ad64 <_realloc_r+0x208>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	2a1b      	cmp	r2, #27
 800ac08:	f8ca 3008 	str.w	r3, [sl, #8]
 800ac0c:	6863      	ldr	r3, [r4, #4]
 800ac0e:	f8ca 300c 	str.w	r3, [sl, #12]
 800ac12:	f200 812b 	bhi.w	800ae6c <_realloc_r+0x310>
 800ac16:	3408      	adds	r4, #8
 800ac18:	f10a 0310 	add.w	r3, sl, #16
 800ac1c:	e0a3      	b.n	800ad66 <_realloc_r+0x20a>
 800ac1e:	f026 0607 	bic.w	r6, r6, #7
 800ac22:	2e00      	cmp	r6, #0
 800ac24:	4631      	mov	r1, r6
 800ac26:	dab0      	bge.n	800ab8a <_realloc_r+0x2e>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f8c9 3000 	str.w	r3, [r9]
 800ac30:	b003      	add	sp, #12
 800ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac36:	46a0      	mov	r8, r4
 800ac38:	1baa      	subs	r2, r5, r6
 800ac3a:	2a0f      	cmp	r2, #15
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	d81a      	bhi.n	800ac78 <_realloc_r+0x11c>
 800ac42:	432b      	orrs	r3, r5
 800ac44:	607b      	str	r3, [r7, #4]
 800ac46:	443d      	add	r5, r7
 800ac48:	686b      	ldr	r3, [r5, #4]
 800ac4a:	f043 0301 	orr.w	r3, r3, #1
 800ac4e:	606b      	str	r3, [r5, #4]
 800ac50:	4648      	mov	r0, r9
 800ac52:	f7ff ff4d 	bl	800aaf0 <__malloc_unlock>
 800ac56:	4640      	mov	r0, r8
 800ac58:	b003      	add	sp, #12
 800ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5e:	f022 0203 	bic.w	r2, r2, #3
 800ac62:	eb02 0c05 	add.w	ip, r2, r5
 800ac66:	458c      	cmp	ip, r1
 800ac68:	dba6      	blt.n	800abb8 <_realloc_r+0x5c>
 800ac6a:	68c2      	ldr	r2, [r0, #12]
 800ac6c:	6881      	ldr	r1, [r0, #8]
 800ac6e:	46a0      	mov	r8, r4
 800ac70:	60ca      	str	r2, [r1, #12]
 800ac72:	4665      	mov	r5, ip
 800ac74:	6091      	str	r1, [r2, #8]
 800ac76:	e7df      	b.n	800ac38 <_realloc_r+0xdc>
 800ac78:	19b9      	adds	r1, r7, r6
 800ac7a:	4333      	orrs	r3, r6
 800ac7c:	f042 0001 	orr.w	r0, r2, #1
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	440a      	add	r2, r1
 800ac84:	6048      	str	r0, [r1, #4]
 800ac86:	6853      	ldr	r3, [r2, #4]
 800ac88:	3108      	adds	r1, #8
 800ac8a:	f043 0301 	orr.w	r3, r3, #1
 800ac8e:	6053      	str	r3, [r2, #4]
 800ac90:	4648      	mov	r0, r9
 800ac92:	f000 ff9f 	bl	800bbd4 <_free_r>
 800ac96:	e7db      	b.n	800ac50 <_realloc_r+0xf4>
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	da33      	bge.n	800ad04 <_realloc_r+0x1a8>
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	4648      	mov	r0, r9
 800aca0:	f7ff fae4 	bl	800a26c <_malloc_r>
 800aca4:	4680      	mov	r8, r0
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d0d2      	beq.n	800ac50 <_realloc_r+0xf4>
 800acaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800acae:	f1a0 0108 	sub.w	r1, r0, #8
 800acb2:	f023 0201 	bic.w	r2, r3, #1
 800acb6:	443a      	add	r2, r7
 800acb8:	4291      	cmp	r1, r2
 800acba:	f000 80bc 	beq.w	800ae36 <_realloc_r+0x2da>
 800acbe:	1f2a      	subs	r2, r5, #4
 800acc0:	2a24      	cmp	r2, #36	; 0x24
 800acc2:	d86e      	bhi.n	800ada2 <_realloc_r+0x246>
 800acc4:	2a13      	cmp	r2, #19
 800acc6:	d842      	bhi.n	800ad4e <_realloc_r+0x1f2>
 800acc8:	4603      	mov	r3, r0
 800acca:	4622      	mov	r2, r4
 800accc:	6811      	ldr	r1, [r2, #0]
 800acce:	6019      	str	r1, [r3, #0]
 800acd0:	6851      	ldr	r1, [r2, #4]
 800acd2:	6059      	str	r1, [r3, #4]
 800acd4:	6892      	ldr	r2, [r2, #8]
 800acd6:	609a      	str	r2, [r3, #8]
 800acd8:	4621      	mov	r1, r4
 800acda:	4648      	mov	r0, r9
 800acdc:	f000 ff7a 	bl	800bbd4 <_free_r>
 800ace0:	e7b6      	b.n	800ac50 <_realloc_r+0xf4>
 800ace2:	4611      	mov	r1, r2
 800ace4:	b003      	add	sp, #12
 800ace6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acea:	f7ff babf 	b.w	800a26c <_malloc_r>
 800acee:	f8de 2004 	ldr.w	r2, [lr, #4]
 800acf2:	f106 0c10 	add.w	ip, r6, #16
 800acf6:	f022 0203 	bic.w	r2, r2, #3
 800acfa:	1950      	adds	r0, r2, r5
 800acfc:	4560      	cmp	r0, ip
 800acfe:	da3d      	bge.n	800ad7c <_realloc_r+0x220>
 800ad00:	4670      	mov	r0, lr
 800ad02:	e759      	b.n	800abb8 <_realloc_r+0x5c>
 800ad04:	46d0      	mov	r8, sl
 800ad06:	f858 0f08 	ldr.w	r0, [r8, #8]!
 800ad0a:	f8da 100c 	ldr.w	r1, [sl, #12]
 800ad0e:	1f2a      	subs	r2, r5, #4
 800ad10:	2a24      	cmp	r2, #36	; 0x24
 800ad12:	60c1      	str	r1, [r0, #12]
 800ad14:	6088      	str	r0, [r1, #8]
 800ad16:	f200 80a0 	bhi.w	800ae5a <_realloc_r+0x2fe>
 800ad1a:	2a13      	cmp	r2, #19
 800ad1c:	f240 809b 	bls.w	800ae56 <_realloc_r+0x2fa>
 800ad20:	6821      	ldr	r1, [r4, #0]
 800ad22:	2a1b      	cmp	r2, #27
 800ad24:	f8ca 1008 	str.w	r1, [sl, #8]
 800ad28:	6861      	ldr	r1, [r4, #4]
 800ad2a:	f8ca 100c 	str.w	r1, [sl, #12]
 800ad2e:	f200 80b2 	bhi.w	800ae96 <_realloc_r+0x33a>
 800ad32:	3408      	adds	r4, #8
 800ad34:	f10a 0210 	add.w	r2, sl, #16
 800ad38:	6821      	ldr	r1, [r4, #0]
 800ad3a:	461d      	mov	r5, r3
 800ad3c:	6011      	str	r1, [r2, #0]
 800ad3e:	6861      	ldr	r1, [r4, #4]
 800ad40:	4657      	mov	r7, sl
 800ad42:	6051      	str	r1, [r2, #4]
 800ad44:	68a3      	ldr	r3, [r4, #8]
 800ad46:	6093      	str	r3, [r2, #8]
 800ad48:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ad4c:	e774      	b.n	800ac38 <_realloc_r+0xdc>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	2a1b      	cmp	r2, #27
 800ad52:	6003      	str	r3, [r0, #0]
 800ad54:	6863      	ldr	r3, [r4, #4]
 800ad56:	6043      	str	r3, [r0, #4]
 800ad58:	d862      	bhi.n	800ae20 <_realloc_r+0x2c4>
 800ad5a:	f100 0308 	add.w	r3, r0, #8
 800ad5e:	f104 0208 	add.w	r2, r4, #8
 800ad62:	e7b3      	b.n	800accc <_realloc_r+0x170>
 800ad64:	4643      	mov	r3, r8
 800ad66:	6822      	ldr	r2, [r4, #0]
 800ad68:	4675      	mov	r5, lr
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	6862      	ldr	r2, [r4, #4]
 800ad6e:	4657      	mov	r7, sl
 800ad70:	605a      	str	r2, [r3, #4]
 800ad72:	68a2      	ldr	r2, [r4, #8]
 800ad74:	609a      	str	r2, [r3, #8]
 800ad76:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ad7a:	e75d      	b.n	800ac38 <_realloc_r+0xdc>
 800ad7c:	1b83      	subs	r3, r0, r6
 800ad7e:	4437      	add	r7, r6
 800ad80:	f043 0301 	orr.w	r3, r3, #1
 800ad84:	f8cb 7008 	str.w	r7, [fp, #8]
 800ad88:	607b      	str	r3, [r7, #4]
 800ad8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad8e:	4648      	mov	r0, r9
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	431e      	orrs	r6, r3
 800ad96:	f844 6c04 	str.w	r6, [r4, #-4]
 800ad9a:	f7ff fea9 	bl	800aaf0 <__malloc_unlock>
 800ad9e:	4620      	mov	r0, r4
 800ada0:	e75a      	b.n	800ac58 <_realloc_r+0xfc>
 800ada2:	4621      	mov	r1, r4
 800ada4:	f7ff fdf2 	bl	800a98c <memmove>
 800ada8:	e796      	b.n	800acd8 <_realloc_r+0x17c>
 800adaa:	eb02 0c03 	add.w	ip, r2, r3
 800adae:	f106 0210 	add.w	r2, r6, #16
 800adb2:	4594      	cmp	ip, r2
 800adb4:	f6ff af70 	blt.w	800ac98 <_realloc_r+0x13c>
 800adb8:	4657      	mov	r7, sl
 800adba:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800adbe:	f8da 300c 	ldr.w	r3, [sl, #12]
 800adc2:	1f2a      	subs	r2, r5, #4
 800adc4:	2a24      	cmp	r2, #36	; 0x24
 800adc6:	60cb      	str	r3, [r1, #12]
 800adc8:	6099      	str	r1, [r3, #8]
 800adca:	f200 8086 	bhi.w	800aeda <_realloc_r+0x37e>
 800adce:	2a13      	cmp	r2, #19
 800add0:	d977      	bls.n	800aec2 <_realloc_r+0x366>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	2a1b      	cmp	r2, #27
 800add6:	f8ca 3008 	str.w	r3, [sl, #8]
 800adda:	6863      	ldr	r3, [r4, #4]
 800addc:	f8ca 300c 	str.w	r3, [sl, #12]
 800ade0:	f200 8084 	bhi.w	800aeec <_realloc_r+0x390>
 800ade4:	3408      	adds	r4, #8
 800ade6:	f10a 0310 	add.w	r3, sl, #16
 800adea:	6822      	ldr	r2, [r4, #0]
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	68a2      	ldr	r2, [r4, #8]
 800adf4:	609a      	str	r2, [r3, #8]
 800adf6:	ebc6 020c 	rsb	r2, r6, ip
 800adfa:	eb0a 0306 	add.w	r3, sl, r6
 800adfe:	f042 0201 	orr.w	r2, r2, #1
 800ae02:	f8cb 3008 	str.w	r3, [fp, #8]
 800ae06:	605a      	str	r2, [r3, #4]
 800ae08:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ae0c:	4648      	mov	r0, r9
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	431e      	orrs	r6, r3
 800ae14:	f8ca 6004 	str.w	r6, [sl, #4]
 800ae18:	f7ff fe6a 	bl	800aaf0 <__malloc_unlock>
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	e71b      	b.n	800ac58 <_realloc_r+0xfc>
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	2a24      	cmp	r2, #36	; 0x24
 800ae24:	6083      	str	r3, [r0, #8]
 800ae26:	68e3      	ldr	r3, [r4, #12]
 800ae28:	60c3      	str	r3, [r0, #12]
 800ae2a:	d02b      	beq.n	800ae84 <_realloc_r+0x328>
 800ae2c:	f100 0310 	add.w	r3, r0, #16
 800ae30:	f104 0210 	add.w	r2, r4, #16
 800ae34:	e74a      	b.n	800accc <_realloc_r+0x170>
 800ae36:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ae3a:	46a0      	mov	r8, r4
 800ae3c:	f022 0203 	bic.w	r2, r2, #3
 800ae40:	4415      	add	r5, r2
 800ae42:	e6f9      	b.n	800ac38 <_realloc_r+0xdc>
 800ae44:	4621      	mov	r1, r4
 800ae46:	4640      	mov	r0, r8
 800ae48:	4675      	mov	r5, lr
 800ae4a:	4657      	mov	r7, sl
 800ae4c:	f7ff fd9e 	bl	800a98c <memmove>
 800ae50:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ae54:	e6f0      	b.n	800ac38 <_realloc_r+0xdc>
 800ae56:	4642      	mov	r2, r8
 800ae58:	e76e      	b.n	800ad38 <_realloc_r+0x1dc>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	461d      	mov	r5, r3
 800ae60:	4657      	mov	r7, sl
 800ae62:	f7ff fd93 	bl	800a98c <memmove>
 800ae66:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ae6a:	e6e5      	b.n	800ac38 <_realloc_r+0xdc>
 800ae6c:	68a3      	ldr	r3, [r4, #8]
 800ae6e:	2a24      	cmp	r2, #36	; 0x24
 800ae70:	f8ca 3010 	str.w	r3, [sl, #16]
 800ae74:	68e3      	ldr	r3, [r4, #12]
 800ae76:	f8ca 3014 	str.w	r3, [sl, #20]
 800ae7a:	d018      	beq.n	800aeae <_realloc_r+0x352>
 800ae7c:	3410      	adds	r4, #16
 800ae7e:	f10a 0318 	add.w	r3, sl, #24
 800ae82:	e770      	b.n	800ad66 <_realloc_r+0x20a>
 800ae84:	6922      	ldr	r2, [r4, #16]
 800ae86:	f100 0318 	add.w	r3, r0, #24
 800ae8a:	6102      	str	r2, [r0, #16]
 800ae8c:	6961      	ldr	r1, [r4, #20]
 800ae8e:	f104 0218 	add.w	r2, r4, #24
 800ae92:	6141      	str	r1, [r0, #20]
 800ae94:	e71a      	b.n	800accc <_realloc_r+0x170>
 800ae96:	68a1      	ldr	r1, [r4, #8]
 800ae98:	2a24      	cmp	r2, #36	; 0x24
 800ae9a:	f8ca 1010 	str.w	r1, [sl, #16]
 800ae9e:	68e1      	ldr	r1, [r4, #12]
 800aea0:	f8ca 1014 	str.w	r1, [sl, #20]
 800aea4:	d00f      	beq.n	800aec6 <_realloc_r+0x36a>
 800aea6:	3410      	adds	r4, #16
 800aea8:	f10a 0218 	add.w	r2, sl, #24
 800aeac:	e744      	b.n	800ad38 <_realloc_r+0x1dc>
 800aeae:	6922      	ldr	r2, [r4, #16]
 800aeb0:	f10a 0320 	add.w	r3, sl, #32
 800aeb4:	f8ca 2018 	str.w	r2, [sl, #24]
 800aeb8:	6962      	ldr	r2, [r4, #20]
 800aeba:	3418      	adds	r4, #24
 800aebc:	f8ca 201c 	str.w	r2, [sl, #28]
 800aec0:	e751      	b.n	800ad66 <_realloc_r+0x20a>
 800aec2:	463b      	mov	r3, r7
 800aec4:	e791      	b.n	800adea <_realloc_r+0x28e>
 800aec6:	6921      	ldr	r1, [r4, #16]
 800aec8:	f10a 0220 	add.w	r2, sl, #32
 800aecc:	f8ca 1018 	str.w	r1, [sl, #24]
 800aed0:	6961      	ldr	r1, [r4, #20]
 800aed2:	3418      	adds	r4, #24
 800aed4:	f8ca 101c 	str.w	r1, [sl, #28]
 800aed8:	e72e      	b.n	800ad38 <_realloc_r+0x1dc>
 800aeda:	4621      	mov	r1, r4
 800aedc:	4638      	mov	r0, r7
 800aede:	f8cd c004 	str.w	ip, [sp, #4]
 800aee2:	f7ff fd53 	bl	800a98c <memmove>
 800aee6:	f8dd c004 	ldr.w	ip, [sp, #4]
 800aeea:	e784      	b.n	800adf6 <_realloc_r+0x29a>
 800aeec:	68a3      	ldr	r3, [r4, #8]
 800aeee:	2a24      	cmp	r2, #36	; 0x24
 800aef0:	f8ca 3010 	str.w	r3, [sl, #16]
 800aef4:	68e3      	ldr	r3, [r4, #12]
 800aef6:	f8ca 3014 	str.w	r3, [sl, #20]
 800aefa:	d003      	beq.n	800af04 <_realloc_r+0x3a8>
 800aefc:	3410      	adds	r4, #16
 800aefe:	f10a 0318 	add.w	r3, sl, #24
 800af02:	e772      	b.n	800adea <_realloc_r+0x28e>
 800af04:	6922      	ldr	r2, [r4, #16]
 800af06:	f10a 0320 	add.w	r3, sl, #32
 800af0a:	f8ca 2018 	str.w	r2, [sl, #24]
 800af0e:	6962      	ldr	r2, [r4, #20]
 800af10:	3418      	adds	r4, #24
 800af12:	f8ca 201c 	str.w	r2, [sl, #28]
 800af16:	e768      	b.n	800adea <_realloc_r+0x28e>
 800af18:	2000044c 	.word	0x2000044c

0800af1c <_raise_r>:
 800af1c:	291f      	cmp	r1, #31
 800af1e:	b538      	push	{r3, r4, r5, lr}
 800af20:	460c      	mov	r4, r1
 800af22:	4605      	mov	r5, r0
 800af24:	d820      	bhi.n	800af68 <_raise_r+0x4c>
 800af26:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800af2a:	b19a      	cbz	r2, 800af54 <_raise_r+0x38>
 800af2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af30:	b183      	cbz	r3, 800af54 <_raise_r+0x38>
 800af32:	2b01      	cmp	r3, #1
 800af34:	d00c      	beq.n	800af50 <_raise_r+0x34>
 800af36:	1c59      	adds	r1, r3, #1
 800af38:	d006      	beq.n	800af48 <_raise_r+0x2c>
 800af3a:	2500      	movs	r5, #0
 800af3c:	4620      	mov	r0, r4
 800af3e:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800af42:	4798      	blx	r3
 800af44:	4628      	mov	r0, r5
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	2316      	movs	r3, #22
 800af4a:	6003      	str	r3, [r0, #0]
 800af4c:	2001      	movs	r0, #1
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	2000      	movs	r0, #0
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	4628      	mov	r0, r5
 800af56:	f7f5 ff05 	bl	8000d64 <_getpid_r>
 800af5a:	4622      	mov	r2, r4
 800af5c:	4601      	mov	r1, r0
 800af5e:	4628      	mov	r0, r5
 800af60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af64:	f7f5 bf16 	b.w	8000d94 <_kill_r>
 800af68:	2316      	movs	r3, #22
 800af6a:	6003      	str	r3, [r0, #0]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	bf00      	nop

0800af74 <raise>:
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <raise+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f7ff bfcf 	b.w	800af1c <_raise_r>
 800af7e:	bf00      	nop
 800af80:	20000448 	.word	0x20000448

0800af84 <strcmp>:
 800af84:	ea40 0c01 	orr.w	ip, r0, r1
 800af88:	f01c 0f07 	tst.w	ip, #7
 800af8c:	d127      	bne.n	800afde <strcmp+0x5a>
 800af8e:	f1bd 0d10 	subs.w	sp, sp, #16
 800af92:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800af96:	e9cd 6700 	strd	r6, r7, [sp]
 800af9a:	f06f 0600 	mvn.w	r6, #0
 800af9e:	f04f 0700 	mov.w	r7, #0
 800afa2:	bf00      	nop
 800afa4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800afa8:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800afac:	42a2      	cmp	r2, r4
 800afae:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800afb2:	ea2c 0c02 	bic.w	ip, ip, r2
 800afb6:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800afba:	bf08      	it	eq
 800afbc:	f1bc 0f00 	cmpeq.w	ip, #0
 800afc0:	f040 80e5 	bne.w	800b18e <strcmp+0x20a>
 800afc4:	42ab      	cmp	r3, r5
 800afc6:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800afca:	ea2c 0c03 	bic.w	ip, ip, r3
 800afce:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800afd2:	bf08      	it	eq
 800afd4:	f1bc 0f00 	cmpeq.w	ip, #0
 800afd8:	f040 80d6 	bne.w	800b188 <strcmp+0x204>
 800afdc:	e7e2      	b.n	800afa4 <strcmp+0x20>
 800afde:	f010 0c03 	ands.w	ip, r0, #3
 800afe2:	d021      	beq.n	800b028 <strcmp+0xa4>
 800afe4:	f020 0003 	bic.w	r0, r0, #3
 800afe8:	f850 2b04 	ldr.w	r2, [r0], #4
 800afec:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 800aff0:	d008      	beq.n	800b004 <strcmp+0x80>
 800aff2:	d20f      	bcs.n	800b014 <strcmp+0x90>
 800aff4:	f811 cb01 	ldrb.w	ip, [r1], #1
 800aff8:	fa5f f392 	uxtb.w	r3, r2, ror #8
 800affc:	ebb3 0c0c 	subs.w	ip, r3, ip
 800b000:	d110      	bne.n	800b024 <strcmp+0xa0>
 800b002:	b17b      	cbz	r3, 800b024 <strcmp+0xa0>
 800b004:	f811 cb01 	ldrb.w	ip, [r1], #1
 800b008:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 800b00c:	ebb3 0c0c 	subs.w	ip, r3, ip
 800b010:	d108      	bne.n	800b024 <strcmp+0xa0>
 800b012:	b13b      	cbz	r3, 800b024 <strcmp+0xa0>
 800b014:	f811 cb01 	ldrb.w	ip, [r1], #1
 800b018:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 800b01c:	ebb3 0c0c 	subs.w	ip, r3, ip
 800b020:	d100      	bne.n	800b024 <strcmp+0xa0>
 800b022:	b90b      	cbnz	r3, 800b028 <strcmp+0xa4>
 800b024:	4660      	mov	r0, ip
 800b026:	4770      	bx	lr
 800b028:	f1bd 0d10 	subs.w	sp, sp, #16
 800b02c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b030:	e9cd 6700 	strd	r6, r7, [sp]
 800b034:	f06f 0600 	mvn.w	r6, #0
 800b038:	f04f 0700 	mov.w	r7, #0
 800b03c:	f011 0c03 	ands.w	ip, r1, #3
 800b040:	d133      	bne.n	800b0aa <strcmp+0x126>
 800b042:	f010 0f04 	tst.w	r0, #4
 800b046:	d00f      	beq.n	800b068 <strcmp+0xe4>
 800b048:	f850 2b04 	ldr.w	r2, [r0], #4
 800b04c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b050:	42a2      	cmp	r2, r4
 800b052:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800b056:	ea2c 0c02 	bic.w	ip, ip, r2
 800b05a:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b05e:	bf08      	it	eq
 800b060:	f1bc 0f00 	cmpeq.w	ip, #0
 800b064:	f040 8093 	bne.w	800b18e <strcmp+0x20a>
 800b068:	f011 0f04 	tst.w	r1, #4
 800b06c:	d099      	beq.n	800afa2 <strcmp+0x1e>
 800b06e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b072:	bf00      	nop
 800b074:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800b078:	42aa      	cmp	r2, r5
 800b07a:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800b07e:	ea2c 0c02 	bic.w	ip, ip, r2
 800b082:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b086:	bf08      	it	eq
 800b088:	f1bc 0f00 	cmpeq.w	ip, #0
 800b08c:	d179      	bne.n	800b182 <strcmp+0x1fe>
 800b08e:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800b092:	42a3      	cmp	r3, r4
 800b094:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b098:	ea2c 0c03 	bic.w	ip, ip, r3
 800b09c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b0a0:	bf08      	it	eq
 800b0a2:	f1bc 0f00 	cmpeq.w	ip, #0
 800b0a6:	d169      	bne.n	800b17c <strcmp+0x1f8>
 800b0a8:	e7e4      	b.n	800b074 <strcmp+0xf0>
 800b0aa:	f021 0103 	bic.w	r1, r1, #3
 800b0ae:	f1bc 0f02 	cmp.w	ip, #2
 800b0b2:	d020      	beq.n	800b0f6 <strcmp+0x172>
 800b0b4:	da3f      	bge.n	800b136 <strcmp+0x1b2>
 800b0b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0ba:	bf00      	nop
 800b0bc:	f850 3b04 	ldr.w	r3, [r0], #4
 800b0c0:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800b0c4:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b0c8:	ea2c 0c03 	bic.w	ip, ip, r3
 800b0cc:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b0d0:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 800b0d4:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 800b0d8:	bf08      	it	eq
 800b0da:	42aa      	cmpeq	r2, r5
 800b0dc:	d151      	bne.n	800b182 <strcmp+0x1fe>
 800b0de:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0e2:	f1bc 0f00 	cmp.w	ip, #0
 800b0e6:	ea82 0303 	eor.w	r3, r2, r3
 800b0ea:	ea4f 6205 	mov.w	r2, r5, lsl #24
 800b0ee:	bf08      	it	eq
 800b0f0:	4293      	cmpeq	r3, r2
 800b0f2:	d140      	bne.n	800b176 <strcmp+0x1f2>
 800b0f4:	e7e2      	b.n	800b0bc <strcmp+0x138>
 800b0f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0fa:	bf00      	nop
 800b0fc:	f850 3b04 	ldr.w	r3, [r0], #4
 800b100:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800b104:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b108:	ea2c 0c03 	bic.w	ip, ip, r3
 800b10c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b110:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 800b114:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 800b118:	bf08      	it	eq
 800b11a:	42aa      	cmpeq	r2, r5
 800b11c:	d131      	bne.n	800b182 <strcmp+0x1fe>
 800b11e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b122:	f1bc 0f00 	cmp.w	ip, #0
 800b126:	ea82 0303 	eor.w	r3, r2, r3
 800b12a:	ea4f 4205 	mov.w	r2, r5, lsl #16
 800b12e:	bf08      	it	eq
 800b130:	4293      	cmpeq	r3, r2
 800b132:	d120      	bne.n	800b176 <strcmp+0x1f2>
 800b134:	e7e2      	b.n	800b0fc <strcmp+0x178>
 800b136:	f851 5b04 	ldr.w	r5, [r1], #4
 800b13a:	bf00      	nop
 800b13c:	f850 3b04 	ldr.w	r3, [r0], #4
 800b140:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800b144:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b148:	ea2c 0c03 	bic.w	ip, ip, r3
 800b14c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b150:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 800b154:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 800b158:	bf08      	it	eq
 800b15a:	42aa      	cmpeq	r2, r5
 800b15c:	d111      	bne.n	800b182 <strcmp+0x1fe>
 800b15e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b162:	f1bc 0f00 	cmp.w	ip, #0
 800b166:	ea82 0303 	eor.w	r3, r2, r3
 800b16a:	ea4f 2205 	mov.w	r2, r5, lsl #8
 800b16e:	bf08      	it	eq
 800b170:	4293      	cmpeq	r3, r2
 800b172:	d100      	bne.n	800b176 <strcmp+0x1f2>
 800b174:	e7e2      	b.n	800b13c <strcmp+0x1b8>
 800b176:	ba19      	rev	r1, r3
 800b178:	ba12      	rev	r2, r2
 800b17a:	e00a      	b.n	800b192 <strcmp+0x20e>
 800b17c:	ba19      	rev	r1, r3
 800b17e:	ba22      	rev	r2, r4
 800b180:	e007      	b.n	800b192 <strcmp+0x20e>
 800b182:	ba11      	rev	r1, r2
 800b184:	ba2a      	rev	r2, r5
 800b186:	e004      	b.n	800b192 <strcmp+0x20e>
 800b188:	ba19      	rev	r1, r3
 800b18a:	ba2a      	rev	r2, r5
 800b18c:	e001      	b.n	800b192 <strcmp+0x20e>
 800b18e:	ba11      	rev	r1, r2
 800b190:	ba22      	rev	r2, r4
 800b192:	fa9c f08c 	rev.w	r0, ip
 800b196:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b19a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b19e:	f11d 0d10 	adds.w	sp, sp, #16
 800b1a2:	b138      	cbz	r0, 800b1b4 <strcmp+0x230>
 800b1a4:	fab0 f080 	clz	r0, r0
 800b1a8:	f1c0 0018 	rsb	r0, r0, #24
 800b1ac:	fa21 f100 	lsr.w	r1, r1, r0
 800b1b0:	fa22 f200 	lsr.w	r2, r2, r0
 800b1b4:	2001      	movs	r0, #1
 800b1b6:	4291      	cmp	r1, r2
 800b1b8:	bf98      	it	ls
 800b1ba:	4180      	sbcls	r0, r0
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop

0800b1c0 <_strerror_r>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	298e      	cmp	r1, #142	; 0x8e
 800b1c6:	f200 8125 	bhi.w	800b414 <_strerror_r+0x254>
 800b1ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b1ce:	0091      	.short	0x0091
 800b1d0:	0121008f 	.word	0x0121008f
 800b1d4:	011d011f 	.word	0x011d011f
 800b1d8:	0119011b 	.word	0x0119011b
 800b1dc:	01150117 	.word	0x01150117
 800b1e0:	01110113 	.word	0x01110113
 800b1e4:	010d010f 	.word	0x010d010f
 800b1e8:	0109010b 	.word	0x0109010b
 800b1ec:	01070123 	.word	0x01070123
 800b1f0:	01030105 	.word	0x01030105
 800b1f4:	00ff0101 	.word	0x00ff0101
 800b1f8:	00fb00fd 	.word	0x00fb00fd
 800b1fc:	00f700f9 	.word	0x00f700f9
 800b200:	00f300f5 	.word	0x00f300f5
 800b204:	00ef00f1 	.word	0x00ef00f1
 800b208:	00eb00ed 	.word	0x00eb00ed
 800b20c:	00e700e9 	.word	0x00e700e9
 800b210:	00e300e5 	.word	0x00e300e5
 800b214:	00df00e1 	.word	0x00df00e1
 800b218:	01230123 	.word	0x01230123
 800b21c:	01230123 	.word	0x01230123
 800b220:	01230123 	.word	0x01230123
 800b224:	01230123 	.word	0x01230123
 800b228:	00db00dd 	.word	0x00db00dd
 800b22c:	01230123 	.word	0x01230123
 800b230:	01230123 	.word	0x01230123
 800b234:	01230123 	.word	0x01230123
 800b238:	01230123 	.word	0x01230123
 800b23c:	01230123 	.word	0x01230123
 800b240:	01230123 	.word	0x01230123
 800b244:	00d90123 	.word	0x00d90123
 800b248:	00d70123 	.word	0x00d70123
 800b24c:	012300d5 	.word	0x012300d5
 800b250:	01230123 	.word	0x01230123
 800b254:	012300d3 	.word	0x012300d3
 800b258:	01230123 	.word	0x01230123
 800b25c:	012300d1 	.word	0x012300d1
 800b260:	00cf0123 	.word	0x00cf0123
 800b264:	01230123 	.word	0x01230123
 800b268:	012300cd 	.word	0x012300cd
 800b26c:	01230123 	.word	0x01230123
 800b270:	01230123 	.word	0x01230123
 800b274:	01230123 	.word	0x01230123
 800b278:	01230123 	.word	0x01230123
 800b27c:	00cb0123 	.word	0x00cb0123
 800b280:	00c90123 	.word	0x00c90123
 800b284:	00c500c7 	.word	0x00c500c7
 800b288:	01230123 	.word	0x01230123
 800b28c:	012300c3 	.word	0x012300c3
 800b290:	01230123 	.word	0x01230123
 800b294:	01230123 	.word	0x01230123
 800b298:	01230123 	.word	0x01230123
 800b29c:	01230123 	.word	0x01230123
 800b2a0:	00bf00c1 	.word	0x00bf00c1
 800b2a4:	00bb00bd 	.word	0x00bb00bd
 800b2a8:	012300b9 	.word	0x012300b9
 800b2ac:	00b500b7 	.word	0x00b500b7
 800b2b0:	00b100b3 	.word	0x00b100b3
 800b2b4:	00ad00af 	.word	0x00ad00af
 800b2b8:	00a900ab 	.word	0x00a900ab
 800b2bc:	00a500a7 	.word	0x00a500a7
 800b2c0:	00a100a3 	.word	0x00a100a3
 800b2c4:	0123009f 	.word	0x0123009f
 800b2c8:	01230123 	.word	0x01230123
 800b2cc:	009b009d 	.word	0x009b009d
 800b2d0:	01230123 	.word	0x01230123
 800b2d4:	01230123 	.word	0x01230123
 800b2d8:	00990123 	.word	0x00990123
 800b2dc:	01230123 	.word	0x01230123
 800b2e0:	01230123 	.word	0x01230123
 800b2e4:	00970123 	.word	0x00970123
 800b2e8:	00930095 	.word	0x00930095
 800b2ec:	4850      	ldr	r0, [pc, #320]	; (800b430 <_strerror_r+0x270>)
 800b2ee:	bd10      	pop	{r4, pc}
 800b2f0:	4850      	ldr	r0, [pc, #320]	; (800b434 <_strerror_r+0x274>)
 800b2f2:	bd10      	pop	{r4, pc}
 800b2f4:	4850      	ldr	r0, [pc, #320]	; (800b438 <_strerror_r+0x278>)
 800b2f6:	bd10      	pop	{r4, pc}
 800b2f8:	4850      	ldr	r0, [pc, #320]	; (800b43c <_strerror_r+0x27c>)
 800b2fa:	bd10      	pop	{r4, pc}
 800b2fc:	4850      	ldr	r0, [pc, #320]	; (800b440 <_strerror_r+0x280>)
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	4850      	ldr	r0, [pc, #320]	; (800b444 <_strerror_r+0x284>)
 800b302:	bd10      	pop	{r4, pc}
 800b304:	4850      	ldr	r0, [pc, #320]	; (800b448 <_strerror_r+0x288>)
 800b306:	bd10      	pop	{r4, pc}
 800b308:	4850      	ldr	r0, [pc, #320]	; (800b44c <_strerror_r+0x28c>)
 800b30a:	bd10      	pop	{r4, pc}
 800b30c:	4850      	ldr	r0, [pc, #320]	; (800b450 <_strerror_r+0x290>)
 800b30e:	bd10      	pop	{r4, pc}
 800b310:	4850      	ldr	r0, [pc, #320]	; (800b454 <_strerror_r+0x294>)
 800b312:	bd10      	pop	{r4, pc}
 800b314:	4850      	ldr	r0, [pc, #320]	; (800b458 <_strerror_r+0x298>)
 800b316:	bd10      	pop	{r4, pc}
 800b318:	4850      	ldr	r0, [pc, #320]	; (800b45c <_strerror_r+0x29c>)
 800b31a:	bd10      	pop	{r4, pc}
 800b31c:	4850      	ldr	r0, [pc, #320]	; (800b460 <_strerror_r+0x2a0>)
 800b31e:	bd10      	pop	{r4, pc}
 800b320:	4850      	ldr	r0, [pc, #320]	; (800b464 <_strerror_r+0x2a4>)
 800b322:	bd10      	pop	{r4, pc}
 800b324:	4850      	ldr	r0, [pc, #320]	; (800b468 <_strerror_r+0x2a8>)
 800b326:	bd10      	pop	{r4, pc}
 800b328:	4850      	ldr	r0, [pc, #320]	; (800b46c <_strerror_r+0x2ac>)
 800b32a:	bd10      	pop	{r4, pc}
 800b32c:	4850      	ldr	r0, [pc, #320]	; (800b470 <_strerror_r+0x2b0>)
 800b32e:	bd10      	pop	{r4, pc}
 800b330:	4850      	ldr	r0, [pc, #320]	; (800b474 <_strerror_r+0x2b4>)
 800b332:	bd10      	pop	{r4, pc}
 800b334:	4850      	ldr	r0, [pc, #320]	; (800b478 <_strerror_r+0x2b8>)
 800b336:	bd10      	pop	{r4, pc}
 800b338:	4850      	ldr	r0, [pc, #320]	; (800b47c <_strerror_r+0x2bc>)
 800b33a:	bd10      	pop	{r4, pc}
 800b33c:	4850      	ldr	r0, [pc, #320]	; (800b480 <_strerror_r+0x2c0>)
 800b33e:	bd10      	pop	{r4, pc}
 800b340:	4850      	ldr	r0, [pc, #320]	; (800b484 <_strerror_r+0x2c4>)
 800b342:	bd10      	pop	{r4, pc}
 800b344:	4850      	ldr	r0, [pc, #320]	; (800b488 <_strerror_r+0x2c8>)
 800b346:	bd10      	pop	{r4, pc}
 800b348:	4850      	ldr	r0, [pc, #320]	; (800b48c <_strerror_r+0x2cc>)
 800b34a:	bd10      	pop	{r4, pc}
 800b34c:	4850      	ldr	r0, [pc, #320]	; (800b490 <_strerror_r+0x2d0>)
 800b34e:	bd10      	pop	{r4, pc}
 800b350:	4850      	ldr	r0, [pc, #320]	; (800b494 <_strerror_r+0x2d4>)
 800b352:	bd10      	pop	{r4, pc}
 800b354:	4850      	ldr	r0, [pc, #320]	; (800b498 <_strerror_r+0x2d8>)
 800b356:	bd10      	pop	{r4, pc}
 800b358:	4850      	ldr	r0, [pc, #320]	; (800b49c <_strerror_r+0x2dc>)
 800b35a:	bd10      	pop	{r4, pc}
 800b35c:	4850      	ldr	r0, [pc, #320]	; (800b4a0 <_strerror_r+0x2e0>)
 800b35e:	bd10      	pop	{r4, pc}
 800b360:	4850      	ldr	r0, [pc, #320]	; (800b4a4 <_strerror_r+0x2e4>)
 800b362:	bd10      	pop	{r4, pc}
 800b364:	4850      	ldr	r0, [pc, #320]	; (800b4a8 <_strerror_r+0x2e8>)
 800b366:	bd10      	pop	{r4, pc}
 800b368:	4850      	ldr	r0, [pc, #320]	; (800b4ac <_strerror_r+0x2ec>)
 800b36a:	bd10      	pop	{r4, pc}
 800b36c:	4850      	ldr	r0, [pc, #320]	; (800b4b0 <_strerror_r+0x2f0>)
 800b36e:	bd10      	pop	{r4, pc}
 800b370:	4850      	ldr	r0, [pc, #320]	; (800b4b4 <_strerror_r+0x2f4>)
 800b372:	bd10      	pop	{r4, pc}
 800b374:	4850      	ldr	r0, [pc, #320]	; (800b4b8 <_strerror_r+0x2f8>)
 800b376:	bd10      	pop	{r4, pc}
 800b378:	4850      	ldr	r0, [pc, #320]	; (800b4bc <_strerror_r+0x2fc>)
 800b37a:	bd10      	pop	{r4, pc}
 800b37c:	4850      	ldr	r0, [pc, #320]	; (800b4c0 <_strerror_r+0x300>)
 800b37e:	bd10      	pop	{r4, pc}
 800b380:	4850      	ldr	r0, [pc, #320]	; (800b4c4 <_strerror_r+0x304>)
 800b382:	bd10      	pop	{r4, pc}
 800b384:	4850      	ldr	r0, [pc, #320]	; (800b4c8 <_strerror_r+0x308>)
 800b386:	bd10      	pop	{r4, pc}
 800b388:	4850      	ldr	r0, [pc, #320]	; (800b4cc <_strerror_r+0x30c>)
 800b38a:	bd10      	pop	{r4, pc}
 800b38c:	4850      	ldr	r0, [pc, #320]	; (800b4d0 <_strerror_r+0x310>)
 800b38e:	bd10      	pop	{r4, pc}
 800b390:	4850      	ldr	r0, [pc, #320]	; (800b4d4 <_strerror_r+0x314>)
 800b392:	bd10      	pop	{r4, pc}
 800b394:	4850      	ldr	r0, [pc, #320]	; (800b4d8 <_strerror_r+0x318>)
 800b396:	bd10      	pop	{r4, pc}
 800b398:	4850      	ldr	r0, [pc, #320]	; (800b4dc <_strerror_r+0x31c>)
 800b39a:	bd10      	pop	{r4, pc}
 800b39c:	4850      	ldr	r0, [pc, #320]	; (800b4e0 <_strerror_r+0x320>)
 800b39e:	bd10      	pop	{r4, pc}
 800b3a0:	4850      	ldr	r0, [pc, #320]	; (800b4e4 <_strerror_r+0x324>)
 800b3a2:	bd10      	pop	{r4, pc}
 800b3a4:	4850      	ldr	r0, [pc, #320]	; (800b4e8 <_strerror_r+0x328>)
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	4850      	ldr	r0, [pc, #320]	; (800b4ec <_strerror_r+0x32c>)
 800b3aa:	bd10      	pop	{r4, pc}
 800b3ac:	4850      	ldr	r0, [pc, #320]	; (800b4f0 <_strerror_r+0x330>)
 800b3ae:	bd10      	pop	{r4, pc}
 800b3b0:	4850      	ldr	r0, [pc, #320]	; (800b4f4 <_strerror_r+0x334>)
 800b3b2:	bd10      	pop	{r4, pc}
 800b3b4:	4850      	ldr	r0, [pc, #320]	; (800b4f8 <_strerror_r+0x338>)
 800b3b6:	bd10      	pop	{r4, pc}
 800b3b8:	4850      	ldr	r0, [pc, #320]	; (800b4fc <_strerror_r+0x33c>)
 800b3ba:	bd10      	pop	{r4, pc}
 800b3bc:	4850      	ldr	r0, [pc, #320]	; (800b500 <_strerror_r+0x340>)
 800b3be:	bd10      	pop	{r4, pc}
 800b3c0:	4850      	ldr	r0, [pc, #320]	; (800b504 <_strerror_r+0x344>)
 800b3c2:	bd10      	pop	{r4, pc}
 800b3c4:	4850      	ldr	r0, [pc, #320]	; (800b508 <_strerror_r+0x348>)
 800b3c6:	bd10      	pop	{r4, pc}
 800b3c8:	4850      	ldr	r0, [pc, #320]	; (800b50c <_strerror_r+0x34c>)
 800b3ca:	bd10      	pop	{r4, pc}
 800b3cc:	4850      	ldr	r0, [pc, #320]	; (800b510 <_strerror_r+0x350>)
 800b3ce:	bd10      	pop	{r4, pc}
 800b3d0:	4850      	ldr	r0, [pc, #320]	; (800b514 <_strerror_r+0x354>)
 800b3d2:	bd10      	pop	{r4, pc}
 800b3d4:	4850      	ldr	r0, [pc, #320]	; (800b518 <_strerror_r+0x358>)
 800b3d6:	bd10      	pop	{r4, pc}
 800b3d8:	4850      	ldr	r0, [pc, #320]	; (800b51c <_strerror_r+0x35c>)
 800b3da:	bd10      	pop	{r4, pc}
 800b3dc:	4850      	ldr	r0, [pc, #320]	; (800b520 <_strerror_r+0x360>)
 800b3de:	bd10      	pop	{r4, pc}
 800b3e0:	4850      	ldr	r0, [pc, #320]	; (800b524 <_strerror_r+0x364>)
 800b3e2:	bd10      	pop	{r4, pc}
 800b3e4:	4850      	ldr	r0, [pc, #320]	; (800b528 <_strerror_r+0x368>)
 800b3e6:	bd10      	pop	{r4, pc}
 800b3e8:	4850      	ldr	r0, [pc, #320]	; (800b52c <_strerror_r+0x36c>)
 800b3ea:	bd10      	pop	{r4, pc}
 800b3ec:	4850      	ldr	r0, [pc, #320]	; (800b530 <_strerror_r+0x370>)
 800b3ee:	bd10      	pop	{r4, pc}
 800b3f0:	4850      	ldr	r0, [pc, #320]	; (800b534 <_strerror_r+0x374>)
 800b3f2:	bd10      	pop	{r4, pc}
 800b3f4:	4850      	ldr	r0, [pc, #320]	; (800b538 <_strerror_r+0x378>)
 800b3f6:	bd10      	pop	{r4, pc}
 800b3f8:	4850      	ldr	r0, [pc, #320]	; (800b53c <_strerror_r+0x37c>)
 800b3fa:	bd10      	pop	{r4, pc}
 800b3fc:	4850      	ldr	r0, [pc, #320]	; (800b540 <_strerror_r+0x380>)
 800b3fe:	bd10      	pop	{r4, pc}
 800b400:	4850      	ldr	r0, [pc, #320]	; (800b544 <_strerror_r+0x384>)
 800b402:	bd10      	pop	{r4, pc}
 800b404:	4850      	ldr	r0, [pc, #320]	; (800b548 <_strerror_r+0x388>)
 800b406:	bd10      	pop	{r4, pc}
 800b408:	4850      	ldr	r0, [pc, #320]	; (800b54c <_strerror_r+0x38c>)
 800b40a:	bd10      	pop	{r4, pc}
 800b40c:	4850      	ldr	r0, [pc, #320]	; (800b550 <_strerror_r+0x390>)
 800b40e:	bd10      	pop	{r4, pc}
 800b410:	4850      	ldr	r0, [pc, #320]	; (800b554 <_strerror_r+0x394>)
 800b412:	bd10      	pop	{r4, pc}
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	bf14      	ite	ne
 800b41c:	461a      	movne	r2, r3
 800b41e:	4622      	moveq	r2, r4
 800b420:	f000 f930 	bl	800b684 <_user_strerror>
 800b424:	4b4c      	ldr	r3, [pc, #304]	; (800b558 <_strerror_r+0x398>)
 800b426:	2800      	cmp	r0, #0
 800b428:	bf08      	it	eq
 800b42a:	4618      	moveq	r0, r3
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	0800d5a0 	.word	0x0800d5a0
 800b434:	0800d598 	.word	0x0800d598
 800b438:	0800db6c 	.word	0x0800db6c
 800b43c:	0800db54 	.word	0x0800db54
 800b440:	0800db40 	.word	0x0800db40
 800b444:	0800d848 	.word	0x0800d848
 800b448:	0800db0c 	.word	0x0800db0c
 800b44c:	0800db24 	.word	0x0800db24
 800b450:	0800d980 	.word	0x0800d980
 800b454:	0800dba4 	.word	0x0800dba4
 800b458:	0800d678 	.word	0x0800d678
 800b45c:	0800d640 	.word	0x0800d640
 800b460:	0800d748 	.word	0x0800d748
 800b464:	0800d81c 	.word	0x0800d81c
 800b468:	0800d738 	.word	0x0800d738
 800b46c:	0800dbb8 	.word	0x0800dbb8
 800b470:	0800d78c 	.word	0x0800d78c
 800b474:	0800d8fc 	.word	0x0800d8fc
 800b478:	0800dae8 	.word	0x0800dae8
 800b47c:	0800dad0 	.word	0x0800dad0
 800b480:	0800dabc 	.word	0x0800dabc
 800b484:	0800daa4 	.word	0x0800daa4
 800b488:	0800da84 	.word	0x0800da84
 800b48c:	0800da64 	.word	0x0800da64
 800b490:	0800da34 	.word	0x0800da34
 800b494:	0800da18 	.word	0x0800da18
 800b498:	0800db80 	.word	0x0800db80
 800b49c:	0800da00 	.word	0x0800da00
 800b4a0:	0800d9e4 	.word	0x0800d9e4
 800b4a4:	0800d9d0 	.word	0x0800d9d0
 800b4a8:	0800d9b4 	.word	0x0800d9b4
 800b4ac:	0800d9a8 	.word	0x0800d9a8
 800b4b0:	0800d994 	.word	0x0800d994
 800b4b4:	0800d970 	.word	0x0800d970
 800b4b8:	0800d958 	.word	0x0800d958
 800b4bc:	0800d944 	.word	0x0800d944
 800b4c0:	0800d92c 	.word	0x0800d92c
 800b4c4:	0800d91c 	.word	0x0800d91c
 800b4c8:	0800d914 	.word	0x0800d914
 800b4cc:	0800d8f0 	.word	0x0800d8f0
 800b4d0:	0800d8dc 	.word	0x0800d8dc
 800b4d4:	0800d8c0 	.word	0x0800d8c0
 800b4d8:	0800d8ac 	.word	0x0800d8ac
 800b4dc:	0800d89c 	.word	0x0800d89c
 800b4e0:	0800d890 	.word	0x0800d890
 800b4e4:	0800d880 	.word	0x0800d880
 800b4e8:	0800d868 	.word	0x0800d868
 800b4ec:	0800d858 	.word	0x0800d858
 800b4f0:	0800d830 	.word	0x0800d830
 800b4f4:	0800d80c 	.word	0x0800d80c
 800b4f8:	0800d7fc 	.word	0x0800d7fc
 800b4fc:	0800d7e4 	.word	0x0800d7e4
 800b500:	0800d7d0 	.word	0x0800d7d0
 800b504:	0800d7b0 	.word	0x0800d7b0
 800b508:	0800d778 	.word	0x0800d778
 800b50c:	0800d768 	.word	0x0800d768
 800b510:	0800d728 	.word	0x0800d728
 800b514:	0800d718 	.word	0x0800d718
 800b518:	0800d704 	.word	0x0800d704
 800b51c:	0800d6f8 	.word	0x0800d6f8
 800b520:	0800d6e0 	.word	0x0800d6e0
 800b524:	0800d6d4 	.word	0x0800d6d4
 800b528:	0800d6c0 	.word	0x0800d6c0
 800b52c:	0800d6ac 	.word	0x0800d6ac
 800b530:	0800d698 	.word	0x0800d698
 800b534:	0800d66c 	.word	0x0800d66c
 800b538:	0800d65c 	.word	0x0800d65c
 800b53c:	0800d62c 	.word	0x0800d62c
 800b540:	0800d618 	.word	0x0800d618
 800b544:	0800d5fc 	.word	0x0800d5fc
 800b548:	0800d5f0 	.word	0x0800d5f0
 800b54c:	0800d5d8 	.word	0x0800d5d8
 800b550:	0800d5c8 	.word	0x0800d5c8
 800b554:	0800d5ac 	.word	0x0800d5ac
 800b558:	0800d074 	.word	0x0800d074

0800b55c <strerror>:
 800b55c:	4b03      	ldr	r3, [pc, #12]	; (800b56c <strerror+0x10>)
 800b55e:	2200      	movs	r2, #0
 800b560:	4601      	mov	r1, r0
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	4613      	mov	r3, r2
 800b566:	f7ff be2b 	b.w	800b1c0 <_strerror_r>
 800b56a:	bf00      	nop
 800b56c:	20000448 	.word	0x20000448

0800b570 <strlen>:
 800b570:	f020 0103 	bic.w	r1, r0, #3
 800b574:	f010 0003 	ands.w	r0, r0, #3
 800b578:	f1c0 0000 	rsb	r0, r0, #0
 800b57c:	f851 3b04 	ldr.w	r3, [r1], #4
 800b580:	f100 0c04 	add.w	ip, r0, #4
 800b584:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800b588:	f06f 0200 	mvn.w	r2, #0
 800b58c:	bf1c      	itt	ne
 800b58e:	fa22 f20c 	lsrne.w	r2, r2, ip
 800b592:	4313      	orrne	r3, r2
 800b594:	f04f 0c01 	mov.w	ip, #1
 800b598:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800b59c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800b5a0:	eba3 020c 	sub.w	r2, r3, ip
 800b5a4:	ea22 0203 	bic.w	r2, r2, r3
 800b5a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800b5ac:	bf04      	itt	eq
 800b5ae:	f851 3b04 	ldreq.w	r3, [r1], #4
 800b5b2:	3004      	addeq	r0, #4
 800b5b4:	d0f4      	beq.n	800b5a0 <strlen+0x30>
 800b5b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b5ba:	bf1f      	itttt	ne
 800b5bc:	3001      	addne	r0, #1
 800b5be:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800b5c2:	3001      	addne	r0, #1
 800b5c4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800b5c8:	bf18      	it	ne
 800b5ca:	3001      	addne	r0, #1
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop

0800b5d0 <strncmp>:
 800b5d0:	b430      	push	{r4, r5}
 800b5d2:	2a00      	cmp	r2, #0
 800b5d4:	d04a      	beq.n	800b66c <strncmp+0x9c>
 800b5d6:	ea40 0301 	orr.w	r3, r0, r1
 800b5da:	f013 0303 	ands.w	r3, r3, #3
 800b5de:	d12d      	bne.n	800b63c <strncmp+0x6c>
 800b5e0:	2a03      	cmp	r2, #3
 800b5e2:	d92b      	bls.n	800b63c <strncmp+0x6c>
 800b5e4:	6804      	ldr	r4, [r0, #0]
 800b5e6:	680d      	ldr	r5, [r1, #0]
 800b5e8:	42ac      	cmp	r4, r5
 800b5ea:	d127      	bne.n	800b63c <strncmp+0x6c>
 800b5ec:	3a04      	subs	r2, #4
 800b5ee:	d03d      	beq.n	800b66c <strncmp+0x9c>
 800b5f0:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 800b5f4:	ea25 0404 	bic.w	r4, r5, r4
 800b5f8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800b5fc:	d13c      	bne.n	800b678 <strncmp+0xa8>
 800b5fe:	460c      	mov	r4, r1
 800b600:	4603      	mov	r3, r0
 800b602:	e00e      	b.n	800b622 <strncmp+0x52>
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	6864      	ldr	r4, [r4, #4]
 800b608:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	ea25 0503 	bic.w	r5, r5, r3
 800b612:	d113      	bne.n	800b63c <strncmp+0x6c>
 800b614:	3a04      	subs	r2, #4
 800b616:	d029      	beq.n	800b66c <strncmp+0x9c>
 800b618:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800b61c:	d129      	bne.n	800b672 <strncmp+0xa2>
 800b61e:	4603      	mov	r3, r0
 800b620:	460c      	mov	r4, r1
 800b622:	2a03      	cmp	r2, #3
 800b624:	f100 0004 	add.w	r0, r0, #4
 800b628:	f101 0104 	add.w	r1, r1, #4
 800b62c:	d8ea      	bhi.n	800b604 <strncmp+0x34>
 800b62e:	1e55      	subs	r5, r2, #1
 800b630:	b92a      	cbnz	r2, 800b63e <strncmp+0x6e>
 800b632:	7918      	ldrb	r0, [r3, #4]
 800b634:	7922      	ldrb	r2, [r4, #4]
 800b636:	1a80      	subs	r0, r0, r2
 800b638:	bc30      	pop	{r4, r5}
 800b63a:	4770      	bx	lr
 800b63c:	1e55      	subs	r5, r2, #1
 800b63e:	7803      	ldrb	r3, [r0, #0]
 800b640:	780a      	ldrb	r2, [r1, #0]
 800b642:	4293      	cmp	r3, r2
 800b644:	d11a      	bne.n	800b67c <strncmp+0xac>
 800b646:	b1dd      	cbz	r5, 800b680 <strncmp+0xb0>
 800b648:	b1b3      	cbz	r3, 800b678 <strncmp+0xa8>
 800b64a:	1c6c      	adds	r4, r5, #1
 800b64c:	440c      	add	r4, r1
 800b64e:	1c8b      	adds	r3, r1, #2
 800b650:	4601      	mov	r1, r0
 800b652:	e004      	b.n	800b65e <strncmp+0x8e>
 800b654:	42a3      	cmp	r3, r4
 800b656:	d00c      	beq.n	800b672 <strncmp+0xa2>
 800b658:	3301      	adds	r3, #1
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d0ec      	beq.n	800b638 <strncmp+0x68>
 800b65e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b662:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800b666:	4290      	cmp	r0, r2
 800b668:	d0f4      	beq.n	800b654 <strncmp+0x84>
 800b66a:	e7e4      	b.n	800b636 <strncmp+0x66>
 800b66c:	4610      	mov	r0, r2
 800b66e:	bc30      	pop	{r4, r5}
 800b670:	4770      	bx	lr
 800b672:	2000      	movs	r0, #0
 800b674:	bc30      	pop	{r4, r5}
 800b676:	4770      	bx	lr
 800b678:	4618      	mov	r0, r3
 800b67a:	e7dd      	b.n	800b638 <strncmp+0x68>
 800b67c:	4618      	mov	r0, r3
 800b67e:	e7da      	b.n	800b636 <strncmp+0x66>
 800b680:	4628      	mov	r0, r5
 800b682:	e7d9      	b.n	800b638 <strncmp+0x68>

0800b684 <_user_strerror>:
 800b684:	2000      	movs	r0, #0
 800b686:	4770      	bx	lr

0800b688 <__swbuf_r>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	460d      	mov	r5, r1
 800b68c:	4614      	mov	r4, r2
 800b68e:	4607      	mov	r7, r0
 800b690:	b110      	cbz	r0, 800b698 <__swbuf_r+0x10>
 800b692:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b694:	2b00      	cmp	r3, #0
 800b696:	d048      	beq.n	800b72a <__swbuf_r+0xa2>
 800b698:	89a2      	ldrh	r2, [r4, #12]
 800b69a:	69a0      	ldr	r0, [r4, #24]
 800b69c:	b293      	uxth	r3, r2
 800b69e:	60a0      	str	r0, [r4, #8]
 800b6a0:	0718      	lsls	r0, r3, #28
 800b6a2:	d538      	bpl.n	800b716 <__swbuf_r+0x8e>
 800b6a4:	6926      	ldr	r6, [r4, #16]
 800b6a6:	2e00      	cmp	r6, #0
 800b6a8:	d035      	beq.n	800b716 <__swbuf_r+0x8e>
 800b6aa:	0499      	lsls	r1, r3, #18
 800b6ac:	b2ed      	uxtb	r5, r5
 800b6ae:	d515      	bpl.n	800b6dc <__swbuf_r+0x54>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	6962      	ldr	r2, [r4, #20]
 800b6b4:	1b9e      	subs	r6, r3, r6
 800b6b6:	4296      	cmp	r6, r2
 800b6b8:	da1c      	bge.n	800b6f4 <__swbuf_r+0x6c>
 800b6ba:	3601      	adds	r6, #1
 800b6bc:	68a2      	ldr	r2, [r4, #8]
 800b6be:	1c59      	adds	r1, r3, #1
 800b6c0:	3a01      	subs	r2, #1
 800b6c2:	60a2      	str	r2, [r4, #8]
 800b6c4:	6021      	str	r1, [r4, #0]
 800b6c6:	701d      	strb	r5, [r3, #0]
 800b6c8:	6963      	ldr	r3, [r4, #20]
 800b6ca:	42b3      	cmp	r3, r6
 800b6cc:	d01a      	beq.n	800b704 <__swbuf_r+0x7c>
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	07db      	lsls	r3, r3, #31
 800b6d2:	d501      	bpl.n	800b6d8 <__swbuf_r+0x50>
 800b6d4:	2d0a      	cmp	r5, #10
 800b6d6:	d015      	beq.n	800b704 <__swbuf_r+0x7c>
 800b6d8:	4628      	mov	r0, r5
 800b6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6e6:	6663      	str	r3, [r4, #100]	; 0x64
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	81a2      	strh	r2, [r4, #12]
 800b6ec:	6962      	ldr	r2, [r4, #20]
 800b6ee:	1b9e      	subs	r6, r3, r6
 800b6f0:	4296      	cmp	r6, r2
 800b6f2:	dbe2      	blt.n	800b6ba <__swbuf_r+0x32>
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	f000 f984 	bl	800ba04 <_fflush_r>
 800b6fc:	b940      	cbnz	r0, 800b710 <__swbuf_r+0x88>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	2601      	movs	r6, #1
 800b702:	e7db      	b.n	800b6bc <__swbuf_r+0x34>
 800b704:	4638      	mov	r0, r7
 800b706:	4621      	mov	r1, r4
 800b708:	f000 f97c 	bl	800ba04 <_fflush_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d0e3      	beq.n	800b6d8 <__swbuf_r+0x50>
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b716:	4638      	mov	r0, r7
 800b718:	4621      	mov	r1, r4
 800b71a:	f000 f809 	bl	800b730 <__swsetup_r>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d1f6      	bne.n	800b710 <__swbuf_r+0x88>
 800b722:	89a2      	ldrh	r2, [r4, #12]
 800b724:	6926      	ldr	r6, [r4, #16]
 800b726:	b293      	uxth	r3, r2
 800b728:	e7bf      	b.n	800b6aa <__swbuf_r+0x22>
 800b72a:	f000 f987 	bl	800ba3c <__sinit>
 800b72e:	e7b3      	b.n	800b698 <__swbuf_r+0x10>

0800b730 <__swsetup_r>:
 800b730:	4b2f      	ldr	r3, [pc, #188]	; (800b7f0 <__swsetup_r+0xc0>)
 800b732:	b570      	push	{r4, r5, r6, lr}
 800b734:	4606      	mov	r6, r0
 800b736:	6818      	ldr	r0, [r3, #0]
 800b738:	460c      	mov	r4, r1
 800b73a:	b110      	cbz	r0, 800b742 <__swsetup_r+0x12>
 800b73c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b73e:	2a00      	cmp	r2, #0
 800b740:	d036      	beq.n	800b7b0 <__swsetup_r+0x80>
 800b742:	89a5      	ldrh	r5, [r4, #12]
 800b744:	b2ab      	uxth	r3, r5
 800b746:	0719      	lsls	r1, r3, #28
 800b748:	d50c      	bpl.n	800b764 <__swsetup_r+0x34>
 800b74a:	6922      	ldr	r2, [r4, #16]
 800b74c:	b1aa      	cbz	r2, 800b77a <__swsetup_r+0x4a>
 800b74e:	f013 0101 	ands.w	r1, r3, #1
 800b752:	d01e      	beq.n	800b792 <__swsetup_r+0x62>
 800b754:	6963      	ldr	r3, [r4, #20]
 800b756:	2100      	movs	r1, #0
 800b758:	425b      	negs	r3, r3
 800b75a:	61a3      	str	r3, [r4, #24]
 800b75c:	60a1      	str	r1, [r4, #8]
 800b75e:	b1f2      	cbz	r2, 800b79e <__swsetup_r+0x6e>
 800b760:	2000      	movs	r0, #0
 800b762:	bd70      	pop	{r4, r5, r6, pc}
 800b764:	06da      	lsls	r2, r3, #27
 800b766:	d53a      	bpl.n	800b7de <__swsetup_r+0xae>
 800b768:	075b      	lsls	r3, r3, #29
 800b76a:	d424      	bmi.n	800b7b6 <__swsetup_r+0x86>
 800b76c:	6922      	ldr	r2, [r4, #16]
 800b76e:	f045 0308 	orr.w	r3, r5, #8
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	b29b      	uxth	r3, r3
 800b776:	2a00      	cmp	r2, #0
 800b778:	d1e9      	bne.n	800b74e <__swsetup_r+0x1e>
 800b77a:	f403 7120 	and.w	r1, r3, #640	; 0x280
 800b77e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b782:	d0e4      	beq.n	800b74e <__swsetup_r+0x1e>
 800b784:	4630      	mov	r0, r6
 800b786:	4621      	mov	r1, r4
 800b788:	f000 fb14 	bl	800bdb4 <__smakebuf_r>
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	6922      	ldr	r2, [r4, #16]
 800b790:	e7dd      	b.n	800b74e <__swsetup_r+0x1e>
 800b792:	0798      	lsls	r0, r3, #30
 800b794:	bf58      	it	pl
 800b796:	6961      	ldrpl	r1, [r4, #20]
 800b798:	60a1      	str	r1, [r4, #8]
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	d1e0      	bne.n	800b760 <__swsetup_r+0x30>
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	061a      	lsls	r2, r3, #24
 800b7a2:	d5dd      	bpl.n	800b760 <__swsetup_r+0x30>
 800b7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ae:	bd70      	pop	{r4, r5, r6, pc}
 800b7b0:	f000 f944 	bl	800ba3c <__sinit>
 800b7b4:	e7c5      	b.n	800b742 <__swsetup_r+0x12>
 800b7b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b7b8:	b149      	cbz	r1, 800b7ce <__swsetup_r+0x9e>
 800b7ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	d003      	beq.n	800b7ca <__swsetup_r+0x9a>
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f000 fa06 	bl	800bbd4 <_free_r>
 800b7c8:	89a5      	ldrh	r5, [r4, #12]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6323      	str	r3, [r4, #48]	; 0x30
 800b7ce:	6922      	ldr	r2, [r4, #16]
 800b7d0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	b2ad      	uxth	r5, r5
 800b7d8:	6022      	str	r2, [r4, #0]
 800b7da:	6061      	str	r1, [r4, #4]
 800b7dc:	e7c7      	b.n	800b76e <__swsetup_r+0x3e>
 800b7de:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800b7e2:	2309      	movs	r3, #9
 800b7e4:	6033      	str	r3, [r6, #0]
 800b7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ea:	81a5      	strh	r5, [r4, #12]
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000448 	.word	0x20000448

0800b7f4 <__register_exitproc>:
 800b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7f6:	4c27      	ldr	r4, [pc, #156]	; (800b894 <__register_exitproc+0xa0>)
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	6826      	ldr	r6, [r4, #0]
 800b7fc:	4607      	mov	r7, r0
 800b7fe:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 800b802:	2c00      	cmp	r4, #0
 800b804:	d040      	beq.n	800b888 <__register_exitproc+0x94>
 800b806:	6865      	ldr	r5, [r4, #4]
 800b808:	2d1f      	cmp	r5, #31
 800b80a:	dd1e      	ble.n	800b84a <__register_exitproc+0x56>
 800b80c:	4822      	ldr	r0, [pc, #136]	; (800b898 <__register_exitproc+0xa4>)
 800b80e:	b918      	cbnz	r0, 800b818 <__register_exitproc+0x24>
 800b810:	f04f 30ff 	mov.w	r0, #4294967295
 800b814:	b005      	add	sp, #20
 800b816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b818:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b81c:	9103      	str	r1, [sp, #12]
 800b81e:	9202      	str	r2, [sp, #8]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	f7fe fd13 	bl	800a24c <malloc>
 800b826:	9903      	ldr	r1, [sp, #12]
 800b828:	4604      	mov	r4, r0
 800b82a:	9a02      	ldr	r2, [sp, #8]
 800b82c:	9b01      	ldr	r3, [sp, #4]
 800b82e:	2800      	cmp	r0, #0
 800b830:	d0ee      	beq.n	800b810 <__register_exitproc+0x1c>
 800b832:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 800b836:	2000      	movs	r0, #0
 800b838:	6025      	str	r5, [r4, #0]
 800b83a:	6060      	str	r0, [r4, #4]
 800b83c:	4605      	mov	r5, r0
 800b83e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800b842:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800b846:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800b84a:	b93f      	cbnz	r7, 800b85c <__register_exitproc+0x68>
 800b84c:	1c6b      	adds	r3, r5, #1
 800b84e:	2000      	movs	r0, #0
 800b850:	3502      	adds	r5, #2
 800b852:	6063      	str	r3, [r4, #4]
 800b854:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
 800b858:	b005      	add	sp, #20
 800b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b85c:	2601      	movs	r6, #1
 800b85e:	40ae      	lsls	r6, r5
 800b860:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 800b864:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800b868:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800b86c:	2f02      	cmp	r7, #2
 800b86e:	ea42 0206 	orr.w	r2, r2, r6
 800b872:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800b876:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800b87a:	d1e7      	bne.n	800b84c <__register_exitproc+0x58>
 800b87c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800b880:	431e      	orrs	r6, r3
 800b882:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
 800b886:	e7e1      	b.n	800b84c <__register_exitproc+0x58>
 800b888:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 800b88c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800b890:	e7b9      	b.n	800b806 <__register_exitproc+0x12>
 800b892:	bf00      	nop
 800b894:	0800d594 	.word	0x0800d594
 800b898:	0800a24d 	.word	0x0800a24d

0800b89c <register_fini>:
 800b89c:	4b02      	ldr	r3, [pc, #8]	; (800b8a8 <register_fini+0xc>)
 800b89e:	b113      	cbz	r3, 800b8a6 <register_fini+0xa>
 800b8a0:	4802      	ldr	r0, [pc, #8]	; (800b8ac <register_fini+0x10>)
 800b8a2:	f000 b805 	b.w	800b8b0 <atexit>
 800b8a6:	4770      	bx	lr
 800b8a8:	00000000 	.word	0x00000000
 800b8ac:	08009da9 	.word	0x08009da9

0800b8b0 <atexit>:
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	f7ff bf9c 	b.w	800b7f4 <__register_exitproc>

0800b8bc <__sflush_r>:
 800b8bc:	898b      	ldrh	r3, [r1, #12]
 800b8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	460d      	mov	r5, r1
 800b8c6:	0711      	lsls	r1, r2, #28
 800b8c8:	4680      	mov	r8, r0
 800b8ca:	d43c      	bmi.n	800b946 <__sflush_r+0x8a>
 800b8cc:	686a      	ldr	r2, [r5, #4]
 800b8ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b8d2:	2a00      	cmp	r2, #0
 800b8d4:	81ab      	strh	r3, [r5, #12]
 800b8d6:	dd59      	ble.n	800b98c <__sflush_r+0xd0>
 800b8d8:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800b8da:	2c00      	cmp	r4, #0
 800b8dc:	d04b      	beq.n	800b976 <__sflush_r+0xba>
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	b292      	uxth	r2, r2
 800b8e8:	f8d8 6000 	ldr.w	r6, [r8]
 800b8ec:	f8c8 1000 	str.w	r1, [r8]
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	d04f      	beq.n	800b994 <__sflush_r+0xd8>
 800b8f4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800b8f6:	075f      	lsls	r7, r3, #29
 800b8f8:	d505      	bpl.n	800b906 <__sflush_r+0x4a>
 800b8fa:	6869      	ldr	r1, [r5, #4]
 800b8fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8fe:	1a52      	subs	r2, r2, r1
 800b900:	b10b      	cbz	r3, 800b906 <__sflush_r+0x4a>
 800b902:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b904:	1ad2      	subs	r2, r2, r3
 800b906:	4640      	mov	r0, r8
 800b908:	69e9      	ldr	r1, [r5, #28]
 800b90a:	2300      	movs	r3, #0
 800b90c:	47a0      	blx	r4
 800b90e:	1c44      	adds	r4, r0, #1
 800b910:	d04a      	beq.n	800b9a8 <__sflush_r+0xec>
 800b912:	89ab      	ldrh	r3, [r5, #12]
 800b914:	692a      	ldr	r2, [r5, #16]
 800b916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	2100      	movs	r1, #0
 800b91e:	602a      	str	r2, [r5, #0]
 800b920:	04da      	lsls	r2, r3, #19
 800b922:	81ab      	strh	r3, [r5, #12]
 800b924:	6069      	str	r1, [r5, #4]
 800b926:	d44c      	bmi.n	800b9c2 <__sflush_r+0x106>
 800b928:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800b92a:	f8c8 6000 	str.w	r6, [r8]
 800b92e:	b311      	cbz	r1, 800b976 <__sflush_r+0xba>
 800b930:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800b934:	4299      	cmp	r1, r3
 800b936:	d002      	beq.n	800b93e <__sflush_r+0x82>
 800b938:	4640      	mov	r0, r8
 800b93a:	f000 f94b 	bl	800bbd4 <_free_r>
 800b93e:	2000      	movs	r0, #0
 800b940:	6328      	str	r0, [r5, #48]	; 0x30
 800b942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b946:	692e      	ldr	r6, [r5, #16]
 800b948:	b1ae      	cbz	r6, 800b976 <__sflush_r+0xba>
 800b94a:	0791      	lsls	r1, r2, #30
 800b94c:	682c      	ldr	r4, [r5, #0]
 800b94e:	bf0c      	ite	eq
 800b950:	696b      	ldreq	r3, [r5, #20]
 800b952:	2300      	movne	r3, #0
 800b954:	602e      	str	r6, [r5, #0]
 800b956:	1ba4      	subs	r4, r4, r6
 800b958:	60ab      	str	r3, [r5, #8]
 800b95a:	e00a      	b.n	800b972 <__sflush_r+0xb6>
 800b95c:	4632      	mov	r2, r6
 800b95e:	4623      	mov	r3, r4
 800b960:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800b962:	4640      	mov	r0, r8
 800b964:	69e9      	ldr	r1, [r5, #28]
 800b966:	47b8      	blx	r7
 800b968:	2800      	cmp	r0, #0
 800b96a:	ebc0 0404 	rsb	r4, r0, r4
 800b96e:	4406      	add	r6, r0
 800b970:	dd04      	ble.n	800b97c <__sflush_r+0xc0>
 800b972:	2c00      	cmp	r4, #0
 800b974:	dcf2      	bgt.n	800b95c <__sflush_r+0xa0>
 800b976:	2000      	movs	r0, #0
 800b978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b97c:	89ab      	ldrh	r3, [r5, #12]
 800b97e:	f04f 30ff 	mov.w	r0, #4294967295
 800b982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b986:	81ab      	strh	r3, [r5, #12]
 800b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b98c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800b98e:	2a00      	cmp	r2, #0
 800b990:	dca2      	bgt.n	800b8d8 <__sflush_r+0x1c>
 800b992:	e7f0      	b.n	800b976 <__sflush_r+0xba>
 800b994:	2301      	movs	r3, #1
 800b996:	4640      	mov	r0, r8
 800b998:	69e9      	ldr	r1, [r5, #28]
 800b99a:	47a0      	blx	r4
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	4602      	mov	r2, r0
 800b9a0:	d01e      	beq.n	800b9e0 <__sflush_r+0x124>
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800b9a6:	e7a6      	b.n	800b8f6 <__sflush_r+0x3a>
 800b9a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ac:	b95b      	cbnz	r3, 800b9c6 <__sflush_r+0x10a>
 800b9ae:	89aa      	ldrh	r2, [r5, #12]
 800b9b0:	6929      	ldr	r1, [r5, #16]
 800b9b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9b6:	b292      	uxth	r2, r2
 800b9b8:	606b      	str	r3, [r5, #4]
 800b9ba:	04d3      	lsls	r3, r2, #19
 800b9bc:	81aa      	strh	r2, [r5, #12]
 800b9be:	6029      	str	r1, [r5, #0]
 800b9c0:	d5b2      	bpl.n	800b928 <__sflush_r+0x6c>
 800b9c2:	6528      	str	r0, [r5, #80]	; 0x50
 800b9c4:	e7b0      	b.n	800b928 <__sflush_r+0x6c>
 800b9c6:	2b1d      	cmp	r3, #29
 800b9c8:	d001      	beq.n	800b9ce <__sflush_r+0x112>
 800b9ca:	2b16      	cmp	r3, #22
 800b9cc:	d113      	bne.n	800b9f6 <__sflush_r+0x13a>
 800b9ce:	89a9      	ldrh	r1, [r5, #12]
 800b9d0:	692b      	ldr	r3, [r5, #16]
 800b9d2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	81a9      	strh	r1, [r5, #12]
 800b9da:	602b      	str	r3, [r5, #0]
 800b9dc:	606a      	str	r2, [r5, #4]
 800b9de:	e7a3      	b.n	800b928 <__sflush_r+0x6c>
 800b9e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0dc      	beq.n	800b9a2 <__sflush_r+0xe6>
 800b9e8:	2b1d      	cmp	r3, #29
 800b9ea:	d001      	beq.n	800b9f0 <__sflush_r+0x134>
 800b9ec:	2b16      	cmp	r3, #22
 800b9ee:	d1c5      	bne.n	800b97c <__sflush_r+0xc0>
 800b9f0:	f8c8 6000 	str.w	r6, [r8]
 800b9f4:	e7bf      	b.n	800b976 <__sflush_r+0xba>
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9fc:	81ab      	strh	r3, [r5, #12]
 800b9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba02:	bf00      	nop

0800ba04 <_fflush_r>:
 800ba04:	b510      	push	{r4, lr}
 800ba06:	4604      	mov	r4, r0
 800ba08:	b082      	sub	sp, #8
 800ba0a:	b108      	cbz	r0, 800ba10 <_fflush_r+0xc>
 800ba0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba0e:	b153      	cbz	r3, 800ba26 <_fflush_r+0x22>
 800ba10:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800ba14:	b908      	cbnz	r0, 800ba1a <_fflush_r+0x16>
 800ba16:	b002      	add	sp, #8
 800ba18:	bd10      	pop	{r4, pc}
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	b002      	add	sp, #8
 800ba1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba22:	f7ff bf4b 	b.w	800b8bc <__sflush_r>
 800ba26:	9101      	str	r1, [sp, #4]
 800ba28:	f000 f808 	bl	800ba3c <__sinit>
 800ba2c:	9901      	ldr	r1, [sp, #4]
 800ba2e:	e7ef      	b.n	800ba10 <_fflush_r+0xc>

0800ba30 <_cleanup_r>:
 800ba30:	4901      	ldr	r1, [pc, #4]	; (800ba38 <_cleanup_r+0x8>)
 800ba32:	f000 b99b 	b.w	800bd6c <_fwalk>
 800ba36:	bf00      	nop
 800ba38:	0800bf99 	.word	0x0800bf99

0800ba3c <__sinit>:
 800ba3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba40:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800ba42:	b083      	sub	sp, #12
 800ba44:	4607      	mov	r7, r0
 800ba46:	2c00      	cmp	r4, #0
 800ba48:	d165      	bne.n	800bb16 <__sinit+0xda>
 800ba4a:	687d      	ldr	r5, [r7, #4]
 800ba4c:	4833      	ldr	r0, [pc, #204]	; (800bb1c <__sinit+0xe0>)
 800ba4e:	2304      	movs	r3, #4
 800ba50:	2103      	movs	r1, #3
 800ba52:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 800ba56:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ba58:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 800ba5c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
 800ba60:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 800ba64:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800ba68:	81ab      	strh	r3, [r5, #12]
 800ba6a:	602c      	str	r4, [r5, #0]
 800ba6c:	606c      	str	r4, [r5, #4]
 800ba6e:	60ac      	str	r4, [r5, #8]
 800ba70:	666c      	str	r4, [r5, #100]	; 0x64
 800ba72:	81ec      	strh	r4, [r5, #14]
 800ba74:	612c      	str	r4, [r5, #16]
 800ba76:	616c      	str	r4, [r5, #20]
 800ba78:	61ac      	str	r4, [r5, #24]
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	f7fe ffeb 	bl	800aa58 <memset>
 800ba82:	f8df b09c 	ldr.w	fp, [pc, #156]	; 800bb20 <__sinit+0xe4>
 800ba86:	68be      	ldr	r6, [r7, #8]
 800ba88:	f8df a098 	ldr.w	sl, [pc, #152]	; 800bb24 <__sinit+0xe8>
 800ba8c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800bb28 <__sinit+0xec>
 800ba90:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800bb2c <__sinit+0xf0>
 800ba94:	2301      	movs	r3, #1
 800ba96:	2209      	movs	r2, #9
 800ba98:	61ed      	str	r5, [r5, #28]
 800ba9a:	f8c5 b020 	str.w	fp, [r5, #32]
 800ba9e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800baa2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800baa6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800baaa:	4621      	mov	r1, r4
 800baac:	81f3      	strh	r3, [r6, #14]
 800baae:	81b2      	strh	r2, [r6, #12]
 800bab0:	6034      	str	r4, [r6, #0]
 800bab2:	6074      	str	r4, [r6, #4]
 800bab4:	60b4      	str	r4, [r6, #8]
 800bab6:	6674      	str	r4, [r6, #100]	; 0x64
 800bab8:	6134      	str	r4, [r6, #16]
 800baba:	6174      	str	r4, [r6, #20]
 800babc:	61b4      	str	r4, [r6, #24]
 800babe:	2208      	movs	r2, #8
 800bac0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	f7fe ffc7 	bl	800aa58 <memset>
 800baca:	68fd      	ldr	r5, [r7, #12]
 800bacc:	2012      	movs	r0, #18
 800bace:	2202      	movs	r2, #2
 800bad0:	61f6      	str	r6, [r6, #28]
 800bad2:	f8c6 b020 	str.w	fp, [r6, #32]
 800bad6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800bada:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800bade:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800bae2:	4621      	mov	r1, r4
 800bae4:	81a8      	strh	r0, [r5, #12]
 800bae6:	81ea      	strh	r2, [r5, #14]
 800bae8:	602c      	str	r4, [r5, #0]
 800baea:	606c      	str	r4, [r5, #4]
 800baec:	60ac      	str	r4, [r5, #8]
 800baee:	666c      	str	r4, [r5, #100]	; 0x64
 800baf0:	612c      	str	r4, [r5, #16]
 800baf2:	616c      	str	r4, [r5, #20]
 800baf4:	61ac      	str	r4, [r5, #24]
 800baf6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800bafa:	2208      	movs	r2, #8
 800bafc:	f7fe ffac 	bl	800aa58 <memset>
 800bb00:	9b01      	ldr	r3, [sp, #4]
 800bb02:	61ed      	str	r5, [r5, #28]
 800bb04:	f8c5 b020 	str.w	fp, [r5, #32]
 800bb08:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800bb0c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800bb10:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800bb14:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb16:	b003      	add	sp, #12
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	0800ba31 	.word	0x0800ba31
 800bb20:	0800be95 	.word	0x0800be95
 800bb24:	0800beb9 	.word	0x0800beb9
 800bb28:	0800bef1 	.word	0x0800bef1
 800bb2c:	0800bf11 	.word	0x0800bf11

0800bb30 <__sfp_lock_acquire>:
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop

0800bb34 <__sfp_lock_release>:
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop

0800bb38 <_malloc_trim_r>:
 800bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3a:	4d23      	ldr	r5, [pc, #140]	; (800bbc8 <_malloc_trim_r+0x90>)
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	4604      	mov	r4, r0
 800bb40:	f7fe ffd4 	bl	800aaec <__malloc_lock>
 800bb44:	68ab      	ldr	r3, [r5, #8]
 800bb46:	685e      	ldr	r6, [r3, #4]
 800bb48:	f026 0603 	bic.w	r6, r6, #3
 800bb4c:	1bf1      	subs	r1, r6, r7
 800bb4e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800bb52:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800bb56:	f021 010f 	bic.w	r1, r1, #15
 800bb5a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 800bb5e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800bb62:	db07      	blt.n	800bb74 <_malloc_trim_r+0x3c>
 800bb64:	4620      	mov	r0, r4
 800bb66:	2100      	movs	r1, #0
 800bb68:	f7f5 f944 	bl	8000df4 <_sbrk_r>
 800bb6c:	68ab      	ldr	r3, [r5, #8]
 800bb6e:	4433      	add	r3, r6
 800bb70:	4298      	cmp	r0, r3
 800bb72:	d004      	beq.n	800bb7e <_malloc_trim_r+0x46>
 800bb74:	4620      	mov	r0, r4
 800bb76:	f7fe ffbb 	bl	800aaf0 <__malloc_unlock>
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4279      	negs	r1, r7
 800bb82:	f7f5 f937 	bl	8000df4 <_sbrk_r>
 800bb86:	3001      	adds	r0, #1
 800bb88:	d00d      	beq.n	800bba6 <_malloc_trim_r+0x6e>
 800bb8a:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <_malloc_trim_r+0x94>)
 800bb8c:	68aa      	ldr	r2, [r5, #8]
 800bb8e:	6819      	ldr	r1, [r3, #0]
 800bb90:	1bf6      	subs	r6, r6, r7
 800bb92:	f046 0601 	orr.w	r6, r6, #1
 800bb96:	4620      	mov	r0, r4
 800bb98:	1bc9      	subs	r1, r1, r7
 800bb9a:	6056      	str	r6, [r2, #4]
 800bb9c:	6019      	str	r1, [r3, #0]
 800bb9e:	f7fe ffa7 	bl	800aaf0 <__malloc_unlock>
 800bba2:	2001      	movs	r0, #1
 800bba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba6:	4620      	mov	r0, r4
 800bba8:	2100      	movs	r1, #0
 800bbaa:	f7f5 f923 	bl	8000df4 <_sbrk_r>
 800bbae:	68ab      	ldr	r3, [r5, #8]
 800bbb0:	1ac2      	subs	r2, r0, r3
 800bbb2:	2a0f      	cmp	r2, #15
 800bbb4:	ddde      	ble.n	800bb74 <_malloc_trim_r+0x3c>
 800bbb6:	4d06      	ldr	r5, [pc, #24]	; (800bbd0 <_malloc_trim_r+0x98>)
 800bbb8:	4904      	ldr	r1, [pc, #16]	; (800bbcc <_malloc_trim_r+0x94>)
 800bbba:	682d      	ldr	r5, [r5, #0]
 800bbbc:	f042 0201 	orr.w	r2, r2, #1
 800bbc0:	1b40      	subs	r0, r0, r5
 800bbc2:	605a      	str	r2, [r3, #4]
 800bbc4:	6008      	str	r0, [r1, #0]
 800bbc6:	e7d5      	b.n	800bb74 <_malloc_trim_r+0x3c>
 800bbc8:	2000044c 	.word	0x2000044c
 800bbcc:	20001184 	.word	0x20001184
 800bbd0:	20000858 	.word	0x20000858

0800bbd4 <_free_r>:
 800bbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd8:	460d      	mov	r5, r1
 800bbda:	4606      	mov	r6, r0
 800bbdc:	2900      	cmp	r1, #0
 800bbde:	d055      	beq.n	800bc8c <_free_r+0xb8>
 800bbe0:	f7fe ff84 	bl	800aaec <__malloc_lock>
 800bbe4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800bbe8:	f8df c170 	ldr.w	ip, [pc, #368]	; 800bd5c <_free_r+0x188>
 800bbec:	f1a5 0408 	sub.w	r4, r5, #8
 800bbf0:	f021 0301 	bic.w	r3, r1, #1
 800bbf4:	18e2      	adds	r2, r4, r3
 800bbf6:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800bbfa:	6857      	ldr	r7, [r2, #4]
 800bbfc:	4290      	cmp	r0, r2
 800bbfe:	f027 0703 	bic.w	r7, r7, #3
 800bc02:	d068      	beq.n	800bcd6 <_free_r+0x102>
 800bc04:	f011 0101 	ands.w	r1, r1, #1
 800bc08:	6057      	str	r7, [r2, #4]
 800bc0a:	d032      	beq.n	800bc72 <_free_r+0x9e>
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	19d0      	adds	r0, r2, r7
 800bc10:	6840      	ldr	r0, [r0, #4]
 800bc12:	07c0      	lsls	r0, r0, #31
 800bc14:	d406      	bmi.n	800bc24 <_free_r+0x50>
 800bc16:	443b      	add	r3, r7
 800bc18:	6890      	ldr	r0, [r2, #8]
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	d04d      	beq.n	800bcba <_free_r+0xe6>
 800bc1e:	68d2      	ldr	r2, [r2, #12]
 800bc20:	60c2      	str	r2, [r0, #12]
 800bc22:	6090      	str	r0, [r2, #8]
 800bc24:	f043 0201 	orr.w	r2, r3, #1
 800bc28:	6062      	str	r2, [r4, #4]
 800bc2a:	50e3      	str	r3, [r4, r3]
 800bc2c:	b9e1      	cbnz	r1, 800bc68 <_free_r+0x94>
 800bc2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc32:	d32d      	bcc.n	800bc90 <_free_r+0xbc>
 800bc34:	0a5a      	lsrs	r2, r3, #9
 800bc36:	2a04      	cmp	r2, #4
 800bc38:	d869      	bhi.n	800bd0e <_free_r+0x13a>
 800bc3a:	0998      	lsrs	r0, r3, #6
 800bc3c:	3038      	adds	r0, #56	; 0x38
 800bc3e:	0041      	lsls	r1, r0, #1
 800bc40:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 800bc44:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800bc48:	4944      	ldr	r1, [pc, #272]	; (800bd5c <_free_r+0x188>)
 800bc4a:	4562      	cmp	r2, ip
 800bc4c:	d065      	beq.n	800bd1a <_free_r+0x146>
 800bc4e:	6851      	ldr	r1, [r2, #4]
 800bc50:	f021 0103 	bic.w	r1, r1, #3
 800bc54:	428b      	cmp	r3, r1
 800bc56:	d202      	bcs.n	800bc5e <_free_r+0x8a>
 800bc58:	6892      	ldr	r2, [r2, #8]
 800bc5a:	4594      	cmp	ip, r2
 800bc5c:	d1f7      	bne.n	800bc4e <_free_r+0x7a>
 800bc5e:	68d3      	ldr	r3, [r2, #12]
 800bc60:	60e3      	str	r3, [r4, #12]
 800bc62:	60a2      	str	r2, [r4, #8]
 800bc64:	609c      	str	r4, [r3, #8]
 800bc66:	60d4      	str	r4, [r2, #12]
 800bc68:	4630      	mov	r0, r6
 800bc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6e:	f7fe bf3f 	b.w	800aaf0 <__malloc_unlock>
 800bc72:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800bc76:	f10c 0808 	add.w	r8, ip, #8
 800bc7a:	1b64      	subs	r4, r4, r5
 800bc7c:	68a0      	ldr	r0, [r4, #8]
 800bc7e:	442b      	add	r3, r5
 800bc80:	4540      	cmp	r0, r8
 800bc82:	d042      	beq.n	800bd0a <_free_r+0x136>
 800bc84:	68e5      	ldr	r5, [r4, #12]
 800bc86:	60c5      	str	r5, [r0, #12]
 800bc88:	60a8      	str	r0, [r5, #8]
 800bc8a:	e7c0      	b.n	800bc0e <_free_r+0x3a>
 800bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc90:	08db      	lsrs	r3, r3, #3
 800bc92:	109a      	asrs	r2, r3, #2
 800bc94:	2001      	movs	r0, #1
 800bc96:	4090      	lsls	r0, r2
 800bc98:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bc9c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800bca0:	689a      	ldr	r2, [r3, #8]
 800bca2:	4301      	orrs	r1, r0
 800bca4:	60a2      	str	r2, [r4, #8]
 800bca6:	60e3      	str	r3, [r4, #12]
 800bca8:	f8cc 1004 	str.w	r1, [ip, #4]
 800bcac:	4630      	mov	r0, r6
 800bcae:	609c      	str	r4, [r3, #8]
 800bcb0:	60d4      	str	r4, [r2, #12]
 800bcb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb6:	f7fe bf1b 	b.w	800aaf0 <__malloc_unlock>
 800bcba:	4d29      	ldr	r5, [pc, #164]	; (800bd60 <_free_r+0x18c>)
 800bcbc:	42a8      	cmp	r0, r5
 800bcbe:	d1ae      	bne.n	800bc1e <_free_r+0x4a>
 800bcc0:	f043 0201 	orr.w	r2, r3, #1
 800bcc4:	f8cc 4014 	str.w	r4, [ip, #20]
 800bcc8:	f8cc 4010 	str.w	r4, [ip, #16]
 800bccc:	60e0      	str	r0, [r4, #12]
 800bcce:	60a0      	str	r0, [r4, #8]
 800bcd0:	6062      	str	r2, [r4, #4]
 800bcd2:	50e3      	str	r3, [r4, r3]
 800bcd4:	e7c8      	b.n	800bc68 <_free_r+0x94>
 800bcd6:	441f      	add	r7, r3
 800bcd8:	07cb      	lsls	r3, r1, #31
 800bcda:	d407      	bmi.n	800bcec <_free_r+0x118>
 800bcdc:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800bce0:	1a64      	subs	r4, r4, r1
 800bce2:	68e3      	ldr	r3, [r4, #12]
 800bce4:	68a2      	ldr	r2, [r4, #8]
 800bce6:	440f      	add	r7, r1
 800bce8:	60d3      	str	r3, [r2, #12]
 800bcea:	609a      	str	r2, [r3, #8]
 800bcec:	4b1d      	ldr	r3, [pc, #116]	; (800bd64 <_free_r+0x190>)
 800bcee:	f047 0201 	orr.w	r2, r7, #1
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6062      	str	r2, [r4, #4]
 800bcf6:	429f      	cmp	r7, r3
 800bcf8:	f8cc 4008 	str.w	r4, [ip, #8]
 800bcfc:	d3b4      	bcc.n	800bc68 <_free_r+0x94>
 800bcfe:	4b1a      	ldr	r3, [pc, #104]	; (800bd68 <_free_r+0x194>)
 800bd00:	4630      	mov	r0, r6
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	f7ff ff18 	bl	800bb38 <_malloc_trim_r>
 800bd08:	e7ae      	b.n	800bc68 <_free_r+0x94>
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	e77f      	b.n	800bc0e <_free_r+0x3a>
 800bd0e:	2a14      	cmp	r2, #20
 800bd10:	d80b      	bhi.n	800bd2a <_free_r+0x156>
 800bd12:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 800bd16:	0041      	lsls	r1, r0, #1
 800bd18:	e792      	b.n	800bc40 <_free_r+0x6c>
 800bd1a:	1080      	asrs	r0, r0, #2
 800bd1c:	2501      	movs	r5, #1
 800bd1e:	4085      	lsls	r5, r0
 800bd20:	6848      	ldr	r0, [r1, #4]
 800bd22:	4613      	mov	r3, r2
 800bd24:	4328      	orrs	r0, r5
 800bd26:	6048      	str	r0, [r1, #4]
 800bd28:	e79a      	b.n	800bc60 <_free_r+0x8c>
 800bd2a:	2a54      	cmp	r2, #84	; 0x54
 800bd2c:	d803      	bhi.n	800bd36 <_free_r+0x162>
 800bd2e:	0b18      	lsrs	r0, r3, #12
 800bd30:	306e      	adds	r0, #110	; 0x6e
 800bd32:	0041      	lsls	r1, r0, #1
 800bd34:	e784      	b.n	800bc40 <_free_r+0x6c>
 800bd36:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bd3a:	d803      	bhi.n	800bd44 <_free_r+0x170>
 800bd3c:	0bd8      	lsrs	r0, r3, #15
 800bd3e:	3077      	adds	r0, #119	; 0x77
 800bd40:	0041      	lsls	r1, r0, #1
 800bd42:	e77d      	b.n	800bc40 <_free_r+0x6c>
 800bd44:	f240 5154 	movw	r1, #1364	; 0x554
 800bd48:	428a      	cmp	r2, r1
 800bd4a:	d803      	bhi.n	800bd54 <_free_r+0x180>
 800bd4c:	0c98      	lsrs	r0, r3, #18
 800bd4e:	307c      	adds	r0, #124	; 0x7c
 800bd50:	0041      	lsls	r1, r0, #1
 800bd52:	e775      	b.n	800bc40 <_free_r+0x6c>
 800bd54:	21fc      	movs	r1, #252	; 0xfc
 800bd56:	207e      	movs	r0, #126	; 0x7e
 800bd58:	e772      	b.n	800bc40 <_free_r+0x6c>
 800bd5a:	bf00      	nop
 800bd5c:	2000044c 	.word	0x2000044c
 800bd60:	20000454 	.word	0x20000454
 800bd64:	20000854 	.word	0x20000854
 800bd68:	20001180 	.word	0x20001180

0800bd6c <_fwalk>:
 800bd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd70:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800bd74:	4688      	mov	r8, r1
 800bd76:	d019      	beq.n	800bdac <_fwalk+0x40>
 800bd78:	2600      	movs	r6, #0
 800bd7a:	687d      	ldr	r5, [r7, #4]
 800bd7c:	68bc      	ldr	r4, [r7, #8]
 800bd7e:	3d01      	subs	r5, #1
 800bd80:	d40e      	bmi.n	800bda0 <_fwalk+0x34>
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	3d01      	subs	r5, #1
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d906      	bls.n	800bd98 <_fwalk+0x2c>
 800bd8a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	3301      	adds	r3, #1
 800bd92:	d001      	beq.n	800bd98 <_fwalk+0x2c>
 800bd94:	47c0      	blx	r8
 800bd96:	4306      	orrs	r6, r0
 800bd98:	1c6b      	adds	r3, r5, #1
 800bd9a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800bd9e:	d1f0      	bne.n	800bd82 <_fwalk+0x16>
 800bda0:	683f      	ldr	r7, [r7, #0]
 800bda2:	2f00      	cmp	r7, #0
 800bda4:	d1e9      	bne.n	800bd7a <_fwalk+0xe>
 800bda6:	4630      	mov	r0, r6
 800bda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdac:	463e      	mov	r6, r7
 800bdae:	4630      	mov	r0, r6
 800bdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bdb4 <__smakebuf_r>:
 800bdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdb6:	898b      	ldrh	r3, [r1, #12]
 800bdb8:	b091      	sub	sp, #68	; 0x44
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	0796      	lsls	r6, r2, #30
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	d437      	bmi.n	800be34 <__smakebuf_r+0x80>
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	db17      	blt.n	800bdfc <__smakebuf_r+0x48>
 800bdcc:	aa01      	add	r2, sp, #4
 800bdce:	f7f4 ffb7 	bl	8000d40 <_fstat_r>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	db10      	blt.n	800bdf8 <__smakebuf_r+0x44>
 800bdd6:	9b02      	ldr	r3, [sp, #8]
 800bdd8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bddc:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 800bde0:	424f      	negs	r7, r1
 800bde2:	414f      	adcs	r7, r1
 800bde4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bde8:	d02c      	beq.n	800be44 <__smakebuf_r+0x90>
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800bdf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	e00b      	b.n	800be10 <__smakebuf_r+0x5c>
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	f012 0f80 	tst.w	r2, #128	; 0x80
 800be00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	bf14      	ite	ne
 800be08:	2640      	movne	r6, #64	; 0x40
 800be0a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800be0e:	2700      	movs	r7, #0
 800be10:	4628      	mov	r0, r5
 800be12:	4631      	mov	r1, r6
 800be14:	f7fe fa2a 	bl	800a26c <_malloc_r>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d029      	beq.n	800be72 <__smakebuf_r+0xbe>
 800be1e:	4a1b      	ldr	r2, [pc, #108]	; (800be8c <__smakebuf_r+0xd8>)
 800be20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be24:	63ea      	str	r2, [r5, #60]	; 0x3c
 800be26:	81a3      	strh	r3, [r4, #12]
 800be28:	6020      	str	r0, [r4, #0]
 800be2a:	6120      	str	r0, [r4, #16]
 800be2c:	6166      	str	r6, [r4, #20]
 800be2e:	b9a7      	cbnz	r7, 800be5a <__smakebuf_r+0xa6>
 800be30:	b011      	add	sp, #68	; 0x44
 800be32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be34:	f101 0343 	add.w	r3, r1, #67	; 0x43
 800be38:	2201      	movs	r2, #1
 800be3a:	600b      	str	r3, [r1, #0]
 800be3c:	610b      	str	r3, [r1, #16]
 800be3e:	614a      	str	r2, [r1, #20]
 800be40:	b011      	add	sp, #68	; 0x44
 800be42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be44:	4a12      	ldr	r2, [pc, #72]	; (800be90 <__smakebuf_r+0xdc>)
 800be46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be48:	4293      	cmp	r3, r2
 800be4a:	d1ce      	bne.n	800bdea <__smakebuf_r+0x36>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800be52:	4333      	orrs	r3, r6
 800be54:	81a3      	strh	r3, [r4, #12]
 800be56:	64e6      	str	r6, [r4, #76]	; 0x4c
 800be58:	e7da      	b.n	800be10 <__smakebuf_r+0x5c>
 800be5a:	4628      	mov	r0, r5
 800be5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be60:	f7f4 ff8c 	bl	8000d7c <_isatty_r>
 800be64:	2800      	cmp	r0, #0
 800be66:	d0e3      	beq.n	800be30 <__smakebuf_r+0x7c>
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	e7de      	b.n	800be30 <__smakebuf_r+0x7c>
 800be72:	059a      	lsls	r2, r3, #22
 800be74:	d4dc      	bmi.n	800be30 <__smakebuf_r+0x7c>
 800be76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be7a:	f043 0302 	orr.w	r3, r3, #2
 800be7e:	2101      	movs	r1, #1
 800be80:	81a3      	strh	r3, [r4, #12]
 800be82:	6022      	str	r2, [r4, #0]
 800be84:	6122      	str	r2, [r4, #16]
 800be86:	6161      	str	r1, [r4, #20]
 800be88:	e7d2      	b.n	800be30 <__smakebuf_r+0x7c>
 800be8a:	bf00      	nop
 800be8c:	0800ba31 	.word	0x0800ba31
 800be90:	0800bef1 	.word	0x0800bef1

0800be94 <__sread>:
 800be94:	b510      	push	{r4, lr}
 800be96:	460c      	mov	r4, r1
 800be98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be9c:	f7f4 ff9c 	bl	8000dd8 <_read_r>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	db03      	blt.n	800beac <__sread+0x18>
 800bea4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bea6:	4403      	add	r3, r0
 800bea8:	6523      	str	r3, [r4, #80]	; 0x50
 800beaa:	bd10      	pop	{r4, pc}
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beb2:	81a3      	strh	r3, [r4, #12]
 800beb4:	bd10      	pop	{r4, pc}
 800beb6:	bf00      	nop

0800beb8 <__swrite>:
 800beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebc:	460c      	mov	r4, r1
 800bebe:	8989      	ldrh	r1, [r1, #12]
 800bec0:	461d      	mov	r5, r3
 800bec2:	05cb      	lsls	r3, r1, #23
 800bec4:	4616      	mov	r6, r2
 800bec6:	4607      	mov	r7, r0
 800bec8:	d506      	bpl.n	800bed8 <__swrite+0x20>
 800beca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bece:	2200      	movs	r2, #0
 800bed0:	2302      	movs	r3, #2
 800bed2:	f7f4 ff73 	bl	8000dbc <_lseek_r>
 800bed6:	89a1      	ldrh	r1, [r4, #12]
 800bed8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800bedc:	81a1      	strh	r1, [r4, #12]
 800bede:	4638      	mov	r0, r7
 800bee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bee4:	4632      	mov	r2, r6
 800bee6:	462b      	mov	r3, r5
 800bee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beec:	f7f4 bfaa 	b.w	8000e44 <_write_r>

0800bef0 <__sseek>:
 800bef0:	b510      	push	{r4, lr}
 800bef2:	460c      	mov	r4, r1
 800bef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef8:	f7f4 ff60 	bl	8000dbc <_lseek_r>
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	1c42      	adds	r2, r0, #1
 800bf00:	bf0e      	itee	eq
 800bf02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf0a:	6520      	strne	r0, [r4, #80]	; 0x50
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	bd10      	pop	{r4, pc}

0800bf10 <__sclose>:
 800bf10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf14:	f7f4 bf00 	b.w	8000d18 <_close_r>

0800bf18 <_fclose_r>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	b131      	cbz	r1, 800bf2e <_fclose_r+0x16>
 800bf20:	b110      	cbz	r0, 800bf28 <_fclose_r+0x10>
 800bf22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d02f      	beq.n	800bf88 <_fclose_r+0x70>
 800bf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2c:	b90b      	cbnz	r3, 800bf32 <_fclose_r+0x1a>
 800bf2e:	2000      	movs	r0, #0
 800bf30:	bd70      	pop	{r4, r5, r6, pc}
 800bf32:	4628      	mov	r0, r5
 800bf34:	4621      	mov	r1, r4
 800bf36:	f7ff fd65 	bl	800ba04 <_fflush_r>
 800bf3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	b133      	cbz	r3, 800bf4e <_fclose_r+0x36>
 800bf40:	4628      	mov	r0, r5
 800bf42:	69e1      	ldr	r1, [r4, #28]
 800bf44:	4798      	blx	r3
 800bf46:	2800      	cmp	r0, #0
 800bf48:	bfb8      	it	lt
 800bf4a:	f04f 36ff 	movlt.w	r6, #4294967295
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	061b      	lsls	r3, r3, #24
 800bf52:	d41c      	bmi.n	800bf8e <_fclose_r+0x76>
 800bf54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf56:	b141      	cbz	r1, 800bf6a <_fclose_r+0x52>
 800bf58:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bf5c:	4299      	cmp	r1, r3
 800bf5e:	d002      	beq.n	800bf66 <_fclose_r+0x4e>
 800bf60:	4628      	mov	r0, r5
 800bf62:	f7ff fe37 	bl	800bbd4 <_free_r>
 800bf66:	2300      	movs	r3, #0
 800bf68:	6323      	str	r3, [r4, #48]	; 0x30
 800bf6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bf6c:	b121      	cbz	r1, 800bf78 <_fclose_r+0x60>
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f7ff fe30 	bl	800bbd4 <_free_r>
 800bf74:	2300      	movs	r3, #0
 800bf76:	6463      	str	r3, [r4, #68]	; 0x44
 800bf78:	f7ff fdda 	bl	800bb30 <__sfp_lock_acquire>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	81a3      	strh	r3, [r4, #12]
 800bf80:	f7ff fdd8 	bl	800bb34 <__sfp_lock_release>
 800bf84:	4630      	mov	r0, r6
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	f7ff fd58 	bl	800ba3c <__sinit>
 800bf8c:	e7cc      	b.n	800bf28 <_fclose_r+0x10>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	6921      	ldr	r1, [r4, #16]
 800bf92:	f7ff fe1f 	bl	800bbd4 <_free_r>
 800bf96:	e7dd      	b.n	800bf54 <_fclose_r+0x3c>

0800bf98 <fclose>:
 800bf98:	4b02      	ldr	r3, [pc, #8]	; (800bfa4 <fclose+0xc>)
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	6818      	ldr	r0, [r3, #0]
 800bf9e:	f7ff bfbb 	b.w	800bf18 <_fclose_r>
 800bfa2:	bf00      	nop
 800bfa4:	20000448 	.word	0x20000448
 800bfa8:	6c756e28 	.word	0x6c756e28
 800bfac:	0000296c 	.word	0x0000296c
 800bfb0:	0a0d0920 	.word	0x0a0d0920
 800bfb4:	00000000 	.word	0x00000000
 800bfb8:	0800c000 	.word	0x0800c000
 800bfbc:	00000001 	.word	0x00000001
 800bfc0:	706c6568 	.word	0x706c6568
 800bfc4:	00000000 	.word	0x00000000
 800bfc8:	706c6568 	.word	0x706c6568
 800bfcc:	696c203a 	.word	0x696c203a
 800bfd0:	20737473 	.word	0x20737473
 800bfd4:	206c6c61 	.word	0x206c6c61
 800bfd8:	69617661 	.word	0x69617661
 800bfdc:	6c62616c 	.word	0x6c62616c
 800bfe0:	6f632065 	.word	0x6f632065
 800bfe4:	6e616d6d 	.word	0x6e616d6d
 800bfe8:	0a0d7364 	.word	0x0a0d7364
 800bfec:	00000000 	.word	0x00000000

0800bff0 <_helpCommandDefinition>:
 800bff0:	0800bfc0 00000000 08000ea5 0800bfc8     ................

0800c000 <._101>:
 800c000:	0800bff0                                ....

0800c004 <CapLetterMap>:
 800c004:	6714fe00 47141d00 9c009d00 fa003f00     ...g...G.....?..
 800c014:	53000014 19009841 5a095a48 fc005f00     ...SA...HZ.Z._..
 800c024:	fc015f01 0414af00 18c05b00 00c95a81     ._.......[...Z..
 800c034:	05c00058                                X...

0800c038 <NumberMap>:
 800c038:	42005f00 6700f500 af00ea00 4600bf00     ._.B...g.......F
 800c048:	ef00ff00                                ....

0800c04c <rccStartPll(rccPllInput, unsigned long, unsigned long)::muls>:
 800c04c:	08060403 2018100c 00000030 65737341     ....... 0...Asse
 800c05c:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
 800c06c:	74612064 6e696c20 64252065 206e6920     d at line %d in 
 800c07c:	000a7325 65727550 72697620 6c617574     %s..Pure virtual
 800c08c:	6e756620 6f697463 6177206e 61632073      function was ca
 800c09c:	64656c6c 002e2e2e 666e6f63 72756769     lled....configur
 800c0ac:	6f697461 766f2f6e 69727265 2e736564     ation/overrides.
 800c0bc:	00707063                                cpp.

0800c0c0 <typeinfo name for (anonymous namespace)::system_error_category>:
 800c0c0:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
 800c0d0:	79733132 6d657473 7272655f 635f726f     21system_error_c
 800c0e0:	67657461 4579726f 00000000 00000000     ategoryE........

0800c0f0 <vtable for std::error_category>:
 800c0f0:	00000000 0800c190 08002345 080023b5     ........E#...#..
 800c100:	08002211 08002211 08002351 08002359     ."..."..Q#..Y#..
 800c110:	08002389 00000000                       .#......

0800c118 <vtable for (anonymous namespace)::system_error_category>:
 800c118:	00000000 0800c1c4 0800239d 080023c9     .........#...#..
 800c128:	0800233d 080023f1 08002351 08002359     =#...#..Q#..Y#..
 800c138:	08002389 00000000                       .#......

0800c140 <typeinfo name for std::error_category>:
 800c140:	34317453 6f727265 61635f72 6f676574     St14error_catego
 800c150:	00007972 00000000                       ry......

0800c158 <vtable for (anonymous namespace)::generic_error_category>:
 800c158:	00000000 0800c1d0 080023a9 080023dd     .........#...#..
 800c168:	08002335 0800240d 08002351 08002359     5#...$..Q#..Y#..
 800c178:	08002389 00000000 656e6567 00636972     .#......generic.
 800c188:	74737973 00006d65                       system..

0800c190 <typeinfo for std::error_category>:
 800c190:	0800c230 0800c140                       0...@...

0800c198 <typeinfo name for (anonymous namespace)::generic_error_category>:
 800c198:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
 800c1a8:	65673232 6972656e 72655f63 5f726f72     22generic_error_
 800c1b8:	65746163 79726f67 00000045              categoryE...

0800c1c4 <typeinfo for (anonymous namespace)::system_error_category>:
 800c1c4:	0800c378 0800c0c0 0800c190              x...........

0800c1d0 <typeinfo for (anonymous namespace)::generic_error_category>:
 800c1d0:	0800c378 0800c198 0800c190 00000000     x...............

0800c1e0 <vtable for std::bad_alloc>:
 800c1e0:	00000000 0800c1f8 08002da1 08002db5     .........-...-..
 800c1f0:	08002d99 00000000                       .-......

0800c1f8 <typeinfo for std::bad_alloc>:
 800c1f8:	0800c378 0800c214 0800c2a8 3a647473     x...........std:
 800c208:	6461623a 6c6c615f 0000636f              :bad_alloc..

0800c214 <typeinfo name for std::bad_alloc>:
 800c214:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....
 800c224:	00000000                                ....

0800c228 <vtable for __cxxabiv1::__class_type_info>:
 800c228:	00000000 0800c258 08002f5d 08002f71     ....X...]/..q/..
 800c238:	08003665 08003669 08002fa5 08002f19     e6..i6.../.../..
 800c248:	08002f8d 08002fc9 08002f51 00000000     ./.../..Q/......

0800c258 <typeinfo for __cxxabiv1::__class_type_info>:
 800c258:	0800c378 0800c264 0800c638              x...d...8...

0800c264 <typeinfo name for __cxxabiv1::__class_type_info>:
 800c264:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 800c274:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 800c284:	00000045                                E...

0800c288 <vtable for std::exception>:
 800c288:	00000000 0800c2a8 08003009 08003031     .........0..10..
 800c298:	08003021 00000000                       !0......

0800c2a0 <typeinfo for __cxxabiv1::__forced_unwind>:
 800c2a0:	0800c230 0800c340                       0...@...

0800c2a8 <typeinfo for std::exception>:
 800c2a8:	0800c230 0800c330                       0...0...

0800c2b0 <typeinfo name for std::bad_exception>:
 800c2b0:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
 800c2c0:	0000006e 3a647473 6378653a 69747065     n...std::excepti
 800c2d0:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
 800c2e0:	69747065 00006e6f                       eption..

0800c2e8 <typeinfo name for __cxxabiv1::__foreign_exception>:
 800c2e8:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 800c2f8:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
 800c308:	00456e6f                                onE.

0800c30c <typeinfo for __cxxabiv1::__foreign_exception>:
 800c30c:	0800c230 0800c2e8 00000000              0...........

0800c318 <vtable for std::bad_exception>:
 800c318:	00000000 0800c360 08003015 08003045     ....`....0..E0..
 800c328:	08003029 00000000                       )0......

0800c330 <typeinfo name for std::exception>:
 800c330:	65397453 70656378 6e6f6974 00000000     St9exception....

0800c340 <typeinfo name for __cxxabiv1::__forced_unwind>:
 800c340:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
 800c350:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0800c360 <typeinfo for std::bad_exception>:
 800c360:	0800c378 0800c2b0 0800c2a8 00000000     x...............

0800c370 <vtable for __cxxabiv1::__si_class_type_info>:
 800c370:	00000000 0800c3a0 08003059 0800306d     ........Y0..m0..
 800c380:	08003665 08003669 08002fa5 08002f19     e6..i6.../.../..
 800c390:	08003155 080030bd 08003089 00000000     U1...0...0......

0800c3a0 <typeinfo for __cxxabiv1::__si_class_type_info>:
 800c3a0:	0800c378 0800c3ac 0800c258              x.......X...

0800c3ac <typeinfo name for __cxxabiv1::__si_class_type_info>:
 800c3ac:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 800c3bc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 800c3cc:	456f666e 00000000                       nfoE....

0800c3d4 <typeinfo for std::logic_error>:
 800c3d4:	0800c378 0800c3e0 0800c2a8              x...........

0800c3e0 <typeinfo name for std::logic_error>:
 800c3e0:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

0800c3f0 <vtable for std::logic_error>:
 800c3f0:	00000000 0800c3d4 080031c9 08003209     .........1...2..
 800c400:	080031c5 00000000                       .1......

0800c408 <typeinfo name for std::length_error>:
 800c408:	32317453 676e656c 655f6874 726f7272     St12length_error
 800c418:	00000000                                ....

0800c41c <typeinfo for std::length_error>:
 800c41c:	0800c378 0800c408 0800c3d4              x...........

0800c428 <vtable for std::length_error>:
 800c428:	00000000 0800c41c 0800321d 08003231     .........2..12..
 800c438:	080031c5 00000000 69736162 74735f63     .1......basic_st
 800c448:	676e6972 74613a3a 00000000 69736162     ring::at....basi
 800c458:	74735f63 676e6972 6f633a3a 00007970     c_string::copy..
 800c468:	69736162 74735f63 676e6972 6f633a3a     basic_string::co
 800c478:	7261706d 00000065 69736162 74735f63     mpare...basic_st
 800c488:	676e6972 535f3a3a 6572635f 00657461     ring::_S_create.
 800c498:	69736162 74735f63 676e6972 72653a3a     basic_string::er
 800c4a8:	00657361 69736162 74735f63 676e6972     ase.basic_string
 800c4b8:	4d5f3a3a 7065725f 6563616c 7875615f     ::_M_replace_aux
 800c4c8:	00000000 69736162 74735f63 676e6972     ....basic_string
 800c4d8:	6e693a3a 74726573 00000000 69736162     ::insert....basi
 800c4e8:	74735f63 676e6972 65723a3a 63616c70     c_string::replac
 800c4f8:	00000065 69736162 74735f63 676e6972     e...basic_string
 800c508:	73613a3a 6e676973 00000000 69736162     ::assign....basi
 800c518:	74735f63 676e6972 70613a3a 646e6570     c_string::append
 800c528:	00000000 69736162 74735f63 676e6972     ....basic_string
 800c538:	65723a3a 657a6973 00000000 69736162     ::resize....basi
 800c548:	74735f63 676e6972 535f3a3a 6e6f635f     c_string::_S_con
 800c558:	75727473 6e207463 206c6c75 20746f6e     struct null not 
 800c568:	696c6176 00000064 69736162 74735f63     valid...basic_st
 800c578:	676e6972 61623a3a 5f636973 69727473     ring::basic_stri
 800c588:	0000676e 69736162 74735f63 676e6972     ng..basic_string
 800c598:	75733a3a 72747362 00000000 6d726574     ::substr....term
 800c5a8:	74616e69 61632065 64656c6c 63657220     inate called rec
 800c5b8:	69737275 796c6576 0000000a 6d726574     ursively....term
 800c5c8:	74616e69 61632065 64656c6c 74666120     inate called aft
 800c5d8:	74207265 776f7268 20676e69 69206e61     er throwing an i
 800c5e8:	6174736e 2065636e 2720666f 00000000     nstance of '....
 800c5f8:	00000a27 6d726574 74616e69 61632065     '...terminate ca
 800c608:	64656c6c 74697720 74756f68 206e6120     lled without an 
 800c618:	69746361 65206576 70656378 6e6f6974     active exception
 800c628:	0000000a 68772020 29287461 0020203a     ....  what():  .

0800c638 <typeinfo for std::type_info>:
 800c638:	0800c230 0800c640                       0...@...

0800c640 <typeinfo name for std::type_info>:
 800c640:	74397453 5f657079 6f666e69 00000000     St9type_info....

0800c650 <vtable for std::type_info>:
 800c650:	00000000 0800c638 08003659 08003671     ....8...Y6..q6..
 800c660:	08003665 08003669 080036b5 0800366d     e6..i6...6..m6..

0800c670 <standard_subs>:
 800c670:	00000074 0800cddc 00000003 0800cddc     t...............
 800c680:	00000003 00000000 00000000 00000061     ............a...
 800c690:	0800d0c8 0000000e 0800d0c8 0000000e     ................
 800c6a0:	0800d0d8 00000009 00000062 0800d0e4     ........b.......
 800c6b0:	00000011 0800d0e4 00000011 0800d0f8     ................
 800c6c0:	0000000c 00000073 0800d108 0000000b     ....s...........
 800c6d0:	0800d114 00000046 0800d0f8 0000000c     ....F...........
 800c6e0:	00000069 0800d15c 0000000c 0800d16c     i...\.......l...
 800c6f0:	00000031 0800d1a0 0000000d 0000006f     1...........o...
 800c700:	0800d1b0 0000000c 0800d1c0 00000031     ............1...
 800c710:	0800d1f4 0000000d 00000064 0800d204     ........d.......
 800c720:	0000000d 0800d214 00000032 0800d248     ........2...H...
 800c730:	0000000e                                ....

0800c734 <cplus_demangle_builtin_types>:
 800c734:	0800d43c 0000000b 0800d43c 0000000b     <.......<.......
 800c744:	00000000 0800d448 00000004 0800d450     ....H.......P...
 800c754:	00000007 00000007 0800d458 00000004     ........X.......
 800c764:	0800d460 00000004 00000000 0800d468     `...........h...
 800c774:	00000006 0800d468 00000006 00000008     ....h...........
 800c784:	0800d470 0000000b 0800d470 0000000b     p.......p.......
 800c794:	00000008 0800d47c 00000005 0800d47c     ....|.......|...
 800c7a4:	00000005 00000008 0800d484 0000000a     ................
 800c7b4:	0800d484 0000000a 00000008 0800d490     ................
 800c7c4:	0000000d 0800d490 0000000d 00000000     ................
 800c7d4:	0800d4a0 00000003 0800d4a0 00000003     ................
 800c7e4:	00000001 0800d4a4 0000000c 0800d4b4     ................
 800c7f4:	00000008 00000002 00000000 00000000     ................
	...
 800c810:	0800dbb0 00000004 0800dbb0 00000004     ................
 800c820:	00000003 0800d4c0 0000000d 0800d4c0     ................
 800c830:	0000000d 00000004 0800d4d0 00000008     ................
 800c840:	0800d4d0 00000008 00000000 0800d4dc     ................
 800c850:	00000011 0800d4dc 00000011 00000000     ................
	...
 800c89c:	0800d4f0 00000005 0800d4f0 00000005     ................
 800c8ac:	00000000 0800d4f8 0000000e 0800d4f8     ................
 800c8bc:	0000000e 00000000 00000000 00000000     ................
	...
 800c8d8:	0800d508 00000004 0800d508 00000004     ................
 800c8e8:	00000009 0800d510 00000007 0800d458     ............X...
 800c8f8:	00000004 00000000 0800d518 00000009     ................
 800c908:	0800dbb0 00000004 00000005 0800d524     ............$...
 800c918:	00000012 0800d524 00000012 00000006     ....$...........
 800c928:	0800cff8 00000003 0800cff8 00000003     ................
 800c938:	00000000 0800d538 00000009 0800d538     ....8.......8...
 800c948:	00000009 00000000 0800d544 00000009     ........D.......
 800c958:	0800d544 00000009 00000000 0800d550     D...........P...
 800c968:	0000000a 0800d550 0000000a 00000000     ....P...........
 800c978:	0800d55c 00000004 0800d55c 00000004     \.......\.......
 800c988:	00000008 0800d564 00000008 0800d564     ....d.......d...
 800c998:	00000008 00000000 0800d570 00000008     ........p.......
 800c9a8:	0800d570 00000008 00000000 0800d57c     p...........|...
 800c9b8:	00000011 0800d57c 00000011 00000000     ....|...........

0800c9c8 <cplus_demangle_operators>:
 800c9c8:	0800d258 0800d25c 00000002 00000002     X...\...........
 800c9d8:	0800d260 0800d264 00000001 00000002     `...d...........
 800c9e8:	0800d268 0800d09c 00000002 00000002     h...............
 800c9f8:	0800cfa8 0800d26c 00000001 00000001     ....l...........
 800ca08:	0800d270 0800d26c 00000001 00000002     p...l...........
 800ca18:	0800d274 0800d278 00000008 00000001     t...x...........
 800ca28:	0800d284 0800d278 00000008 00000001     ....x...........
 800ca38:	0800d288 0800d28c 0000000a 00000002     ................
 800ca48:	0800cdec 0800d298 00000002 00000002     ................
 800ca58:	0800d29c 0800d2a0 00000001 00000002     ................
 800ca68:	0800d2a4 0800d2a8 00000001 00000001     ................
 800ca78:	0800d2ac 0800d2b0 00000002 00000002     ................
 800ca88:	0800d2b4 0800d2b8 00000009 00000001     ................
 800ca98:	0800d2c4 0800d2c8 0000000c 00000002     ................
 800caa8:	0800d2d8 0800d2dc 00000001 00000001     ................
 800cab8:	0800d2e0 0800d2e4 00000007 00000001     ................
 800cac8:	0800d2ec 0800d2f0 00000002 00000002     ................
 800cad8:	0800cdf0 0800d2f4 00000001 00000002     ................
 800cae8:	0800d2f8 0800d2fc 00000001 00000002     ................
 800caf8:	0800d300 0800d304 00000002 00000002     ................
 800cb08:	0800d308 0800d30c 00000001 00000002     ................
 800cb18:	0800d310 0800d314 00000002 00000002     ................
 800cb28:	0800d818 0800d318 00000002 00000002     ................
 800cb38:	0800cfac 0800ce04 00000002 00000001     ................
 800cb48:	0800d31c 0800d19c 00000001 00000002     ................
 800cb58:	0800cfb0 0800ce28 00000002 00000002     ....(...........
 800cb68:	0800d320 0800d324 00000003 00000002      ...$...........
 800cb78:	0800d910 0800d328 00000002 00000002     ....(...........
 800cb88:	0800cde8 0800d32c 0000000b 00000001     ....,...........
 800cb98:	0800d338 0800d33c 00000002 00000002     8...<...........
 800cba8:	0800d340 0800d344 00000001 00000002     @...D...........
 800cbb8:	0800d348 0800d34c 00000002 00000002     H...L...........
 800cbc8:	0800d350 0800d354 00000002 00000002     P...T...........
 800cbd8:	0800d358 0800d35c 00000001 00000002     X...\...........
 800cbe8:	0800d360 0800d2dc 00000001 00000002     `...............
 800cbf8:	0800d364 0800d368 00000002 00000001     d...h...........
 800cc08:	0800d36c 0800d370 00000005 00000003     l...p...........
 800cc18:	0800d378 0800d37c 00000002 00000002     x...|...........
 800cc28:	0800c588 0800d35c 00000001 00000001     ....\...........
 800cc38:	0800d380 0800d384 00000001 00000001     ................
 800cc48:	0800d388 0800d38c 00000003 00000003     ................
 800cc58:	0800d390 0800d394 00000002 00000002     ................
 800cc68:	0800d398 0800d39c 00000002 00000002     ................
 800cc78:	0800d97c 0800d3a0 00000001 00000002     |...............
 800cc88:	0800d3a4 0800d3a8 00000002 00000002     ................
 800cc98:	0800d3ac 0800d3b0 00000001 00000002     ................
 800cca8:	0800d3b4 0800d3b8 00000003 00000002     ................
 800ccb8:	0800d3bc 0800d3c0 00000002 00000001     ................
 800ccc8:	0800d3c4 0800d3b0 00000001 00000001     ................
 800ccd8:	0800cdf4 0800d3c8 00000002 00000002     ................
 800cce8:	0800cdf8 0800d3cc 00000001 00000003     ................
 800ccf8:	0800d3d0 0800d3d4 00000002 00000002     ................
 800cd08:	0800d3d8 0800d3dc 00000003 00000002     ................
 800cd18:	0800d3e0 0800d3e4 00000010 00000002     ................
 800cd28:	0800d3f8 0800d3fc 00000001 00000002     ................
 800cd38:	0800d400 0800d404 00000002 00000002     ................
 800cd48:	0800d408 0800d40c 0000000b 00000002     ................
 800cd58:	0800d294 0800d418 00000007 00000001     ................
 800cd68:	0800d420 0800d418 00000007 00000001      ...............
 800cd78:	0800d424 0800d428 00000005 00000000     $...(...........
 800cd88:	0800d430 0800d434 00000006 00000001     0...4...........
	...
 800cda8:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
 800cdb8:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
 800cdc8:	00000029 69727473 6c20676e 72657469     )...string liter
 800cdd8:	00006c61 00647473 6f747561 00000000     al..std.auto....
 800cde8:	0000696c 00006c63 00007464 00007470     li..cl..dt..pt..
 800cdf8:	00007571 6962615b 0000003a 00003a3a     qu..[abi:...::..
 800ce08:	6665647b 746c7561 67726120 00000023     {default arg#...
 800ce18:	00646c25 003a3a7d 7272414a 00007961     %ld.}::.JArray..
 800ce28:	00005d5b 62617476 6620656c 0020726f     []..vtable for .
 800ce38:	20545456 20726f66 00000000 736e6f63     VTT for ....cons
 800ce48:	63757274 6e6f6974 61747620 20656c62     truction vtable 
 800ce58:	20726f66 00000000 2d6e692d 00000000     for ....-in-....
 800ce68:	65707974 6f666e69 726f6620 00000020     typeinfo for ...
 800ce78:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
 800ce88:	00002072 65707974 6f666e69 206e6620     r ..typeinfo fn 
 800ce98:	20726f66 00000000 2d6e6f6e 74726976     for ....non-virt
 800cea8:	206c6175 6e756874 6f74206b 00000020     ual thunk to ...
 800ceb8:	61766f63 6e616972 65722074 6e727574     covariant return
 800cec8:	75687420 74206b6e 0000206f 6176616a      thunk to ..java
 800ced8:	616c4320 66207373 0020726f 72617567      Class for .guar
 800cee8:	61762064 62616972 6620656c 0020726f     d variable for .
 800cef8:	20534c54 74696e69 6e756620 6f697463     TLS init functio
 800cf08:	6f66206e 00002072 20534c54 70617277     n for ..TLS wrap
 800cf18:	20726570 636e7566 6e6f6974 726f6620     per function for
 800cf28:	00000020 65666572 636e6572 65742065      ...reference te
 800cf38:	726f706d 20797261 00000023 64646968     mporary #...hidd
 800cf48:	61206e65 7361696c 726f6620 00000020     en alias for ...
 800cf58:	2d6e6f6e 6e617274 74636173 206e6f69     non-transaction 
 800cf68:	6e6f6c63 6f662065 00002072 7461535f     clone for .._Sat
 800cf78:	00000020 6363415f 00006d75 6172465f      ..._Accum.._Fra
 800cf88:	00007463 0000202c 7265706f 726f7461     ct.., ..operator
 800cf98:	00000000 7265706f 726f7461 00000020     ....operator ...
 800cfa8:	00006461 00007367 00007869 00203a20     ad..gs..ix.. : .
 800cfb8:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
 800cfc8:	006c6c75 736c6166 00000065 65757274     ull.false...true
 800cfd8:	00000000 6176616a 73657220 6372756f     ....java resourc
 800cfe8:	00002065 6c636564 65707974 00002820     e ..decltype (..
 800cff8:	002e2e2e 73696874 00000000 7261707b     ....this....{par
 800d008:	0000236d 626f6c67 63206c61 74736e6f     m#..global const
 800d018:	74637572 2073726f 6579656b 6f742064     ructors keyed to
 800d028:	00000020 626f6c67 64206c61 72747365      ...global destr
 800d038:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
 800d048:	00000000 6d616c7b 28616462 00000000     ....{lambda(....
 800d058:	00002329 6e6e757b 64656d61 70797420     )#..{unnamed typ
 800d068:	00002365 6c635b20 20656e6f 00000000     e#.. [clone ....
 800d078:	0000283e 73657220 63697274 00000074     >(.. restrict...
 800d088:	6c6f7620 6c697461 00000065 6e6f6320      volatile... con
 800d098:	00007473 00002626 706d6f63 2078656c     st..&&..complex 
 800d0a8:	00000000 67616d69 72616e69 00002079     ....imaginary ..
 800d0b8:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
 800d0c8:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
 800d0d8:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
 800d0e8:	7361623a 735f6369 6e697274 00000067     :basic_string...
 800d0f8:	69736162 74735f63 676e6972 00000000     basic_string....
 800d108:	3a647473 7274733a 00676e69 3a647473     std::string.std:
 800d118:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
 800d128:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
 800d138:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
 800d148:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
 800d158:	00003e20 3a647473 7473693a 6d616572      >..std::istream
 800d168:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
 800d178:	65727473 633c6d61 2c726168 64747320     stream<char, std
 800d188:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
 800d198:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
 800d1a8:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
 800d1b8:	6d616572 00000000 3a647473 7361623a     ream....std::bas
 800d1c8:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
 800d1d8:	64747320 68633a3a 745f7261 74696172      std::char_trait
 800d1e8:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
 800d1f8:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
 800d208:	736f693a 61657274 0000006d 3a647473     :iostream...std:
 800d218:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
 800d228:	72616863 7473202c 633a3a64 5f726168     char, std::char_
 800d238:	69617274 633c7374 3e726168 00003e20     traits<char> >..
 800d248:	69736162 6f695f63 65727473 00006d61     basic_iostream..
 800d258:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
 800d268:	00006161 00000026 00006e61 00007461     aa..&...an..at..
 800d278:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
 800d288:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
 800d298:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
 800d2a8:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
 800d2b8:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
 800d2c8:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
 800d2d8:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
 800d2e8:	00206574 00007364 00002a2e 0000002e     te .ds...*......
 800d2f8:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
 800d308:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
 800d318:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
 800d328:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
 800d338:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
 800d348:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
 800d358:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
 800d368:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
 800d378:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
 800d388:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
 800d398:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
 800d3a8:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
 800d3b8:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
 800d3c8:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
 800d3d8:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
 800d3e8:	70726574 5f746572 74736163 00000000     terpret_cast....
 800d3f8:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
 800d408:	00006373 74617473 635f6369 00747361     sc..static_cast.
 800d418:	657a6973 0020666f 00007a73 00007274     sizeof .sz..tr..
 800d428:	6f726874 00000077 00007774 6f726874     throw...tw..thro
 800d438:	00002077 6e676973 63206465 00726168     w ..signed char.
 800d448:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
 800d458:	72616863 00000000 65747962 00000000     char....byte....
 800d468:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
 800d478:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
 800d488:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
 800d498:	61686320 00000072 00746e69 69736e75      char...int.unsi
 800d4a8:	64656e67 746e6920 00000000 69736e75     gned int....unsi
 800d4b8:	64656e67 00000000 69736e75 64656e67     gned....unsigned
 800d4c8:	6e6f6c20 00000067 6e695f5f 38323174      long...__int128
 800d4d8:	00000000 69736e75 64656e67 695f5f20     ....unsigned __i
 800d4e8:	3231746e 00000038 726f6873 00000074     nt128...short...
 800d4f8:	69736e75 64656e67 6f687320 00007472     unsigned short..
 800d508:	64696f76 00000000 61686377 00745f72     void....wchar_t.
 800d518:	676e6f6c 6e6f6c20 00000067 69736e75     long long...unsi
 800d528:	64656e67 6e6f6c20 6f6c2067 0000676e     gned long long..
 800d538:	69636564 336c616d 00000032 69636564     decimal32...deci
 800d548:	366c616d 00000034 69636564 316c616d     mal64...decimal1
 800d558:	00003832 666c6168 00000000 72616863     28..half....char
 800d568:	745f3631 00000000 72616863 745f3233     16_t....char32_t
 800d578:	00000000 6c636564 65707974 6c756e28     ....decltype(nul
 800d588:	7274706c 00000029 00000043              lptr)...C...

0800d594 <_global_impure_ptr>:
 800d594:	20000020 63637553 00737365 20746f4e      .. Success.Not 
 800d5a4:	656e776f 00000072 73206f4e 20686375     owner...No such 
 800d5b4:	656c6966 20726f20 65726964 726f7463     file or director
 800d5c4:	00000079 73206f4e 20686375 636f7270     y...No such proc
 800d5d4:	00737365 65746e49 70757272 20646574     ess.Interrupted 
 800d5e4:	74737973 63206d65 006c6c61 204f2f49     system call.I/O 
 800d5f4:	6f727265 00000072 73206f4e 20686375     error...No such 
 800d604:	69766564 6f206563 64612072 73657264     device or addres
 800d614:	00000073 20677241 7473696c 6f6f7420     s...Arg list too
 800d624:	6e6f6c20 00000067 63657845 726f6620      long...Exec for
 800d634:	2074616d 6f727265 00000072 6b636f53     mat error...Sock
 800d644:	61207465 6165726c 63207964 656e6e6f     et already conne
 800d654:	64657463 00000000 20646142 656c6966     cted....Bad file
 800d664:	6d756e20 00726562 63206f4e 646c6968      number.No child
 800d674:	006e6572 74736544 74616e69 206e6f69     ren.Destination 
 800d684:	72646461 20737365 75716572 64657269     address required
 800d694:	00000000 6d206f4e 2065726f 636f7270     ....No more proc
 800d6a4:	65737365 00000073 20746f4e 756f6e65     esses...Not enou
 800d6b4:	73206867 65636170 00000000 6d726550     gh space....Perm
 800d6c4:	69737369 64206e6f 65696e65 00000064     ission denied...
 800d6d4:	20646142 72646461 00737365 69766544     Bad address.Devi
 800d6e4:	6f206563 65722072 72756f73 62206563     ce or resource b
 800d6f4:	00797375 656c6946 69786520 00737473     usy.File exists.
 800d704:	736f7243 65642d73 65636976 6e696c20     Cross-device lin
 800d714:	0000006b 73206f4e 20686375 69766564     k...No such devi
 800d724:	00006563 20746f4e 69642061 74636572     ce..Not a direct
 800d734:	0079726f 74736f48 20736920 6e776f64     ory.Host is down
 800d744:	00000000 6e6e6f43 69746365 61206e6f     ....Connection a
 800d754:	6165726c 69207964 7270206e 6572676f     lready in progre
 800d764:	00007373 61207349 72696420 6f746365     ss..Is a directo
 800d774:	00007972 61766e49 2064696c 75677261     ry..Invalid argu
 800d784:	746e656d 00000000 7774654e 206b726f     ment....Network 
 800d794:	65746e69 63616672 73692065 746f6e20     interface is not
 800d7a4:	6e6f6320 75676966 00646572 206f6f54      configured.Too 
 800d7b4:	796e616d 65706f20 6966206e 2073656c     many open files 
 800d7c4:	73206e69 65747379 0000006d 206f6f54     in system...Too 
 800d7d4:	796e616d 65706f20 6966206e 0073656c     many open files.
 800d7e4:	20746f4e 68632061 63617261 20726574     Not a character 
 800d7f4:	69766564 00006563 74786554 6c696620     device..Text fil
 800d804:	75622065 00007973 656c6946 6f6f7420     e busy..File too
 800d814:	72616c20 00006567 74736f48 20736920      large..Host is 
 800d824:	65726e75 61686361 00656c62 73206f4e     unreachable.No s
 800d834:	65636170 66656c20 6e6f2074 76656420     pace left on dev
 800d844:	00656369 20746f4e 70707573 6574726f     ice.Not supporte
 800d854:	00000064 656c6c49 206c6167 6b656573     d...Illegal seek
 800d864:	00000000 64616552 6c6e6f2d 69662079     ....Read-only fi
 800d874:	7320656c 65747379 0000006d 206f6f54     le system...Too 
 800d884:	796e616d 6e696c20 0000736b 6b6f7242     many links..Brok
 800d894:	70206e65 00657069 6874614d 67726120     en pipe.Math arg
 800d8a4:	6e656d75 00000074 75736552 7420746c     ument...Result t
 800d8b4:	6c206f6f 65677261 00000000 6d206f4e     oo large....No m
 800d8c4:	61737365 6f206567 65642066 65726973     essage of desire
 800d8d4:	79742064 00006570 6e656449 69666974     d type..Identifi
 800d8e4:	72207265 766f6d65 00006465 64616544     er removed..Dead
 800d8f4:	6b636f6c 00000000 7774654e 206b726f     lock....Network 
 800d904:	75207369 6165726e 62616863 0000656c     is unreachable..
 800d914:	6c206f4e 006b636f 20746f4e 74732061     No lock.Not a st
 800d924:	6d616572 00000000 65727453 69206d61     ream....Stream i
 800d934:	6c74636f 6d697420 74756f65 00000000     octl timeout....
 800d944:	73206f4e 61657274 6572206d 72756f73     No stream resour
 800d954:	00736563 74726956 206c6175 63726963     ces.Virtual circ
 800d964:	20746975 67207369 00656e6f 746f7250     uit is gone.Prot
 800d974:	6c6f636f 72726520 0000726f 6e6b6e55     ocol error..Unkn
 800d984:	206e776f 746f7270 6c6f636f 00000000     own protocol....
 800d994:	746c754d 706f6869 74746120 74706d65     Multihop attempt
 800d9a4:	00006465 20646142 7373656d 00656761     ed..Bad message.
 800d9b4:	636e7546 6e6f6974 746f6e20 706d6920     Function not imp
 800d9c4:	656d656c 6465746e 00000000 65726944     lemented....Dire
 800d9d4:	726f7463 6f6e2079 6d652074 00797470     ctory not empty.
 800d9e4:	656c6946 20726f20 68746170 6d616e20     File or path nam
 800d9f4:	6f742065 6f6c206f 0000676e 206f6f54     e too long..Too 
 800da04:	796e616d 6d797320 696c6f62 696c2063     many symbolic li
 800da14:	00736b6e 62206f4e 65666675 70732072     nks.No buffer sp
 800da24:	20656361 69617661 6c62616c 00000065     ace available...
 800da34:	72646441 20737365 696d6166 6e20796c     Address family n
 800da44:	7320746f 6f707075 64657472 20796220     ot supported by 
 800da54:	746f7270 6c6f636f 6d616620 00796c69     protocol family.
 800da64:	746f7250 6c6f636f 6f727720 7420676e     Protocol wrong t
 800da74:	20657079 20726f66 6b636f73 00007465     ype for socket..
 800da84:	6b636f53 6f207465 61726570 6e6f6974     Socket operation
 800da94:	206e6f20 2d6e6f6e 6b636f73 00007465      on non-socket..
 800daa4:	746f7250 6c6f636f 746f6e20 61766120     Protocol not ava
 800dab4:	62616c69 0000656c 6e6e6f43 69746365     ilable..Connecti
 800dac4:	72206e6f 73756665 00006465 72646441     on refused..Addr
 800dad4:	20737365 65726c61 20796461 75206e69     ess already in u
 800dae4:	00006573 74666f53 65726177 75616320     se..Software cau
 800daf4:	20646573 6e6e6f63 69746365 61206e6f     sed connection a
 800db04:	74726f62 00000000 6b636f53 69207465     bort....Socket i
 800db14:	6f6e2073 6f632074 63656e6e 00646574     s not connected.
 800db24:	6b636f53 69207465 6c612073 64616572     Socket is alread
 800db34:	6f632079 63656e6e 00646574 7265704f     y connected.Oper
 800db44:	6f697461 6163206e 6c65636e 00006465     ation canceled..
 800db54:	74617453 6f6e2065 65722074 65766f63     State not recove
 800db64:	6c626172 00000065 76657250 73756f69     rable...Previous
 800db74:	6e776f20 64207265 00646569 7265704f      owner died.Oper
 800db84:	6f697461 6f6e206e 75732074 726f7070     ation not suppor
 800db94:	20646574 73206e6f 656b636f 00000074     ted on socket...
 800dba4:	7373654d 20656761 206f6f74 676e6f6c     Message too long
 800dbb4:	00000000 6e6e6f43 69746365 74206e6f     ....Connection t
 800dbc4:	64656d69 74756f20 00000000 8101b108     imed out........
 800dbd4:	8400b0b0 00000000 7fff4ae1 0004a9b0     .........J......
 800dbe4:	0c01ffff 00340414 003e041c 00000e30     ......4...>.0...
 800dbf4:	7fff4ac9 0004a9b0 0c01ffff 00340414     .J............4.
 800dc04:	003e041c 00000e30 8101b108 8400b0b0     ..>.0...........
 800dc14:	00000000 7fff4aa5 0012afb0 011510ff     .....J..........
 800dc24:	07d6220b 07fe0000 01088204 00000001     ."..............
 800dc34:	00000000 7fff4a85 0002afb0 012110ff     .....J........!.
 800dc44:	3c042618 34043001 a6327401 01ae0001     .&.<.0.4.t2.....
 800dc54:	c6000004 01a60401 00000100 00000000     ................
 800dc64:	7fff4a59 01b10884 00b0b0b0 011910ff     YJ..............
 800dc74:	0806020c 10040c01 000a1c05 7f000100     ................
 800dc84:	007d0000 00000000 00000000 8101b108     ..}.............
 800dc94:	8400b0b0 00000000 8101b108 8400b0b0     ................
 800dca4:	00000000 7fff4a15 00a8b0b0 0801ffff     .....J..........
 800dcb4:	0012040a 00000418 7fff4a01 00b108a9     .........J......
 800dcc4:	011110ff 80046e0a 01840101 7f000008     .....n..........
	...
 800dcdc:	7fff49e1 0001aab0 012910ff 00323418     .I........)..42.
 800dcec:	96046a00 1a740301 01b20000 0001e418     .j....t.........
 800dcfc:	002601ce 01000200 0000007d 00000000     ..&.....}.......
 800dd0c:	ffffe59c 8101b108 8400b0b0 00000000     ................
 800dd1c:	8101b108 8400b0b0 00000000 8101b108     ................
 800dd2c:	8400b0b0 00000000                       ........

0800dd34 <__data_array_start>:
 800dd34:	0800df94 	.word	0x0800df94
 800dd38:	20000000 	.word	0x20000000
 800dd3c:	2000085c 	.word	0x2000085c

0800dd40 <__bss_array_start>:
 800dd40:	20000860 	.word	0x20000860
 800dd44:	200011b0 	.word	0x200011b0

0800dd48 <_init>:
 800dd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4a:	bf00      	nop
 800dd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd4e:	bc08      	pop	{r3}
 800dd50:	469e      	mov	lr, r3
 800dd52:	4770      	bx	lr

0800dd54 <__init_array_start>:
 800dd54:	0800b89d 	.word	0x0800b89d

0800dd58 <__frame_dummy_init_array_entry>:
 800dd58:	08000119 08001529 08002429              ....)...)$..

0800dd64 <_fini>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	bf00      	nop
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr

0800dd70 <__fini_array_start>:
 800dd70:	080000f5 	.word	0x080000f5
